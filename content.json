{"meta":{"title":"Blog","subtitle":"","description":"","author":"Mr.Zhang","url":"http://example.com","root":"/"},"pages":[{"title":"categories","date":"2017-07-10T08:36:26.000Z","updated":"2022-02-28T06:03:52.396Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"图片墙","date":"2022-03-02T06:32:33.666Z","updated":"2022-03-02T06:32:33.666Z","comments":true,"path":"photography/index.html","permalink":"http://example.com/photography/index.html","excerpt":"","text":""},{"title":"","date":"2022-03-22T11:01:57.505Z","updated":"2022-03-22T11:01:57.505Z","comments":true,"path":"links/spx500.html","permalink":"http://example.com/links/spx500.html","excerpt":"","text":"SPX 500 #container { margin-top: 5vh; margin-bottom: 10vh; max-height: 800px; height: 85vh; } #container2 { margin-bottom: 30vh; max-height: 800px; height: 80vh; } /* Conflict with Bootstrap, not needed after v7.0.1 */ .highcharts-bindings-wrapper * { box-sizing: content-box; } SPX 500 TSLA Highcharts.getJSON('/shares/SPX2022.json', function (data) { // split the data set into ohlc and volume var ohlc = [], volume = [], dataLength = data.length, i = 0; for (i; i < dataLength; i += 1) { ohlc.push([ data[i][0], // the date data[i][1], // open data[i][2], // high data[i][3], // low data[i][4] // close ]); volume.push([ data[i][0], // the date data[i][5] // the volume ]); } Highcharts.setOptions({ global: { timezoneOffset: -8 * 60 } }); Highcharts.stockChart('container', { yAxis: [{ labels: { align: 'left' }, height: '80%', resize: { enabled: true } }, { labels: { align: 'left' }, top: '80%', height: '20%', offset: 0 }], tooltip: { shape: 'square', headerShape: 'callout', borderWidth: 0, shadow: false, positioner: function (width, height, point) { var chart = this.chart, position; if (point.isHeader) { position = { x: Math.max( // Left side limit chart.plotLeft, Math.min( point.plotX + chart.plotLeft - width / 2, // Right side limit chart.chartWidth - width - chart.marginRight ) ), y: point.plotY }; } else { position = { x: point.series.chart.plotLeft, y: point.series.yAxis.top - chart.plotTop }; } return position; } }, series: [{ type: 'ohlc', id: 'aapl-ohlc', name: 'SPX500', data: ohlc, color: 'green', upColor: 'red' }, { type: 'column', id: 'aapl-volume', name: 'SPX500 section', data: volume, yAxis: 1 }], responsive: { rules: [{ condition: { maxWidth: 800 }, chartOptions: { rangeSelector: { inputEnabled: false } } }] } }); }); /**TSLA **/ Highcharts.getJSON('/shares/TSLA2022.json', function (data) { // split the data set into ohlc and volume var ohlc = [], volume = [], dataLength = data.length, i = 0; for (i; i < dataLength; i += 1) { ohlc.push([ data[i][0], // the date data[i][1], // open data[i][2], // high data[i][3], // low data[i][4] // close ]); volume.push([ data[i][0], // the date data[i][5] // the volume ]); } Highcharts.setOptions({ global: { timezoneOffset: -8 * 60 } }); Highcharts.stockChart('TSLA_container', { yAxis: [{ labels: { align: 'left' }, height: '80%', resize: { enabled: true } }, { labels: { align: 'left' }, top: '80%', height: '20%', offset: 0 }], tooltip: { shape: 'square', headerShape: 'callout', borderWidth: 0, shadow: false, positioner: function (width, height, point) { var chart = this.chart, position; if (point.isHeader) { position = { x: Math.max( // Left side limit chart.plotLeft, Math.min( point.plotX + chart.plotLeft - width / 2, // Right side limit chart.chartWidth - width - chart.marginRight ) ), y: point.plotY }; } else { position = { x: point.series.chart.plotLeft, y: point.series.yAxis.top - chart.plotTop }; } return position; } }, series: [{ type: 'ohlc', id: 'aapl-ohlc', name: 'TSLA', data: ohlc, color: 'green', upColor: 'red' }, { type: 'column', id: 'aapl-volume', name: 'TSLA section', data: volume, yAxis: 1 }], responsive: { rules: [{ condition: { maxWidth: 800 }, chartOptions: { rangeSelector: { inputEnabled: false } } }] } }); });"}],"posts":[{"title":"","slug":"Blog/1","date":"2022-03-24T04:47:56.357Z","updated":"2022-03-24T05:19:45.564Z","comments":true,"path":"2022/03/24/Blog/1/","link":"","permalink":"http://example.com/2022/03/24/Blog/1/","excerpt":"","text":"阿身上撒是对的。","categories":[],"tags":[]},{"title":"iPad配置系统邮箱","slug":"Github/iPad配置邮箱","date":"2022-03-21T16:00:00.000Z","updated":"2022-03-22T11:34:49.960Z","comments":true,"path":"2022/03/22/Github/iPad配置邮箱/","link":"","permalink":"http://example.com/2022/03/22/Github/iPad%E9%85%8D%E7%BD%AE%E9%82%AE%E7%AE%B1/","excerpt":"","text":"进入其他 设置收件服务器：在商用服务器打开IMAP和SMTP服务器 appleimap.126.com 用户名@126.com 密码是授权码而不是秘密 设置发件服务器： smtp.126.com 用户名@126.com 密码是授权码而不是秘密","categories":[{"name":"周刊","slug":"周刊","permalink":"http://example.com/categories/%E5%91%A8%E5%88%8A/"}],"tags":[]},{"title":"","slug":"Wiki/法律条文","date":"2022-03-21T03:55:25.751Z","updated":"2022-03-21T03:55:25.751Z","comments":true,"path":"2022/03/21/Wiki/法律条文/","link":"","permalink":"http://example.com/2022/03/21/Wiki/%E6%B3%95%E5%BE%8B%E6%9D%A1%E6%96%87/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"徐其耀","slug":"News/徐其耀","date":"2022-03-18T16:00:00.000Z","updated":"2022-03-20T04:53:10.436Z","comments":true,"path":"2022/03/19/News/徐其耀/","link":"","permalink":"http://example.com/2022/03/19/News/%E5%BE%90%E5%85%B6%E8%80%80/","excerpt":"","text":"徐其耀，玩弄146个情人，其中一对是母女。据说是写给儿子的信江苏省原建设厅厅长徐其耀因贪污受贿2千余万元身陷牢狱。近日，他捕前写给儿子的一封信在网上疯传。此信本博主读后，感到实乃当代一奇文，不仅畅述了做官心得，总结了为官原则，具有较高的理论价值和实用价值，而且符合官场“金科玉律”，观点鲜明，坦率朴实，警句迭出，振聋发愦。足可编入党校教科书以当范文，聊以纠正当今官场的假话空话套话充斥的不正文风。下为该信全文:孩子：你的来信我已收到，对你在大学里的表现，我很欣慰，你要再接再厉。既然你选择了一定要走仕途这条路，你就一定要把我下面的劝告铭记在心： 1、不要追求真理，不要探询事物的本来面目。把探索真理这类事情让知识分子去做吧，这是他们的事情。要牢牢记住这样的信条：对自己有利的，就是正确的。实在把握不了，可简化为：上级领导提倡的就是正确的。 2、不但要学会说假话，更要善于说假话。要把说假话当成一个习惯，不，当成事业，说到自己也相信的程度。妓女和做官是最相似的职业，只不过做官出卖的是嘴。记住，做官以后你的嘴不仅仅属于你自己的，说什么要根据需要。 3、要有文凭，但不要真有知识，真有知识会害了你。有了知识你就会独立思考，而独立思考是从政的大忌。别看现在的领导都是硕士博士，那都是假的。有的人博士毕业就去应招公务员走向仕途，那是他从读书的那天起就没想研究学问，肯定不学无术。记住，真博士是永远做不了官的。 4、做官的目的是什么？是利益。要不知疲倦地攫取各种利益。有人现在把这叫腐败。你不但要明确把攫取各种利益作为当官的目的，而且要作为唯一的目的。你的领导提拔你，是因为你能给他带来利益；你的下属服从你，是因为你能给他带来利益；你周围的同僚朋友关照你，是因为你能给他带来利益。你自己可以不要，但别人的你必须给。记住，攫取利益这个目的一模糊，你就离失败不远了。 5、必须把会做人放在首位，然后才是会做事。这里的做人做事你可别理解为德才兼备的意思。这里说的做人，就是处关系。做事是实际工作，这点会不会都无所谓。做人就是把自己作为一个点编织到上下左右的网中，成为这个网的一部分。记住，现在说谁工作能力强，一点都不是说他做事能力强，而是指做人能力强。呵呵，你看那些把能力理解为做事的人，有好日子过才怪。 6、我们的社会无论外表怎样变化，其实质都是农民社会。谁迎合了农民谁就会成功。我们周围的人无论外表是什么，骨子里都是农民。农民的特点是目光短浅，注重眼前利益。所以你做事的方式方法必须具有农民特点，要搞短期效益，要鼠目寸光。一旦你把眼光放远，你就不属于这个群体了，后果可想而知。要多学习封建的那一套，比如拜个把兄弟什么的，这都不过分。 7、要相信拍马是一种高级艺术。千万不要以为拍马只要豁出脸皮就行，豁得出去的女人多了，可傍上大款的或把自己卖个好价钱的是极少数，大部分还是做了低层的三陪小姐。这和拍马是一样的道理。拍马就是为了得到上级的赏识。在人治的社会里，上级的赏识是升官的唯一途径，别的都是形式，这一点不可不察。 8、所有的法律法规、政策制度都不是必须严格遵守的，确切地说，执行起来都是可以变通的。法律法规、政策制度的制订者从没想到要用这些来约束自己，而是想约束他人。但你要知道，这些不是人人都可以违反的。什么时候坚决遵守，什么时候偷偷违反，让谁违反，要审势而定，否则宽严皆误。 ——以上这些都是做官的原则。现在要仔细想想，如果你真能逐条做到，你就能一帆风顺，如果感觉力不从心，就马上另外选择职业吧。 要会讲正确无用的套话，同时琢磨事物背后的真相。 “二八佳人体似酥，腰间仗剑斩愚夫。虽然不见人头落，暗里教君骨髓枯。”这首诗词想必大家一看就明白其中含义，一句话概括“色字头上一把刀，石榴裙下命难逃”。古人就向人们告诫“戒色，戒财”，至少是君子爱财好色要取之有道。 但是原江苏省建设厅厅长徐其耀却根本不在乎这些，反而用尽手段捞巨额钱财，据说一次就收了2000万，然后他又把这些钱全部用于女人身上，坊间传出他前后包养了146位情妇，让人惊掉下巴的是在这146位中就有一对亲母女，伦理何在？那么徐其耀究竟是怎么样的一个人呢？ 出身寒门。徐其耀1943年11月生人，他的父亲是一名抗日战士，后来在徐其耀一岁之际光荣牺牲，应该说徐是烈士之后，徐其耀年轻时在农村生活，由于生活穷苦，日子实在没有办法过了，只好托关系找朋友，最终徐在城里找到一份国营工厂的临时工。 徐由于工作认真负责，口才好，会来事，周围的人还都比较喜欢他，关键是徐年轻时候是一表人才，年轻姑娘看到他后都忍不住要多看几眼，恰巧有一个年轻姑娘，个人形象比较差，但是家庭有势力，而且这个姑娘对徐非常有好感，就这样徐靠这个姑娘的家庭势力，转为正式工。 后又经过大学深造，徐其耀于1970年8月至1983年8月先后担任盐城市轧花剥绒厂干部、市革委会秘书，1975年12月入党，1983年9月担任滨海县副县长，至此徐其耀开始发迹。徐在担任盐城市长期间，特别是在1991年长江遭遇百年不遇的特大洪水，盐城市受灾相当严重，当时市委书记因病住院，徐其耀和工人，战士，农民连续28天奋战在抗洪抢险第一线，将灾害损失降到了最低，受到上级的一致好评，应该说徐在早年还是一个干事业的人。 徐贪污受贿所得，不干别的，而是把钱大部分却用在了女人身上，据公开资料，他先后包养146个情妇供其享乐，这些情妇大多都是其下属，也有其它领域的，他包养的情妇，可以说是饥不择食，上到花甲，下至20岁的年轻女人，都是他的猎艳对象。 甚至还曾包养过一对母女，而且母女都知道对方的存在，据说有一次徐生病需要住院，到了医院后，自然被安排在高干病房，医院领导也是非常了解徐的“爱好”，常言道：上有所好，下必趋之，医院领导非常识趣，故而安排颇有姿色的医师王秀丽前去检查徐的身体，在密闭的空间，二人身体有意无意的接触，徐的市长身份让这个年过四十的半老徐娘毫无招架之力，在半推半就之间，王修丽被拿下。 王秀丽自认为两人都已经发生关系了，于是请徐帮忙把刚毕业不久的女儿刘澜找份体面的工作，徐爽快答应，并安排在一家报社工作，徐见刘澜年轻漂亮，故伎重演，开始“追求”刘澜，而年仅19岁的女儿刘澜哪见过徐的那种进攻阵势，不多久就被徐收入囊中，成为情妇，至此母女二人皆为徐的情妇。尽管徐其耀包养了146个情妇 但是这并不影响他去嫖娼，徐其耀就是因为嫖娼再加上情妇的举报而落马，最终被判处死缓。","categories":[{"name":"News","slug":"News","permalink":"http://example.com/categories/News/"}],"tags":[]},{"title":"说一下底层的中国人到底是什么样子","slug":"News/说一下底层的中国人到底是什么样子","date":"2022-03-16T16:00:00.000Z","updated":"2022-03-17T07:06:06.686Z","comments":true,"path":"2022/03/17/News/说一下底层的中国人到底是什么样子/","link":"","permalink":"http://example.com/2022/03/17/News/%E8%AF%B4%E4%B8%80%E4%B8%8B%E5%BA%95%E5%B1%82%E7%9A%84%E4%B8%AD%E5%9B%BD%E4%BA%BA%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88%E6%A0%B7%E5%AD%90/","excerpt":"","text":"说一下底层的中国人到底是什么样子 都说故土难离，一定程度上有道理。毕竟那个地方生活了十几年，珍贵的童年记忆都在。 我在北方的某个小县城的边缘长大。穷困和物资匮乏是童年的大部分记忆。一个班四十个人，还是重点高中，考大学的也就五个，包括本科专科在内。教育的欠缺，导致很多问题。 有几件事情，真是让人无法对家乡热爱起来。 刚毕业后，父母还没有接到身边来，每年要回老家。下了火车是凌晨的五六点。那种绿皮车。做过的人都知道，一夜坐下来，整个人昏昏欲睡浑身乏力。我们三个人拎着包，穿行在出租车和杂乱的人群中，奔向大巴车，准备买票回去。这时，一个出租车拦住我们，说可以送我们到大巴车站。这就是搞笑了。因为一共五六百米的距离，不用打车的。但他一路跟着，就是要我们打车，说20元。那时候二十元也是一笔钱了。 我们不搭理他。我说：我们走过去，很近的。您就不要跟着了。 可能这句话惹怒了他？反正突然出现了好几个人，其中一个人就说：我们的包蹭到了他的车，必须要赔钱。 我说那就报警。天寒地冻，零下二十度，我相信他们熬不起。我们年轻。但是，随即又出现了几个人，各种威胁。 我们边慢慢挪动，边争吵。对方仿佛随时要动手。 幸好，大巴车司机出现了。他在附近拉客人。我们每年都坐他的车。他出面了：兄弟，二十吧。他们也是着急回家，不小心的。 花了20元，相当于乘坐了出租车了灵魂。因为我们没有看到所谓剐蹭的那辆车。 还有一件事。 父母接过来以后，说：当地人对咱们很好，你们上学以后，他们还是肯帮忙。现在有了点钱，修修路吧。于是集合了几个人，凑钱修路。一条1.5公里的路修通了，串联整个生活区。开通那天我们很开心。大家都回去了。出资的一个是比我大两岁的在广州工作的哥哥，也回去了。我们说：这算报答家乡了吧，以后大家出门不用踩泥水了。 我们出钱，在村子中间的一大片空地上，做了宴席，请全村人吃饭喝酒。酒过三巡，村里几个比我们大十多岁（当时四十岁或者出头的样子）醉醺醺地说： 你们别他妈的觉得自己做了好事儿。就一条破路！从我们家到水泥路，那一段你们怎么不修？你们都发财了，还差这点钱？ 当时气炸了。修路用了接近50万，对于我们几个来说都是一笔大钱。那是20年前啊。50万可以在北京买一套房子的，为什么要用来喂这些白眼狼？？ 但我们什么都不能说。只能点头：的确没钱了，等以后凑到钱再说。 最后一件事。 组织上要求挂职锻炼。我说那我就去老家的县。挂职后做调研。来到村里。其实我仍然记恨他们。所以自从修路以后就再也没有回去过。父母都在身边，回去没什么意义。 到了村里，一群人围着我们，说：看，咱们村儿也有人当了县太爷了！你要给村里多搞点钱啊。那几个当初骂我们的，也仿佛变成了孙子，点头哈腰。还大声跟周围的人说：当初就是人家花钱给咱们修了路，咱祖祖辈辈没享受过这么好的路啊。 只是觉得恶心。挂职结束，立刻选择回来。 虽然那里是我的故乡，我生活了16年的地方，我还是永远都不想再回去。 如今，只有每年的清明节，会开车回去，到县城租一个车，去老家扫墓，不打扰任何人。在县城宾馆住一晚第二天回家。 我也是穷人，但我知道，底层的恶，有时候是没有底线的。譬如，高晓松再坏，也坏不到哪儿去，顶多忽悠一下别人。但有的底层，例如那些高喊爱国的贫穷的大V们，一旦有了机会，那是可以坏到极致的坏到骨头里，可以违背自己的内心做出任何事情。","categories":[{"name":"News","slug":"News","permalink":"http://example.com/categories/News/"}],"tags":[]},{"title":"股票基本面","slug":"Wiki/股票基本面","date":"2022-03-16T16:00:00.000Z","updated":"2022-03-17T01:41:31.288Z","comments":true,"path":"2022/03/17/Wiki/股票基本面/","link":"","permalink":"http://example.com/2022/03/17/Wiki/%E8%82%A1%E7%A5%A8%E5%9F%BA%E6%9C%AC%E9%9D%A2/","excerpt":"","text":"市盈率英文简称是“PE” 市盈率 = 普通股每股市场价格÷普通股每年每股盈利 通常来说，一家公司的市盈率在020倍之间比较好。其中，市盈率在10倍以下的公司处于绝对低估状态；10～14倍处于一般低估状态；1420倍处于正常水平。买股票最好买处于20倍市盈率以下的股票。 假设张三的公司上市后，如今的市值是100亿元，而每年张三的公司能赚10亿元。那么张三需要10年才能够再赚回一家公司，即投资回本需要10年的时间，市盈率就是10倍。","categories":[{"name":"Wiki","slug":"Wiki","permalink":"http://example.com/categories/Wiki/"}],"tags":[]},{"title":"10种常见的逻辑陷阱，看清杠精的本质","slug":"Wiki/10种常见的逻辑陷阱，看清杠精的本质","date":"2022-03-14T16:00:00.000Z","updated":"2022-03-15T08:36:18.967Z","comments":true,"path":"2022/03/15/Wiki/10种常见的逻辑陷阱，看清杠精的本质/","link":"","permalink":"http://example.com/2022/03/15/Wiki/10%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84%E9%80%BB%E8%BE%91%E9%99%B7%E9%98%B1%EF%BC%8C%E7%9C%8B%E6%B8%85%E6%9D%A0%E7%B2%BE%E7%9A%84%E6%9C%AC%E8%B4%A8/","excerpt":"","text":"你听过匹诺曹的故事吗？故事中说，一旦匹诺曹开始说谎，他的鼻子就会变长。那么，如果匹诺曹说“我的鼻子会变长”会发生什么呢？如果匹诺曹的鼻子变长了，说明他说了真话，但好像也能证明他说了假话，那么，事实到底应该是怎样的？我们很难给出明确的答案，因为这属于逻辑陷阱。这样的例子还有许多，我们在生活和工作中其实会遇到很多逻辑陷阱，它们不易被察觉，但是经过仔细思考之后就会发现漏洞。所以，熟知逻辑陷阱是一种非常关键的沟通必备技能，学会甄别沟通中的逻辑陷阱，才能尽量避免在沟通中被对方“牵着鼻子走”，或是当对方提出一个问题时，我们明知道是谬论却无力反驳。接下来，我将为大家介绍常见的十大逻辑陷阱。 01、以偏概全以偏概全，是指只看到了事物的局部，却以此来概括事物的整体。比如我们熟知的成语典故：盲人摸象。这个故事中说，有的盲人摸到了大象的牙齿，就认为大象长得像萝卜；有的盲人摸到了大象的耳朵，便说大象长得像簸箕；还有的盲人摸到了大象的头部，就以为大象长得石头……很明显，这些答案都不对，我们不能只了解事物的某一部分，就胡乱猜测，很轻率地对整体做出判断。以生活中的例子来说，如果我们遇到了一个不负责任的老师，便认为所有的老师都没有责任心，这种想法就是典型的以偏概企。 02、预设谬论预设谬论是我们经常会遇到的逻辑陷阱，它公让你不自觉地陷人“坑中”。比如，你已经是35岁的女性了，还没有孩子，是不是很苦恼？这个问题看似在询问“是不是很苦恼”，但其实这个问题本身就已经设下了一个谬论：35岁的女性不应该没有孩子。还有许多男性同胞会比较苦恼的问题，比如，女朋友会经常说：“我减肥又失败了，该怎么办？”一般情况下，十分耿直的男生会顺着对方的逻辑回答：“无论你多胖都很好看。”听到这种答案，对方并不会很开心，因为你的回答中隐含了一层意思：你现在的确很胖。所以，遇到这类逻辑陷阱要注意避开，可以参考的回答是：“你一点都不胖。” 03、不当类比不当类比， 是将两个部分相似的事物，当作完全相同的事物做出类比。例如，当公司正在考虑是否要挑战一个有风险的项目时，可能有人这样说：“乌龟把头伸出龟壳外才能前进，同理可得，公司只有敢于冒风险才能发展壮大。”这句话很明显是一个不当类比式的逻辑陷阱，因为乌龟和公司并不是可以直接拿来做比较的两种事物。按照这样的逻相，我们可以反驳：“公司是否也应该像乌龟一样，行动缓慢，遇到问题就把头缩进壳里？” 04、间单归类简单归类，就是把本是系统且金面的东西过分简单化。例如，当我们吃到一份美味的火锅时，便问厨师：“用的什么火锅底料做出这么好吃的味道？”这句话很明显是将非常专业的问题，过分简单化了。火锅好吃并不仅是因为火锅底料，还要涉及食材、火候、器具、烹饪技巧等就像摄影师不会喜欢被人问：“这张如此好看的照片，是用什么品牌的相机拍摄的？”因为一个专业的摄影师在摄影之前，会布景、采光、构图，考虑主体物的特征，以及想要表达的主旨，这并不是单凭一个相机就能完成的。 05、乱赋因果乱赋因果，是指将那些有先后顺序的事情，强行连接在一起当作因果关系。这个逻辑陷阱在朋友圈中很常见，比如许多“疯传”的文章。有这样的标题：“不转不是中国人！”但我们是中国人的事实，并不会因为是否转发这篇文章而改变，这就是强行将没有任何联系的事情关联在一起， 构成一个逻辑陷饼。再比如，当我们正在观看比赛时，同事突然也坐在一旁观看， 接着这场比赛便输了。于是，我们将“比赛输了”这个结果强行安在同事身上，因为你突然过来，所以比赛输了。其实，这两者之间只有先后顺序，并没有逻辑关系。 生活中，我们在与朋友开玩笑时，会经常使用这个方法，但在职场中与人对话时要避免落进对方的圈套中。 06、树稻草人树稻草人，意思是先将对方的观点曲解，再进行反驳，就像是攻击一堆毫无还手能力的稻草人一样。例如，观点是啤酒厂的广告让未成年人开始喝酒，但许多未成年人在饮酒后，会造成不良的社会影响，所以，电视台不应该播放啤酒厂的广告。回答是人们是不可能放弃喝酒的，人类饮酒的历史很长，全世界的人民都爱喝酒。这个回答中的“稻草人”就是“人们应该放弃喝酒”。观点中并没有要求所有人放弃喝酒，只是要求电视台禁播啤酒厂的广告，以免让未成年人学会喝酒，但在回答中，直接将意思曲解为“所有人都不应该喝酒”。这种逻辑陷阱在沟通中经常出现，所以要在沟通中仔细倾听对方发言，快速找出对方的破绽，跳出逻辑圈套。 07、人身攻击人身攻击，可以直接从字面意思来理解，也就是根据个人的主观判断，对他人进行言论攻击，通过抹黑和贬低对方的方式，证明对方一定是错的。例如，当我们的公司里发生盗窃案时，排除外人作案的可能，收嫌疑人锁定在内部员工中。如果按照人身攻击的逻辑来思考，就会首先把公司中经济条件不太好、工作不努力的人作为怀疑对象。比如， “他没有钱，工作也不认真，还是个酒鬼，一定是他做的。”这种逻辑陷阱，是我们在生活和工作中要尽量避免的，很容易给他人造成严重的伤害。 08、滑坡谬误滑坡谬误，是指用一种非常夸张的方式，将因果关系连接起来，把“可能”变为“绝对”，喜欢把事情往最极端的方面去引导。相信不少人都有过这样的经历，小时候许多父母都会这样教育子女：如果你这次期末考试不能进入全班前5名，就无法进入重点高中，那样就会考不上理想的大学，也找不到一个好工作，最后只能去工地做苦力。这样的逻辑在生活中经常遇到，许多人会顺着这个逻辑陷入恐慌里，但其实，这就是一个滑坡谬误式的逻辑陷阱。诸如此类的例子还有许多，比如，上司对你说：“这个月的业绩完成不了，你就是部门里的最后一名，最后一名是无法在公司生存的，既然在公司待不下去，那就根本无法在社会上立足，只能混吃等死，被人瞧不起。” 09、虚假两难虚假两难，是指将事物的其他可能性全都排除了，只提供两种选择。说到这个逻辑陷阱，不得不提到一个令所有男士都害怕的问题：“我和你妈同时掉进水里，你先救谁?”这是一个非常经典的虚假两难式的逻辑陷阱，如果在实际生活中真的遇到这种状况，我们可能会有不少解决方法。但这个问题却利用了逻辑陷阱，屏敝了其他选择，要求对方仅在两者之间做出抉择。遇到这样的问题，我们尽量不要在两个答案中选择一个，而是要跳出逻辑陷阱，提出一个新的观点。 10、诉诸权威诉诸权威，是在提出想法时，加上“某专家”“某专业机构”，给自己的观点背书。这种逻辑陷阱比较常见，因为大多数人都会信服权威。例如，许多不严谨的网络文章中会经常提到“据权威认证”“专家指出”“马云曾说”……但实际上，这些提到的“权威”跟文章中讲到的内容毫无关联，许多观点也并非出自这些专家、名人之口。但这类权威很容易迷惑住读者或听众，让人产生信任感。以上就是我们常见的十大逻辑陷阱，熟知这些逻辑陷阱中的“坑”能让我们在与人交往时避免掉人对方的圈套里。但要谨记，切勿使用这些逻辑陷阱去欺骗他人，无论是做人，还是做事，我们都要以诚为本。","categories":[{"name":"Wiki","slug":"Wiki","permalink":"http://example.com/categories/Wiki/"}],"tags":[]},{"title":"非法吸收公众存款罪和民间借贷到底有什么区别","slug":"Wiki/非法吸收公众存款罪和民间借贷到底有什么区别","date":"2022-03-12T16:00:00.000Z","updated":"2022-03-13T09:03:11.443Z","comments":true,"path":"2022/03/13/Wiki/非法吸收公众存款罪和民间借贷到底有什么区别/","link":"","permalink":"http://example.com/2022/03/13/Wiki/%E9%9D%9E%E6%B3%95%E5%90%B8%E6%94%B6%E5%85%AC%E4%BC%97%E5%AD%98%E6%AC%BE%E7%BD%AA%E5%92%8C%E6%B0%91%E9%97%B4%E5%80%9F%E8%B4%B7%E5%88%B0%E5%BA%95%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/","excerpt":"","text":"民间借贷与非法吸收公众存款罪如何区别首先分析民间借贷是什么行为，因为它属于私人之间的单独交往或者特定的个人和单位。而非法吸收公众存款罪是一种未经批准，向社会不特定公众吸收资金等等 根据现行法律法规，结合审判实践，以下行为均可能构成非法吸收公众存款罪： （一）以高额付息方式吸收不特定公众“存款”； （二）以筹集发展资金为名向不特定公众“借款”； （三）不以房产销售为主要目的，以返本销售、售后包租、约定回购、销售房产份额等方式非法吸收资金； （四）以转让林权并代为管护等方式非法吸收资金； （五）以代种植（养殖）、租种植（养殖）、联合种植（养殖）等方式非法吸收资金； （六）不具有销售商品、提供服务的真实内容或者不以销售商品、提供服务为主要目的，以商品回购、寄存代售等方式非法吸收资金； （七）不具有发行股票、债券的真实内容，以虚假转让股权、发售虚构债券等方式非法吸收资金； （八）不具有募集基金的真实内容，以假借境外基金、发售虚构基金等方式非法吸收资金； （九）不具有销售保险的真实内容，以假冒保险公司、伪造保险单据等方式非法吸收资金； （十）以投资入股的方式吸收社会公众存款； （十一）以委托理财的方式非法吸收资金； （十二）利用“会”、“社”等组织非法吸收资金； （十三）以“认购商铺使用权”和“内部职工集资”的名义吸收公众存款； （十四）以加盟补贴名义吸收公众存款； （十五）以投资经营项目为名吸收公众存款； （十六）以收取广告位代理订金的名义变相吸收资金； （十七）以办理预存卡形式吸收公众存款； （十八）以发展代理商为名吸收社会公众资金； （十九）假借销售商品名义吸收公众资金； （二十）以销售商品房、商铺提供担保等名义吸收公众资金； （二十一）为放贷非法吸收社会公众资金； （二十二）以参与“翡翠戴养”名义吸收公众存款； （二十三）虽不知情但积极为他人介绍吸收资金也构成犯罪。","categories":[{"name":"Wiki","slug":"Wiki","permalink":"http://example.com/categories/Wiki/"}],"tags":[]},{"title":"Mac系统自带的批量重命名功能","slug":"Github/Mac系统批量重命名","date":"2022-03-05T16:00:00.000Z","updated":"2022-03-11T11:30:07.719Z","comments":true,"path":"2022/03/06/Github/Mac系统批量重命名/","link":"","permalink":"http://example.com/2022/03/06/Github/Mac%E7%B3%BB%E7%BB%9F%E6%89%B9%E9%87%8F%E9%87%8D%E5%91%BD%E5%90%8D/","excerpt":"选中所需批量重命名文件，右键-重新命名，目前能实现三种命名方式：","text":"选中所需批量重命名文件，右键-重新命名，目前能实现三种命名方式： 格式： 添加文本： 替换文本：","categories":[{"name":"Github","slug":"Github","permalink":"http://example.com/categories/Github/"}],"tags":[]},{"title":"俄军十天未拿下基辅 乌精锐特种部队揭秘","slug":"News/俄军十天未拿下基辅 乌精锐特种部队揭秘","date":"2022-03-04T16:00:00.000Z","updated":"2022-03-21T02:45:58.834Z","comments":true,"path":"2022/03/05/News/俄军十天未拿下基辅 乌精锐特种部队揭秘/","link":"","permalink":"http://example.com/2022/03/05/News/%E4%BF%84%E5%86%9B%E5%8D%81%E5%A4%A9%E6%9C%AA%E6%8B%BF%E4%B8%8B%E5%9F%BA%E8%BE%85%20%E4%B9%8C%E7%B2%BE%E9%94%90%E7%89%B9%E7%A7%8D%E9%83%A8%E9%98%9F%E6%8F%AD%E7%A7%98/","excerpt":"2022年3月4日，乌克兰军人驻守在基辅独立广场。","text":"2022年3月4日，乌克兰军人驻守在基辅独立广场。 过去十天，俄军每天都试图穿过基辅郊区攻入乌克兰首都，但屡屡受挫。备受关注的是，俄军四十多英里长的车队仍在基辅附近停滞不前。《华尔街日报》说，乌克兰部署了精锐特种部队来守卫基辅。该部队曾受过美军和盟友的训练。 俄罗斯于2月24日启动对乌克兰的攻击。2月25日，美国有线电视新闻网援引知情人士说，美国在俄罗斯入侵前的初步评估预计，乌克兰首都将在俄军袭击后的一到四天内被占领。2月24日晚上，美国高级政府官员在国会山对美国议员说，俄军已经到了距离基辅20英里的地方。 当时很多人担心，基辅或很快沦陷。但到本周六，俄乌战争已经进入第十天，基辅仍在乌克兰人的控制之下。乌克兰总统顾问米哈伊洛‧波多利亚克（Mykhailo Podolyak）说：“乌克兰正在以一种没有人预料到的方式作战。” 《华尔街日报》报导，捍卫基辅的乌克兰特种部队队长沃洛迪米尔（Volodymyr）在谈到这几天的抗俄经历时说，“我们出去猎杀并摧毁他们。”他的团队队员手持英国.308口径狙击步枪和英国制造的反坦克武器，等待着俄军的最新攻击。 “他们来这里当然没有预料到我们知道如何战斗。”沃洛迪米尔说。 自从战争的第一天（2月24日），一支俄军从白俄罗斯向北推进以来，这里的前线基本保持坚挺。在一些地方，包括邻近的布哈镇，俄罗斯人被击退。 3月5日，一名记者在基辅西北部伊尔平的炮击中掩护自己。(Aris Messinis/ AFP) 乌军为何能守住基辅 部分原因是乌克兰部署了精锐特种部队来保卫基辅，这些部队过去几年接受了美国和盟国的训练。他们配备了英国的下一代反坦克导弹系统NLAW、美国制造的标枪反坦克武器和毒刺防空导弹。这些设备都有助于削弱俄军在航空和远程导弹和大炮方面的优势。 《华日》援引乌克兰军官的话说，还有一个原因帮助乌军守住基辅，那就是，俄军似乎坚持苏联式的大型机动战术，以长长的车队移动，容易受到乌克兰小型侦察部队和由土耳其制造的Bayraktar TB2武装无人机舰队的打击。 “我们对他们的行为如此愚蠢感到震惊。”乌克兰特种部队的另一名成员说。他每晚都在该地区执行任务。他周五（3月4日）说，自9天前战争开始以来，他的部队已经失去了两名士兵，而击毙的俄罗斯人超过60名。 “现在，我们主要专注于打击他们的后方，他们的补给车队，因为如果他们得不到燃料，他们将无能为力。” 《华日》报导，周五，距离首都基辅22公里的伊尔平（Irpin）地区的乌克兰守军士气高涨，尽管一架俄罗斯攻击机低空飞过一个住宅区，炮弹降落的声音越来越近。巨大的黑烟从城镇的北部和南部升起，沿着俄军一个多星期以来一直试图闯入基辅的其它主要路线。 这里的士兵说，为了防备敌人的直升机或攻击机接近，有的士兵肩扛便携式防空导弹。这里的部队说，他们使用自己的小型无人机，包括一些带有热像仪的无人机，以搜寻俄罗斯目标。 “俄罗斯人一直试图进入并包围我们，但他们就是做不到。我们在一起，我们有条理，我们意志坚强。”士兵阿廖娜‧帕夫洛娃（Alyona Pavlova）说。 俄军四十多英里车队停滞不前 首都基辅附近，有一支长达四十多英里的俄罗斯车队数日来一直没能向前推进。 五角大楼发言人约翰‧柯比（John Kirby）周五（3月4日）在简报会上说，乌克兰人的抗击行动已经“阻止”了前往基辅方向的大型俄罗斯军事车队。 “我们确实有报告称一座桥梁被炸毁，我们认为该桥梁就在这条路上。也有迹象表明，乌克兰人在其它地方和在车上袭击了车队。”柯比说。 他补充说：“我们确实相信乌克兰人的行动使（俄军）车队停滞不前，当然减慢了（前进的）速度，在某些地方停止了。” 柯比说，美国还认为，俄罗斯军队自身在持续性、后勤和燃料方面的挑战减缓了车队的前行速度。 普京与俄罗斯必输，告诉你为什么？（转）顾晓军按：早在2022-3-3我撰写的〈俄乌之战俄罗斯可能要输，我说下为什么〉一文中，就已指出「现代战争，就是烧钱，像美军打伊拉克那样；而俄罗斯，没钱、烧不起」，并预言了俄罗斯要输的结果……然，我没作理论高度的阐述。 而这篇文章，却完美地诠释了：「现代战争，就是烧钱……而俄罗斯……烧不起」。 文章，源于网络，原题为〈俄乌大战，打出了一个让世界震惊的真相〉。 我们正在围观的不是一场战争，而是一个时代的背影。长达三十年的“告别冷战”，终于画上了句号。 01 扮演苏联的游戏 1991年年底，苏联解体。俄罗斯联邦继承了苏联的遗产。没有人对此提出过质疑。 在此后的三十年间，俄罗斯成功地扮演了苏联的角色，一个具有全球行动力、影响力的“世界帝国”。 普京执政后，俄罗斯的表现更为强硬，频频与西方的正面对抗，竭力营造了俄美对峙的局面。世界各国政要对待普京，与对待苏联领袖的态度无异——夹杂着尊敬、恐惧、厌恶的复杂感情，却不能轻视他。这些政要在各种国际事务中与他协调，争取他的支持，或者至少是谅解。 直到这场被直播的战争，终于为俄罗斯卸下了妆容——俄罗斯不是苏联，它不具备苏联的经济实力，负担不了沉重的“苏联遗产”。 2月24日，普京启动了“特别军事行动”，复刻了1968年8月20日占领捷克的行动方案，突袭首都机场的“斩首”行动、浩浩荡荡的装甲部队。 实际上，西方各国也是如此判断的，没有人想到乌克兰能够坚持那么久。西方对乌克兰的实质援助、对俄罗斯的制裁加码等等应对举措，都在乌克兰挺住48小时之后发生。即便如此，美英还在劝泽连斯基“搭车”出国。 然而，“特别军事行动”没有获得预期的成功。俄罗斯远远不及苏联的真实一面，才被注意到。 俄罗斯没有阵营，没有华约国家为苏联摇旗呐喊、鞍前马后的大阵仗，也没有乌克兰内部亲俄势力积极配合。十几万大军浩浩荡荡，却是形单影只。 特别军事行动的虎头蛇尾，与其说是军事失败，不如说是政治上的失败。 俄罗斯没有苏联的政治动员力，连乌克兰的“同族兄弟”早已抛弃了它。 02 经济能力限制了俄罗斯的政治影响力 48小时，终结了俄罗斯三十年“扮演苏联”的游戏。当年的占领捷克是阵营内部的“家务事”，是老大哥带众小弟实力碾压内有家贼、外无援兵的捷克。当年的“特别军事行动”因此大获成功。而乌克兰和俄罗斯之间，不过是国与国之间的争端。 俄罗斯不是苏联，它没有维持一个阵营的经济能力，甚至连“祖传”的“传统势力范围”也无力维持。 上世纪七十年代，勃列日涅夫时代是苏联的高光时刻，欧佩克发起的“石油战争”推高油价让苏联大发横财。当时苏联的GDP至少相当于美国的50%，最乐观的估算是60%到70%。凭借着强大的经济实力，苏联内部核心的“大俄罗斯”区——俄罗斯西部地区、乌克兰、白罗斯坐在了“苏联红利”的头等席，苏联阵营里的各家小弟也各有进账。 而今天的俄罗斯，区区1.7万亿美元的GDP，不到美国的十分之一，还不如中国的广东省。2012年后更是经济增长陷入停滞，看不到前途。国力不足必然导致政府财力不足，2021年俄联邦的财政预算规模不过区区3300亿美元，连美国国防部的5500亿美元的预算都比不过。经济能力限制了俄罗斯的政治影响力。 以这样的经济能力，每年给1000万人口不到的白罗斯输血一两百亿美元，占白罗斯10-20%的GDP，才维持了俄白同盟的“亲密无间”。4400万人口的乌克兰，更是养不起的“吞金兽”。 而且，普京上台后为“扮演苏联”上耗费大量资源，全球出击的威风八面，没有余力在乌克兰克隆一个“俄白同盟”。 因此，乌克兰既不能从俄乌关系中获益，又因为被西方视为“苏联势力范围”核心区域，而不被接纳，成了东西两边的“经济弃儿”。 人均GDP4、5千美元，比白罗斯差了一大截，是什么滋味？和脱俄入欧的波罗的海三国、波兰相比，更是穷如乞丐。穷则思变，毫不意外。既然求变，利之所趋，人心所向。即便是亲俄派，其实也是塑料质地的。 俄罗斯把乌克兰作为“苏联遗产”对待，却没有继承苏联的经济义务，只继承了苏联的压迫性。乌克兰的离心离德、走向决裂，实属必然。 既没有阵营的人多势众，又没有乌克兰的民众归心。普京的“特别军事行动”输在了政治，根子出在了经济，这才成了一场意料之外的战争。 更可悲的是，俄罗斯赢不到这场战争。这场战争太奢侈，俄罗斯玩不起。 03 经济能力限制了俄罗斯的军事能力 来自乌克兰战场的消息纷纷扰扰、真真假假，争论不休。但是，一个最基本的事实是，开战十几天，乌克兰没有倒下，基辅、哈尔科夫等大城市依然在握。其中有俄罗斯束手束脚的原因，但不可否认的是，倾国之力的二十万大军是去打仗的，不是去帮助乌克兰老农民春耕的。打成目前僵持的局面，是俄罗斯最不愿意看到的局面。 俄罗斯拖不起。 俄罗斯维持这场战争，每月要买80亿美元的大单，这还是维持这种半死不活状态的成本。凭俄罗斯区区3000多亿美元的财政规模，哪有这么大的腾挪空间？一万多亿的GDP总盘子，也没有多少余力。 而且，陷入僵局之后，俄罗斯面对的是一场不对称战争。力量对比是俄强乌弱，但是战争消耗正好颠倒。人家用几万美元的单兵作战武器，换你几百万、上千万美元的飞机坦克，以小搏大。 更何况乌克兰背后是北约，正在为乌克兰埋单。俄罗斯的财力和北约国家相差不止一个数量级。“毒刺”管够，毫无压力。 苏联能在阿富汗打十年，因为它有这个经济能力，可以把战争消耗控制在慢性出血的程度。而毗邻北约、拥有现代战争技能的乌克兰，是高配版的阿富汗，俄罗斯却是低配版的苏联。这场战争在俄罗斯的经济动脉上开了个洞。 更致命的是，俄罗斯面临的国际制裁，正在摧毁俄罗斯经济的造血能力。 04 被踢出全球经济体系的俄罗斯 俄罗斯遭遇的制裁手段前所未有，不是过去那种有限的抑制性手段，而是全面脱钩的毁灭性打击。 我在此前《俄罗斯的真正挑战，在另一个战场！》一文中已经做了分析。这里补充一些观点。 俄罗斯经济对外依存度很高，但是其经济体量在全球经济体系中比重不到2%。且俄罗斯经济增长在2012年后陷入长期停滞，低增长预期再加营商环境恶劣，导致市场吸引力不高。因此，禁用SWIFT等“外科手术切割”式的制裁手段出台后，各类的跨国企业弃之如敝履。 俄罗斯被“退群”，对全球宏观经济的长期前景影响有限。因此，欧美主导的国际经济制裁敢于迅速加码、不惜切割。 俄罗斯的全球经济影响力主要集中于石油天然气等资源类初级产品占有较高的市场份额，全球供应链会因此受到冲击，付出相应的调整成本。比如最近的“妖镍事件”就是俄镍断供的结果，油价创出历史新高也是如此。 这对西方国家制裁俄罗斯的决心是双重的。一方面对经济代价的顾虑，会一定程度上抑制制裁升级；另一方面，随着风险释放的“沉没成本”增长，制裁的经济顾虑会降低。目前看，强大民意压力下，制裁升级比想象中要快。美国总统拜登停止俄油进口的决定，出乎意料的快，朝野一致、民意支持，促使他提前动手。 而且，俄罗斯的资源优势并不会带来多少博弈优势。资源产品的替代供给只是时间问题，逐利的动力远胜地缘政治的动力。比如伊朗这样坚定的“盟友”，在对俄制裁升级后很快就增加了石油产量，还对美伊核协议表现得高度积极，急于替代俄油的心情溢于言表，真不知普京总统对此作何感想。随着俄罗斯的经济影响力因制裁而下降，它的“朋友圈”只会越来越小，处境越来越孤立。 全球经济战场上的俄罗斯，和乌克兰的战场上一样，在和时间赛跑。时间不是俄罗斯的朋友。 俄罗斯在两个战场上遭遇的危机，都是经济实力大幅缩水导致的。长期扮演与自身经济实力不相称的国际角色，俄罗斯透支了自身的经济，终于让“扮演苏联”的游戏难以为继。最明显的迹象是，普京发出了核威胁。整个冷战时代，苏联从未亮出过这张底牌，这不是强硬，而是技穷。 因此，无论最终俄乌之间的结局如何，俄罗斯的虚弱已经暴露无疑，即便从乌克兰战场全身而退，它的国际地位也不复从前。不再有对抗，只有彻底的孤立。西方制裁的长期化、全球经济体系对俄罗斯的排斥，不可避免。 不会有第三次世界大战，欧美不会对俄罗斯采取直接的军事行动，根本没有必要冒这样的风险。没有人想要毁灭、占领俄罗斯，既不可行，也无意义——俄罗斯在乌克兰的经历就是教训，此前美国在阿富汗、伊拉克也是如此。 隔离风险，靠经济手段足以实现。这是经济全球化时代的力量，俄罗斯对此没有抵抗的能力。 05 告别冷战，更要告别冷战思维 三十年来，“告别冷战”、“抛弃冷战思维”是国际社会的“流行语”。可是冷战最后的舞台，却被“特别军事行动”的微小火星烧掉了。在熊熊烈火中，真相不再被回避: 俄罗斯不是苏联，无力负担“苏联的遗产”。世上再无苏联，更没有“东西方两大阵营”对垒，只有在全球经济体系中的复杂博弈。这就是“告别冷战”的方式。 冷战早已结束，至今才真正告别。冷战思维可能还会持续一段时间。世界观的惯性，比真实世界的变化更久，这将是新时代门槛。 睿智如基辛格也不免于此。2014年，他说道：“关于乌克兰问题，我们讨论太多的是非此即彼的较量，乌克兰要么站在东边（俄罗斯）要么站在西边（北约）。但是对于乌克兰而言，要想生存、发展，不能倒向任何一边从而成为对抗另一边的马前卒，而应该成为双方的桥梁”。 这段话被很多人奉为圭臬，却没有发现其中的悖论：哪怕俄罗斯只具备是苏联三分之一的实力，对抗本来就不会在发生在乌克兰。那么，连乌克兰都选择了“向西去”，俄罗斯具备对抗的真实能力吗？ 乌克兰的“向西去”本来就不是冷战对抗的延续，而是冷战遗迹的最终清算。在乌克兰做出选择时，俄罗斯已经输了。 基辛格和其他冷战时代的智者，忽视了经济全球化的时代，国际竞争的游戏规则已经改变。经济实力和军事能力不能分开计算。经济弱、武力强的军事帝国失去了全球竞争的游戏资格，超出自身经济实力的“对抗”，只会加速失败的进程。 在这个时代，经济实力决定了军事能力，决定了国际政治影响力，经济实力才是国际地位的决定性因素。 国家的核心竞争力最终体现在全球经济体系中的重要性，最大失败就是被踢出全球经济体系，等待那些失败者的是忍受贫困与孤立的煎熬。因此，武力至上、忽视经济发展、拒绝全球化的冷战思维，是该被扫进历史垃圾堆了。","categories":[{"name":"News","slug":"News","permalink":"http://example.com/categories/News/"}],"tags":[]},{"title":"资讯阅读","slug":"Blog/资讯阅读","date":"2022-03-01T16:00:00.000Z","updated":"2022-03-22T04:30:03.508Z","comments":true,"path":"2022/03/02/Blog/资讯阅读/","link":"","permalink":"http://example.com/2022/03/02/Blog/%E8%B5%84%E8%AE%AF%E9%98%85%E8%AF%BB/","excerpt":"","text":"阅读熊猫搜书 wikihow你可以信赖的万事指南 美文美文网汇集以爱情,亲情,友情,人生为主题的伤感情感美文网站,内含经典美文,哲理美文,伤感励志等美文欣赏,提供短篇故事,心情随笔日记,优美散文精选,现代诗歌大全,表白情书范文,好词好句好段摘抄大全等读者文摘在线阅读 【小鸡词典】希望能把每一个流行语都记录下来，解释清楚。 因为这些流行语的解释里，包含的是一代人对一个时代的见解，和这个文化最最真切的历史 一个高质量的互联网信息网站Readhub每天三分钟的科技新闻聚合阅读，想读点有用的，就来这个网站，实时更新互联网动态，还支持读库在线阅读，没有广告，也没有自媒体乱七八糟的东西。 图灵社区成立于2005年6月，以策划出版高质量的科技书籍为核心业务，主要出版领域包括计算机、电子电气、数学统计、科普等，通过引进国际高水平的教材、专著，以及发掘国内优秀原创作品等途径，为目标读者提供一流的内容。 博客褪墨-时间管理褪墨-时间管理、个人提升、生活健康与习惯 Muscle Wiki健身网站 hexo-theme-zhaoohexo-theme-zhaoo, 简约主题 财经英为财情Investing.com_全球金融行情资讯专家|外汇,股票,期货,债券,数字货币行情和财经新闻 南方财富网,是一家以股票为主题的财富网站,提供全方位综合财经信息和金融市场资讯的平台。内容包括股票知识、股票行情、个股分析、个股点评、个股推荐、个股档案、个股、财经、股票、基金、外汇、行情、期货、权证、债券、港股、数据、投资理财 保险资讯 英语阅读的网站纽约时报 大西洋美国一个有着很长历史的杂志，就如同The New York Times 和the Economist一样的操作模式，文章分成许多类型，也是一个可以当作每日读物的好地方。The Atlantic不像一些新闻网一样字体太小或是排版拥挤容易有看错行的情况发生，它的网页整体看起来蛮舒适的。 feedly.com有用Flipboard的朋友应该很容易就能上手，可以通过订阅喜欢的频道来随时接收新闻和文章 vocabulary.com是一个很好用的单词学习应用。 路透社内容丰富、全面，不仅具有权威性并且语料新鲜、覆盖面广。可花二十分钟左右，选一篇自己有兴趣的文章阅读，以泛读为主进行阅读。对于生词的发音，可以用韦伯词典网站查询。不仅阅读水平和词汇量能增加，也可以积累地道的英文表达和素材，对于写作也很有帮助。 CNN TED EllloElllo网是英语听力在线实验室，有来自世界各地说英语的人的听力素材，主要聚焦在练习听力技能。 usingenglish285个免费语法、词汇练习讲义，注册后可以看其余222份讲义和语法练习题。 许多事情，许多东西专门针对英语学习者，按照物件类别分享资源，包括单词列表，mp3听力文件，还有语法、词汇等等。 苹果设备自带的网络公开课软件，课程以哈佛、麻省理工、牛津等英文课程为主，中文课程比较少，只有香港中文大学、香港科技大学、中山大学、西安交大、国家开放大学等不到十个大学提供中文内容，内容完全免费。 Commonlit BBC Learning English免费又好用的英语学习网站，从BBC Learning English你可以学习英文听力和阅读能力，并训练英语口说能力，累积增加英文单字片语，以及熟练英文文法与练习正确的发音。 其他文章来美国旅游，办了张美国银行卡","categories":[{"name":"Blog","slug":"Blog","permalink":"http://example.com/categories/Blog/"}],"tags":[]},{"title":"Hexo-theme-aomori颜色配色","slug":"Github/Hexo-theme-aomori颜色配色","date":"2022-03-01T16:00:00.000Z","updated":"2022-03-04T06:48:43.842Z","comments":true,"path":"2022/03/02/Github/Hexo-theme-aomori颜色配色/","link":"","permalink":"http://example.com/2022/03/02/Github/Hexo-theme-aomori%E9%A2%9C%E8%89%B2%E9%85%8D%E8%89%B2/","excerpt":"","text":"使用这个网站圆盘互补色进行搭配 原本的方案背景墙：rgb 240,243,246 58,72,88 底色：#fff 字体颜色 粗体颜色 pre的颜色 列表颜色 列表颜色 列表颜色 //背景墙 body &#123; background-color: &#125; //字体颜色： .post-inner-html&#123; color: &#125; // 原本的配色方案 :root &#123; --color-bg: #f0f3f6; //背景墙 --color-light: #119da4; //a标签链接颜色 --color-main: #13505b; //左引用柱颜色 --color-white: #ccc; //页面小标题颜色 --color-white-light: #fff; //底色 --color-black: #292525; --color-type: #3c4859; --color-post-main: #4c4e4d; //字体颜色 --color-post-mark: #ff0; --plyr-color-main: #119da4; &#125; 配置photothumbnail 缩略图photo 原图icon 字段参考 Boxiconsplace 地点","categories":[{"name":"Github","slug":"Github","permalink":"http://example.com/categories/Github/"}],"tags":[]},{"title":"乌克兰局势","slug":"News/乌克兰局势","date":"2022-02-28T16:00:00.000Z","updated":"2022-03-18T08:54:55.743Z","comments":true,"path":"2022/03/01/News/乌克兰局势/","link":"","permalink":"http://example.com/2022/03/01/News/%E4%B9%8C%E5%85%8B%E5%85%B0%E5%B1%80%E5%8A%BF/","excerpt":"【素材来自网络，侵权必删】 乌克兰局势2022.02.21当地时间21日晚，俄罗斯总统普京签署命令，承认乌克兰东部的“顿涅茨克人民共和国”和“卢甘斯克人民共和国”。同时签署了俄罗斯分别与这两个“共和国”的友好合作互助条约。","text":"【素材来自网络，侵权必删】 乌克兰局势2022.02.21当地时间21日晚，俄罗斯总统普京签署命令，承认乌克兰东部的“顿涅茨克人民共和国”和“卢甘斯克人民共和国”。同时签署了俄罗斯分别与这两个“共和国”的友好合作互助条约。 乌克兰总统泽连斯基与美国总统拜登讨论了俄罗斯承认顿涅茨克和卢甘斯克两地区独立性的问题，并计划与英国首相约翰逊通话。随后美国白宫新闻发言人珍·普萨基发表声明，针对普京签署承认顿涅茨克共和国和卢甘斯克共和国的命令作出回应。 声明表示： 美国已经预料到俄罗斯会采取这种行动，并准备立即作出反应，拜登将很快发布一项行政命令，禁止美国人在顿涅茨克和卢甘斯克地区进行新的投资、贸易和融资，该行政令还将授权对决定在这两个地区活动的人实施制裁。 美国国务院和财政部将很快提供更多细节，还将宣布与俄罗斯违反国际承诺有关的额外措施。声明中指出，即将宣布的额外措施是独立的，除了准备针对俄罗斯实施的经济制裁之外，美国正与盟国及包括乌克兰在内的伙伴密切协商，讨论俄罗斯在乌克兰边界“不断升级”冲突的问题以及下一步要采取的措施。 2022.02.22俄罗斯联邦委员会当地时间22日通过相关决议，准许俄罗斯总统在俄境外动用俄联邦武装力量。 2022.02.23综合俄罗斯《消息报》、俄新社刚刚报道，欧盟发布消息称，该组织23日正式通过对俄罗斯实施的制裁。 2022.02.24据塔斯社、财联社2月24日消息，俄罗斯总统普京决定在顿巴斯地区开展特别军事行动。 俄罗斯总统普京表示，美国已经越过了俄罗斯在北约扩张问题上的红线。俄罗斯计划让乌克兰非军事化。 乌克兰外长称普京对乌克兰发动了全面战争，乌克兰将进行自卫。 当地时间24日，俄罗斯媒体报道称，俄军已登陆乌克兰敖德萨。俄军已突破哈尔科夫州界。基辅与哈尔科夫乌军指挥所遭到火箭弹袭击。 乌克兰总统泽连斯基表示，乌克兰全境将进入战时状态。据乌克兰紧急情况部消息，乌克兰国民卫队司令部被摧毁。 俄罗斯卫星通讯社2月24日报道，俄罗斯国防部表示，俄罗斯军队的空袭摧毁了乌克兰武装部队74个军事基础设施目标。 据报道，俄罗斯国防部解释称，其中包括11个机场，3个指挥中心，一个乌克兰海军哨所，18个S-300雷达，以及乌克兰军队的Buk防空系统。 此前，乌克兰国家警察局表示，自当地时间24日起，俄罗斯军队共进行了203次袭击。该部门表示，战斗几乎一直在整个乌克兰领土上进行。 新华社布鲁塞尔2月24日电（记者任珂）北约秘书长斯托尔滕贝格24日说，北约无意向乌克兰派遣部队，但已启动联盟防御计划，并敦促俄罗斯立即停止在乌克兰的军事行动。美国白宫新闻秘书普萨基23日重申，美国不会与俄罗斯交战，也不会向乌克兰境内部署军队。 2022.02.25美国总统拜登当天下午就俄乌局势发表讲话。当被问及美俄两国关系时，拜登称“现在美俄两国关系已经完全破裂。” 据乌克兰国家通讯社25日报道，乌克兰总统泽连斯基已签署关于成立最高统帅部的法令。 俄罗斯外长拉夫罗夫表示，俄罗斯愿意就乌克兰问题进行谈判，只要乌克兰军队放下武器。","categories":[{"name":"News","slug":"News","permalink":"http://example.com/categories/News/"}],"tags":[]},{"title":"外围女","slug":"News/外围女","date":"2022-02-28T16:00:00.000Z","updated":"2022-03-05T06:03:52.922Z","comments":true,"path":"2022/03/01/News/外围女/","link":"","permalink":"http://example.com/2022/03/01/News/%E5%A4%96%E5%9B%B4%E5%A5%B3/","excerpt":"","text":"外围女一夜5000，月入10万的外围女，30岁之后都过着什么样的生活？ 今天聊个重口一点的话题，关于很多女生年轻的时候，都有可能会遇到的“那种捷径”。 “海天盛筵”的时代，“外围”虽然是个贬义词，但属于含金量偏高的那种。 通常是有那么点名气的模特，或者18线网红，女演员，本职工作之余赚一点游走在法律边缘的“外快”。 但今天，“外围”这个词已经有点降级的意思了，基本等同于“略有姿色，全职或者兼职出卖身体的年轻女生”。 坦白说，我确实接到过类似的咨询，有些初入社会的小女生听说这类“兼职”干得好可以月入六位数，早早实现财富自由，希望我给点建议。 我先把政治立场摆在前面：在我国，卖淫违法。 但我要讲的重点不是法律和道德层面的说教，我们就聊一聊这些小女生最关心的事，从职业生涯的角度说，这到底是是不是一份好工作，好到值得你铤而走险。 首先，“外围”到底普遍是个什么收入水平？ 如果是我们最初提到的，网红模特女演员那个级别的外围，说实话，以她们的长相配合半真半假的身份加成，一次标价都得几千上万起步，勤快点的话月入几十万，是有可能的。 我在网上也经常看到一些外围女秀转账记录，说什么打几千块钱都只是聊聊天，打几局游戏的酬劳。 我只能说，根据我查到的资料，大部分略有姿色的素人小女生，是什么行情？ 我随手打开了一个不太正规的招聘网站，看到某夜总会的招聘，日结也就是2000左右，还不排除老板画饼的可能性。 某些社交软件上面开的价也差不多：平均下来，1500到两三千。 当然，天道酬勤，就算是一两千，努努力也能月入好几万，不比打工996来钱快？ 这倒是没错，绝大多数20出头的年轻人，很难有机会以相对轻松的方式赚到这么多钱，从钱多事少的角度来说，这份工作似乎还不错。 但是格局打开一点，连互联网大厂员工都要担心35岁危机，我们找工作要不要考虑一下，这份工作的发展前景如何？ 20多岁的时候一曲红绡不知数，35岁之后，“外围女”的归宿都是什么？ 毕竟当外围，就是要源源不断地认识有钱人，跟有钱人玩的，万一运气好，就被他们看上了呢？ ……呃，这个万一，是不是有点太“万一”了？ 真要说奇遇级别，不排除有万分之一的外围女真的攀附上了有钱人，或者结婚，或者得到大额赠予从此财富自由，最高境界就是成为邓文迪。 但现实点说，大部分外围女的婚配是什么样的？ 按照常理，作为一个从事过类似职业的女性，她想结婚，通常还是得把这段历史藏一藏的。 要藏得万无一失，通常得换个城市，改头换面。 那问题就来了，她到一个完全陌生的新城市，通过什么途径认识婚配对象？ 要知道，她以前能接触到有钱人，那是风月场上，离了那个场所，她哪来的人脉呢？ 所以，当一个外围女离开了原本的“工作环境”，她很难有别的渠道再去认识真正优质的异性，她能找到的所谓“接盘侠”，一般也就是普通人。 从此就是重回普通人的生活，相夫教子。 站在被蒙在鼓里的男人角度可能挺生气的，老实人又没刨她祖坟，怎么就吃了这种哑巴亏。 但外围女就在这段婚姻里占便宜了吗？ 她还真不觉得。 她之前接触的可都是一掷千金的男人，过的是纸醉金迷的生活，接盘侠一个月给她上交的工资，未必有她一晚上开的几瓶洋酒贵。 这种落差，外围女的心里很难没有怨气。 可是有怨气又能怎么样呢？她能不结婚吗？ 也不是不行，搞事业也不失为一条出路。 那问题又来了，外围不同于一般的工作，有晋升渠道，有一年一度的加薪，还有猎头挖你跳槽。 外围吃的是绝对的青春饭，年纪大了，几乎是断崖式贬值，而且外围可以说是可替代性最高的职业，你不会永远20多岁，但永远有新的，20多岁的小姑娘涌入市场。 30多岁，甚至快40岁了还赖在“圈子”里，等于自绝生路。 转行，是仅有的选项。 有些女生可能非常熟悉这个行业，也积累了一定的“人脉”，就从台前转向幕后，从外围女变成妈妈桑，再去拉拢更年轻的女生入行。 也有更多的女生选择金盆洗手，拿这些年攒下来的钱做点小生意，跟人合伙开个小餐馆，小服装店之类的。 值得注意的是，她们攒下的钱通常不会太多。 虽然外围还算高薪职业，但这份工作背后的隐形成本极高。 说直观点，要保持竞争力，就得花大价钱保养自己的外形——昂贵的服饰，健身，医美都必不可少，甚至得“内外兼修”，插花红酒茶道高雅运动都要会一点，才能入得了更高级“客人”的眼。 另外，外围的工作压力也并不小，她们提供的不仅是性服务，而是在男人面前，完全被支配，被玩弄，被鄙夷的状态。 比我们在甲方面前装孙子累多了。 而且这份工作过于特殊，她们也很难跟别人倾诉苦闷，得到同情，仅有的宣泄方式，恐怕就是疯狂的，毫无节制的报复性消费。 我甚至见过和听过很多外围女，会拿着好不容易从客人那里赚到的钱，再去找和自己同行的“男公关”消费，弥补自己在男性“客人”那里受到的委屈和不公。 这么算下来，没到入不敷出的程度就不错了，最终能存下来作为转行启动资金的钱所剩无几，真就只能做做小本生意。 而且这生意还得跟人合伙做，毕竟外围女对创业，经商的了解，通常全部来自于“客人”酒后吹的牛逼。 以上这些，还都算是比较好的结局了。 还有一种最糟糕的结局是，一小部分外围女不仅没有存下来钱，没有生存技能，连找个男人结婚都做不到。 她只能一直浸淫在风月场里，年纪大了就任凭自己贬值。 “身价”从几千块钱跌落到几百块钱甚至更低，夜总会待不下去就转去路边的洗头房和按摩店，甚至站街拉客。 无限下坠。 最后一个问题： 前面不是提到绝大多数的外围是“兼职”吗？年纪大了没市场，做回本职工作不可以吗？ 相信我，真正踏入了外围这条路，就没什么本职工作可言了。 就像我们前面说的那样，20多岁刚毕业的年轻女生，996累死累活一个月可能也就赚个七八千，不如夜总会里两三天的收入。 两相比较，谁还愿意继续做“正经工作”？ 亦舒的小说《喜宝》也有个类似的情节，女大学生喜宝最初愿意被包养，是想筹钱去她梦寐以求的高校读书，但最后她沉迷于男人提供的物质生活，索性把学业都放弃掉了。 起初有些女生可能会认为，自己只是需要迅速得到一笔钱，做外围是走捷径。 但最后她会发现，习惯了赚快钱，捷径，就成了唯一的路。 她没有本职工作，也没有正常的工作技能了，从20多岁到30岁，这段普通年轻人最佳的人生增值期，外围女学到的只有风月场上取悦男人的本领。 被风月场驱逐之后，她才会意识到自己的人生走到了一个极其吊诡的境地： 看起来，她好像见识过同龄人从未见过的奢华，享受过高消费，见过（和睡过）远超自己阶层的男人。 但这一切没有什么真正属于自己，它们存在过唯一的意义，就是拉高了她对生活的阈值，赚多了块钱，就再也没法踏踏实实像普通人一样去工作，谋生。 即便她愿意，也没有留下任何正常的工作经验和谋生技能，能力与欲望之间，隔着天堑一样的巨大鸿沟。 镜花水月，幻梦一场。","categories":[{"name":"News","slug":"News","permalink":"http://example.com/categories/News/"}],"tags":[]},{"title":"北大西洋公约组织","slug":"Wiki/北大西洋公约组织","date":"2022-02-28T16:00:00.000Z","updated":"2022-03-05T02:53:04.537Z","comments":true,"path":"2022/03/01/Wiki/北大西洋公约组织/","link":"","permalink":"http://example.com/2022/03/01/Wiki/%E5%8C%97%E5%A4%A7%E8%A5%BF%E6%B4%8B%E5%85%AC%E7%BA%A6%E7%BB%84%E7%BB%87/","excerpt":"","text":"北大西洋公约组织北大西洋公约组织，简称北约组织或北约，是北美与欧洲国家为实现防卫协作而建立的一个国际军事集团组织，成立于1949年8月24日。总部位于比利时布鲁塞尔。 北约拥有大量核武器和常规部队，是西方的重要军事力量。这是二战后资本主义阵营军事上实现战略同盟的标志，是马歇尔计划在军事领域的延伸和发展，使美国得以控制欧盟的防务体系，是美国世界超级大国领导地位的标志。 截至2020年3月，北大西洋公约组织有30个成员国：比利时、冰岛、丹麦、德国、法国、荷兰、加拿大、卢森堡、美国、挪威、葡萄牙、土耳其、西班牙、希腊、意大利、英国、波兰、匈牙利、捷克、爱沙尼亚、拉脱维亚、立陶宛、斯洛伐克、斯洛文尼亚、罗马尼亚、保加利亚、阿尔巴尼亚、克罗地亚、黑山、北马其顿。","categories":[{"name":"Wiki","slug":"Wiki","permalink":"http://example.com/categories/Wiki/"}],"tags":[]},{"title":"Blog","slug":"Blog/Blog","date":"2022-02-27T16:00:00.000Z","updated":"2022-03-20T02:16:52.289Z","comments":true,"path":"2022/02/28/Blog/Blog/","link":"","permalink":"http://example.com/2022/02/28/Blog/Blog/","excerpt":"","text":"记录1.技术文档2.影视资源、磁力搜索、VIP解析3.编程、配色、生产力工具、软件下载4.音乐、壁纸、奇酷网站5.时政新闻6.手机试玩赚钱平台 阅读1.聚合杂闻2.年度周刊3.文章集选4.资讯阅读链接 轻阅读365资讯简报今日早报","categories":[{"name":"Blog","slug":"Blog","permalink":"http://example.com/categories/Blog/"}],"tags":[]},{"title":"Final Cut Pro 视频剪辑文档","slug":"Blog/Final Cut Pro 视频剪辑文档","date":"2022-02-27T16:00:00.000Z","updated":"2022-03-01T08:02:09.539Z","comments":true,"path":"2022/02/28/Blog/Final Cut Pro 视频剪辑文档/","link":"","permalink":"http://example.com/2022/02/28/Blog/Final%20Cut%20Pro%20%E8%A7%86%E9%A2%91%E5%89%AA%E8%BE%91%E6%96%87%E6%A1%A3/","excerpt":"","text":"字幕神器，语音转文字","categories":[{"name":"Blog","slug":"Blog","permalink":"http://example.com/categories/Blog/"}],"tags":[]},{"title":"年度周刊2022","slug":"Weekly/年度周刊2022","date":"2022-02-27T16:00:00.000Z","updated":"2022-03-24T04:46:16.681Z","comments":true,"path":"2022/02/28/Weekly/年度周刊2022/","link":"","permalink":"http://example.com/2022/02/28/Weekly/%E5%B9%B4%E5%BA%A6%E5%91%A8%E5%88%8A2022/","excerpt":"3月成年人最大的自律，就是控制自己去跟杠精辩论的欲望。 被窝段子 DecoHack 周刊为独立创造者提供独立见解，帮助你发现新产品方向，启动和完善你的项目。内容包含：新闻洞察、行业分析、文章推荐、工具分享、下饭视频。内容涉及：产品运营、市场分析、软件设计、技术开发、生活方式","text":"3月成年人最大的自律，就是控制自己去跟杠精辩论的欲望。 被窝段子 DecoHack 周刊为独立创造者提供独立见解，帮助你发现新产品方向，启动和完善你的项目。内容包含：新闻洞察、行业分析、文章推荐、工具分享、下饭视频。内容涉及：产品运营、市场分析、软件设计、技术开发、生活方式 1.为什么假新闻总有人相信？假新闻或者错误的观点，总有人相信的一个原因是，人们听到周围有人在谈论它们。 任何想法真正死亡，只有一个办法，就是不再有人谈论它。如果假新闻被不断重复，它就会被记住和相信。 因此，你不要去批评那些假新闻或坏想法，一旦你重复引用这些内容，它们就不会被忘记。而且，重复的次数越多，人们就越有可能相信它。 这称为克利尔重复定律（Clare’s Law of Recurrence）：相信某个想法的人数，与该想法在过去一年中被重复的次数成正比，即使该想法是明显错误的。 每次你攻击一个错误的想法，你就是在喂养你试图摧毁的怪物。正如一位推特员工写的：”每次你转发或引用你不喜欢的推文时，都会对它们有所帮助。” 你的时间最好花在支持好想法上面，而不是戳穿坏想法。不要浪费时间去解释，为什么坏想法是坏的。 一个坏想法最后消失的原因，就是它被遗忘了。这就是 Tyler Cowen 的名言：”花尽可能少的时间谈论其他人的错误。” 总之，让我们传播好想法，遗忘坏想法。 缓慢的、持久的、有纪律的努力，最终会导致令人难以置信的结果。 每当我无法忍受日常生活时，我就提醒自己，没有什么比每天坚持做下去更重要了。虽然我很难看到未来会怎样，但我知道持久性具有强大的威力，就像一句古老格言说的”继续去做”（keep doing） 友谊的唯一诀窍，就是找到比你更好的人，不是更聪明，而是更善良、更慷慨、更宽容的人。 各有各的活法，那些都是正确答案。 世上一切事物都不可能一帆风顺，人生路上，首须看远，别让生活的压力挤走快乐，真正的痛苦，没有人能与你分担。成长就是这样，痛并快乐着。 我们总以为来日方长，却忘了世事无常。 2.细节告诉你，身边的人谁最靠谱人有不为也，而后可以有为。如果让你用一个词来高度评价一个人，你会用哪个词？ 过去我们夸一个人用的最多的词，无非是“能力强”、“聪明”、“勤奋”、“自律”、“努力”…… 但渐渐地，夸一个人“靠谱”，成了最高级的评价。 股神巴菲特说：“靠谱，是比聪明更重要的品质。” 与不靠谱的人交往，是对时间、生命的极大浪费。 这8个细节告诉你，身边的人谁最靠谱。 1.守时守时，代表了对约定的重视，对时间的珍视。 靠谱之人，首先会守时。 他们会把自己的生活和工作按照时间表安排得井井有条，不会白白浪费自己和他人的时间。 一个总迟到的人，会把他人对自己的信任一点点消磨耗尽。因为他不仅消耗了别人的时间成本，耽误了事情的进程，还让别人意识到他的随心所欲，不讲原则，缺乏契约意识，随之把他列入“不靠谱”之列。 2.不占小便宜 作家菜冲曾说过一句话： “早先拿去的，回头还要加倍偿付。佛教里叫因果循环，统计学叫均值回归，股市叫盈亏同源，江湖术语叫迟早要还的。” 爱占小便宜的人，他们喜欢顺手牵羊，锱铢必较，吃不得眼前亏。 一时间看来，确实获得了一些小利益和实惠，但最后可能因而失去了做人的诚信与尊严，时间长了就没有人再愿意跟他交往了。 真正靠谱的人，永远不会为了一些蝇头小利汲汲营营，更不会处处揩油算计。 他们喜欢慷慨地帮助别人，不问回报。 他们深刻懂得，自己想要的东西，自己努力获得才算数。 3.收到会回复 生活中经常会遇到这样一种人： 你通知工作，他迟迟不回复，导致你不知道任务是否传达成功； 你找对方咨询一个事情，他仿佛没看见你的信息，但下次他有求于你，就假装什么事情都没发生过一般，又来找你帮忙。 他们最容易被列入不靠谱的行列。 收到请回复，即使在忙，也最好先说一声，这看似是一件很小的事情，但是也从细节之处体现一个人是否靠谱。 一个会认真回复他人信息的人，一定是一个有责任心、有礼貌、很靠谱的人。 4.说到做到 当问及一个人是否靠谱的细节时，大家提到最多的一定是说到做到。 答应孩子的事情，就一定要做到。 否则不仅损耗他对你的信任，对他的责任心的培养也极其不利。 给他人的承诺也一定要兑现。 当你答应了别人的请求时，就意味着你身上多了一份责任，一份来自于对方的殷殷期盼。 答应自己的事情也一定要做到。 很多计划已久的事情，总是被自己找各种借口拖延下去，这其实是一种对自己不负责任的行为，到最后可能会陷入一个越来越迷茫的怪圈。 诺不轻许，故我不负人。 不管是对自己还是对他人，做承诺之前，一定要考虑清楚，是否能给出承诺。 若不能，坦诚地解释原因，然后优雅地拒绝； 如果答应了，无论过程有多困难，即便是会损害到自己的利益，也一定要兑现。 5.不吹嘘 孔子说：“君子欲讷于言而敏于行。” 意思就是，靠谱的人，说话谨慎，行动敏捷。 再换句话说，就是嘴上不吹嘘，踏实做好自己的事情。 靠谱的人，低调、诚恳。 他们靠自己的才能和努力，兢兢业业、脚踏实地来获取事业上的成功，收获威信和他人的信任，从来不会吹嘘自己有多厉害。 而喜好吹嘘的人，刚开始接触时，可能容易让人觉得他无所不能，对他有所好感，但几番接触下来，尤其是遇到实实在在的问题时，他的行为或者做事的效果与他之前夸下的海口严重偏离。 踏踏实实做人、实实在在做事，有多大的能力说多大的事儿，这样的人，才经得起时间的考验。 6.情绪稳定 情绪稳定，不仅是一种高级的情商，更是一种靠谱的能力。 在心理学家看来，人在愤怒的时候，容易出现“意识狭窄”现象，会死盯着负面信息不放，无限放大。 一个情绪不稳定的人，在心情不好的时候，会习惯性耷拉着一张脸，甚至迁怒身边的人，搞得身边的人不敢正常交流。 还有些人，情绪不稳定的时候，满脑子想着不开心的事情，工作很难集中精力，不仅耽误自己，也影响整个团队的进程。 每个人都会有心情不好的时候，但靠谱的人，不会放任自己沉溺在或悲或怒的情绪里，而是会自己想办法消化负能量，以一种积极饱满向上的态度，对待工作，面对身边的人。 7.有底线 《孟子》中提到：“人有不为也，而后可以有为。” 靠谱的人，心里都有一条红线，知道哪些事该做，哪些事坚决不做。 他们审时度势，克制贪欲，有所取舍，懂得权衡，不会逞一时之快或只顾眼前小利。 无底线之人，他们常常看见小利就红了眼，不择手段来获得想要的一切。 殊不知，过犹不及，最终他们不仅伤及无辜、失了人心，而且也赔上了自己的前程。 8.执行力强 以上提到的，可以说是靠谱之人的软实力，而有较强的执行力，能够处理一定复杂的事务，则是靠谱之人的硬核所在。 靠谱的人，有能力，有担当，不拖别人的后腿，与之相交，省心又省力。 靠谱的人，不仅能完美地处理好别人交办的事情，还能根据需求，主动去找事情做。 别人在你身上看到了确定性，也看到了惊喜，也因此产生了信任。 做一个靠谱的成年人，当困难来临的时候，希望你有足够的底气和能力对周围的人说：“别担心，有我。” 3.One punch 一拳超人 181话","categories":[{"name":"Weekly","slug":"Weekly","permalink":"http://example.com/categories/Weekly/"}],"tags":[]},{"title":"Excerpt 90：使用vpn犯罪吗","slug":"Article/90：使用vpn犯罪吗","date":"2022-02-26T16:00:00.000Z","updated":"2022-03-03T11:54:15.954Z","comments":true,"path":"2022/02/27/Article/90：使用vpn犯罪吗/","link":"","permalink":"http://example.com/2022/02/27/Article/90%EF%BC%9A%E4%BD%BF%E7%94%A8vpn%E7%8A%AF%E7%BD%AA%E5%90%97/","excerpt":"一、使用vpn犯罪吗1、使用vpn是否违法，需要结合使用vpn从事的活动来判断是否犯罪，一定不能发布违反国家的法律的言论、文章等等信息。","text":"一、使用vpn犯罪吗1、使用vpn是否违法，需要结合使用vpn从事的活动来判断是否犯罪，一定不能发布违反国家的法律的言论、文章等等信息。 2、2017年，工信部下发了《工业和信息化部关于清理规范互联网网络接入服务市场的通知》。在全国范围内开展清理规范工作，依法查处无证经营、超范围经营、“层层转租”等违法行为，切实落实企业主体责任，加强经营许可和接入资源的管理，强化网络信息安全管理，维护公平有序的市场秩序，促进行业健康发展。在我国，未经电信主管部门批准，不得自行建立或租用专线(含虚拟专用网络 VPN)等其他信道开展跨境经营活动。 3、法律规定：《互联网信息服务管理办法》第六条 互联网信息服务分为经营性和非经营性两类。 从事经营性互联网信息服务，应当获得电信主管部门颁发的互联网信息服务增值电信业务经营许可;从事非经营性互联网信息服务，应当在电信主管部门备案。未取得许可或者未履行备案手续的，不得从事互联网信息服务。 二、互联网违法包括哪些1，在计算机网络上实施的犯罪种类：非法侵入计算机信息系统罪;破坏计算机信息系统罪。表现形式有：袭击网站;在线传播计算机病毒。 2，利用计算机网络实施的犯罪种类：利用计算机实施金融诈骗罪;利用计算机实施盗窃罪;利用计算机实施贪污、挪用公款罪; 利用计算机实施其他犯罪：电子讹诈;网上走私;网上非法交易;虚假广告;网上洗钱;网上诈骗;电子盗窃;网上毁损商誉;在线侮辱、毁谤;网上侵犯商业秘密;在线间谍;网上刺探、提供国家机密的犯罪。 《互联网信息服务管理办法》第十五条 互联网信息服务提供者不得制作、复制、发布、传播含有下列内容的信息： (一)反对宪法所确定的基本原则的; (二)危害国家安全，泄露国家秘密，颠覆，破坏国家统一的; (三)损害国家荣誉和利益的; (四)煽动民族仇恨、民族歧视，破坏民族团结的; (五)破坏国家宗教政策，宣扬教和封建迷信的; (六)散布谣言，扰乱社会秩序，破坏社会稳定的; (七)散布、赌博、暴力、凶杀、恐怖或者教唆犯罪的; (八)侮辱或者诽谤他人，侵害他人合法权益的; (九)含有法律、行政法规禁止的其他内容的。 我们可以了解到未经电信主管部门批准，不得自行建立或租用专线(含虚拟专用网络 VPN)等其他信道开展跨境经营活动。 案例： 注意!在国内,自己私下使用VPN是否违法?","categories":[{"name":"Article","slug":"Article","permalink":"http://example.com/categories/Article/"}],"tags":[]},{"title":"Github和Hexo操作文档","slug":"Github/Github操作文档","date":"2022-02-26T16:00:00.000Z","updated":"2022-03-24T07:47:03.470Z","comments":true,"path":"2022/02/27/Github/Github操作文档/","link":"","permalink":"http://example.com/2022/02/27/Github/Github%E6%93%8D%E4%BD%9C%E6%96%87%E6%A1%A3/","excerpt":"Github搜索指南 搜百科大全，搜索优秀的资源。xxx awesome 找例子 xxx simple 找空项目架子 xxx starter 找技术教程 django tutorial","text":"Github搜索指南 搜百科大全，搜索优秀的资源。xxx awesome 找例子 xxx simple 找空项目架子 xxx starter 找技术教程 django tutorial Hexo1.Hexo部署Github建立密钥通信 打开.ssh使用 ssh-keygen 生成密钥，然后一直回车 cd ~/.ssh ssh-keygen -t rsa -C &quot;your_email@example.com&quot; 密钥生成成功 Your identification has been saved in /home/you/.ssh/id_rsa. Your public key has been saved in /home/you/.ssh/id_rsa.pub. The key fingerprint is: …………………此处是密钥内容…………………… your_email@example.com 在 chengjianhua.github.io 的首页菜单栏中点击 Settings –&gt; Deploy keys –&gt; Add deploy key，然后将生成的 id_rsa.pub 中的内容全选(全部)复制到 key 输入框中，然后点击 Add key 完成添加公钥。 cat id_rsa.pub 检查配置是否成功 ssh -T git@github.com 如果出现以下内容即表示配置完成并且成功！ Hi username! You&#39;ve successfully authenticated, but GitHub does not provide shell access. hexo 的配置文件 config.yml 中的 deploy 属性。 deploy: type: git repo: git@github.com:username/username.github.io.git branch: master 错误：fatal: unable to access fatal: unable to access ‘https://github.com/blog20170623/blog20170623.github.io/&#39;: LibreSSL SSL_connect: SSL_ERROR_SYSCALL in connection to github.com:443 这个问题就是SSH Key需要重新更新了。就是上面可以解决这个的问题 出现了这个错误之后，百度谷歌之后，有很多文章描述这种错误的，其他方法我并没有试一试，写的并不清楚，我只找到我能够看得懂试，发现完全有用。 2.Hexo常用插件Hexo 提供了快速方便的一键部署功能，让您只需一条命令就能将网站部署到服务器上。需要插件deployer-git hexo deploy npm install hexo-deployer-git --save 文章置顶 hexo-generator-index是官方默认的博客文章排序插件，在我们安装hexo时就存在该插件了，hexo博客正常运行离不开该插件。该插件实现了按文章发表时间倒序排序，没有实现文件置顶功能。 hexo-generator-index-pin-top是一个文章置顶功能插件，在置顶之外实现文章按发表时间倒序功能，该插件用于替换hexo-generator-index插件 npm install hexo-generator-index-pin-top –save npm uninstall hexo-generator-index –save 添加 RSS 订阅支持 npm install hexo-generator-feed --save 在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项： feed: type: atom path: atom.xml limit: 20 hub: content: content_limit: 140 content_limit_delim: &#39; &#39; order_by: -date Hexo deploy部署Spawn failed错误Error: Spawn failed 问题大多是因为git进行push或者hexo d的时候改变了一些.deploy_git文件下的内容 remote: Resolving deltas: 100% (1013/1013), completed with 115 local objects. remote: error: Trace: 65175cbb3798a43f8f9009d854253cf6232469de71dc52c05baaaae7f071bc4d remote: error: See http://git.io/iEPt8g for more information. remote: error: File images/Video/light hunter By An9Angel.mp4 is 134.31 MB; this exceeds GitHub&#39;s file size limit of 100.00 MB remote: error: GH001: Large files detected. You may want to try Git Large File Storage - https://git-lfs.github.com. To github.com:blogspace170623/blog20170623.github.io.git ! [remote rejected] HEAD -&gt; gh-pages (pre-receive hook declined) error: failed to push some refs to &#39;github.com:blogspace170623/blog20170623.github.io.git&#39; FATAL &#123; err: Error: Spawn failed at ChildProcess.&lt;anonymous&gt; (/Users/yaolaoban/Work/Hexo/blog/node_modules/hexo-util/lib/spawn.js:51:21) at ChildProcess.emit (node:events:520:28) at Process.ChildProcess._handle.onexit (node:internal/child_process:291:12) &#123; 解决办法： cd /hexo/blog/ ls -al # 显示出所以文件包括隐藏目录.deploy_git rm -rf .deploy_git/ jul-853","categories":[{"name":"Github","slug":"Github","permalink":"http://example.com/categories/Github/"}],"tags":[]},{"title":"Excerpt 89：《金瓶梅》最露骨的8句话，识透人性，说透人生","slug":"Article/89：《金瓶梅》最露骨的8句话，识透人性，说透人生","date":"2022-02-19T16:00:00.000Z","updated":"2022-03-03T11:58:41.363Z","comments":true,"path":"2022/02/20/Article/89：《金瓶梅》最露骨的8句话，识透人性，说透人生/","link":"","permalink":"http://example.com/2022/02/20/Article/89%EF%BC%9A%E3%80%8A%E9%87%91%E7%93%B6%E6%A2%85%E3%80%8B%E6%9C%80%E9%9C%B2%E9%AA%A8%E7%9A%848%E5%8F%A5%E8%AF%9D%EF%BC%8C%E8%AF%86%E9%80%8F%E4%BA%BA%E6%80%A7%EF%BC%8C%E8%AF%B4%E9%80%8F%E4%BA%BA%E7%94%9F/","excerpt":"","text":"这部被誉为“第一奇书”的小说里，不写帝王将相的家国情仇，也不写才子佳人的爱恨离合。它只用粗俗的市井俚语，讲述普通的烟火生活。 可在蝇营狗苟里暴露出来的真实人性，真实到令人触目惊心。 书中有八句话，文字浅白，却意味深长，道破了人生真相。每一句，都值得反复咀嚼。 祸患每从勉强得 烦恼皆因不忍生西门庆的后宅里，得宠最久的是潘金莲，可戾气最重的也是潘金莲。 她几乎出口就是骂人。 骂妓女不知廉耻，骂小厮捧高踩低，骂其他妻妾行止不端，骂李瓶儿借儿子争宠…… 然而说到底，不过是对自己得不到、做不成的不甘和愤怒。 其实人这一生，哪能事事尽如人意。 总有沟壑难平的欲望，总有求而不得的感情。 有时候，你越是努力，越是痛苦，越是强求，越是煎熬。 与其执念如此，反不如放宽心神，接受自己无法做到全知全能，抬起双眼，去看大千世界里的更多精彩。 把执念放下了，心就快乐了。 不如意事常八九 可与人言无二三身为正房太太，吴月娘看似风光无限，可日子并不顺心。 丈夫贪花好色，小妾争风吃醋，下人各怀鬼胎。 作为当家人，她每天有操不完的心，怄不完的气。 有一次，潘金莲蓄意挑衅，吴月娘忍无可忍，与之大吵一架，不小心动了胎气。 她渴望来自亲人的安慰，可丈夫只用空言哄劝，转头又去宠幸潘金莲，娘家嫂子反倒责怪于她，说月娘的行为让她处境尴尬。 这是她最亲近的两个人，却都不理解她的真正忧伤，也无人替她排忧解难。 其实，我们的生活也是如此，身边貌似有很多朋友，但还是感觉自己活在孤岛。 各有各的艰难苦楚，却也各有各的偏颇执念。 这世上，没有人能真正对别人感同身受，每个人都在自己的世界里独自悲欢。 唯有坚韧内心，学会自我排解，才能坚强地走过人生的泥泞。 金逢火炼方知色 人与财交便见心应伯爵等人是西门庆的结义兄弟，常跟着他白吃白喝。 有一日，妓女李桂姐看不过眼，当面讥讽。 几人抹不开面子，只得凑了几钱银子回请西门庆。 却又是当场狂吃，又是偷盗李桂姐家的摆设，恨不得付出一分，立刻收回十分。 小小一顿饭，尽显几人心地的凉薄。 果然西门庆一死，应伯爵等人立刻投奔他的继任者，还帮着新主人谋算西门庆的遗孀。 所谓兄弟结义，到头来抵不过银钱几两。 我们常常说，钱财如粪土，情谊值千金，但情谊有时会被伪装，钱才是真实人性的试金石。 贪婪的人永远见利忘义，善良的人总想援手他人。 有人借钱不还，抵死相赖，也有人坚守信义，即使身处困境，也不肯亏欠他人。 一个人的钱品，几乎就可以等同于他的人品。 能和你好好谈钱的人，才是值得深交的人。 前车倒了千千辆 后车到了亦如然作为邻居和结义兄弟，西门庆亲眼见证，并一手推动了花子虚家的败落。 他利用花子虚的贪花好色，趁虚而入勾引其妻，又利用花子虚的轻信，以打点官司为名，吞没了花家大半财产。 计谋得逞后，西门庆洋洋得意，却没考虑到，自己也有这两样缺点，还比花子虚更加严重。 果然西门庆死后不久，早就对他的滥情心怀不满的妻妾们纷纷离去，无一人肯留下守节。 被他重用的伙计、恶奴恩将仇报，大肆吞没家产，西门家一落千丈。 这世间最难解的迷局就是，人总在重复别人犯过的错误。 明明看过纵欲伤身的报道，却依然心怀侥幸，毫无节制玩游戏刷视频，直到染上重病，才悔不当初。 明明听过中年危机的悲惨下场，却依然随波逐流不思进取，直到生活的暴击降临，才痛哭流涕。 可人生已经耽误，伤害已经造成，那些浪费的时光，错过的幸福，永远不会回来。 所以，请一定记住马修·萨伊德的话： “多从别人的错误中吸取教训，毕竟你没那么长寿，不可能把自己所有错误都犯一遍。” 是非终日有 不听自然无西门府中，妻妾互相争锋，下人彼此陷害，人人在背后议论别人，同时也被别人议论。 唯一的例外是孟玉楼。 纵观整部《金瓶梅》，很少看到有人传播她的流言蜚语。 难道是众人对她特别厚待？ 可书中明明提到，妓女李桂姐只是偶然进府聊天，就在背后诋毁孟玉楼。 所以更大的可能性是，也有人对孟玉楼说短流长，但她不在乎，不解释，更不因此影响心情。 因为她自己也常和潘金莲分享八卦，很明白这些说闲话的无聊。 她见识过潘金莲无中生有的诽谤，所以很清楚一个人无论再周到，也不可能取悦所有人。 有人的地方就有是非，有利益的地方就有冲突。 人人都站在自己的立场上解读别人，人人都在用自己的利益去要求别人。 你不可能符合每个人的喜好，满足每个人的需求，也没能力控制所有人的嘴巴。 只能立定本心，做到问心无愧。 尽好本分，便能坦荡心安。 任他谣言如雨，我只当过耳清风。 毕竟日子不在别人嘴里，而在自己的生活里。 贱里买来贱里卖 容易得来容易舍作为西门庆的女婿，陈敬济一出生，就站在很多人终生难以企及的高度。 他是官宦子弟，从小享受惯了锦衣玉食。 家族败落后，岳父西门庆继续庇护他，还一度将他当成继承人培养。 陈敬济只需按部就班，学生意，学交际，就有实实在在的锦绣前程。 可他却只知道贪图享乐，偷情私会，以至于几年后被赶出西门府时，依然不会经营。 短短时间，陈敬济将家业败个精光，一度落魄到沿街乞讨，任人欺侮。 一手好牌，打个稀烂。 契科夫说：“轻易得到的东西往往不被珍惜。” 因为没有体会过努力中的艰辛，就感受不到收获时的幸福。 一件事物的价值，不仅取决于它本身的价值，还包括我们为之付出的汗水和心血，为之熬煎的所有日日夜夜。 付出越多，价值越重，得到越难，越倍加珍惜。 这道理，对物品适用，对事业适用，对爱情同样适用。 有心无相，相逐心生 有相无心，相随心往第二十九回中，西门庆找人占卜了妻妾们的命运。 有趣的是，凡是面相端正，举止稳重的女子，比如吴月娘和孟玉楼，都被批为好命。 而举止轻浮、五官有“反”相的潘金莲和孙雪娥，则被批了歹命。 果然没过几年，潘、孙两人死于非命，吴月娘和孟玉楼平平稳稳，安享余生。 看似巧合，细究起来却颇有深意。 吴月娘、孟玉楼行事正派，处处与人为善，也会被别人善待。 而潘金莲不顾伦常一味好淫，孙雪娥贪图小利刻薄对人，她俩常常损人利己，就免不了被人报复。 常言说的好，先天的美丑由父母，后天的面相靠自己。 一个人有什么样的心性，就会成就什么样的面相。 一个人有什么样的面相，又影响了别人相待的态度。 相貌善的人，人人乐于亲近，相貌恶的人，人人避而远之。 如果想在余生有个好命运，一定要修养好身心，端正品行。 三寸气在千般用 一旦无常万事休几百年来，西门庆的“色中饿鬼”形象深入人心，可换一个角度却发现，他还是个胸怀大志的奋斗者。 西门庆用婚姻快速敛财，花重金结交权贵，只几年时间，便从小老板，变成本城首富、朝廷高官。 随着地位的提升，他的生活也日趋奢靡，可正在他雄心勃勃的时候，不幸染上重病身亡。 他死后，小妾纷纷改嫁，朋友改换门庭。 泼天家财，被伙计、家奴明偷暗盗，一生努力化为流水。 这结局令人唏嘘，却更令人警醒。 看多了身边的人被欲望裹挟，拼命追逐更昂贵的事物，更虚荣的生活，还美其名曰享受人生。 于是内卷起来毫无止境，透支健康变本加厉。 直到有一天病痛缠身，不得不拿出来钱来换命，才幡然醒悟，辛苦多年，什么也没留住。 《增广贤文》早就说过：“良田千顷，不过一日三餐。广厦万间，只睡卧榻三尺”。 人生需要的东西，其实并不太多，那些得到却用不上的物质，到头来都成了累赘。 不如看淡欲望，好好生活。 《金瓶梅》的故事虽已过去数百年，其中的赤裸裸的人性浮世绘却依然历历在目。 欲望依然无穷无尽，争斗仍旧俯拾皆是，人人都在艰难求存，在得失利弊中备受煎熬。 可趋善避恶，永远是生而为人的底线。 愿今天的八句话，能帮你读懂人性，从此立定本心，光明行事。","categories":[{"name":"Article","slug":"Article","permalink":"http://example.com/categories/Article/"}],"tags":[]},{"title":"Excerpt 88：清单的作用","slug":"Article/88：清单的作用","date":"2022-02-09T16:00:00.000Z","updated":"2022-03-06T01:36:12.946Z","comments":true,"path":"2022/02/10/Article/88：清单的作用/","link":"","permalink":"http://example.com/2022/02/10/Article/88%EF%BC%9A%E6%B8%85%E5%8D%95%E7%9A%84%E4%BD%9C%E7%94%A8/","excerpt":"","text":"清单的作用第二次世界大战之前，美国陆军航空兵测试新的轰炸机，其中有一个机型是波音公司的299型轰炸机。 这种飞机在工程技术上非常领先，比现有的轰炸机可以多携带五倍的炸弹，而且飞得更快更远。 但是，1935年10月30日的首次试飞中，这架飞机坠毁了。 根据事后的调查，飞机的设备运行正常，但是由于控制仪表太多太复杂，飞行员出了差错，忘记了释放升降舵的锁定装置。调查报告的结论就是一句话：”一个人操作这架飞机太难了。” 美国军方不得已，要求波音公司更改设计，放弃部分性能，让操作变得更简单。 后来，随着战争局势日益紧张，军方心里还是念念不忘这架轰炸机的性能。他们又从波音公司找来最后几架库存机，交给一组试飞员试图找到一种方法，可以安全地驾驶这架飞机，不会出现事故。 最后找到的方法，就是列出一个操作清单，要求所有飞行员严格按照清单，完成每一步操作：检查仪表、释放刹车、关闭门窗、解锁控制装置等等。 很奇怪，就是这么一个简单的清单，一切就变了。试飞员总共飞行了180万英里，没有发生任何事故，于是军方订购了数千架这种飞机，后来改称为 B-17 轰炸机，成为第二次世界大战之中美军的主力轰炸机。 一张卡片大小的清单，就这样让美国军队在二战中获得了决定性的空中优势。 这告诉我们，如果遇到复杂的任务，不妨列出一张清单，按顺序列出每一个步骤，这会大大降低复杂性。","categories":[],"tags":[]},{"title":"Python时间和日期","slug":"Web/Python时间和日期","date":"2021-11-07T16:00:00.000Z","updated":"2021-11-09T02:36:33.000Z","comments":true,"path":"2021/11/08/Web/Python时间和日期/","link":"","permalink":"http://example.com/2021/11/08/Web/Python%E6%97%B6%E9%97%B4%E5%92%8C%E6%97%A5%E6%9C%9F/","excerpt":"Python程序可以通过多种方式处理日期和时间。日期格式之间的转换是计算机常见问题。Python的时间(time)和日历(calendar)模块可用于跟踪日期和时间。 本篇幅收录： 1.获取当前日期datetime.date.today()【获取当前时间，包括日期和时间datetime.datetime.now()】2.在给定的两个日期之间，计算出天数【计算当天两个时间之间相差多少小时】datetime.datetime(2018, 10, 18)。3.计算两个时间之间的时间戳4.从时间戳中返回时间元组time.localtime()5.接收时间元组并按格式显示时间time.strftime()","text":"Python程序可以通过多种方式处理日期和时间。日期格式之间的转换是计算机常见问题。Python的时间(time)和日历(calendar)模块可用于跟踪日期和时间。 本篇幅收录： 1.获取当前日期datetime.date.today()【获取当前时间，包括日期和时间datetime.datetime.now()】2.在给定的两个日期之间，计算出天数【计算当天两个时间之间相差多少小时】datetime.datetime(2018, 10, 18)。3.计算两个时间之间的时间戳4.从时间戳中返回时间元组time.localtime()5.接收时间元组并按格式显示时间time.strftime() 当前日期：计算两个给定日期之间的天数： import time import datetime ## 当前日期 curdate = datetime.date.today() print (&quot;curdate = &quot;, curdate) #打印 curdate = 2021-10-21 curdate = datetime.datetime.now() print (&quot;curdate = &quot;, curdate) #打印 curdate = 2021-10-21 13:47:31.013480 ## 计算两个给定日期之间的天数 d1 = datetime.datetime(2018, 10, 18) d2 = datetime.datetime(2017, 12, 31) print ( (d1 - d2).days) # 291 获取两个日期时间的时间差： # 年月日时分秒 t = (datetime.datetime(2019,1,13,12,0,0) - datetime.datetime.now()).total_seconds() print (&quot;t = &quot;, t) ## 输出结果 t = 49367780.076406 t = (datetime.datetime(2019,1,13,12,0,0) - datetime.datetime(2019,1,13,11,0,0)).total_seconds() x = t/3600 print (&quot;t = &quot;, x) total_seconds：来获取准确的时间差，并将时间差转换为秒 Python中有提供与日期和时间相关的4个模块。它们分别是： 模块 说明 time time是一个仅包含与日期和时间相关的函数和常量的模块 datetime datetime是一个使用面向对象编程设计的模块，可以在Python中使用日期和时间。它定义了几个表示日期和时间的类。 calendar 日历是一个提供函数的模块，以及与Calendar相关的几个类，它们支持将日历映像生成为text，html，…. locale 该模块包含用于格式化或基于区域设置分析日期和时间的函数。 time模块中的time()函数返回从1970年1月1日上午12点开始的秒数。也叫时间戳ticks import time; # Seconds ticks = time.time() time模块中的localtime()接收时间戳并返回一个具有九个项目的时间元组。 import time; localtime = time.localtime(time.time()) print (&quot;Local current time :&quot;, localtime) ## 打印 Local current time : time.struct_time(tm_year=2017, tm_mon=6, tm_mday=20, tm_hour=23, tm_min=9, tm_sec=36, tm_wday=1, tm_yday=171, tm_isdst=0) time.strftime(fmt[,tupletime])接收以时间元组，按照fmt决定的格式表示的当地时间，例： time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.localtime()) print (curtime) See also Python时间和日期","categories":[{"name":"Web","slug":"Web","permalink":"http://example.com/categories/Web/"}],"tags":[]},{"title":"Python文件和异常","slug":"Web/Python文件和异常","date":"2021-11-01T16:00:00.000Z","updated":"2021-11-03T05:31:10.000Z","comments":true,"path":"2021/11/02/Web/Python文件和异常/","link":"","permalink":"http://example.com/2021/11/02/Web/Python%E6%96%87%E4%BB%B6%E5%92%8C%E5%BC%82%E5%B8%B8/","excerpt":"本章只讲述所有基本的的I/O函数，更多函数请参考Python标准文档。","text":"本章只讲述所有基本的的I/O函数，更多函数请参考Python标准文档。 文件操作键盘输入 在Python 3中，不建议使用raw_input()函数。 input()函数可以从键盘读取数并作为字符串类型，而不管它是否用引号括起来(“或”“)。 input会假设你的输入是一个有效的Python表达式，并返回运算结果。 打开关闭文件打开文件 在读取或写入文件之前，必须使用Python的内置open()函数打开文件。此函数创建一个文件对象，该对象将用于调用与其相关联的其他支持方法。 语法： file object = open(file_name [, access_mode][, buffering]) file_name - file_name参数是一个字符串值，指定要访问的文件的名称。 access_mode - access_mode确定文件打开的模式，即读取，写入，追加等。可能的值的完整列表如下表所示。 这是一个可选参数，默认文件访问模式为(r - 也就是只读)。buffering - 如果buffering值设置为0，则不会发生缓冲。 如果缓冲值buffering为1，则在访问文件时执行行缓冲。如果将缓冲值buffering指定为大于1的整数，则使用指定的缓冲区大小执行缓冲操作。如果为负，则缓冲区大小为系统默认值(默认行为)。 不同模式打开文件的完全列表： 在使用open函数时，指定好带路径的文件名（可以使用相对路径或绝对路径）并将文件模式设置为&#39;r&#39;（如果不指定，默认值也是&#39;r&#39;），然后通过encoding参数指定编码（如果不指定，默认值是None，那么在读取文件时使用的是操作系统默认的编码）。 如果不能保证保存文件时使用的编码方式与encoding参数指定的编码方式是一致的，那么就可能因无法解码字符而导致读取失败。下面的例子演示了如何读取一个纯文本文件。 def main(): f = open(&#39;致橡树.txt&#39;, &#39;r&#39;, encoding=&#39;utf-8&#39;) print(f.read()) f.close() if __name__ == &#39;__main__&#39;: main() 请注意上面的代码，如果open函数指定的文件并不存在或者无法打开，那么将引发异常状况导致程序崩溃。 为了让代码有一定的健壮性和容错性，我们可以使用Python的异常机制对可能在运行时发生状况的代码进行适当的处理，如下所示： def main(): f = None try: f = open(&#39;致橡树.txt&#39;, &#39;r&#39;, encoding=&#39;utf-8&#39;) print(f.read()) except FileNotFoundError: print(&#39;无法打开指定的文件!&#39;) except LookupError: print(&#39;指定了未知的编码!&#39;) except UnicodeDecodeError: print(&#39;读取文件时解码错误!&#39;) finally: if f: f.close() if __name__ == &#39;__main__&#39;: main() 在Python中，我们可以将那些在运行时可能会出现状况的代码放在try代码块中，在try代码块的后面可以跟上一个或多个except来捕获可能出现的异常状况。 例如在上面读取文件的过程中： 1.文件找不到会引发FileNotFoundError。 2.指定了未知的编码会引发LookupError。 3.如果读取文件时无法按指定方式解码会引发UnicodeDecodeError。 我们在try后面跟上了三个except分别处理这三种不同的异常状况。 最后我们使用finally代码块来关闭打开的文件，释放掉程序中获取的外部资源，由于finally块的代码不论程序正常还是异常都会执行到（甚至是调用了sys模块的exit函数退出Python环境，finally块都会被执行，因为exit函数实质上是引发了SystemExit异常），因此我们通常把finally块称为“总是执行代码块”，它最适合用来做释放外部资源的操作。 如果每次都这么写，实在太繁琐。所以Python引入了with语句来自动帮我们调用close()方法： 上面的一大段可以忽略... with open(&#39;/path/to/file&#39;, &#39;r&#39;) as f: print(f.read()) 这和前面的try … finally是一样的，但是代码更佳简洁，并且不必调用f.close()方法。with open会自动关闭。 文件对象属性 1.file.closed 如果文件关闭则返回true，否则返回false。 2.file.mode 返回打开文件的访问模式。 3.file.name 返回文件的名称。 # Open a file fo = open(&quot;foo.txt&quot;, &quot;wb&quot;) print (&quot;Name of the file: &quot;, fo.name) print (&quot;Closed or not : &quot;, fo.closed) print (&quot;Opening mode : &quot;, fo.mode) fo.close() 运行： Name of the file: foo.txt Closed or not : False Opening mode : wb 当文件的引用对象重新分配给另一个文件时，Python也会自动关闭一个文件。但使用close()方法关闭文件是个好习惯。 读取和写入文件 下面将演示如何使用read()和write()方法来读取和写入文件。 read()方法用于从打开的文件读取一个字符串。重要的是要注意Python字符串除文本数据外可以是二进制数据。 fileObject.read([count]) count是从打开的文件读取的字节数。 该方法从文件的开始位置开始读取，如果count不指定值或丢失，则尽可能地尝试读取文件，直到文件结束。 fo = open(&quot;/tmp/foo.txt&quot;, &quot;r+&quot;) str = fo.read(10); print &quot;读取的字符串是: &quot;, str # 关闭打开的文件 fo.close() # 读取的字符串是: Python is write()方法将任何字符串写入打开的文件。该方法不会在字符串的末尾添加换行符(‘\\n‘) fileObject.write(string) # Open a file fo = open(&quot;foo.txt&quot;, &quot;w&quot;) fo.write( &quot;Python is a great language.\\nYeah its great!!\\n&quot;) # Close opend file fo.close() # run # Python is a great language. # Yeah its great!! 文件位置 tell()方法用于获取文件中的当前位置; 换句话说，下一次读取或写入将发生在从文件开始处之后的多个字节数的位置。 seek(offset [，from])方法更改当前文件位置。 offset参数表示要移动的字节数。 from参数指定要移动字节的引用位置。 如果from设置为0，则将文件的开头作为参考位置。 如果设置为1，则将当前位置用作参考位置。 如果设置为2，则文件的末尾将被作为参考位置。 # Open a file fo = open(&quot;foo.txt&quot;, &quot;r+&quot;) str = fo.read(10) print (&quot;Read String is : &quot;, str) # Check current position position = fo.tell() print (&quot;Current file position : &quot;, position) # Reposition pointer at the beginning once again position = fo.seek(0, 0) str = fo.read(10) print (&quot;Again read String is : &quot;, str) # Close opened file fo.close() 执行上面代码，这产生以下结果 Read String is : Python is Current file position : 10 Again read String is : Python is 重命名和删除文件 rename()方法有两个参数，即当前的文件名和新的文件名。 os.rename(current_file_name, new_file_name) 将现有文件test1.txt重命名为test2.txt的示例： import os # Rename a file from test1.txt to test2.txt os.rename( &quot;test1.txt&quot;, &quot;test2.txt&quot; ) remove()方法并通过提供要删除的文件的名称作为参数来删除文件。 os.remove(file_name) os.remove(&quot;text2.txt&quot;) #删除现有文件test2.txt的示例 Python中的目录所有文件都包含在各种目录中，Python处理目录问题也很容易。os模块有几种方法可以用来创建，删除和更改目录。 创建目录 mkdir()方法在当前目录中创建目录。需要为此方法提供一个参数，指定要创建的目录的名称。 os.mkdir(“newdir”) 重命名目录 使用chdir()方法来更改当前目录。 chdir()方法接受一个参数，它是要选择作为当前目录的目录的名称。 os.chdir(“newdir”) import os # Changing &quot;/home/olddir&quot; to &quot;/home/newdir&quot; os.chdir(&quot;/home/newdir&quot;) 显示当前工作目录 getcwd()方法用于显示当前工作目录。 删除目录 rmdir()方法删除该方法中作为参数传递的目录。删除目录之前，应删除其中的所有内容。 os.rmdir(‘dirname’) 更多OS模块的对象和方法See also 百易教程Python os模块方法 综合案例： 要将文本信息写入文件文件也非常简单，在使用open函数时指定好文件名并将文件模式设置为&#39;w&#39;即可。注意如果需要对文件内容进行追加式写入，应该将模式设置为&#39;a&#39;。如果要写入的文件不存在会自动创建文件而不是引发异常。 下面的例子演示了如何将1-9999之间的素数分别写入三个文件中（1-99之间的素数保存在a.txt中，100-999之间的素数保存在b.txt中，1000-9999之间的素数保存在c.txt中）。 from math import sqrt def is_prime(n): &quot;&quot;&quot;判断素数的函数&quot;&quot;&quot; assert n &gt; 0 for factor in range(2, int(sqrt(n)) + 1): if n % factor == 0: return False return True if n != 1 else False def main(): filenames = (&#39;a.txt&#39;, &#39;b.txt&#39;, &#39;c.txt&#39;) fs_list = [] try: for filename in filenames: fs_list.append(open(filename, &#39;w&#39;, encoding=&#39;utf-8&#39;)) for number in range(1, 10000): if is_prime(number): if number &lt; 100: fs_list[0].write(str(number) + &#39;\\n&#39;) elif number &lt; 1000: fs_list[1].write(str(number) + &#39;\\n&#39;) else: fs_list[2].write(str(number) + &#39;\\n&#39;) except IOError as ex: print(ex) print(&#39;写文件时发生错误!&#39;) finally: for fs in fs_list: fs.close() print(&#39;操作完成!&#39;) if __name__ == &#39;__main__&#39;: main() 读写二进制文件知道了如何读写文本文件要读写二进制文件也就很简单了，下面的代码实现了复制图片文件的功能。 def main(): try: with open(&#39;guido.jpg&#39;, &#39;rb&#39;) as fs1: data = fs1.read() print(type(data)) # &lt;class &#39;bytes&#39;&gt; with open(&#39;吉多.jpg&#39;, &#39;wb&#39;) as fs2: fs2.write(data) except FileNotFoundError as e: print(&#39;指定的文件无法打开.&#39;) except IOError as e: print(&#39;读写文件时出现错误.&#39;) print(&#39;程序执行结束.&#39;) if __name__ == &#39;__main__&#39;: main() See also 文件操作-黑马笔记 读写JSON文件通过上面的讲解，我们已经知道如何将文本数据和二进制数据保存到文件中，那么这里还有一个问题，如果希望把一个列表或者一个字典中的数据保存到文件中又该怎么做呢？答案是将数据以JSON格式进行保存。JSON是“JavaScript Object Notation”的缩写，它本来是JavaScript语言中创建对象的一种字面量语法，现在已经被广泛的应用于跨平台跨语言的数据交换，原因很简单，因为JSON也是纯文本，任何系统任何编程语言处理纯文本都是没有问题的。目前JSON基本上已经取代了XML作为异构系统间交换数据的事实标准。关于JSON的知识，更多的可以参考JSON的官方网站，从这个网站也可以了解到每种语言处理JSON数据格式可以使用的工具或三方库，下面是一个JSON的简单例子。 &#123; &quot;name&quot;: &quot;骆昊&quot;, &quot;age&quot;: 38, &quot;qq&quot;: 957658, &quot;friends&quot;: [&quot;王大锤&quot;, &quot;白元芳&quot;], &quot;cars&quot;: [ &#123;&quot;brand&quot;: &quot;BYD&quot;, &quot;max_speed&quot;: 180&#125;, &#123;&quot;brand&quot;: &quot;Audi&quot;, &quot;max_speed&quot;: 280&#125;, &#123;&quot;brand&quot;: &quot;Benz&quot;, &quot;max_speed&quot;: 320&#125; ] &#125; 可能大家已经注意到了，上面的JSON跟Python中的字典其实是一样一样的，事实上JSON的数据类型和Python的数据类型是很容易找到对应关系的，如下面两张表所示。 JSON Python object dict array list string str number (int / real) int / float true / false True / False null None Python JSON dict object list, tuple array str string int, float, int- &amp; float-derived Enums number True / False true / false None null 我们使用Python中的json模块就可以将字典或列表以JSON格式保存到文件中，代码如下所示。 import json def main(): mydict = &#123; &#39;name&#39;: &#39;骆昊&#39;, &#39;age&#39;: 38, &#39;qq&#39;: 957658, &#39;friends&#39;: [&#39;王大锤&#39;, &#39;白元芳&#39;], &#39;cars&#39;: [ &#123;&#39;brand&#39;: &#39;BYD&#39;, &#39;max_speed&#39;: 180&#125;, &#123;&#39;brand&#39;: &#39;Audi&#39;, &#39;max_speed&#39;: 280&#125;, &#123;&#39;brand&#39;: &#39;Benz&#39;, &#39;max_speed&#39;: 320&#125; ] &#125; try: with open(&#39;data.json&#39;, &#39;w&#39;, encoding=&#39;utf-8&#39;) as fs: json.dump(mydict, fs) except IOError as e: print(e) print(&#39;保存数据完成!&#39;) if __name__ == &#39;__main__&#39;: main() json模块主要有四个比较重要的函数，分别是： dump - 将Python对象按照JSON格式序列化到文件中 dumps - 将Python对象处理成JSON格式的字符串 load - 将文件中的JSON数据反序列化成对象 loads - 将字符串的内容反序列化成Python对象","categories":[{"name":"Web","slug":"Web","permalink":"http://example.com/categories/Web/"}],"tags":[]},{"title":"聚合新闻","slug":"Blog/聚合新闻","date":"2021-10-31T16:00:00.000Z","updated":"2022-03-23T11:30:42.315Z","comments":true,"path":"2021/11/01/Blog/聚合新闻/","link":"","permalink":"http://example.com/2021/11/01/Blog/%E8%81%9A%E5%90%88%E6%96%B0%E9%97%BB/","excerpt":"阮一峰的网络日志 November,2020浏览器简史：人类早期网上冲浪珍贵资料（上）浏览器简史：人类早期网上冲浪珍贵资料（中） November,2021特斯拉为什么值万亿美元？ 月光博客推荐阅读文章列表 马斯克面临150亿美元天价税单 October,2021推行全国性房地产税计划遇阻","text":"阮一峰的网络日志 November,2020浏览器简史：人类早期网上冲浪珍贵资料（上）浏览器简史：人类早期网上冲浪珍贵资料（中） November,2021特斯拉为什么值万亿美元？ 月光博客推荐阅读文章列表 马斯克面临150亿美元天价税单 October,2021推行全国性房地产税计划遇阻 华尔街日报：据了解政府商议情况的知情人士，全国性房地产税的计划受阻，由于面临强烈的反对，中国政府现在只会推出一项规模有限的征税计划，而一项涉及国家提供的保障房的提议可能成为替代方案，原计划在大约30个中国城市进行房地产税试点的初步建议已被大幅缩减 20个城市房贷利率下调，刺激房市 今年没有了“金九银十”房市，中共这是急了吗？不，打压地产主要是为了保证金融系统稳定。因为三条红线并没有放松，房贷利率下降是让韭菜为开发商接盘，防止开放商真的崩，危及房地产，银行对于开发商的贷款并没有放松。 这才是中国被卡脖子最严重的软件！ 房企自救会议吹响了！ 李云迪嫖娼案，李云迪并不是主角 一位房产中介一语道破楼市真相，众网友坦言：这才是楼市真正现状 深圳顶级学区房现集中抛售，数十套房源直逼指导价！“学区房信仰”在降温 记者在深圳联合产权交易所网站发现，位于福田区的长城大厦共有23套房产转让，于10月18日挂牌，挂牌期满日期为11月12日。记者采访多位当地的房产中介经理得知，以目前长城大厦的挂牌二手房源为例，85.3平方米的市场挂牌价多在1150万至1300万元左右(每平方米13.5万～15.2万元)，而长城大厦的二手房参考价为每平方米100000元。“这一次长城大厦挂出的23套房源不在我们公司系统里，挂牌价格低于市场价，但略高于参考价，还算是笋盘。”有房产中介经理如是说。今年1月，和长城大厦属于同片区的国城花园，一个44平方米房源以1420万元成交，单价高达32.27万元/平米，引发市场哗然。(证券时报) September,2021健腹轮每天做多少个比拟好？ April,2021马斯克罕见批判: 若一些人总赢, 势必为所欲为 机动车第三者责任险 每天有时间静坐深呼吸 February,2022一女子诈骗三十亿，买千万游艇打60万美体针，被抓后：这辈子值了 观点：我看俄罗斯入侵乌克兰 罗永浩变身“罗老师”！还拉来了新东方学校校长 巴菲特股东信谈了点啥：盛赞苹果CEO、感叹称心并购目标难找 March,2022说出来你可能不信，谷歌一年要给苹果交 200 亿保护费 2022年3月5日 星期六（农历二月初三） 1、国家统计局：2月下旬液化天然气价格环比上涨32.8% 2、张业遂：“动态清零”不是要追求零感染，而是要尽快把疫情控制住。 3、中国空间站今年将全面建成，太空出差三人组4月将返回，今年将再送6名航天员进入 4、美国前国务卿蓬佩奥呼吁美国立即“外交承认”台湾，我国外交部：狂言妄语 5、体坛：U23国足今天进行体脂检测，未达标者需加练以降至标准以下 6、广西一夫妇年龄差30岁生育15孩 官方：16年曾调查，将再次深入核实 7、台湾大范围无预警停电打脸当局高层，两天前曾赌鸡排不会缺电 8、男子9.9元网售自制酸菜被索赔千元，律师：自产自销也需规范 9、美国海军：已从南海打捞起此前坠毁的F-35C战机残骸 10、在过去的7天里，韩国累计新冠确诊病例排名世界第一。 11、乌克兰官方：乌海军旗舰被己方凿沉，以防落入俄军之手。曾传言该舰被俄军击沉。 11.2、俄记者现场报道：世界最大飞机安-225运输机遭乌军炸毁 11.3、乌克兰外长称，俄军炮轰扎波罗热的核电站引发火灾。他表示，核电站一旦发生爆炸，破坏威力将比切尔诺贝利核灾大10倍。 11.4、俄国防部：乌“破坏分子”在扎波罗热核电站挑衅并纵火。核电站已被俄军控制 12、普京：俄方会全面完成在乌行动 12.2、俄国家杜马主席：乌克兰总统泽连斯基已离乌，目前身处波兰。随后泽连斯基回应自己仍身处基辅。 价值投资到底有多难？ 巴菲特传递一个消息：库克是位好同志 邓伦也翻车了，偷逃税被罚1.06亿，推算他一年到底赚了多少钱？ 315曝光全名单：互联网行业野蛮行为该结束了。 3分钟回顾2022年315晚会。 车圈呼唤罗永浩 90后小学老师：教资的尽头，是一地鸡毛 冰雪薇甜，十分有钱，不好惹的“京城四美”","categories":[{"name":"新闻","slug":"新闻","permalink":"http://example.com/categories/%E6%96%B0%E9%97%BB/"}],"tags":[]},{"title":"Python基础知识","slug":"Web/Python基础知识","date":"2021-10-29T16:00:00.000Z","updated":"2021-11-09T11:38:39.000Z","comments":true,"path":"2021/10/30/Web/Python基础知识/","link":"","permalink":"http://example.com/2021/10/30/Web/Python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/","excerpt":"MAC 系统都自带有 Python2.7 环境，你可以在链接 上下载最新版安装 Python 3.x。 你也可以参考源码安装的方式来安装。 有命令行打开python的方法，也有集成开发环境（IDE：Integrated Development Environment）: PyCharm打开python的方法","text":"MAC 系统都自带有 Python2.7 环境，你可以在链接 上下载最新版安装 Python 3.x。 你也可以参考源码安装的方式来安装。 有命令行打开python的方法，也有集成开发环境（IDE：Integrated Development Environment）: PyCharm打开python的方法 默认情况下，Python 3 源码文件以 UTF-8 编码，所有字符串都是 unicode 字符串。 标识符和关键字程序开发中自定义的一些符号和名称，标示符是自己定义的,如变量名 、函数名等，关键字是python已经使用的了。 标示符由字母、下划线和数字组成，且数字不能开头 python中的标识符是区分大小写的 关键字 and as assert break class continue def del elif else except exec finally for from global if in import is lambda not or pass print raise return try while with yield 语句结构分支结构if语句： 案例： 简单的用户身份验证： username = input(&quot;请输入用户名：&quot;) password = input(&quot;请输入密码：&quot;) if username == &quot;happy&quot; and password == &quot;123&quot;: print(&quot;你输入的密码正确&quot;) else: print(&quot;不对哦&quot;) 如果要构造出更多的分支，可以使用if...elif...else...结构或者嵌套的if...else...结构。 之所以提倡代码“扁平化”是因为嵌套结构的嵌套层次多了之后会严重的影响代码的可读性，所以能使用扁平化的结构时就不要使用嵌套。 循环结构举一个简单的例子，如果要实现每隔1秒中在屏幕上打印一次“hello, world”并持续打印一个小时，我们肯定不能够直接把print(&#39;hello, world&#39;)这句代码写3600遍，这样就需要循环结构了。 for in 循环 sum = 0 for x in range(1,101): sum += x print(sum) # 用for循环实现1~100之间的偶数求和 sum = 0 for x in range(2, 101, 2): sum += x print(sum) 指定一个数组集合的循环个数：这集需要一个计数器counter counter = 0 for div in div_list: counter = counter + 1 soup = BeautifulSoup(div,&#39;lxml&#39;) title = soup.select(&#39;.anhover&#39;) print(title) if counter == 7: break # 当变量 counter 等于 7 时退出循环 while循环 如果要构造不知道具体循环次数的循环结构，我们推荐使用while循环。while循环通过一个能够产生或转换出bool值的表达式来控制循环，表达式的值为True则继续循环；表达式的值为False则结束循环。 # 猜数字游戏 import random answer = random.randint(1, 100) counter = 0 while True: counter += 1 number = int(input(&#39;请输入: &#39;)) if number &lt; answer: print(&#39;大一点&#39;) elif number &gt; answer: print(&#39;小一点&#39;) else: print(&#39;恭喜你猜对了!&#39;) break print(&#39;你总共猜了%d次&#39; % counter) if counter &gt; 7: print(&#39;你的智商余额明显不足&#39;) 列表、元祖、字典类似于其他语言的数组 列表的嵌套 schoolNames = [[&#39;北京大学&#39;,&#39;清华大学&#39;], [&#39;南开大学&#39;,&#39;天津大学&#39;,&#39;天津师范大学&#39;], [&#39;山东大学&#39;,&#39;中国海洋大学&#39;]] # 元组 a = () Python的元组与列表类似，不同之处在于元组的元素不能修改。元组使用小括号，列表使用方括号。 字典是另一种可变容器模型，且可存储任意类型对象。 字典的每个键值 key=&gt;value 对用冒号 : 分割，每个键值对之间用逗号 , 分割，整个字典包括在花括号 {} 中 ,格式如下所示： d = &#123;key1 : value1, key2 : value2 &#125; 构造程序逻辑构造程序逻辑:就是锻炼自己，把用人类自然语言描述的算法（解决问题的方法和步骤）翻译成Python代码。而这件事情必须通过大量的练习才能达成。 思考：公鸡5元一只，母鸡3元一只，小鸡1元三只，用100块钱买一百只鸡，问公鸡、母鸡、小鸡各有多少只？ 函数的作用编程大师Martin Fowler先生曾经说过：“代码有很多种坏味道，重复是最坏的一种！”，要写出高质量的代码首先要解决的就是重复代码的问题。对于上面的代码来说，我们可以将计算阶乘的功能封装到一个称之为“函数”的功能模块中，在需要计算阶乘的地方，我们只需要“调用”这个“函数”就可以了。 def fac(num): &quot;&quot;&quot;求阶乘&quot;&quot;&quot; result = 1 for n in range(1, num + 1): result *= n return result m = int(input(&#39;m = &#39;)) n = int(input(&#39;n = &#39;)) 函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。 函数代码块以 def 关键词开头，后接函数标识符名称和圆括号()。 函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。 函数内容以冒号起始，并且缩进。 def printme( str ): &quot;打印传入的字符串到标准显示设备上&quot; print str return # 调用函数 printme(&quot;我要调用用户自定义函数!&quot;); 内置函数，参考文档… 用模块管理函数 对于任何一种编程语言来说，给变量、函数这样的标识符起名字都是一个让人头疼的问题，因为我们会遇到命名冲突这种尴尬的情况。最简单的场景就是在同一个.py文件中定义了两个同名函数，由于Python没有函数重载的概念，那么后面的定义会覆盖之前的定义，也就意味着两个函数同名函数实际上只有一个是存在的。 那么怎么解决这种命名冲突呢？答案其实很简单，Python中每个文件就代表了一个模块（module），我们在不同的模块中可以有同名的函数，在使用函数的时候我们通过import关键字导入指定的模块就可以区分到底要使用的是哪个模块中的同名函数， from module1 import foo from module2 import foo ... if __name__ == &#39;__main__&#39;: # 在if __name__ 里面的代码 解释器直接编译才运用，import调用的话不运行 support.py 模块： def print_func( par ): print &quot;Hello : &quot;, par return # 在其他文件调用时： # 导入模块 import support support.print_func(&quot;Runoob&quot;) 字符串和常用数据结构虽然数值运算仍然是计算机日常工作中最为重要的事情之一，但是今天的计算机处理得更多的数据可能都是以文本的方式存在的，如果我们希望通过Python程序操作本这些文本信息，就必须要先了解字符串类型以及与它相关的知识。 可以在字符串中使用\\（反斜杠）来表示转义，也就是说\\后面的字符不再是它原来的意义，例如：\\n不是代表反斜杠和字符n，而是表示换行； 而\\t也不是代表反斜杠和字符t，而是表示制表符。所以如果想在字符串中表示&#39;要写成\\&#39;，同理想表示\\要写成\\\\。可以运行下面的代码看看会输出什么。 案例： 设计一个函数产生指定长度的验证码，验证码由大小写字母和数字构成。 import random def generate_code(code_len=4): &quot;&quot;&quot; 生成指定长度的验证码 :param code_len: 验证码的长度(默认4个字符) :return: 由大小写英文字母和数字构成的随机验证码 &quot;&quot;&quot; all_chars = &#39;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#39; last_pos = len(all_chars) - 1 code = &#39;&#39; for _ in range(code_len): index = random.randint(0, last_pos) code += all_chars[index] return code # for _in range(n): # _在下面不会用到，这里的_可以替换成任何符合规定的字符串。相当于一个占位符，只在乎遍历次数 range(n) 就是遍历n次 面向对象编程面向对象和面向过程都是解决问题的一种思路而已 拿菜鸟买电脑的故事为例： 第一种方式【面向过程】: 1)在网上查找资料 2)根据自己预算和需求定电脑的型号 MacBook 15 顶配 1W8 3)去市场找到苹果店各种店无法甄别真假 随便找了一家 4)找到业务员,业务员推荐了另外一款 配置更高价格便宜,也是苹果系统的 1W 5)砍价30分钟 付款9999 6)成交 7)回去之后发现各种问题 8)尝试解决各种问题… 第二种方式【面向对象】: 1)找一个靠谱的电脑高手 2)给钱交易 类和对象面向对象编程的2个非常重要的概念：类和对象 对象是面向对象编程的核心，在使用对象的过程中，为了将具有共同特征和行为的一组对象抽象定义，提出了另外一个新的概念——类 类就相当于制造飞机时的图纸，用它来进行创建的飞机就相当于对象 举例： 奔驰汽车 类 奔驰smart 类 张三的那辆奔驰smart 对象 狗 类 大黄狗 类 李四家那只大黄狗 对象 水果 类 苹果 类 红苹果 类 红富士苹果 类 我嘴里吃了一半的苹果 对象 抽象类： 类的抽象 小明在公车上牵着一条叼着热狗的狗 小明–》抽象成 人类 公车–》抽象成 交通工具类 热狗–》抽象成 食物类 狗–》抽象成 狗类 Python本身不提供抽象类和接口机制，要想实现抽象类，可以借助abc模块。ABC是Abstract Base Class的缩写。抽象类是一个特殊的类，它的特殊之处在于只能被继承，不能被实例化 比如我们有香蕉的类，有苹果的类，有桃子的类，从这些类抽取相同的内容就是水果这个抽象的类，你吃水果时，要么是吃一个具体的香蕉，要么是吃一个具体的桃子。。。。。。你永远无法吃到一个叫做水果的东西。 这里不得不说，这个比喻打的太好了，看了那么多的文档教程总是云里雾里的，这个比喻有种醍醐灌顶的感觉。 从设计角度去看，如果类是从现实对象抽象而来的，那么抽象类就是基于类抽象而来的。 从实现角度来看，抽象类与普通类的不同之处在于：抽象类中有抽象方法，该类不能被实例化，只能被继承，且子类必须实现抽象方法。这一点与接口有点类似，但其实是不同的。 抽象类是一个介于类和接口直接的一个概念，同时具备类和接口的部分特性，可以用来实现归一化设计 定义类： class Hero(object): # 新式类定义形式 def info(self): print(&quot;英雄各有见，何必问出处。&quot;) # Hero这个类 实例化了一个对象 taidamier(泰达米尔) taidamier = Hero() # 对象调用实例方法info()，执行info()里的代码 # . 表示选择属性或者方法 taidamier.info() object 是Python 里所有类的最顶级父类； 类名 的命名规则按照”大驼峰命名法”； info 是一个实例方法，第一个参数一般是self，表示实例对象本身，当然了可以将self换为其它的名字，其作用是一个变量 这个变量指向了实例对象 案例： 给对象添加自己的属性： class Hero(object): &quot;&quot;&quot;定义了一个英雄类，可以移动和攻击&quot;&quot;&quot; def move(self): &quot;&quot;&quot;实例方法&quot;&quot;&quot; print(&quot;正在前往事发地点...&quot;) def attack(self): &quot;&quot;&quot;实例方法&quot;&quot;&quot; print(&quot;发出了一招强力的普通攻击...&quot;) # 实例化了一个英雄对象 泰达米尔 taidamier = Hero() # 给对象添加属性，以及对应的属性值 taidamier.name = &quot;泰达米尔&quot; # 姓名 taidamier.hp = 2600 # 生命值 taidamier.atk = 450 # 攻击力 taidamier.armor = 200 # 护甲值 # 通过.成员选择运算符，获取对象的属性值 print(&quot;英雄 %s 的生命值 :%d&quot; % (taidamier.name, taidamier.hp)) print(&quot;英雄 %s 的攻击力 :%d&quot; % (taidamier.name, taidamier.atk)) print(&quot;英雄 %s 的护甲值 :%d&quot; % (taidamier.name, taidamier.armor)) # 通过.成员选择运算符，获取对象的实例方法 taidamier.move() taidamier.attack() 创建对象后再去添加属性有点不合适，有没有简单的办法，可以在创建对象的时候，就已经拥有这些属性？ class Hero(object): &quot;&quot;&quot;定义了一个英雄类，可以移动和攻击&quot;&quot;&quot; def __init__(self, name, skill, hp, atk, armor): &quot;&quot;&quot; __init__() 方法，用来做变量初始化 或 赋值 操作&quot;&quot;&quot; # 英雄名 self.name = name # 技能 self.skill = skill # 生命值： self.hp = hp # 攻击力 self.atk = atk # 护甲值 self.armor = armor def move(self): &quot;&quot;&quot;实例方法&quot;&quot;&quot; print(&quot;%s 正在前往事发地点...&quot; % self.name) def attack(self): &quot;&quot;&quot;实例方法&quot;&quot;&quot; print(&quot;发出了一招强力的%s...&quot; % self.skill) def info(self): print(&quot;英雄 %s 的生命值 :%d&quot; % (self.name, self.hp)) print(&quot;英雄 %s 的攻击力 :%d&quot; % (self.name, self.atk)) print(&quot;英雄 %s 的护甲值 :%d&quot; % (self.name, self.armor)) # 实例化英雄对象时，参数会传递到对象的__init__()方法里 taidamier = Hero(&quot;泰达米尔&quot;, &quot;旋风斩&quot;, 2600, 450, 200) gailun = Hero(&quot;盖伦&quot;, &quot;大宝剑&quot;, 4200, 260, 400) # print(gailun) # print(taidamier) # 不同对象的属性值的单独保存 print(id(taidamier.name)) print(id(gailun.name)) # 同一个类的不同对象，实例方法共享 print(id(taidamier.move())) print(id(gailun.move())) 说明：通过一个类，可以创建多个对象，就好比 通过一个模具创建多个实体一样 __init__(self)中，默认有1个参数名字为self，如果在创建对象时传递了2个实参，那么__init__(self)中出了self作为第一个形参外还需要2个形参，例如__init__(self,x,y) __str__() class Hero(object): &quot;&quot;&quot;定义了一个英雄类，可以移动和攻击 Hero.__doc__显示的内容&quot;&quot;&quot; def __init__(self, name, skill, hp, atk, armor): &quot;&quot;&quot; __init__() 方法，用来做变量初始化 或 赋值 操作&quot;&quot;&quot; # 英雄名 self.name = name # 实例变量 # 技能 self.skill = skill # 生命值： self.hp = hp # 实例变量 # 攻击力 self.atk = atk # 护甲值 self.armor = armor def move(self): &quot;&quot;&quot;实例方法&quot;&quot;&quot; print(&quot;%s 正在前往事发地点...&quot; % self.name) def attack(self): &quot;&quot;&quot;实例方法&quot;&quot;&quot; print(&quot;发出了一招强力的%s...&quot; % self.skill) # def info(self): # print(&quot;英雄 %s 的生命值 :%d&quot; % (self.name, self.hp)) # print(&quot;英雄 %s 的攻击力 :%d&quot; % (self.name, self.atk)) # print(&quot;英雄 %s 的护甲值 :%d&quot; % (self.name, self.armor)) def __str__(self): &quot;&quot;&quot; 这个方法是一个魔法方法 (Magic Method) ，用来显示信息 该方法需要 return 一个数据，并且只有self一个参数，当在类的外部 print(对象) 则打印这个数据 &quot;&quot;&quot; return &quot;英雄 &lt;%s&gt; 数据： 生命值 %d, 攻击力 %d, 护甲值 %d&quot; % (self.name, self.hp, self.atk, self.armor) taidamier = Hero(&quot;泰达米尔&quot;, &quot;旋风斩&quot;, 2600, 450, 200) gailun = Hero(&quot;盖伦&quot;, &quot;大宝剑&quot;, 4200, 260, 400) # 如果没有__str__ 则默认打印 对象在内存的地址。 # 当类的实例化对象 拥有 __str__ 方法后，那么打印对象则打印 __str__ 的返回值。 print(taidamier) print(gailun) # 查看类的文档说明，也就是类的注释 print(Hero.__doc__) 在python中方法名如果是__xxxx__()的，那么就有特殊的功能，因此叫做“魔法”方法 当使用print输出对象的时候，只要自己定义了__str__(self)方法，那么就会打印从在这个方法中return的数据 __str__方法需要返回一个字符串，当做这个对象的描写 上面几行字是runoob教程上的内容，不是很明白。我的理解就是返回这个对象愿意给你看到的东西，比如有些东西【英雄的奥义】不想显示，self.skill就没写。 继承在程序中，继承描述的是多个类之间的所属关系。如果一个类A里面的属性和方法可以复用，则可以通过继承的方式，传递到类B里。 那么类A就是基类，也叫做父类；类B就是派生类，也叫做子类。 # 父类 class A(object): def __init__(self): self.num = 10 def print_num(self): print(self.num + 10) # 子类 class B(A): pass b = B() print(b.num) b.print_num() 子类除了继承父类提供的属性和方法，还可以定义自己特有的属性和方法，所以子类比父类拥有的更多的能力，在实际开发中，我们经常会用子类对象去替换掉一个父类对象，这是面向对象编程中一个常见的行为，对应的原则称之为里氏替换原则。 子类在继承了父类的方法后，可以对父类已有的方法给出新的实现版本，这个动作称之为方法重写（override）。 单继承和多继承： 故事情节：煎饼果子老师傅在煎饼果子界摸爬滚打几十年，拥有一身精湛的煎饼果子技术，并总结了一套”古法煎饼果子配方”。 可是老师傅年迈已久，在嗝屁之前希望把自己的配方传承下去，于是老师傅把配方传给他的徒弟大猫… 大猫掌握了师傅的配方，可以制作古法煎饼果子。但是大猫是个爱学习的好孩子，他希望学到更多的煎饼果子的做法，于是通过百度搜索，找到了一家煎饼果子培训学校。（多继承） class Prentice(Master, School): # 多继承，继承了多个父类（Master在前） pass 子类重写父类的同名属性和方法 子类调用父类同名属性和方法 继承有两种用途： 一：继承基类的方法，并且做出自己的改变或者扩展（代码重用） 二：声明某个子类兼容于某基类，定义一个接口类Interface，接口类中定义了一些接口名（就是函数名）且并未实现接口的功能，子类继承接口类，并且实现接口中的功能. 实践中，继承的第一种含义意义并不很大，甚至常常是有害的。因为它使得子类与基类出现强耦合。 继承的第二种含义非常重要。它又叫“接口继承”。接口继承实质上是要求“做出一个良好的抽象，这个抽象规定了一个兼容接口，使得外部调用者无需关心具体细节，可一视同仁的处理实现了特定接口的所有对象”——这在程序设计上，叫做归一化。 私有权限面向对象三大特性：封装、继承、多态 封装的意义：将属性和方法放到一起做为一个整体，然后通过实例化对象来处理；隐藏内部实现细节，只需要和对象及其属性和方法交互就可以了；对类的属性和方法增加访问权限控制。这就有了私有权限概念 私有权限：在属性名和方法名 前面 加上两个下划线 类的私有属性 和 私有方法，都不能通过对象直接访问，但是可以在本类内部访问； 类的私有属性 和 私有方法，都不会被子类继承，子类也无法访问； 私有属性 和 私有方法 往往用来处理类的内部事情，不通过对象处理，起到安全作用 修改私有属性值： 对象名.属性名 = 数据 —-&gt; 直接修改 私有属性不能直接访问，所以这个方法不能修改。得定义一个可以调用的公有方法，在这个公有方法内访问修改。 class Prentice(School, Master): def __init__(self): self.kongfu = &quot;猫氏煎饼果子配方&quot; # 私有属性，可以在类内部通过self调用，但不能通过对象访问 self.__money = 10000 ... # 接收参数，修改私有属性的值 def set_money(self, num): self.__money = num damao = Prentice() # 对象不能访问私有权限的属性和方法 # print(damao.__money) # damao.__print_info() # 可以通过访问公有方法set_money()来修改私有属性的值 damao.set_money(100) 1、_xxx 不能用于’from module import * ’ 以单下划线开头的表示的是protected类型的变量。一般来讲，变量名_xxx被看作是“私有 的”，在模块或类外不可以使用。 当变量是私有的时候，用_xxx 来表示变量是很好的习惯。以”单下划线” 开始的成员变量叫做保护变量，意思是只有类对象和子类对象自己能访问到这些变量； 2、__xxx 双下划线的表示的是私有类型的变量。只能是允许这个类本身进行访问了。连子类也不可以 3、__xxx__ 定义的是特列方法【也叫魔法方法】。像__init__之类的 @property装饰器 如果想访问属性可以通过属性的getter（访问器）和setter（修改器）方法进行对应的操作。如果要做到这点，就可以考虑使用@property包装器来包装getter和setter方法，使得对属性的访问既安全又方便，代码如下所示。 class Person(object): def __init__(self, name, age): self._name = name self._age = age # 访问器 - getter方法 @property def name(self): return self._name # 访问器 - getter方法 @property def age(self): return self._age # 修改器 - setter方法 @age.setter def age(self, age): self._age = age def play(self): if self._age &lt;= 16: print(&#39;%s正在玩飞行棋.&#39; % self._name) else: print(&#39;%s正在玩斗地主.&#39; % self._name) def main(): person = Person(&#39;王大锤&#39;, 12) person.play() person.age = 22 person.play() # person.name = &#39;白元芳&#39; # AttributeError: can&#39;t set attribute if __name__ == &#39;__main__&#39;: main() 我的理解：@property是相当于通道，@age.setter是开门的钥匙。光有通道没有钥匙是修改不了数据的。 多态： 多态：定义时的类型和运行时的类型不一样，此时就成为多态 ，多态的概念是应用于Java和C#这一类强类型语言中，而Python崇尚“鸭子类型”。 鸭子类型：虽然我想要一只”鸭子”，但是你给了我一只鸟。但是只要这只鸟走路像鸭子，叫起来像鸭子，游泳也像鸭子，我就认为这是鸭子。 综合案例： &quot;&quot;&quot; 某公司有三种类型的员工 分别是部门经理、程序员和销售员 需要设计一个工资结算系统 根据提供的员工信息来计算月薪 部门经理的月薪是每月固定15000元 程序员的月薪按本月工作时间计算 每小时150元 销售员的月薪是1200元的底薪加上销售额5%的提成 &quot;&quot;&quot; from abc import ABCMeta, abstractmethod class Employee(object, metaclass=ABCMeta): &quot;&quot;&quot;员工&quot;&quot;&quot; def __init__(self, name): &quot;&quot;&quot; 初始化方法 :param name: 姓名 &quot;&quot;&quot; self._name = name @property def name(self): return self._name @abstractmethod def get_salary(self): &quot;&quot;&quot; 获得月薪 :return: 月薪 &quot;&quot;&quot; pass class Manager(Employee): &quot;&quot;&quot;部门经理&quot;&quot;&quot; def get_salary(self): return 15000.0 class Programmer(Employee): &quot;&quot;&quot;程序员&quot;&quot;&quot; def __init__(self, name, working_hour=0): super().__init__(name) self._working_hour = working_hour @property def working_hour(self): return self._working_hour @working_hour.setter def working_hour(self, working_hour): self._working_hour = working_hour if working_hour &gt; 0 else 0 def get_salary(self): return 150.0 * self._working_hour class Salesman(Employee): &quot;&quot;&quot;销售员&quot;&quot;&quot; def __init__(self, name, sales=0): super().__init__(name) self._sales = sales @property def sales(self): return self._sales @sales.setter def sales(self, sales): self._sales = sales if sales &gt; 0 else 0 def get_salary(self): return 1200.0 + self._sales * 0.05 def main(): emps = [ Manager(&#39;刘备&#39;), Programmer(&#39;诸葛亮&#39;), Manager(&#39;曹操&#39;), Salesman(&#39;荀彧&#39;), Salesman(&#39;吕布&#39;), Programmer(&#39;张辽&#39;), Programmer(&#39;赵云&#39;) ] for emp in emps: if isinstance(emp, Programmer): emp.working_hour = int(input(&#39;请输入%s本月工作时间: &#39; % emp.name)) elif isinstance(emp, Salesman): emp.sales = float(input(&#39;请输入%s本月销售额: &#39; % emp.name)) # 同样是接收get_salary这个消息但是不同的员工表现出了不同的行为(多态) print(&#39;%s本月工资为: ￥%s元&#39; % (emp.name, emp.get_salary())) if __name__ == &#39;__main__&#39;: main() See also 面向对象","categories":[{"name":"Web","slug":"Web","permalink":"http://example.com/categories/Web/"}],"tags":[]},{"title":"数字周刊 24","slug":"Weekly/数字周刊24","date":"2021-10-23T16:00:00.000Z","updated":"2021-11-05T01:24:38.000Z","comments":true,"path":"2021/10/24/Weekly/数字周刊24/","link":"","permalink":"http://example.com/2021/10/24/Weekly/%E6%95%B0%E5%AD%97%E5%91%A8%E5%88%8A24/","excerpt":"","text":"刊首语一个网友的推特发言。 年轻时，我觉得亲戚们都是前车之鉴，我要避免重蹈他们的生活、性格、工作与处世态度。直到现在这年纪，我觉得我跟他们越来越像了，于是感慨人生早就在家族基因注定。如果没有碰上基因突变，一个人的一生就是父母两边家族平均基因的 ±20% 吧，至少我觉得我是。 他的意思是， 不管你多么努力，大多数情况下，你的处境最多只比父辈好上20%。我也有类似的感受，子辈很难大幅度超越父辈，尤其是在经济增长放缓的情况下。 好像是巴尔扎克说的：”培养一个巴黎的上等人，需要三代人的努力。”当时我觉得这话太夸张了，现在觉得这是现实。我认识的人里面，子辈远远超过父辈的例子并不多， 大多数人的生活境遇、社会阶层、经济地位跟父辈都是类似的。 计算一下，如果每一代比上一代改善20%，翻倍确实需要经过三代人，即你的人生处境会比曾祖父好上一倍（1.2 的四次方等于2.07）。这还是最理想的情况，前提是每一代都勤奋努力。如果当中出了一个游手好闲之徒，改进速度就会大大放缓；要是出了败家子，还会出现倒退。 总之，正常情况下，人生境遇的改变，是一个缓慢的过程，需要几代人的累积。只有运气特别好，你才可能有着大大超越父母的人生，或者说大大地超越你的起点。如果运气不好，你的人生可能还不如父母。 1.一定要清楚自己未来的目标是什么很多人把职场想得太美好，其实不然。如果你没有规划好，你就会难免遇到各种各样的问题：工作不开心；没有前进的动力；工作不是自己想像的那么好；自己的才能无法发挥；看到以前的同学待遇如何如何，便受不了刺激，急切地想跳槽；当初为了生存而找的工作，根本就不适合自己。 这是几乎所有初入职场的朋友都会面临的问题。而这些问题通常会在步入职场的1－3年之内最明显，3年之后之所以不明显，是因为你已经被现实折磨得太久了，已经被种种不平现象同化了，因此也就习惯了。你曾经的种种抱负被现实碾得粉碎，于是，你也从一个志向远大的年轻人一下子变成了一个碌碌无为、甘于平庸、成天为了生计而奔走的普通打工者。如果不及早解决这些问题，那么，你就会荒废这3年的时间（有的人可能会更长），而对于一个职场新人来说，这3年至关重要，是锻炼能力、积累资本的黄金3年！一旦错过，则要花费更多的时间，从头再来，重新弥补！更有甚者，可能一辈子都无法弥补！这绝对不是危言耸听！因此，如果你的职场年龄还没有超过3年，恭喜你，还有改变命运的机会。而一旦超过了3年，那么，你的每一次改变，都将付出巨大的代价！ 为什么要清楚自己的目标？因为，有了目标，才有行动的指南。知道自己想干什么，喜欢干什么，这才是你前进的最终动力。工作不开心、动力不足、盲目跳槽的最根本原因是职业目标不清晰。没有目标，便没有了追求，于是，所有的行动只是为了挣一口饭吃。你根本没有考虑过自己的未来应该端什么饭碗。或许你在30岁之前还有挥霍的资本，因为年轻嘛，做什么都不怕。连广告上都说了，“30岁之前，有什么好怕的？！”而一旦过了30岁，你走的每一步都必须要慎之又慎，因为：你要结婚、你要养活老婆孩子、你要供房贷、你要供养年迈的父母、孩子大了还要上学、父母年迈了需要照顾……等等等等，所有的这些责任，都要你来承担。如果没有规划，一旦出现问题，你只能自乱阵脚。 人生的职业发展如同品牌塑造一样，只不过你的产品就是你自己。你自己的发展目标，也就是你人生的品牌目标。有了目标，就要考虑该怎么走。每走一步，都应该离目标更近，而不是更远。所以，你每做一个决定的时候，要衡量这个决定对不对，唯一的标准就是：它是不是能够帮助你离目标更近？如果不是，那么，赶紧住手，因为，你走的路偏离了你的目标！再走下去，只能错得更离谱！ 2.总结现代的婚姻是情感的产物，更是竞争的结晶。 敌人变成战友多半是为了生存，战友变成敌人多半是为了金钱。 有所得是低级快乐，有所求是高级快乐。 世界上1%的人是吃小亏而占大便宜，而99%的人是占小便宜吃大亏。大多数成功人士都源于那1%。 人如果靠吃饭活着，那饭不叫饭，叫饲料。 中国人学美国人容易，中国人学中国人难。 一个人幸运的前提，其实是他有能力改变自己。 人的成长要接受四个方面的教育：父母、老师、书籍，社会。有趣的是，后者似乎总是与前面三种背道而驰。 经营自己的长处，能使你人生增值；经营你的短处，能使你人生贬值。 生命犹如一片绿叶，随着时间的流逝，慢慢变的枯黄，但他的叶脉还是那么清晰可见。 把事情变复杂很简单，把事情变简单很复杂。 如果是棵小草，即使在最好的企业里，你也长不成大树。果真如此，不如历经风雨，把自己培养成名贵花卉。 二十一世纪工作生存法则就是：建立个人品牌，把你的名字变成钱。 怕爹是孝顺，怕老婆是爱情。 没有不合格的学生，只有不合格的家长。 地球是运动的，一个人不会永远处在倒霉的位置。 我们可以躲开大家，却躲不开一只苍蝇。生活中使我们不快乐的常是一些芝麻小事。 有一种人只做两件事：你成功了，他妒嫉你；你失败了，他笑话你。 笨男人+笨女人=结婚；笨男人+聪明女人=离婚；聪明男人+笨女人=婚外情； 聪明男人+聪明女人=浪漫爱情。 任何一个傻瓜都会引诱一个姑娘；但是知道怎样离开她只有成熟男人才能做到。 人有两只眼睛，全是平行的，所以应当平等看人；人的两只耳朵是分在两边的，所以不可偏听一面之词；人虽只有一颗心，然而有左右两个心房，所以做事不但要为自己想，也要为别人想。 3.要学会遵守游戏规则很多人都会感觉到，在职场上发展，不仅会受到各种约束，而且处处都充满了不公平现象。比如：上班迟到老板会扣你工资，但你加班的时候却从来没有拿过加班工资；你立功的时候没有受到过表彰，一旦犯错，老板却指着鼻子骂个不停。在这个世界上，不要奢求公平。那只是一种乌托邦式的理想，从来都不存在于现实社会中。员工和老板之间的关系，就好像是一场游戏。是游戏就会有游戏规划，否则，游戏就玩不下去。但是，游戏规则是谁制定的呢？当然是老板，各种利益也偏向老板！身在职场的你，一开始肯定看不惯这种现象，但你一定要学会慢慢接受这种游戏规则。不要试图改变这种规则，因为在老板面前，你没有太多的话语权，更有许多多年以来自然形成的潜规则，你更是无法改变。说得再难听些，你只是一个打工的，混口饭吃，给你吃就不错了，还嫌饭凉？如果不想做，可以离开。还是那句话：中国什么都缺，就是不缺人。 记住这句话：“如果你不是游戏规则的制定者，你的选择只有两条：要么屈从，要么离开！” 4.用正面讯息取代负面讯息。 一旦你放弃旧习惯或开始新习惯时，你就已经改变了。记得提醒自己，向自己传递”我正在减肥，我正在戒烟中，我已经变成了更果断的人……”或任何与你的目标相匹配的讯息。只要真心相信自己已经有所改变，这些讯息就会解放你的思想。不要回头看，你需要一个新的生活口号，那就是”我可以做到”！如果你不相信你能做到，你就不能。你是否相信自己拥有一个确定归宿？你生活的列车是否会奔向某个特别的地方？用新的讯息取代旧的讯息吧。珍爱你自己，但憎恨你的习惯，原谅曾经的自己，就像上帝原谅你一样吧，你是个有价值的人。当然，这过程对很多人而言都是困难的，向你的朋友们寻求帮助吧，或者让催人奋进的圣经经文去鼓舞你，提醒你意识到自己独树一帜而又令人惊叹的生活目标吧。如果可以的话，把你的誓愿张贴在你可以看到的地方。你必须铭记在心的是，对成功的坚定信念是成功的必要因素。 5.故事天才老鼠之谜 若干年前，罗伯特博士在哈佛大学主持一项为期6周的老鼠通过迷阵吃干酷的实验。实验的对象是三组学生和三组老鼠。 他对第一组学生说：你们太幸运了，因为你们将跟一群天才老鼠在一起。这种老鼠非常聪明，它们将迅速通过迷阵抵达终点，然后吃许多干酪。所以你们必须多买一些干酪入在终点喂它们。 他对第二组学生说：你们和一群普通的老鼠在一起。这群老鼠虽不太聪明，也不太愚笨，它们最后还是会通过迷阵抵达终点，然后吃掉一些干酪，只是因为它们的智能平平，所以不要对他们期望太高。 他对第三组学生说：很抱歉，你们将跟一群愚笨的老鼠在一起。这群老鼠笨极了，因此它们的表现会很差，如果它们能通过迷阵到达终点，那是意外，所以，你们根本不用准备干酪。 6个星期后，实验结果出来了。天才老鼠迅速通过迷阵，很快就抵达终点；普通老鼠也到达终点，不过速度很慢；至于愚笨的老鼠，只有一只通过迷阵，找到终点。 有趣的事，在这项实验中，根本没有所谓的天才老鼠与愚笨老鼠，它们通通都是一窝普通的老鼠。 心语： 学生们当然不懂老鼠的语言，然而老鼠却知道学生对它们的态度。这项实验证明了态度的神奇力量。既然态度能产生神奇的力量，那么我们应当对人生、事业、工作采取什么样报态度呢？你的态度决定了你的成败。用心去体验吧，然后端正态度，迎向一切。 角度与广度 一位老员外，特别喜欢牡丹花，庭内庭外都种满了牡丹。老员外采了几朵牡丹花，送给一位老翁，老翁很开心地插在花瓶里。 隔天，邻居和老翁说：你的牡丹花，每一朵都缺少了几片花瓣，这不是富贵不全吗？ 老翁听了，便觉得不妥，就把牡丹花全部送还给老员外。老员外问为什么？老翁就把邻居的话一五一十地说了出来。 员外忍不住笑说：牡丹花缺少花瓣，这不是富贵无边吗？老翁听了，又开心的把牡丹拿回家了。 铜锣声声 有二位年轻人，在城里奋斗很多年，终于赚了很多钱，后来，年纪大了，就决定回乡下安享晚年。在他们回家的小路上，碰到一位白衣老者，这位老者手上拿着一面铜锣，在那里等他们。 他们问老先生：“你在这做什么？” 老先生说：“我是专门帮人敲最后一声铜锣的人，你们两个都只剩下三天生命，到第三天黄昏的时候，我会拿着铜锣到你家的门外敲，你们一听到铜锣声，生命就结束了。”说完，这个老人就消失不见了。 这两个人听完后都愣住了，好不容易在城市里辛苦了那么多年，赚了这么多钱，要回来享福，结果却只剩下三天好活。 两人各自回家后，第一个有钱人从此不吃不喝，每天都愁眉不展，细数他的财产。心想：“怎么办？只剩下三天可活！”他就这样垂头丧气，面如死灰，什么事也不做，只记得那个老人要来敲铜锣他一直等，一直等到第三天的黄昏，整个人已如泄了气的皮球。 终于那个老人来了。拿着铜锣站在他的门外，“锵”的敲了一声。他一听到铜锣声，就立刻倒下去，死了。为什么呢？因为他一直在等这一声，等到了，也就死了！ 另外一个有钱人心想：“太可惜了，赚那么多钱，只剩下三天可活，我从小就离家，从没有为家乡做过什么，我应该把这些钱拿出来，分给家乡所有苦难和需要帮助的人。”于是，他把所有的钱分给穷苦的人，又铺路又造桥，光是处理这些就让他忙得不得了，根本忘记三天以后的铜锣声。 好不容易到了第三天，才把所有的财产都散光了，村民非常感谢他，于是就请了锣鼓阵，歌仔戏，布袋戏到他家门口来庆祝，场面非常热闹，舞龙舞狮，又放鞭炮，又放烟火。 那老人如约出现，在他家门外敲响了铜锣。老人“锵，锵，锵”的敲了发几声，可是大伙都没听到，老人见再怎么敲也没用，只好走了。 这个有钱人过了好多天才想起老人要来敲锣的事，还纳闷：“怎么老人失约了？” 心语： 当一个人处于绝望的时候，若能展现积极乐观的一面，承担眼前的一刻，不担心以后的事情，就不必怕哪一天铜锣会响，也不必特别去听那一声铜锣的声音，这样，绝望将不再是绝望，反而可能是另一个转机呢。当手中只有一颗酸柠檬时，你也要设法将它做成一杯可口的柠檬汁。这们的生活才是愉快的。 电单车竞赛 欧洲某个城镇又热闹起来了，这里正在举行一年一度的电单车比赛，全球好手都陆续进入这个镇。 许多竞赛好手都提前两三个星期到当地训练，以适应现场的地理环境。 在众多好手中，有三名不同信仰的华侨青年。 第一名相信宿命论。有一次他在竞赛时滑倒了，无论他后来如何拼搏都无法改变失败的结果。此后，每遇比赛一旦他不幸滑倒，他就会自动弃权，因为他认为那是命中注定的无法更改的命运。他将整个竞赛的成败，寄托于冥冥中的“命运”。 第二名青年，从小就随从贫铀弹朝拜三国时代的“关公”。每逢竞赛之前，他一定跟从父母到附近唐人街的一间关这庙去烧香，向庙内的童子询问“结果”。若那名童子准许他参加竞赛的话，他便会有信心去参赛；否则，便放弃。至于这次参赛，他父母已到关帝庙询问过了，关帝很有信心地告诉他父母说，这次一定能夺冠。他会得到关帝的相助。 最后一名青年，是第一次参赛。他这次的参赛目的也是为了夺冠，以赢得美金10万美元，好让他重病的母亲到外国去治疗。他每天都勤奋地练习。跌倒了，又爬起来，他不断鼓励自己：我一定要得到冠军！他将这场比赛的胜利，掌握在自己手中。 不久，比赛开始了。 一听到开始比赛的枪声，上百名选手便往前冲去。 现在，让我们将注意力放在那3名青年的身上。 首名青年在比赛开始后不久，因路滑而跌倒，他便将单车推到路旁，很无奈地看着许多竞争者从他的眼前驰过。“唉，这是上天的安排，有什么办法呢。” 第二名青年因有“神”助而拼命地奔驰，突然，在一个转弯处，他一个不留神，发生意外，人仰车翻，不省人事。当他的父母从电视看到这种情景时，便很生气地赶到那间庙堂去责问那童子。童子正在睡午觉，被他们吵醒。“关老爷，你说保佑我的儿子平安无事，一定得冠军。你看他现在已发生了意外，你到底没有没保佑他？”那青年的父母很生气的说。“关老爷”揉着朦胧睡眼说：“唉，我已尽力在旁帮助你儿子了，当倔要跌倒时，我也尽力赶去扶助他，但他骑的是电单车，我骑的是老马，怎么能追得上呢？” 至于第三名竞赛者，他也很拼命奔驰。一旦跌倒了，他又赶忙爬起来，忍痛继续冲刺。滚滚沙尘，炎炎烈日，均无法泯灭他那颗炽热的心。由于他将成败决定在自己手中，终于，他夺得了冠军。 心语： 有许多人把成败归咎于命运的安排，成功了认为是神明的保佑；失败了便认为是命中注定。真实，具有积极心态的人都明白：与其靠别人的力量，不如靠自己，因为只有自己才能掌握自己的命运！ 失败计划 多年前，蜗居台湾的何应钦以一级上将的身份跑到荷兰旅游，荷兰国防部接待了他，并带他参观了荷兰的国防设施。参观完毕，荷兰人又做了一个国防简报，向何应钦展示了一旦战争爆发，他们将如何应对的计划。这份计划之缜密、全面，让何应钦咋舌。但更令何应钦惊讶的是，他看到到了一份更详细的计划，而且被放置在所有计划中最显眼的位置，以突出它的重要地位，这个计划的名称叫《投降计划》。何应钦表示很不理解，他说，在中国人眼里，投降是可耻的事情，是被人所有人看不起的行为，而为投降做计划会涣散军心，是战争大忌，中国文化崇尚舍生取义。 荷兰人的回答却很从容：“我们并不认为投降是可耻的事情，经过充分分析敌我力量和战争现状后，如果胜利付出的代价太大或者完全没有取胜的可能时，我们会投降。我们不想因为自己的顽抗招致毁灭性的打击，我们需要保存实力，需要保持国家的完整。我们将把土地、建筑、河流山川都留给子孙，韬光养晦，等某一天真正强大了，再去夺取胜利。” 投降计划，意在示来。 二战中，盟军胜利登陆诺曼底之后，最高统帅艾森豪威尔将军发表了齐讲话：“我们已经胜利登陆，德军被打败，这是大家共同努力的结果，我向大家表示感谢和祝贺。”可是当时谁也不知道，在登陆之前，除了这份讲话稿之外，艾森豪威尔将军还准备了一份截然相反的讲稿，那其实是一份失败演讲稿。失败演讲稿是这样写的：“我很悲伤地宣布，我们登陆失败，这完全是我个人决策和指挥的失误，我愿意承担全部责任，并向所有人道歉。” 两份讲稿，万般情怀。 心语： 太多的悲剧大都因为把成功当作唯一的目标，其实，失败计划里深藏着求胜的意愿、成功的契机和超然的心绪。 不过话又说回来，我们上下五千年文明没有象西方那样给中断几次，也正因为我们有不肯投降的精神。 6.资源链接奇趣网站收藏家 深海这个网站可以不停往下拉，看看每个深度的海底都有些什么生物。 便携小空调 - 为你的夏日带去清凉！ 名言通 美句佳句大全 伤感的句子 唯美的句子 优美的句子 panzoid视频片头制作 虫部落是一个纯粹的搜索知识、技术和经验分享平台，虫部落快搜、虫部落学术搜索等搜索聚合工具均为虫部落原创出品，搜索世界的乐趣，就在虫部落！ 夫妻财产 有趣的黑客帝国 香当网香当网（年终总结，个人简历，事迹材料，租赁合同，演讲稿）： Microsoft Design - Wallpapers高清壁纸网 7.法律故事今天听我妈讲了一个八卦，家里表妹跟谈了六年的男友，在结婚的最后关口谈崩了，掰了。这事让我挺意外的，表妹跟男友是大学同学，毕业工作一路走来感情稳定，之前五一聚会的时候见过一面，男方看着挺靠谱的，没想到突然就散了。 多问了几句才知道缘由，原来男方提亲的时候，表妹父母开出三点要求： 1、彩礼50万，女方陪嫁100万 2、男方准备婚前房的话，女方陪嫁一辆40万的车（包含在100万里） 3、共同购买婚房的话，女方把陪嫁的100万一起拿来买房，房本写两人的名字。 第二天男友给表妹回了话，第1条嫁妆他们家不要，希望把彩礼减免。第2条婚房想拖后再买，男方有婚前一套小房子可以先住着。陪嫁的车可以不要，等以后有孩子了再换套大的，如果不行就现在卖了婚前小房两家凑着买套大的。 这个回复让表妹家不是很满意，认为男方欠缺诚意，双方谈了几次没谈拢，最后就停止了婚事。 我妈觉得男的有点傻，女方家里条件不错，男的临门一脚打退堂鼓有些莫名其妙。我听了以后觉得男方家里条件可能不宽裕，对金钱比较敏感，相互之间有些过于算计了。 彩礼50万，陪嫁100万，看起来两边的付出是一样的，但实际上男方吃亏。 从法律角度，彩礼只有在双方没领证、领证没有共同生活、付彩礼导致男方家生活困难的情况下才支持返还，而且还只能酌情退还部分金额。通常只要是以结婚为目的索要的彩礼，一般都可以不退还。而陪嫁却是法律明确规定算个人的婚前财产，所以百万陪嫁听着很慷慨，一旦离婚女方是有后手的。 至于陪嫁40万的车，其实就是男方彩礼的钱，夫妻双方婚后共同享受，女方不吃亏。 如果男的选第三项共同买房，女方等于出了50万就占房产的一半，也是稳赚不赔。 说白了，这三个选择走看似公平合理，其实都提前为女儿在未来的家庭中争取到了经济上的保障。但男方也把帐算的明白，不愿意吃这个亏。 这大概是现代婚姻很真实的一面，人还没结婚就会先考虑离婚，提前给自己留退路，想着分手后利益如何分配。 完美主义 8.新闻贼喊捉贼！举报郑爽逃税后，张恒遭重罚：天价分手牵扯3.5亿、纠缠2年 未来的游戏业比现在大100倍 所有互联网娱乐里面，潜力最大的就是网络游戏。 因为其他娱乐方式（视频、音乐、小说）都是被动的，你只是看网站提供的内容，没法参与进去，只有游戏可以参与，因此吸引力和用户粘性最大。 游戏业一直在扩张。以前，电子游戏爱好者基本上都是16岁～35岁的男性，现在不是了，女性和中老年人也是游戏玩家。根据同一份资料，美国36岁～65岁年龄段，女性玩家多于男性；36岁～50岁年龄段，男性玩家比例高于10岁～20岁年龄段。 这意味着，电子游戏正在覆盖所有人口，成为一种全民的娱乐方式。加上它可以不花钱地无限消费，能够把视频、音频、情节、AR、VR、竞技、体育、社交做在一起，未来的发展空间大得难以想象。现在，游戏业已经是巨大的产业，但恐怕还不到三十年之后产业规模的百分之一。 风险投资家 Naval 的分享 硅谷著名的风险投资家 Naval ，在推特说了一句金句，一万多人点赞。 他说：”既懂得制造，又懂得销售，你就是无敌的。” 他的意思是，一家成功的公司，必须同时具备两种能力：优秀的制造能力和优秀的销售能力。 成功的公司，不仅要懂得如何创造出优秀的产品，还要懂得如何把产品卖出去。 这就是为什么公司会设置 CEO 和 CTO 两个角色。一般来说，CEO 负责销售（包括融资）和管理，CTO 负责制造。这两个角色里面，只要有一个没做好，公司就成功不了。 Naval 接着说， 这个世界上，最厉害的人就是既懂得制造，又懂得销售的人。这样的人可以创造出一个行业。 举例来说，马斯克（Elon Musk）就是这样的人，他懂得技术，可以让工程师为他造出想要的东西，他也懂得销售，能让整个世界为特斯拉汽车疯狂。乔布斯也是这样的人，懂得顾客想要什么，以及苹果公司能造出什么，几乎凭一己之力让苹果公司变成世界市值最高的公司。 如果我们把自己的人生看成是一个项目，人生成功也是如此，既要有真才实学，也要懂得推销自己。 对钱不感兴趣的马云，国家3次出手揭开真面目，马云究竟做了什么 1.金融方面。 在去年十月份的时候，马云在上海金融峰会上的发言就掀起了轩然大波，公开直言:我国没有系统性金融风险，因为我国没有金融系统。这句话一出，在场所有人都感到震惊，这简直是对我国金融系统的极度轻视。会议结束后不久，马云旗下的“蚂蚁金服”上市计划就被叫停。 2020年10月，蚂蚁集团发布公告，“蚂蚁金服”要上市。共融资2300亿人民币。但是，经过证监会的调查发现，蚂蚁金服只是一个披着互联网外衣的借贷机构。蚂蚁集团用不到200亿的本金，却发放了超过两万亿的贷款。简单来说，就是马云子啊“钻空子”，向国家银行贷款，再转借给广大民众，自己则从中获利。这套操作其中的“杠杆率”更是超过了100倍。 而且，马云在这个过程中，不会承担任何的风险，一旦其中那个环节出现问题，马云只需要承担1000万的风险，而其他的损失将会由国家银行来承担。一旦蚂蚁集团在运行中出现问题，很有可能在我国国内引发大规模的金融危机。正是因为这个原因，国家才立马叫停了蚂蚁金服的上市。 2.社区团购 平台为了“引流”，采取了许多优惠活动，这个行为直接破坏了市场运行规则。这当然是不被我国所允许的。要知道，我国近些年来对中小实体经济的企业支持力度越来越大，不仅在税收上优惠，在贷款上也提供了很多便利。 在资本运作下的社区团购，使得小型实体经济根本无法生存下去。据大数据分析，社区团购的发展更具有先天优势，未来将会占据大部分市场。而实体经济将会被挤压至一块很小的区域，甚至可能，彻底消失，一旦实体经济没有发展空间，就会导致失业率大大增加，这就背离了我国对经济方面的战略规划。 而且，在社区团购将市场占据完成后，会逐步降低优惠，甚至于加价也有可能，此时实体商贩已经越来越少，民众只能被迫当“韭菜”。对此，人民日报发文直言：互联网公司就该好好地搞科研工作，而不是专注于与靠卖菜为生的老人对抗，让老人无依无靠。 3.行业垄断 在2020年12月份，监管总局发消息称，阿里巴巴在近些年里一直在悄悄购入银泰商业的股份，截目前已经持股近74%，成功控制了银泰商业。涉嫌垄断行为。行业垄断，在资本主义国家可能还能行得通，但是在我国是完全行不通的，所以我国才对马云进行了制裁。 最早天涯论坛一个关于房地产的帖子 1.开闸放水 2.房价飙升 3.卖地解地方ZF债务危机 4.驱赶软妹币存款进入房市 5.外管局最大“对手”消失，外汇暂时安全 6.跟随美帝收紧货币 7.银行通过CDS转移大部分风险 8.限购制造天花板，刺破泡沫，房价下跌 9.高位接盘或投资客无法套现，软妹币资金成功被锁定 10.土地财政转型 11.开征房产税，彻底套死无害散户 12.驱赶剩余资金重新进入实业，保住就业 13.软妹币国际化 国家统计局： 9月70城新房价格6年来首次转跌，七成城市二手房价格下跌，北上广深房价全线下跌； 幸运公式 一个人有多幸运，可以用数学公式表达。 你的幸运 = X 乘以 Y X 是你所做的准备，Y 是你遇到的机会。 如果你的准备为零，那么无论遇到多大的机会，你都不会抓住。你会失去每一个机会。 你准备得越充分，X 就越大，那么你就越幸运。哪怕遇到的只是一个小机会，也会被成倍的放大。 假酒害人不是玩笑话 在选购酒类产品时，要通过正规渠道购买，并留存购物凭证，不要购买价格低廉、包装信息不全的酒类产品。 “酒是粮食精”，远离酒精勾兑酒。 如何区分到底是真酒还是假酒 方法一：看瓶盖：中国白酒的为铝质的，盖上图片文字清晰整齐。盖体光滑，形状很统一，合的严密。如果是假的盖上的文字图片模糊，盖口合的不严，倒过来晃几下酒水可能会洒出来。 方法二：看是否有浑浊：如果是透明的玻璃瓶子，对着阳光，透过瓶体看是否有悬浮物，云雾状的小东西或者沉淀物。真的白酒是无色透明的，假的酒会有悬浮物或者是沉淀物。 方法三：色泽上鉴别，白酒的正常色泽应是无色透明，无悬浮物和沉淀物的液体。将白酒注入杯中，杯壁上不得出现环状不溶物。将酒瓶倒置，在光线中观察酒体，不得有悬浮物、浑浊和沉淀。冬季如白酒中有沉淀可用水浴加热到30～40℃，如沉淀消失为正常。 方法四：验证：到一点就在杯中，在酒中滴一滴油，如果油是均匀的散开并且下沉，说明这酒的质量是优质的。油在酒中下沉速度时快时慢，并且是不规则的散开，说明这酒是劣质酒。 方法五：气味上鉴别，对白酒的香气进行感官鉴别时，最好使用大肚小口的玻璃杯，将白酒注入杯中稍加摇晃，即刻用鼻子在杯口附近仔细嗅闻其香气。或倒几滴酒在手掌上，稍搓几下，再嗅手掌，即可鉴别香气的浓淡程度与香型是否正常。 真酒和假酒的区别： 首先，知道所谓的假酒即是用化学试剂与酒精勾兑后的物质，然后仿制包装、销售最终就流通到的身边，变成的口中常说的假酒。其中，用于假酒勾兑的多为甲醇、酸酯等，故喝完假酒之后的不适感都是由于喝了这些化学试剂引起的现象。 粮食酒：指以粮食谷物为原料，使用传统的固态发酵法酿造出来的白酒。 酒精酒：指以薯类、糖蜜等原料，经液态发酵、蒸馏成食用酒精。然后以液态发酵生成的酒基为基础，经过串香，调香，勾调出来白酒。 粮食酒在酿制过程中会经历：蒸煮、加曲、取酒等多个繁杂的过程，然后才能酿出优质的白酒。酒酿制出来后还要在酒窖放置一段时间，使老酒成熟，这样酒香气才天然、口感才绵柔细腻。 酒精酒基本没什么生产过程，勾兑好就可以装瓶拿去卖了。而且酒精酒可以快速生产不会受原料、时间的影响，有酒精就可以大批量生产。 所以使用食用酒精勾兑出来的白酒为低端酒，而不是假酒，这种酒喝了可能会出现头痛、胃不舒服等情况。食用粮食酿制出来的酒才是真正的白酒，喝多了不会出现头痛、胃不舒服等情况。 牢记瓶身上的这“3行字”，让你彻底和酒精酒拜拜！ 看原料挑酒的时候，一看到原料中有添加剂的身影，就100%确定它是酒精酒，老板再推荐都不买。 看执行编号喝酒的人，应该都知道所有白酒的瓶子上，都有一串数字，这就是行家经常说的执行编号。 大部分编号，不是“1”开头，就是“2”开头，很多人都会弄混，其中以“2”开头的编号中，20821和20822最有名，一旦在瓶身上出现一个，都是要避开的酒精酒。 看等级 这个“记号”很特别，只有纯粮酒的瓶身上才会出现，市面上如今盛行的酒精酒瓶身上，是找不到“等级”存在的。 因为白酒等级，只是用来区分优质粮食酒和劣质粮食酒的，市面上好的纯粮酒，都是优级的。 See also : 告诉你十几种鉴别白酒的方法！ 9.Fun进化告诉碳基，不能把自身的生存寄托于对方的善意。 10.言论创建一家大型互联网公司的最佳方法，就是帮助人们去做他们想做的事情，并使事情变得容易10倍。 人们想在网上写东西，但是大多数网站的发布门槛太高了，所以才有了推特，你只需要写一句话就能发布。 – Evan Williams，Twitter 的创始人之一 父母的心是好的，只是表达方式不对。然而于孩子来说，方式就是一切。 为什么许多人对新冠病毒在全世界造成的大量死亡感到麻木，因为对于我们大多数人来说，这场疫情的最惨痛经历是目击不到的。 – BBC 曾国藩：少年经不得顺境，中年经不得闲境，晚年经不得逆境。 程序员没有必要局限在一种语言或工具。工具每天都在变化，只要新工具适合你的用例，就可以选择它。你的标准应该是，选择最能够快速有效地解决问题的任何语言或工具。 – 《下一个项目要用哪些工具》","categories":[{"name":"周刊","slug":"周刊","permalink":"http://example.com/categories/%E5%91%A8%E5%88%8A/"}],"tags":[]},{"title":"数字周刊 23","slug":"Weekly/数字周刊23","date":"2021-10-22T16:00:00.000Z","updated":"2021-10-22T00:29:04.000Z","comments":true,"path":"2021/10/23/Weekly/数字周刊23/","link":"","permalink":"http://example.com/2021/10/23/Weekly/%E6%95%B0%E5%AD%97%E5%91%A8%E5%88%8A23/","excerpt":"","text":"刊首语常态偏差指的是，人们倾向于相信事物将会以正常的方式运行，不太可能出现不正常的情况，从而低估了灾难的可能性和影响程度。 1.重磅！江苏省乡村振兴战略实施规划（2018—2022年）【把之前收纳的并入进来】 实施乡村振兴战略是建设“强富美高”新江苏的重要战略任务。为什么要提乡村振兴？要把城市人口引流到农村，一方面是治安考虑， 1.加快实现农村现代化发达国家的农业基本都已经实现机械化了，像美国的农业【调查】 优化产业布局、建立现代化经营体系、提高科研创新、经济多元化发展、大力促进农村一二三产业融合发展 【什么是农村一二三产业？】 那么在我国，农业的一二三产业是这样分的： 第一产业是指生产类，种植业、畜牧业、林业、渔业； 第二产业是指基于第一产业的深加工企业，比如面粉厂、果脯厂这类用基本生产资料再加工的，就叫第二产业； 第三产业是指基于第一、第二类产业的服务业，比如运输服务、金融服务、信息服务都是第三产业。 2.培养多层次人才 3.建立生态宜居乡村 4.提升农村人文环境 5.加强农村基础设施建设 6.农村产权制度改革可以交易 实施乡村振兴战略，有利于构建现代农业产业体系、生产体系、经营体系，实现农村一二三产业深度融合发展，为江苏建设现代化经济体系奠定坚实的基础； 深入实施农村人居环境整治行动 到2022年，培育500个左右省级特色田园乡村、保护1000个左右省级传统村落和传统建筑组群，建成1万个左右美丽宜居村庄。 See also 盐城市乡村振兴战略实施规划（2019—2022年）江苏省乡村振兴战略实施规划（2018—2022年） 2.总结1、一个人炫耀什么，说明内心缺少什么 2、一个人越在意的地方，就是最令他自卑的地方。 3、人都有以第一印象定好坏的习惯，认为一个人好时，就会爱屋及乌，认为一个人不好时，就会全盘否认。4、人越是得意的事情，越爱隐藏，越是痛苦的事情越爱小题大作。 5、这个世界既不是有钱人的世界，也不是有权人的世界，它是有心人的世界。6、婚姻的杀手有时不是外遇，而是时间。 7、当你再也没有什么可以失去的时候，就是你开始得到的时候。8、学习要加，骄傲要减，机会要乘，懒惰要除。 9、童年的无知可爱，少年的无知可笑；青年的无知可怜；中年的无知可叹，老年的无知可悲。 10、人允许一个陌生人的发迹，却不能容忍一个身边人的晋升。因为同一层次的人之间存在着对比、利益的冲突，而与陌生人不存在这方面的问题。 3.增强记忆的十种方法增强记忆的十种方法(2013-03-15 01:05:19) 当我们在看完书、听完课后，学习的知识内容很容易就忘记了。记不住，铁定用不出来。可见记忆力的重要性。记忆包括识记、保持、再现、回忆是个基本过程。其形式有形象记忆，概念记忆、逻辑记忆、情绪记忆、运动记忆等。记忆的大敌是遗忘。提高记忆力，实际就是尽量避免和克服遗忘。在学习活动中只要进行有意识的锻炼，掌握记忆规律和方法，就能改善和提高记忆力。 1.注意集中记忆是只要聚精会神、专心致志，排除杂念和外界干扰，大脑皮层就会留下深刻的记忆痕迹而不容易遗忘。如果精神涣散，一心二用，就会大大降低记忆效率。 2.兴趣浓厚如果对学习材料、知识对象索然无味，即使花再多时间，也难以记住。 3.理解记忆理解是记忆的基础。只要理解的东西才能记得牢、记得久。仅靠死记硬背，则不容易记住。对于重要的学习内容，如能做到理解和背诵相结合，记忆效果会更好。 4.重复学习即对学习材料在记住的基础上，多记几遍。达到熟记、牢记的程度。过度学习的最佳程度是150%。 5.及时复习遗忘的速度是先快后慢。对刚学过的知识，趁热打铁，及时温习巩固，是强化记忆痕迹、防止遗忘的有效手段。 6.经常回忆学习时，不断进行尝试回忆，可使记忆错误得到纠正，遗漏得到弥补、使学习内容难点记得更牢。闲暇时经常回忆过去识记的对象，也能避免遗忘。 7.读、想、视、听相结合可以同时利用语言功能和视听觉器官的功能，来强化记忆，提高记忆效率，比单一默读效果好得多。 8.运用多种记忆手段根据情况、灵活运用分类记忆、特点记忆、谐音记忆、争论记忆、联想记忆、趣味记忆、图表记忆、缩短记忆及编提纲、做笔记、卡片等记忆方法。均能增强记忆力。 9.掌握最佳记忆时间一般来说，上午9～11时，下午3～4时，晚上7～10时，为最佳记忆时间。利用上述时间记忆难记的学习材料，效果较好。 10.科学用脑在保证营养。积极休息、进行体育锻炼等保养大脑的基础上，科学用脑，防止过度疲劳，保持积极乐观的情绪，能大大提高大脑的工作效率。这是提高记忆力的关键。 4.定律90-9-1 法则 90-9-1 法则表明，在诸如维基这样的互联网社区中，90% 的用户只看内容并不参与互动，9% 的用户会参与讨论，而只有 1% 的用户会创造内容。 现实世界的例子： 2014 年，对四个健康的数字社交网络进行的一项研究发现，排名前 1% 的人创造了 73% 的帖子，紧随其后的 9% 平均占 25%，其余的 90% 的人平均占 2%。 破窗效应 在破窗理论中认为，一些明显的犯罪迹象(或缺乏环保意识)会导致进一步的、更严重的犯罪(或环境的进一步恶化)。 破窗理论已应用于软件开发中，它表明劣质代码(或 Technical Debt)可能会影响后续优化的效率，从而进一步造成代码劣化；随着时间的推移，这种效应将会导致代码质量大幅下降。 布鲁克斯法则 这个定律表明，在许多情况下，试图通过增加人力来加速已延期项目的交付，将会使项目交付得更晚。布鲁克斯也明白，这是一种过度简化。但一般的论据是，新资源的时间增加和通信开销，会在短期内使开发速度减慢。而且，许多任务是密不可分的，换句话说，这样可以使更多的资源之间能轻易分配，这也意味着潜在的速度增长也更低。 谚语 九个女人不能在一个月内生一个孩子 与布鲁克斯法则同出一辙，特别是某些不可分割或者并行的工作。 CAP 定理 CAP 定理由 Eric Brewer 所定义，它指出对于分布式数据存储来说，不可能同时满足以下三点： 一致性 (Consistency)：在读取数据时，每个请求都会接收到 最新的 数据，或者返回错误。可用性 (Availability): 在读取数据时，每个请求都会接收到一个 非错误的响应，但不能保证该数据是 最新的 数据。分区容错性 (Partition Tolerance)：当节点之间任意数量的网络请求失败时，系统能按预期继续运行。 坎宁汉姆定律 在网络上想得到正确答案的最好方法不是提问题，而是发布一个错误的答案。 5.社会现象我们看到的是因为建房闹出的大大小小的风波，其实事件的根源是始作俑者的自私自利，欺负老实人的心态作祟。总觉得，他不如我混的好等等之类的优越感，开始心生拿捏软柿子的想法并付诸实施。 螃蟹效应:不论我开不开心，我就想看别人不开心；不论我爬不爬的上去，我就想让别人爬不上去。 为什么有些人最见不得身边人过的好？ 要弄清这个问题，可能需要读懂这两句话。 第一句：“人生所有的痛苦，一半来自于自己的失意，还有一半来自于别人的优秀。” 人一旦嫉妒起来，是非常可怕的，不一定是你做错了什么事，你的优秀就是一种原罪。 当原本同一起点的你们，突然变得他够不着了，于是心理渐渐失衡。 接下来，匪夷所思的事情也就出现了。 第二句：“乞丐不会妒忌富翁，但一定会妒忌比他收入高或者脱贫的乞丐。” 知乎上有一个热门问题：“为什么看见闺蜜嫁得好，心里不舒服？” 很喜欢一条高赞回答@俗不可耐 “当你长期被封闭在某个空间里，大概就会把这个空间的得失当做自己的参照系。你此生最大的愿望就是在这个小圈子里出类拔萃。 这就是人类的本性。 反过来，如果你没有长期被禁锢在一个圈子里，你的圈子一直在变，你就会发现你试图在一个圈子里如何如何是多么荒唐的事。 因为鸡头如何比得了凤尾，换个圈子所有的成败都烟消云散。 可是不是每个人都有机会去远方，总有人因为各种原因一辈子都生活在一个地方，一个小圈子里。 就像我们从小都会背的那首诗： “千里修书只为墙，让他三尺又何妨？万里长城今犹在，不见当年秦始皇。” 写它的是，身在京师，贵为礼部尚书的张英。 而老家的亲人，那一刻还在因为身边的一点得失闹得不可开交。 不同维度的人，很难产生不可调和的矛盾。 所以说，大度并不是一个多么高不可攀的品质。 只要你拥有足够多的眼界和见识，自然也就有了足够大的胸襟和格局。 中国人常说：“人心隔肚皮。”这世间最难懂的是人心，最难猜的是人心，最看不透也是人心。见不得身边人过的好，是藏在很多人心底最隐秘的角落，一点点地激发着人性的恶。 这种恶，会吃人，也终会反噬己身。 那么，面对不可捉摸的人性，我们要如何应对？ 我想有三条最基本的准则。 第一，努力跳出圈子。当我们发现身边有垃圾人的时候，最彻底的办法就是加把劲离开他们。 第二，用行之有效的规则代替人际关系的磨损。 对于有些人来说，脱离自身的圈子并不是一件容易的事情。 人与人之间，有日久生情，也必然会有相看两厌。 我们不能指望人际关系自我调和，这时候就必须要守好法律和规则的底线。 人心无法明确的是非，法律去判定；人情无法分明的对错，规则去抉择。 只有这样我们才能避免人际关系的不断磨损，压制住人性恶的一面，放大人性善的一面。 最后，生而为人，劝你善良。 这是莆田凶杀案发生后，一位网友的留言： 同样是建房问题，你让出一米围墙，我给你铺二十米的水泥路。 终有一天，你会发现： 决定一个人过的好不好的，不止你的能力，还有你的格局。 凡事不要欺人太甚。成全别人，就是成全自己。 北大博士挂职报告：县城政治江湖，正在向旧社会转变沦落！ 6.文章在中国有多少钱才算财务自由？ 2020.06.1 我们为什么注定无法财务自由？ 月光博客电子书：《网站创富》 十大最佳iPhone单机游戏推荐 7.北宋动员五十万军队勤王，为何还逃不掉靖康之耻一般提到导致灭亡的靖康之变时，总有人会将下意识地将此战的胜败归为两国士兵战斗力的巨大差异。认为正是因为女真”满万不可敌“，所以在面对孱弱不堪的北宋士兵时，才能一次又一次地创造出后世难以想象的军事胜利。可在冷兵器时代，士兵的战斗力也绝不仅仅体现于体格的强弱、战技的优劣。更何况，在靖康之变中，北宋朝廷同样征调了宋夏边境的西军以及其他边军部队。事实上，相较于战斗力差距这种万金油式的解释，靖康之变中北宋朝廷在军事调度上所显现的低效和无能，才是这场靖康之耻发生的根本原因。 靖康之耻的过程中，女真骑兵曾两度南下围困汴京。一次是宣和七年（1125年）十二月，一次是次年靖康元年（1126年）八月。两次围困战中，汴京城下，宋金两方的军事实力对比不相同的，第一次汴京之围时，完颜宗翰所率西路军被牢牢钉死在太原城下，未能进攻汴京，参与围城的金军，只有完颜宗望的东路军。 根据抗金名臣李纲《靖康传信录》的记载，宗望麾下所统兵马只有六万。而北宋方面，京师内禁军空编严重，仅存“卫士三万”。但由于较早的发布勤王诏令，靖康元年正月二十七日，抵达汴京城下的勤王军“集城下者二十余万”，其中不乏西北名将种师道所帅精锐西军，以及两湖地区彪悍的刀弩手等部队。正是因为勤王军的巨大压力，攻城不利的宗望这才选择签订和约，领兵北归。 但第二次汴京之围的情况却发生了巨大的转变，曾经在太原城下裹足不前的西路军与东路军会师，根据《三朝北盟会编》记载，此战中仅汴京主战场的金军就已达十万众，反观北宋，在第一次汴京之战中就死伤惨重的京师禁军只能以城中乞丐、无赖凑数，而抵达京师的勤王军更是只有南道都总管张叔夜的三万人和王琼、郑建雄的八千兵马。双方的军事实力发生了巨大反转，这才导致徽钦二帝被掳，北宋灭亡的靖康之变。为什么两次汴京之战双方的军事对比如此之大呢？ 事实上，与第一次汴京之围时的情况差不多，北宋朝廷在面对金人铁蹄再次南下时，同样诏令全国各地”守臣自将，倍道并行，星夜前来，殄灭虏寇“。尤其是在发现金人已经抵达开封城下后，更是以“军士复补官资，百姓免五年租赋”的优渥条件，号召全国军民勤王。 可问题也出在这里，第一次汴京之围时，为解京师之困，朝廷同样下旨诏令各地出兵勤王，根据学者统计，此次勤王行动中，全国被动员起来的勤王军队至少在五十万以上。面对刚刚灭亡辽国、凶名在外的女真骑兵，北宋君臣试图以庞大的体量迫使对手退却。这对于兵事不振的北宋而言，似乎是一种稳妥的选择。然而，这种尽起国中之兵的做法带来的后遗症也相当明显，除了河北路距离京畿较近外，其余诸路的勤王军距离汴京路途遥远，一路上的补给极为困难。 尤其是在金兵南下的危机时刻，北宋朝廷一方面建议勤王军自备粮草武器等辎重，另一面也严令各地官员要保障勤王部队后勤。但这种起于仓促间的命令只能是“意识流”的指挥，就跟电视剧里反派军队头目大喊“都给我顶住”一样，毫无指导效果。 其结果是，各地粮饷物资调配困难重重，矛盾不断。如西北种家军，这支久历战火的精锐之师奉王命星夜兼程而来，在第一次汴京之围解除后，在宿将种师中的率领下，前往太原邀击金国宗翰部，然而，这样一支有着重要使命的军队，却因为补给不至“乏食三日”，每日仅能以一勺豆子充饥。最后，粮饷断绝、孤军深入的种师中部士气崩溃，他本人率领亲军与敌接战，身披数创战死。要知道，种师中的哥哥种师道当时被任命为河北河东宣抚使，理论上是负责抗金调度的核心，都说朝中有人好做事，连种师中都不免兵败身死，其他勤王军的境遇就可想而知了。 这倒并不是说当时的地方官员对于勤王一事丝毫不上心，恰恰相反，第一次汴京之围时，汴京并未被完全围困，朝廷政令基本通畅，因为办事不力被免职罢官的官员不少。只是，巧妇难为无米之炊，以当时宋朝地方的储备，想要负担这些勤王军的军事给养，有时并不容易。举个例子，神宗时期北宋曾经派遣五路大军讨伐西夏，有人说，这种分兵作战的方式在战术上绝对是一种智障操作，可是没办法，宋神宗时期北宋改变了军事部署，原本居重驭轻的方式下，京师军力最多，而为了对抗西夏，北宋调遣重兵至西北。就像馆陶人王沿评价的那样，西北以全国四成土地供养北宋七成军队，早已疲敝不堪。以这种补给水平，三十万大军若是集中一路突破，那将是活脱脱一场军事灾难。 勤王军的情况也是类似，承平日久的北宋地方，并没有供给这样一支庞大部队的能力，一旦超过其承载极限的勤王军队同时到达，那么引起的负面后果不堪设想。更吊诡的情况是，宋廷在勤王诏令中鼓励强盗、流寇们勤王免罪，以至于声势浩大的勤王军鱼龙混杂，一些地方官员不得不关闭城门拒绝勤王军进城休整，在这种情况，这些军队的补给状况就更加难以保证了。 诚然，在理论上，宋廷通过系统规划勤王军行进路线，避免大军在地方过分集结扎堆，是可以减少或者避免军队缺衣少粮的情况的。可这毕竟只是理论，这种精细的调度，并不是一个封建政权可以做到的。更何况，以当时的情况来看，不要说这种近乎微操的调度，宋廷对于自己所掌握的军队数，都没有一个精确的认识。《宋代军队数量考》的作者程明生认为，宋朝对于军队士兵数量缺乏最基本的统计，这不是说“吃空饷”这种历朝历代都有的积弊，而是说宋代甚至没有成体系统计过自有的兵员数量，即使有一些统计，但因为口径不一，数据往往彼此冲突，难以为信。 《续资治通鉴长编》中就记载了一个看上去颇为奇怪的细节，宋神宗熙宁七年（1074年）二月辛未、乙亥、己卯三条中，光是河北军队数量就出现了七万、八万九千和九万三种说法，其中甚至有两个数据都是宋神宗本人提到的。宋代军队数量统计之混乱，可见一斑。 尚有锐意进取之心的神宗朝尚且如此，积重难返的徽宗、钦宗时期恐怕就更加一言难尽了，指望当时的大臣们在金兵南下的仓促时间内精准调配各地勤王部队，也有些强人所难。另外，以李纲等人为首的大臣们，即使真的想要居中调配，也是有心无力。 自女真南下起的一年多时间，北宋朝廷一直缺乏一个可以统一指挥调度军政抵抗金军的指挥机构，从一开始的亲征行营使司，到后来的京畿、河北、河东宣抚使司，再到最后大提举守御司和四道都总管并存，这些叫法各异的机构都缺乏真正意义上的独断权，就像钦宗皇帝继位之初说的那样，他力图确保的是“一尊元丰官制”的祖宗之法，在这种环环嵌套、彼此相制的情况下，如李纲、种师道等要员，甚至不能节制姚平仲这样一位仅率三千军队的地方将领。扑朔迷离的“姚平仲劫营”事件中，急于求成的钦宗皇帝越过二人，直接命令姚平仲夜袭金军大营，不仅损兵折将，还差点导致尚为康王的赵构被金军所杀（这似乎也是第二次汴京围城时，赵构领三十余万兵马却对汴京置若罔闻的原因之一），这一事件也是靖康期间北宋混乱指挥调度局面的一个缩影。 在这场陷入罗生门中的劫营事件中，钦宗皇帝本人的态度十分值得玩味。原本曾经因为金军围城惊恐异常的他，在勤王西军到来后终于决定与金军决战。不过似乎因为姚平仲本人的劝说，他决定行险一搏利用姚平仲所部劫营。可在劫营失败后，面对金人的质问，他又将全部责任归于姚平仲、李纲等人。 这位最后身死五国城的皇帝性格怯懦善变，在继位之初的三日内，就曾经在“御驾亲征”“南狩”“守京”等方案中反复横跳三次。这种反复无常没有定式的性格特点，对于靖康之变的发生也有着巨大的影响。第二次围城战发生后，宋廷之所以直到闰十一月十八日才开始“间使往诸道召勤王兵”，也与其本人在战和间的举棋不定有关。 正是因为宋廷的举棋不定，原本就因为第一次勤王而元气大伤的地方各军，直到此时才开始准备筹集勤王军队。然而此时，疲惫不堪又辎重匮乏的勤王军们，面对的是已经被金军团团围住的汴梁，而最善战的陕西勤王军，更是要首先面对堵截在潼关以逸待劳的五万金军。 总的来讲，面对金军的威胁，宋廷原本打算依靠各地勤王军队的体量对其进行震慑，可是，因为缺乏统一的指挥机构，这种粗糙征集方式严重损耗了宋廷的战争潜力，同时，由于宋钦宗本人对是战是和一直举棋不定，贻误战机，这才导致第二期汴京之战中北宋不仅兵员质量上处于绝对劣势，就连数量上都难以跟金军保持平衡。质量数量上的完败下，汴京沦陷、二帝北狩，也就是再正常不过的事了。 8.新闻1.F-16 美国空军邀请7个黑客破解 F-16 战斗机的数据系统，结果发现了不少漏洞。空军感到满意，明年计划邀请黑客攻击轨道上的真实卫星。 2.为什么手机热点的范围比路由器短？ StackOverflow 的问答，算是一个小知识吧。手机热点的范围（10米）要比路由器（30米以上）小得多。这主要因为 Wifi 是双向通信，而手机天线太小，能收到的信号范围有限。 3.广电砸下百亿的CMMB手持电视 2006年10月，广电总局决定推广移动多媒体广播格式 CMMB…现在已经被淘汰了。 4.跌了！大湾区的饼越画越硬，接盘客实在嚼不动了2021.10.05 5.8年补贴15亿，居然还破产了！ 9.Fun@季业：他亲手写下了一部喜剧，自己却不知道笑点在哪儿 世界波 10.言论 如果你为一家公司打工，要做的就是准时上班，尽力满足公司对你最低的期望，8小时工作下班后，回家与家人共度美好时光。这样的话，当公司解雇你的时候，你就没有什么可哭的了。你总能找到一份工作，但无法找回为实现别人的梦想而付出的你的时间。 一个新观念取得胜利，并不是因为说服了它的反对者，而是因为反对者最终都死了，并且熟悉这种观念的新一代人成长了。 – 普朗克，德国物理学家 突然时髦的那些观念，其实你不用放在心上，反倒是那些流传千年的常识，你要珍而重之。因为这些东西之所以能够流传至今，是因为几千年来经过无数代人的亲身检验，发现行之有效。 我一直是”强观点，弱立场”（strong opinions, weakly held）。 不管什么事情，我都会凭直觉得到一个结论，这就是”强观点”；只要有任何与结论相悖的信息，我就会修正自己的观点，这就是”弱立场”。 – 《强观点，弱立场》 如果你遇到个总是指责别人错误，自己永远正确的人，这种人即便不是坏人，也肯定不是什么好人，离他远远的，准没错。","categories":[{"name":"周刊","slug":"周刊","permalink":"http://example.com/categories/%E5%91%A8%E5%88%8A/"}],"tags":[]},{"title":"数字周刊 22","slug":"Weekly/数字周刊22","date":"2021-10-16T16:00:00.000Z","updated":"2021-10-14T11:37:04.000Z","comments":true,"path":"2021/10/17/Weekly/数字周刊22/","link":"","permalink":"http://example.com/2021/10/17/Weekly/%E6%95%B0%E5%AD%97%E5%91%A8%E5%88%8A22/","excerpt":"","text":"刊首语专属or企画 | 业界演员的差距也分三六九等 摘自微博专栏 暗黑制作商 其实这也是所有业界演员都要面临的一个问题，如果没有其他制作商抛来橄榄枝的话，就需要经济事务所去奔走推荐，如果没有制作商愿意接受的话，就只能成为【企画单体演员】了。 【专属演员】和【企画演员】有什么差别呢？这个就要涉及到很多的因素了，可以说不管是工作的形式还是劳动成果都属于天差地别的。 所谓的【专属】顾名思义就是，制作商独占了该演员，这位演员只能在这家制作商发布作品，只能接受与自己有合约的制作商安排的工作， 不能私自去其他制作商那边工作或兼职。 而【专属】又衍生出了【共有专属】，所谓的【共有专属】就是两家制作商都拥有该演员的专属权，通常【共有专属】都比较极端，要么就是两家制作商给予的资源都比较少，要么就是两家制作商联合起来强推，这与演员的个人能力以及人气有关。 通常【专属演员】会有独有的“人设风格”，她的作品风格会有一个系统的设定，比如“美少女”设定就会以此类的风格、画面、角色去发展，同理也会有一些“较为重口”的设定，但是通常这种并不会“玩得很大”，毕竟从某些方面来说，【专属演员】属于“私有化财产”。 而【企画单体演员】呢，就是不被任何制作商独占，她可以接任何制作商的工作，没有限制，也没有特定的风格，咸甜皆可。 【企画】演员的工作基本上是被经纪事务所吃得死死的，因为想和制作商搭上关系又没有制作商的邀约，就要经纪事务所去推销联系，毕竟不是坐在家里等就有工作来敲门的，所以除了拍摄工作之外还需要自己去想办法找工作来做。 如果一个【企画】演员没有人气也没有买气，常规制作商是不太愿意请她来发布作品的，所以就得咬牙去接一些不骑马或“重口”的制作商的工作，所以这一个行业并不是想象中的那样简单，负面的东西非常的多。 而有一些不想受经纪事务所束缚的【企画】演员就更累了，因为没有经纪人去操盘，所有的工作都要自己来做，但这类演员会比较少 除了工作性质之外呢，【专属演员】和【企画演员】最明显的差别就是片酬上的差别 首先要明白的就是，不管是【专属】还是【企画】，乃至导演这些制作人员，都没有资格去参与作品的分红，作品大卖是制作商赚了，作品惨淡就又制作商承担亏本，演员都是领工资的。 一般来说，【专属】演员的单部薪资都是100万日元起跳，有一些人气买气都特别高的演员会远远超过这个起跳价，比如【上原亚衣】曾经一部单体作品在300万日元左右，而【三上悠亚】这种咖位又是巨有钱的【S1】专属，片酬大约也不会低于这个数，但是【专属】演员一个月也就发布一部作品而已。 而【企画】演员的单部薪资几乎也就在20万日元，但是【企画】演员没有作品数的限制。 一个普通的【企画】演员一个月最少都要完成7部作品，收入才能和普通的【专属】演员持平，因为是按作品给经济公司抽佣的，而抽佣都非常高，尤其是没有什么名气的【企画】演员，抽的点数会更高。 因为能接到的工作不多，有一些甚至要去做兼职才能维持生活，因为制作商大部分集中在东京，而东京的物价会让很多没接到工作的【企画】演员忍饥挨饿。 所以从很多方面来说，【专属】演员会比【企画演员】要轻松惬意很多，单从等级上来说也高级一点。 1.加强你的行为。 在使用或克制一种习惯时，你会如何奖励自己？你会为自己的行为设置那些后果？这一过程正是巴浦洛夫的狗反应实验的条件重建部分。改变自己的奖励系统。向成功的方向调节自己，你就会取得成功！你是否每天早上起床后就在为生活奔忙？是什么促使你起床并开始忙碌？你不希望家里的用电被切断，你希望居有定所，希望车子里一直有汽油。为了养成或克服一种习惯，你需要构建同样的奖励/后果系统。若希望减肥或戒烟，你可以每一天将原先花在垃圾食品和香烟上的钱存入罐子里，然后每个星期给自己一次奖励；也可以启用一个储蓄帐号，看着（用于奖励的）钱不断增长；还可以拿这些钱买件新衣服，看场电影，或做另外一些有意思（非破坏性）的事情。 除了违背自己的诺言之外——如果你对自己的言语很重视的话，那可能是严重的事情——你还能够制造出哪些实实在在的后果？不要对自己太粗暴或者太刻薄。要自信，但更要坚定。例如，是否会有一个你很希望参加的有趣的活动？让这活动成为你的习惯（它的养成或者克服）的触发条件吧。确保这活动不会是与孩子的玩耍之类（那可能伤害到孩子感情），而是某些你真心期待的事，例如一场音乐会，一次没有孩子在身边的约会，或一个与朋友共度的夜晚。一旦你能够看到奖励到来的迹象，那件事就能帮助你更加聚精会神。要记得你可能会失去什么。 2.学会减少不确定性二战开始后，德国轰炸伦敦。伦敦市区每天晚上都有炸弹落下，郊区的炸弹比较少，可能每周一次。 战后的调查发现，在这段时期，市区居民的胃溃疡发病率显著增加，奇怪的是，郊区居民的胃溃疡发病率，增加得比市区还要大得多。这说明压力的不确定性比压力本身伤害更大。 –《学会减少不确定性》 3.力求明确：为成功做出计划。 要达到成功你需要细节。要启动一个锻炼计划，就该定出准确的锻炼日数和次数。 你是否需要购买健身器材或加入一个体操队？你需要别人帮忙照看孩子么？预先为整周做计划，并确保你的锻炼计划不要达到损害健康的程度（如果需要可咨询你的家庭医生）。 要停止吸烟，制定一个详细的计划。调查一下你可能会需要的非处方药品，或查阅相关资料。若需减轻体重，千万不要选中一个不健康的减肥计划。某些饮食风潮会花掉你大把的钱，却把你的新陈代谢搞得乱七八糟。如果你得到短时间内减掉大量体重的承诺，如果事情听起来太动听而不像是真的，它很可能就是蒙人的。那种计划会用掉你的钱，使你迅速减肥，但在快速的减掉几磅之后，你又会很快的增肥到比原来还厉害的程度。与其那样，还不如选择一种健康而平衡的饮食计划，列出你每周所需的膳食和杂品。现在想想看，对自己全新生活的第一周，你需要考虑哪些具体细节呢？ 4.各个设备之间的文字传输note.ms 域名简单好记，微信中可以直接打开。用于在各个设备之间或小范围社交内传网址和大段文本。首次访问会自动生成一个链接，记住这个链接就可以快速的传播一些网址或文字，由于没有加密功能所以任何知道这个链接的人都能随意的修改编辑内容。 适合使用场景：公共电脑、小范围社群。 文本派 微信中可以直接打开。用于在各个设备之间或小范围社交内传网址和大段文本，有加密功能。 复仇爽剧，一个百看不厌的类型。 5.个人住房房产税正式开征！税务局发文通知！税率：4‰，6‰！最新消息！个人住房开征房产税！上海开征房产税已落地实施 1、本次上海房产税新规落实执行，或预示着距离全国统一征收房产税的日子不远了。2、随着房产税的全面开征，或留给炒房者的脱手时间急缩。3、租赁市场价格或将出现一定程度的下降。 三部门官宣部分个人住房征收房产税前段时间，上海市财政局、税务局和房屋管理局三部门联合发文：关于本市开展对部分个人征收房产税试点若干问题的通知 我们结合之前上海试点的文件内容，给大家把政策做重点解读如下： 一、征收对象1、本市居民在上海市新购且属于该居民家庭第二套及以上的住房(包括新购的二手存量住房和新建商品住房)。2、非本市居民在上海市新购的住房。 二、住房套数计算居民家庭(包括夫妻双方及其未成年子女，下同)在本市范围内拥有的所有住房(含已签订购房合同的住房)两个或两个以上居民家庭共同拥有或购买住房的，均应计入各自家庭的住房套数，并根据各自拥有住房的份额，分别计算家庭住房面积。 三、税率1、0.6%适用在一般情况下。2、0.4%仅适用于应税住房每平方米市场交易价格&lt;上海市上年度新建商品住房平均销售价格2倍(含2倍)的。 四、计税价格核定应税住房的计税依据为应税住房的市场交易价格。纳税人申报的应税住房交易价格明显偏低，又无正当理由的，由税务机关核定其计税价格。房产税则按应税住房计税价格的70%计算缴纳。 五、应纳税额的计算 应纳房产税税额=新购住房应征税的面积（建筑面积）×新购住房单价×70%×税率。 六、同住人免税住房面积的合并计算对象：本市居民家庭在本市新购且属于该居民家庭第二套及以上住房的、家庭中有无住房的成年子女或其他亲属共同居住、且其常住户口在该居民家庭拥有住房内的，可并入该居民家庭按每人60平方米计算免税住房面积对已并入居民家庭计算过免税住房面积的成年子女或其他亲属,不得重复计算免税住房面积。 七、税收减免优惠1、本市居民家庭因房屋征收或拆迁而购买或取得的住房。2、本市农村居民通过宅基地置换试点政策取得的住房。 八、申报纳税时间按年计征，当年的12月31日前办理申报纳税。上海房产税的开征触动了很多人的神经，很多人甚至喊出房产税快要全国推行了！！！那么，啥是房产税？征收对象是谁？税率是多少？如何计算？又有啥优惠？ 2021年最新房产税税率表 注：对增值税小规模纳税人减半征收城市维护建设税、城镇土地使用税、房产税、资源税、印花税(不含证券交易印花税)、耕地占用税和教育费附加、地方教育附加，已依法享受上述“六税两费”其他优惠政策的，可以叠加享受减半征收。期限为2019年1月1日至2021年12月31日。 房产税减免税项目总结:自行查阅 6.只要在退出前有一项应急计划，你就永远不会退出。 这是最为关键的一个组成部分。你需要在与自己建立的协约中做出承诺，并在企图退出之前开始照应急计划执行。制作一个圣经经文的列表，并通过阅读来带给自己力量吧，到一些私人的地方去阅读它们。写下一些正面的、乐观的断言并对着自己慢慢读出来，直到失败的恐慌和冲动减轻。若企图退出的压力仍然继续，就写下一份朋友们的电话列表，在需要时打电话给他们，告诉他们你当前的想法。绝不要将自己的失败合理化，必要的时候，回到本文再次阅读，并随时提醒自己：我可以做得到！ 积极的向自己传递新的讯息，以便取代旧的。例如，若你正在努力减肥却感觉自己像要死掉一样，事实真的如此吗？你确信自己真的是完全按照医嘱咐计划执行吗？如果你遵循了本文第5条，就可以回答“是的”。重新解释你的饥饿吧，就算你的身体感觉饿，你仍然可以坚持到下一餐的。但想想看你是否仅仅是在情感上觉得饥饿呢：你是否感到生气，孤独，或者疲惫？应该想办法缓解这些情感，而不是用食物来解决问题。 早一些划清界线，将成功机会最大化。如果你是一个刚刚戒酒的酗酒者，不要允许自己进入酒吧。当你碰到最大的压力并且发现你已经在酒吧里面，这就是一个警戒性标志。它标志着你已经越过安全线进入了危险区域，但酒瘾尚未复发。你可以为自己保留一个危险区域，但要早些意识到它，并应尽力避免进入它。可以将这个区域看作你的最后庇护所，但要保证它不会损害你自己或其他人。（处于危险区域的）你的脾气会不会失控？你没有任何理由借此对别人（或自己）发泄。要学会控制危险区域，当你感到自己的怒火开始升腾时，你的危险区域尚处于早期。无论发生什么，对你的警告永远是：离开这种处境。立刻就做，按照应急计划进行，冷静下来。尽最大努力绝对不要进入危险区域，但可以保留一个。 当你被失败的念头诱惑时，数到十，深呼吸，然后按照应急计划进行。坚持尽可能长时间，至少要留出十分钟的活动期。如果在十分钟之后你仍然处在返回过去习惯的边缘，就再一次开始你的应急计划。如此重复直到你的诱惑期过去。太多的人声称“复发是康复过程的一部分”。这仅仅是他们想一直重头做起的借口，这样下去他们将永远无法获得真正的自由。不过，你也不必因为曾经的失败而深深谴责自己，那仅仅是因为当时你还不具备相应的工具和解决方案。但现在你可以做到了，这一次只要按照本文所述的十个步骤去做，就会变得完全不同。绝不要认为自己有什么内在的瑕疵，或者没有脱胎换骨的能力。你和任何人一样有能力，而且只有你自己才能改变自己的生活。现在就开始做吧，长期坚持做。你需要什么样的危险区域和行动计划？现在就将它们建立起来吧。 7.父母坐牢对孩子考公务员有影响吗？这不是危言耸听，这是事实。那么，如果父母坐牢子女可以入党吗？父母坐牢子女可以考公务员吗？父母坐牢会影响几代人？ 一、父母坐牢对孩子考公务员有影响吗 父母坐牢留有案底没有影响，被判处死刑或者正在服刑的，孩子不可以报考公务员。 父母正在服刑或曾经服过刑，对于子女报考普通岗位的公务员是没有影响的，但对于报考警察类岗位还是有一定限制的。 根据《公安机关人民警察录用办法》第六条有下列情形之一的，不得报考人民警察： (一)受过刑事处罚、劳动教养、少年管教的; (二)有犯罪嫌疑尚未查清的; (三)曾被辞退或者开除公职的; (四)道德败坏，有流氓、偷窃等不良行为的; (五)直系血亲和对本人有重大影响的旁系血亲中有被判处死刑或者正在服刑的; (六)直系血亲和对本人有重大影响和旁系血亲在境内外从事颠覆我国政权活动的。 二、公务员考试政审的条件有哪些？ 《中华人民共和国公务员法》第十三条 公务员应当具备下列条件： (一)具有中华人民共和国国籍; (二)年满十八周岁; (三)拥护中华人民共和国宪法，拥护中国共产党领导和社会主义制度; (四)具有良好的政治素质和道德品行; (五)具有正常履行职责的身体条件和心理素质; (六)具有符合职位要求的文化程度和工作能力; (七)法律规定的其他条件。 三、父母坐牢子女可以入党? 父母犯罪坐牢，一般情况下是不影响子女入党的。在《中国共产党章程》规定中，并没有规定入党申请人因直系亲属犯罪而不能入党的限定。所以，只要是优秀分子，能够正确认识其父所犯的罪行和处罚的应当吸收到组织中来。 《中国共产党章程》第一条年满十八岁的中国工人、农民、军人、知识分子和其他社会阶层的先进分子，承认党的纲领和章程，愿意参加党的一个组织并在其中积极工作、执行党的决议和按期交纳党费的，可以申请加入中国共产党。 四、《公务员法》的相关规定，有三种人不能成为公务员 公务员的工作是大多数人都向往的工作，福利待遇，休假制度都是按照国家标准来的。现在成为公务员，必须经过严格的选拔，考取公务员的人需要经过笔试。面试的层层选拔，最后择优录取。笔试、面试都通过之后，公务员还需要有一年的试用期，在参加工作之前，考生还需要进行体检和政审，只有体检、政审都通过的考生才能有望成为公务员。如果这之间有那一项没有通过的话，考生就无法成为公务员，之前为考试付出的时间金钱都付之东流。 根据我国的《公务员法》的相关规定，有三种人不能成为公务员。 第一类人是曾经犯过罪的，但是并不是所有犯过罪的人都属于这一类人，因为《公务员法》明确规定了，犯过罪并且还受到了刑事处罚的，如果犯罪没有受到刑事处罚的也是可以参加公务员考试的。 第二类人是曾经是行政人员或者在国企中担任过公职的人员，因为一些过错被开除了公职的人是不能参加公务员考试，成为公务员的。 第三类人是法律法规规定的不得被录用为公务员的人。 我们可以看出《公务员法》中对不成为公务员的人的规定中，并没有关于“父母”的要求，主要规定的是考生本人的自身条件，自身是否犯罪。 但是我国《公安机关人民警察录用办法》中规定有考生父母的情况。《公安机关人民警察录用办法》规定考生父母和其他直系血亲或者有其他关系的旁系血亲被判处刑罚的正在服刑的，不能报考人民警察。 所以，自己的父母犯罪的，是不影响自己报考公务员和政审的，但是，如果父母正在服刑，是没有办法报考人民警察的。 五、父母坐牢会影响几代人? 法律对此并无规定，但现实中，一般对直系三代旁系两代会有些影响。父辈们有过刑事处罚记录的，子女不能应聘一些如政法类的政审要求程度高的职业。如不能参军。 《征兵政治审查工作规定》第八条 具有以下情形之一的公民，不得征集服现役 (一)散布带有政治性错误的言论，撰写、编著、发表、出版带有政治性错误的文章、著作的。 (二)曾被刑事处罚、劳动教养、收容教育、行政拘留的; 年满14周岁不满16周岁犯罪，依法不予刑事处罚的，或者年满16周岁不满18周岁有严重违法行为尚不够刑事处罚的; (三)因涉嫌违纪、违法正在被调查处理，或者正在被侦查、起诉或者审判的; (四)因犯严重错误被开除公职、勒令辞职、开除学籍或者被开除党籍、留党察看、开除团籍的; (五)有 黑社会性质组织或者犯罪团伙标志、有损国家形象、有损社会公德本身的; (六)与国外、境外政治背景复杂的人员关系密切，政治上可疑的; (七)参加过邪教组织或者进行过活动的，参加过有害功法组织或者积极进行过活动的; 家庭主要成员、直接抚养人、主要社会关系成员或者对本人影响较大的其他亲属是邪教或者有害功法组织骨干分子的; (八)本人或者家庭主要成员、直接抚养人参加民族分裂、暴力恐怖、宗教极端等非法组织、带有黑社会性质犯罪团伙或者进行过活动的; 主要社会关系成员或者对本人影响较大的其他亲属是上述非法组织骨干分子的; (九)家庭主要成员、直接抚养人、主要社会关系成员或者对本人影响较大的其他亲属，有被刑事处罚、开除党籍、开除公职或者有严重违法问题尚未查清，本人有包庇、报复言行的; (十)家庭主要成员有危害国家安全犯罪行为或者严重政治性问题，本人不能划清界限的; (十一)其他不符合征集服现役政治条件情形的。 8.新闻1.常德一男子通过VPN“翻墙”访问境外网站，被行政处罚 据湖南省常德津市市公安局官方微信公众号“津市公安”7月28日消息 2.10000小时规则 美国心理学家重做了著名的”10000小时规则” 实验，结果发现练习10000个小时以后，你可以变得更好，但没法保证你一定会超过其他人。 3.780天的飞行 美国一架太空无人飞机 X-37B 在地球轨道上飞行780天以后，10月27日回到地球。这架飞机大约是小型公共汽车的大小，具有航天飞机的许多设计特征，但是不能载人。它于2017年发射进入轨道，是美军的第五次太空轨道机试验任务。 此前的一次太空无人飞机在太空待了718天，于2017年返回地球。目前，该试验已经累计在太空进行了2865天。 4.贝索斯谈写作与叙事谬误 叙事谬误（narrative fallacy）是畅销书《黑天鹅》创造的一个术语，指的是人类将复杂的现实转变为过于简单的叙述。 该书认为，人类倾向于将不相关的事实归结为因果关系，使其易于理解。这样的叙述让人类在心理上摆脱世界的真正随机性、人类社会的混乱、以及各种不可抗因素带来的影响。 我的感觉是，偏远地区的农村妇女，她们所说的话大部分是不可信的。 5.流感的传播周期 明尼苏达大学传染病研究中心，最近研究了18世纪至今的八次流感大流行。科学家发现其中有七次，在第一次高峰过去后的六个月出现了第二次传染高峰。1918年的大流行，第一轮高峰在夏季到来时过去，但是到了秋末出现了第二轮高峰，比第一轮死的人还要多。 大流行平均需要18个月到24个月才能平息，因为那时全体人群的70％个体已经具有免疫力。 因此，美国科学家认为新冠病毒完全平息，可能也需要这么长的时间。 9.Fun 段子《走近科学》一个人无意中发现自己的墙壁带电，接下来地面也带电，屋子里的空气居然也带电，于是专家开始从地形到空气上进行研究，最后真相居然是电笔坏了。 数据、信息、知识、洞察、智慧 我有个朋友每天上下午各拿出一个小时的时间，来给朋友圈评论，没得评论的就点赞。他说这样朋友们才会记得他，哪怕是不熟悉他的朋友，也会因为他的经常出现而记住他。所以他女朋友是点赞点来的，他的工作是点赞点来的，他买房子的钱也是他点赞借的。他说，人类历史的进步，跟点赞是分不开的。 单方面的给予不会必然换来感激，只有责任的分担，相互支持，双方的互动才会换来良好的结果。 2018年1月，91大神“夯先生”王某雷在上海被抓获。夯先生身高一米八，英国留学归来，是上海一外企高管，年薪百万，妻子端庄美丽，女儿活泼伶俐，家庭生活幸福。本是“人生赢家”，如今却沦为阶下囚，不禁令人唏嘘。据王某雷交待，因工作的需要，他经常出入机场、酒店、酒吧，跟他主动搭讪、示好的女子很多。渐渐地，王某雷成了“情场高手”。 2015年下半年，王某雷在浏览黄色网站时，发现很多人在网络上发自拍视频。随后，王某雷注册了网名为“夯先生”的账号，开始在网站上放一些“自导自演自拍”的性爱视频。他对每部视频进行了明码标价，公开在网上出售，通过贩卖这些淫秽视频来大赚一笔。 “我没有想到这么严重，我以为只是道德层面上的问题，最多触犯治安条例，没有想到是犯罪”，落网后的王某雷这样说。 众所周知，内地的电影审查制度，远比香港那边严格得多，所以，早期的艳星基本上都是港片拍摄出来的，真到了内地，“一脱成名”的其实只有两人：范大姐和汤唯。汤唯牺牲更大，《色戒》之后，导演李安、主演梁朝伟均名利双收，唯有汤唯失去了男朋友，还被封杀了四年。而范大姐的“脱衣露肉”，实际上是由职业“裸替”演员——沈樵代替。 9月27日，济南市破获一起制作、传播淫秽物品牟利案，涉案人员系网红女主播“沈樵”。今年6月，济南市公安机关接某快递企业报案，称一女主播与假冒快递人员在某酒店拍摄淫秽色情视频并在网上大肆传播，对该企业形象造成严重损害。因为演戏不火，为了挣钱和博取人气，网红“沈樵”，以自己为主角编写色情剧本，雇用男主角、摄影、美工等人拍摄、制作淫秽色情视频15部。通过售卖这些视频，沈樵收入人民币16万余元，另外，沈樵还拍摄大尺度私房照和裸聊收入20余万元。目前，沈樵已被公安机关刑事拘留。 遥想当年，郭美美的“一夜三万”、女明星的“一觉百万”，小宝和沈樵这些人，除了罪，剩下更多的，便是蠢。 10.言论 他们把人分成三六九等，最高层的人，能够充分享受物质和精神的供应，然后随着层次的递减，供应就开始减少了；最低层次的人，通常他们接受的物质能量只能勉强维持他们的生活，而精神供应几乎是零。 孩子出生可能会降低一个人的雄心。事实是，一旦有了孩子，你可能更关心他们，而不是自己。 一个人的注意力是零和游戏，只可能有一个项目是你最关心的事。有了孩子，你最关心的事情通常就是你的孩子，而不是你正在从事的项目。 – 《不要雇佣有小孩的人》 你们把眼睛凑近去细察人生吧。从各个方面去看，我们会感到人的一生处处是惩罚。—— 维克多·雨果《悲惨世界》 有些雇主青睐有家庭的男人，因为那样的男人偏好稳定，而且很需要钱！ – 读者对《不要雇佣有小孩的人》一文的留言 如果可以的话，（你应该）多学一点法律。即使不当律师，了解律师的想法也非常有用。法学院教的是社会的操作系统。","categories":[{"name":"周刊","slug":"周刊","permalink":"http://example.com/categories/%E5%91%A8%E5%88%8A/"}],"tags":[]},{"title":"如何不靠运气变得富有(更新中)","slug":"Article/如何不靠运气变得富有(上)","date":"2021-10-12T16:00:00.000Z","updated":"2021-10-21T09:20:26.000Z","comments":true,"path":"2021/10/13/Article/如何不靠运气变得富有(上)/","link":"","permalink":"http://example.com/2021/10/13/Article/%E5%A6%82%E4%BD%95%E4%B8%8D%E9%9D%A0%E8%BF%90%E6%B0%94%E5%8F%98%E5%BE%97%E5%AF%8C%E6%9C%89(%E4%B8%8A)/","excerpt":"如何不靠运气变得富有(更新中) Naval 是美国风险投资家，这是他的3小时长播客《如何不靠运气变得富有》的中文翻译，介绍了他的财富观，非常值得一读。","text":"如何不靠运气变得富有(更新中) Naval 是美国风险投资家，这是他的3小时长播客《如何不靠运气变得富有》的中文翻译，介绍了他的财富观，非常值得一读。 瞄一瞄这 :point_down: 本文搬运自【胖车库】公众号，译者Jessie&amp;明月。胖车库是一个有意思人类的收集计划（开发者、创业者、自由职业者，还有你）和DAO去中心化协作实验室，看看大家都在不同领域做着什么样新的尝试，希望给你未来的可能性提供一些想象力。**杰西和她的朋友们也会在胖车库第一时间更新“如何不靠运气变得富有”系列**，欢迎大家一起来玩耍 :microphone:。 哈哈哈，:smirk: 其实我还整理出notion版和PDF版(我就把PDF导进去iPad，在iPad上看书:books:)，大家戳戳链接就可以看到了。 第一条：追求财富，而不是金钱或地位Nivi：你可能听说过Naval在推特上进行的那一波主题为“如何在不只依靠运气的情况下致富”的推特风暴（tweetstorm）。我们借助这个播客回顾大部分的推文，给Naval一个机会详细聊聊这些话题。他可能会提出一些以前没有发表过的想法。 Naval是AngelList创始人和Epinions的联合创始人。他是一位眼光独到的科技投资人，投出了像Twitter、Uber这样的科技公司。 不只是科技行业的人，各行各业的人都想知道如何解决他们「钱的问题」。每个人都隐约地意识到自己想要变得富有，但是他们没有一套好的原则来遵守和践行。 财富是你睡觉时还能产生收入的资产Nivi：财富、金钱和地位有什么区别? Naval：财富是你渴望的东西，是你睡觉时还在产生收入的财产。举例来说，财富是在夜间还能运行的为其他客户服务的计算机程序。财富是你存在银行里的钱，用于再投资其他资产和业务。 房子是财富的一种形式，因为你可以把它租出去，收得租金，尽管这是一种比经营商业企业更低效的土地使用方式。 我对财富的定义是指那些可以在你睡觉时依然可以为你赚钱的企业和资产。 财富的终极目标是自由你渴望财富，是因为它能给你带来自由。也就是说，你不必像白领那样一丝不苟的系领带；你不必早上6点就起床、996挤地铁上下班；你不必把时间浪费在一份没有灵魂，你不喜欢的工作上。 我们创造财富就是为了自由，仅此而已。而不是去买毛皮大衣，不是去开法拉利，不是去驾驶游艇，也不是去乘坐湾流飞机环游世界。那些东西很快就会变得无聊和愚蠢。它（财富）是关于你如何成为你自己的事。 除非你真的想要财富，否则你不会得到它。全世界都想要它，全世界都在为此努力。在某种程度上，它是有竞争力的。这是一个正和博弈，但其中也有竞争因素，因为现在社会上的资源是有限的。为了获得资源去做你想做的，你必须脱颖而出。 金钱是我们转移财富的方式金钱是社会信用，它是一种从别人的时间中获得信用和债务的能力。如果我做对了工作，为社会创造了价值，社会会说：“哦，谢谢你。我们欠你一些东西，将来会补偿你。这是我的借条，我们把它叫做钱吧。” 钱会贬值是因为, 人们偷了借据 政府增发货币 人们违背IOU 但是金钱试图成为社会的一个可靠的欠条，因为你在为自己的付出而被他人亏欠。我们把这些欠条到处传递，金钱是我们转移财富的方式。 地位是你在社会等级中的地位人生基本上有两大游戏。一个是金钱游戏。钱并不能解决你所有的问题，但它会解决你所有的和钱相关的问题。我想大家都能意识到这一点，所以才想赚钱。同时，在内心深处，许多人认为他们做不到，所以他们不希望任何财富创造发生。他们攻击那些赚钱的企业和企业家们，说他们：“赚钱是罪恶的。你不应该这么做。”但他们实际上在玩另一个游戏，那就是地位游戏。他们试图传递一种信息“我不需要钱，我们不要钱。” 地位指的是你在社会等级中的地位。 财富不是零和游戏。世界上每个人都可以拥有一所房子，你有房子并不会影响我有房子的能力。如果有什么区别的话，建造的房屋越多，建造房屋就越容易，我们对建造房屋的了解就越多，就会有更多的人拥有房屋。 财富是一个正和游戏。我们一起创造，努力创造着寄托着我们美好期待的“艺术品”来解释我们正在做的事情。最终，一些全新的东西将被创造出来。这是一个正和游戏。 另一方面，地位是一个零和游戏。这是一个非常古老的游戏。我们从原始人部落开始就玩这个游戏了。也就是等级制度。老大是谁？老二是谁？老三是谁？老三打败了老二，老二就必须让位。所以，地位是一个零和游戏。 第二条：为世界创造更多财富不是从别人那里拿走什么，而是为这个世界创造更多 财富创造带来了世界的丰富Naval：有一种观点认为赚钱是邪恶的，这个说法好像起源于“金钱是万恶之源”。人们认为银行家偷走了我们的钱，这在某种程度上是正确的，在世界上的很多地方，有很多偷窃行为一直在发生。 从某种意义上说，世界的历史就是创造者和索取者之间的捕食者/被捕食者关系。有些人走出去创造东西，建造东西，努力创造机会。有些人带着剑、枪，或者经济上我们说税收、裙带资本主义，共产主义等等形式，进行着不同形式的偷窃。即使在自然界，寄生生物也比非寄生生物多。你身上有很多寄生虫，它们靠你生存。好的情况是共生，他们会回馈一些东西。但也有很多只是索取。这就是任何复杂系统的本质。 我关注的是真正的财富创造。这不是仅为了赚钱，不是单纯从别人那里拿东西。 显而易见的是，工作不是有限的，财富也不是有限的。否则，我们还会坐在洞穴里，琢磨着如何瓜分柴火，或者偶尔运气好时捕食到的一些死鹿。 人类文明中的大部分财富，事实上是全部财富，都是被创造出来的。它是从某处产生的。它是由人创造，由科技创造，由生产力创造的。它是通过努力创造出来的。这种被窃取的想法是一种可怕的零和游戏，人们试图获得地位的游戏。 每个人都可以变得富有但现实是，每个人都可以变得富有。我们可以看到，在第一世界国家，基本上每个人都比200年前活着的人富有。200年前，没有人使用抗生素，没有人有汽车，没有人能用电，没有人有iPhone。所有这些都是使我们作为一个物种变得更富有的发明。今天，我宁愿在第一世界国家做一个穷人，也不愿在路易十四的法国做一个富人。这是因为财富的创造。 技术的引擎是科学，其目的是创造丰富性。所以，我认为从根本上来说，每个人都可以变得富有。 我想让你们想象这样一种情形。如果每个人都掌握一个好的软件工程师和一个好的硬件工程师的技能，你可以自己造机器人，开发程序，自己建桥，并为它们编程。假设每个人都知道怎么做。 那你认为20年后的社会会是什么样子？我的猜测是，我们会造出各种各样的机器人、机器、软件和硬件来做任何事情。我们都会生活得非常富足。我们基本上就退休了，因为我们都不用为任何基本的东西工作。我们甚至会有机器人护士，会有机器驱动的医院，会有自动驾驶汽车。我们会有100%自动化的农场，会有清洁能源。那时，我们可以利用技术上的突破来得到我们想要的一切。如果有人还在工作，那么他们是在用工作来表达他们的创造力。 我不认为资本主义是邪恶的。资本主义实际上是好的，它只是被劫持了，被不当的外部成本定价所劫持。它被不正当的收益所劫持，在那里有腐败，或者有垄断。 第三条：自由市场是人类固有我们是唯一跨越基因界限进行合作的动物，因为我们可以在自愿的交换中追踪信用（credit）和债务（debt） 自由市场是人类社会固有的Naval：全面的资本主义(意味着自由市场)是人类社会固有的。资本主义不是我们发明的，甚至不是我们发现的东西。它天然存在于我们的每一次交换中。当你和我交换信息时，你一定想从我这里得到一些信息。如果我们没有良好的信息交流，你会去找别人。所以，交换就是在记录信用和债务，这是我们作为灵活的社会动物与生俱来的本领。 我们是动物王国中唯一跨越种群进行合作（协作）的动物。大多数动物只会成群合作，共同进化，它们血液相连，所以它们有一些共同的兴趣。人类没有这种成群合作的能力，也不需要这么麻烦。就算你是塞尔维亚人，他是波斯人，我是印度人，没有任何血缘关系，但我们仍然可以合作。 什么让我们合作？因为我们可以记录借方和贷方。谁投入了多少工作？谁贡献了多少？这就是自由市场资本主义。因此，我坚信这是人类与生俱来的，我们将为每个人创造越来越多的财富。 每个人都可以变得富有，每个人都可以退休，每个人都可以成功。这只是一个教育和欲望的问题。前提是你必须想要它。如果你不想要，没关系，没人强迫你参与游戏。但是不要试图贬低那些积极参与游戏的人。他们没准儿就是那些能让你晚上睡在温暖舒适的床上，让你能更方便的买到全世界的东西，让你能拿着嗡嗡作响的iPhone开心刷抖音的人。因此，这是一场美妙的比赛，值得我们从伦理上、理性上、道德上去挑战一次。它将继续使我们所有人越来越富有，直到我们为任何想要的人创造大量财富。 太多的索取者而没有足够的创造者将使一个社会陷入毁灭Nivi：不只是个人在暗地里鄙视财富，对吧？有些国家、团体和政党公然蔑视财富。至少看起来是这样。 Naval：没错。这些国家、政党和团体正在沦为一场零和博弈。在摧毁财富创造的过程中，他们把每个人都拉低到和他们一样的水平。 这就是为什么美国是一个非常受移民欢迎的国家，因为美国梦。显然，不同的人对财富的定义是不同的。第一世界公民对财富的定义可能是，“我一定要赚到数百万美元。而对于第三世界的贫穷移民来说，当刚进入这个国家的时候，我们只是贫穷的移民，对财富的预期值会更低。它可能只是，“我不需要在我的余生做我不想做的体力劳动。” 但是鄙视它的群体会把整个群体带到和他们一样的水平。如果有太多的索取者，而没有足够的创造者，社会就会分崩离析。你最终会变成一个共产主义国家。看看委内瑞拉就知道，他们不停的忙于获取、分割和重新分配，人们在街上挨饿，每年都因为饥饿而失去几公斤的体重。 另一种思考方式是想象一个有太多寄生虫的有机体。你需要少量的寄生虫来保持健康。你需要很多的共生体。所有细胞中帮助我们呼吸和燃烧氧气的线粒体。这些是帮助我们生存的共生体。没有他们我们无法生存。 但是，对我来说，他们（共生体）是一起创造财富的伙伴，共同创造了人类的身体。但是如果你体内充满了寄生虫，如果你感染了蠕虫，或者病毒，或者细菌，而这些都是单纯的寄生，你就会死亡。所以，任何生物都只能抵抗少量的寄生虫。当寄生元素失去控制时，你就死定了。 我说的还是道德财富创造，不是垄断，也不是裙带资本主义。我说的是自由思想，自由市场。人与人之间的小规模交流是自愿的，不会对他人产生太大的影响。我认为这种财富创造，如果一个社会不尊重它，如果一个群体不尊重它，那么这个社会就会陷入毁灭和黑暗。 第四条：致富与运气无关致富与运气无关，要掌握致富的技能Naval：很明显，我们想要在这一生中不只依靠运气变得富有。很多人认为赚钱是靠运气。它不是，关键是你要成为那种能赚钱的人。比如，假设我输光了所有的财产，你把我随便扔到任何一个说英语的国家的大街上，不出5到10年，我就会再次变得富有（笑）。因为这是一种技能，而且我认为每个人都可以拥有这种技能。在1000个平行宇宙中，你想在其中999个里变得富有。你不想只在靠运气成分的50个里面变得富有对吧？ 我们在这讲的运气有四种。这个分类来于一本书，a16z的马克·安德森(Marc Andreessen)在Pmarca.com这个博客中曾经提到过。 狗屎运 第一种就是狗屎运。你完全无法控制这种走运，俗话说这就是命好。 坚持不懈的实干运 这种幸运来自于坚持、努力、不停的尝试和行动。当你四处奔波创造了各种各样的机会，这期间你输出了很多能量，你做了很多事情，会有大量的能量交换。 你可能会说，人们只有志趣相投才能聚在一起。那我举另外一个例子，Nenad把他做的很棒的动画视频放到了网上，我在Twitter上看到了它们。从这个意义上说，他通过制作视频创造了自己的运气，直到像我这样的人源源不断找到他。 早有预备的运气 第三种方法是你变得非常善于发现运气。如果你在某个领域非常精通，你会注意到在那个领域幸运的事件是如何发生的。当其他人没有注意到它的时候，你会变得对运气敏感，这是通过技能、知识和工作经验的积累达成的。 4.独特的人格给你带来的好运 最后一种运气是最奇怪、最艰难的一种，但这就是我们要讨论的。在这里，你建立了一个独特的人格，一个独特的品牌，一个独特的心态，然后好运会找到你。 例如，假设你是世界上最擅长深海潜水的人。大家都知道，你会进行别人都不敢尝试的深海潜水。然后，有人幸运的在海岸外发现了一艘沉没的宝藏船。他们没办法拿到，只能跑来找你求助。也就是说，他们的运气同时变成了你的运气，你会因此得到非常丰厚的报酬。这是一个比较极端的例子。那个找到宝藏的幸运儿们，走的是狗屎运。但他们不得不来找你帮忙把宝藏拿出来，最终你会得到一部分这里面的财富，这不是运气。也就是说，虽然这个好运的起始不是你，但是你能让那些发现好运的人在关键时刻想起你，很明显你可以在其中起到不可替代的作用。这种情况下你既成就了别人，又分享了他人的好运，这就是你为什么要打造自己独特的个性和品牌。 在1000个平行宇宙中，你想在其中999个里变得富有Nivi：你刚刚提到，在1000个平行宇宙中，你可以在其中的999个变得富有？我想有些人看到后会说：“这听起来不太可能，太夸张了吧。” Naval：不，我不认为这是不可能的。考虑到你的起步条件，我认为你可能得再努力一点。我在印度的时候是个穷孩子，所以如果我能成功，从这个意义上说，任何人都能。很明显，我四肢健全，智力正常，当然我也确实接受了教育。也许有一些前提条件不一样，但如果你在听这个视频或播客，说明你已经掌握了基本的技能，而且有一个功能健全的身体和会思考大脑。 事实上，一路上我其实遇到了很多倒霉事。我赚的第一笔钱，立刻就在股票市场上赔了个精光。我赚的第二笔钱，或者说我应该赚的第二笔钱，基本上都被我的商业伙伴骗走了。这次（成功）已经是第三次了。 即便如此，财富的积累仍处于缓慢而稳定的挣扎之中。我这辈子还没一次性赚过一大笔钱，总是一大堆小事堆积在一起。它更多的是通过持续的构建商业（做创业公司）、寻找投资机会来持续创造财富。这绝对不是一步登天的事。 财富不是一步登天我的个人财富不是在某一年产生的，它是一点点堆积起来的，每一个阶段积累一点。更多的选择，更多的生意，更多的投资，才能撬开更多自己能做的事情。和Nenad的illacertus一样，他在油管上做了一系列视频，没有任何一个视频会在一夜之间让他一夜暴富，这绝对是一个漫长的过程，学习，阅读，创造，这期间会产生复利效应。 我们谈论的是变得富有，这样你就可以退休，你就有更多的自由。退休不是说什么都不做。而是说你不必去任何你不想去的地方，你不必做任何你不想做的事，你想什么时候醒来就什么时候醒来，你想什么时候睡觉就什么时候睡觉，没有老板对你指手画脚。这就是自由。我们谈论的是足够的财富来获得自由。特别是由于互联网的普及，机会到处都是。坦白讲，我有太多的方法来赚钱，我满脑子都是想法，唯一缺的就是时间。创造财富、创造产品、创造企业、创造机会，从社会获得报酬的方式太多了。 第五条：你必须有点异乎寻常，才能独自走在前沿Naval在他的博客中还提到了一些关于第四种运气的有趣例子，但我想让读者了解的一点是，第四种运气其实是来自于你异乎寻常（这里用了eccentric这个词）的行为，所以有时候异乎寻常可能并不是一件坏事。 Naval：没错，因为这个世界非常讲求效率，每个人都在明显的地方挖掘着新奇的、未被发现的东西，这会帮助你建立优势。独自走在前沿可能需要你有点异乎寻常，而且愿意比一般人挖掘得更深，挖掘的更深仅仅因为你感兴趣。 Nivi：对，除了本杰明·迪斯雷利的那句话外，我看过的两句表达这种运气的话，一个是山姆·阿尔特曼（Samuel Altman）说的，“极端的人才能得到极端的结果。”“我认为这句话很好。还有另一个来自斯坦福大学教授杰弗里·普费弗（Jeffrey Pfeffer）的观点，“你不可能既正常又期待异常回报。” Naval：是的。我喜欢的一句与之完全相反的话是，“玩愚蠢的游戏的人赢愚蠢的奖品。”“很多人花很多时间在社交媒体上，比如你试图在Twitter上提高你的社会地位，但你基本上赢得了愚蠢的、价值不大的社交奖项。 Nivi：我想我从这篇博客文章中得到的最后一个观点是，除了狗屎运，你应该去追求这几种运气（尤其是最后一个），这会让你变得越来越幸运。 Naval：是的，起码能回归均值（笑）。所以，你至少要中和运气，这样才能更好的发挥你自己的才能。 第六条：出租时间不会让你变得富有出租时间不会让你变得富有，因为你不能非线性地赚钱Nivi：接下来你会详细介绍如何致富，以及什么不会有助于致富。第一点是：“出租你的时间不会让你变得富有。你必须拥有公司的股权，才能获得财务自由。” Naval：这可能是最重要的一点。人们似乎认为你可以创造财富，通过工作致富。这可能行不通，原因有很多。最根本的原因是，你的投入和产出相关性太强。几乎在任何有薪水的工作中，即使是像律师或医生这样每小时报酬很高的工作，你仍然在投入时间，你的报酬是按每小时或工作量计价。因此，这意味着当你睡觉的时候，在度假的时候，你没有在创造财富；一旦你退休了，你就没有收入了（退休金另当别论）。也就是说，你不可能得到非线性的收入。 如果你看到一些医生非常富有，那是因为他们成立了公司，开了私人诊所。他们通过私人诊所建立了一个品牌，为他们带来持续的口碑和客户。或者他们制造了某种医疗设备或一个程序，且拥有这些东西的知识产权。 因此，本质上你是在为别人工作，而那个人承担了风险和责任，掌握着知识产权，有品牌。所以，他们不会给你足够的工资，他们会付给你最低工资，让你做他们需要的工作。这可能是一个很高的最低限度，但仍然不是你想象的退休后真正的财富。 出租时间赚钱意味着你很容易被替代最后，你甚至没有为社会创造出那么多原创的东西。正如我所说，这场推特风暴应该被称为“如何创造财富”，只不过“如何致富”是一个更吸引人的标题罢了。因为你现在扮演的是固定的角色，而大多数固定角色的任务是可以教会的。如果他们能像在学校那样被教授，那么最终你将会和一个更年轻的、拥有最新知识的人竞争，这个人注定是要取代你的。 更可能的是，你做的工作最终会被机器人或人工智能取代。它甚至不需要一夜之间取代，它可以一次替换一点。所以，基本上在出租时间的模式下（也就是打工），投入和产出是匹配的，但我不认为这是真正创造财富的方式。 你必须拥有股权才能获得财务自由所以每个真正想要致富的人在某种程度上都拥有一个产品，一个企业，或者某种知识产权。它可以是股票或者期权，这也是为什么很多人选择在早期科技公司工作。这是一个很好的开始方式。 但通常真正的财富是通过创办自己的公司，甚至是通过投资来创造的。投资一家公司或者说入股，其实有很多通往财富的路径并不按照小时计数。 追求一份投入与产出“不匹配”的工作为什么你真的需要追求一份投入和产出“不匹配”的工作或者职业，这将会在之后的推特风暴中提到。拥有高创造力和高影响力的企业往往是那些你可以工作一小时的企业，这一小时可能会产生巨大的影响；或者你做了1000个小时的工作，但是没有效果。 我们拿软件行业为例。一方面，一个伟大的工程师可以创造比特币，创造数十亿美元的价值。另一方面，如果一个工程师一直在错误的方向下功夫，或者做得不够好、不够有创意、深思熟虑等等。就算他辛勤工作整整一年，他们发布的每一段代码最终都不会被使用，他都不会有用户。这是一个投入和产出高度分离的行业的例子，它不是以你投入的时间多少来衡量产出的。 再举一个极端的例子，假设你是世界上最好的伐木工人，如果你不用工具，或用最简单的工具（比如一把斧子或者一把锯子）伐木，你也只会比最差的伐木工人强三倍，因为投入和产出是有很强的相关性的，不会有很大的区别。 因此，你要寻找投入和产出高度不相关的职业。这是另一种可以产生杠杆效应的方式。我说的杠杆并不是指华尔街讲的金融杠杆，这个“杠杆”名声不好。我说的杠杆是指工具，人类擅长使用的工具。计算机是软件工程师使用的工具。对于一个伐木工人，如果有推土机、自动机械轴和锯子，他就会使用这些工具，比那些徒手想要把树连根拔起的人更有影响力。 工具和杠杆是造成投入和产出之间不匹配的原因。一个职业的创造力成分越高，它就越有可能有不匹配的投入和产出。因此，我认为，如果你考虑从事投入和产出高度相关的职业，那在这个过程中，你很难给社会创造财富，也很难为自己创造财富。 第七条：我们应该升级自己的自由，而不是生活方式生活水平远低于其收入水平的人们享受着一种自由，这种自由是那些忙于改善生活方式的人们无法理解的 Nivi：除了把时间租出去之外，还有其他无助于致富的事情吗? Naval：有，我之前提到过两条相关的推文。我说的第一个问题是，你的生活方式应该升级，但不应该升级得太快。这句话的大意是说，生活水平远远低于其收入水平的人享受着一种自由，而那些忙于提升生活方式的人根本无法体会这种自由。我认为这是非常重要的，不要总是忙于升级你的生活水平。事实上，如果你能在赚越来越多的钱时，保持稳定的生活水平和期望，就不会有太多烦恼。所以，不要总想着住更大的房子，过更奢侈的生活，以及所有类似的贪心。 世界上最危险的东西是海洛因和月薪假设你现在的工资是每小时1000美元，你肯定不是从20美元每小时的月薪立马涨到1000美元，这一定是个漫长职业生涯的积累过程。这里面一个微妙的问题是，你的生活水平会随着你赚的钱越来越多而升级。你会想当然的认为自己赚了钱，就该马上去提升生活水平，但这会使你深陷在工资奴隶的陷阱里。我忘了是谁，可能是纳西姆·塔勒布说的，“世界上最危险的东西是海洛因和月薪。”没错，因为它们很容易上瘾。你想要变得富有的方式恰恰是你想要变穷，那时你能做（想做）的事情只有工作，工作，再工作。 理想的情况是，你的赚钱路径是离散的这就是科技产业的运作方式。你十年没赚到钱，然后突然在第11年，你会赚得盆满钵盈。顺便说一下，这就是为什么这些所谓的富人的高边际税率是有缺陷的，因为风险最高，最具创造力的职业一定是，前十年都在赔钱。在冒着巨大的风险时，你会不停的流血，流血，再流血。然后在第11年，或第15年，你可能突然赚到一大笔钱。此时山姆大叔（这里指政府）出现了，说：“嘿，你知道吗，你今年赚了很多钱。因此，你是邪恶的，你必须把一切都交给我们。”因此，它只是摧毁了那些创造性的冒险职业。但理想的情况是，你的致富路径是离散的，循序渐进的。这样你不会期待你的生活水平更新的那么快。一旦你致富之后，你还会选择工作，但你只会在你想做的时候做你想做的事，这才是真正的自由。因此，你会做更多创造性的事情，而减少对钱，对奢侈生活的关注。 第八条：给社会提供它不知道如何获得的东西社会会因为你创造了它想要、却不知道如何大规模获取的东西，而给你丰厚的回报 给社会它需要的，但不知道如何规模化获取的东西Nivi：你不会因为出租时间而发财的。但你说，“你会通过给社会它想要，但不知道如何规模化获取的东西而致富。” Naval：没错。所以本质上，就像我们之前说的，钱是社会给你的欠条，你在过去做了一些好事，社会会为你创造它想要的东西而付钱。但社会还不知道如何创造这些东西，因为如果已经被创造了，他们就不需要你了。几乎所有在你家里、工作场所和街道上的东西曾经都是科技产品。有一段时间石油是一种科技产品，这让洛克菲勒很富有；有段时间汽车是科技产品，这使亨利·福特富有。因此，正如丹尼•希利斯(Danny Hillis)所说，技术只是一套还不太管用的东西。一旦某样东西成功了，它就不再是技术了。所以，社会总是想要新事物。 想清楚你能提供的产品，然后考虑如何扩大规模如果你想要变得富有，弄清楚你可以为社会提供哪些它想要、但还不知道如何获取的东西。并且是你感兴趣、在你的能力范围内能提供的东西。想清楚之后，下一步你要考虑如何规模化。因为如果你只造一个，那是不够的。你必须建造成千上万个，上百万个，甚至数十亿个。最好的情况是，每个人都可以有一个。史蒂夫·乔布斯和他的团队当然知道社会需要智能手机。他们口袋里的电脑拥有所有电话功能的100倍，而且使用方便。所以，他们想出了如何建造它，然后他们想出了如何扩展它。他们想出了如何让每个第一世界国家的公民，最终也让每个第三世界国家的公民，都能拥有一个。正因为如此，他们获得了丰厚的回报，苹果是世界上最有价值的公司。 Nivi：我想说的是，企业家的工作是为大众市场带来高端产品。 Naval：它以高端开始。首先，这是一种创造性的行为，你创造它只是因为你想要它。你想要它，需要它，所以你知道如何建造它。其实一开始你是为自己建造它。然后你要想办法把它带给其他人。然后有一段时间，富人拥有它。比如，富人有私人司机，他们有黑色高档汽车。然后优步（Uber）出现了，它让每个人都有自己的私人司机。现在你甚至可以看到Uber pool正在取代穿梭巴士，因为它更方便。然后scooter共享电动滑板车出现了，市场进一步下沉。所以规模化需要考虑的是，如何把曾经只是富人拥有的东西给到给每个人。 第九条：互联网极大地丰富了职业发展的可能性互联网会给你的小众兴趣找到买单的人 互联网极大扩展了职业发展的可能性Nivi：让我们看看下一条推文，这也是我觉得对于你将从事什么工作或者职业非常隐秘和超级有趣的推文。你说：“互联网极大拓宽了职业发展的可能性，但是大多数人目前并没有察觉到。” Naval：互联网最根本的颠覆性是，它使这个星球上的人们能彼此联系，任何一个人只要你想联系总有方法。不论是给他们发邮件，在Twitter上发送推文，还是在Facebook上发布一点他们能看到的动态，或者建立一个他们能来访问的网站。互联网将每一个人都联系在了一起。因此互联网是一个将各个网络连接起来的工具，这就是它的超能力。因此，工具给你了，你要思考怎么去更好的利用它。你要明白，借助互联网，你就总能为你的产品、你的才能、你的技艺找到观众，不论他们来自哪里。 举个例子，Nenad制作了IIIacertus，试想一下，如果你是在互联网出现之前看到的他的视频，那么他需要怎么做才能让你看到呢？他可能抱着电脑挨家挨户展示给他的邻居们看？或者跑到当地的电影院播放？这都是不可能的，他只有把视频放到互联网上才能达到这个效果。然后在这个世界上又有多少人对它真正的感兴趣呢？或者只是对我们正在讨论的东西感兴趣，真正的吸收？结果会发现只有很少一部分人，所以关键就在能触动这些人。 互联网能让你的小众兴趣找到观众互联网最怪异的一点是，它允许各种小众兴趣存在。这就好像养蛇的人、喜欢坐热气球的人、喜欢一人独叶孤舟航游世界的人，亦或是痴迷于微型烹饪的人。就像整个日本的微型烹饪现象一样（哈哈今天刚刚看了一本日本烹饪书叫鸡蛋料理），或者像有一个节目是关于女人帮人收拾家务的节目，对吧？ 因此，无论你拥有多么小众化的兴趣，互联网都能提供给你一个很好的平台去把它规模化。当然，这也不是说你所做的就是下一个Facebook，或者你能获得数以十亿计的用户，但是，如果你仅仅想找到5万个和你一样满怀热情的人，互联网中就有这样一群观众等待着你。 这个问题的绝妙之处就在于，我们生活的星球上有70亿的人。人类DNA的组合方式达到了难以想像的程度。每个人都是一个完全不同的个体，你不可能遇到另一个一模一样的你。 这不像你可以说，“恩…，Nivi，离开我的生活吧。这样我可以让Naval进入我的生命中，我就可以有和他同样的感受，得到同样的赞许，有同样的想法。”但事实不是这样的，任何人不是别人的替代品，人与人完全不同的。因此，正是因为每个人有不同的技能、兴趣，才可以在自己独特的事物上发挥创造力。 但是（在互联网）之前这些并不重要，在前互联网时代，如果你住在意大利的一个小渔村，你的渔村并不一定需要完全独特的技能，那么你就必须遵从现实，从事仅有的工作。但是今天，你可以变得完全独特和独立。 互联网可以让你低成本的「走出去」，找到属于自己的观众。然后你通过创建业务、创造产品、积累财富，你通过在互联网上展现独特的你让大众获得快乐。你事业的发展空间就会因互联网而扩大，电子竞技玩家，在Fortnite上赚了数百万美元。YouTube广播公司、 博客、播客，让人们能够创建内容和上传视频。我听说乔·罗根（Joe Rogan），他的播客有20亿次下载，这为他每年带来约1亿美元的收入。 再举一个PewDiePie的例子，前几天，我转发了一条有趣的推文。PewDiePie在新闻媒体中简直就是信任的代名词。这个来自瑞典的小孩，他的热门新闻频道的流量是主流有线网络流量的三倍。而且这仅仅是在他的新闻频道上， 还不算他的娱乐频道。 可以说互联网为各种小众兴趣提供了沃土，但前提是你要擅于将其壮大发展起来。当然，好消息就是每个人生而不同，每个人都有自己擅长的东西。所以要真实做自己。 通过做自己来规避无意义的竞争还有一条值得一提的推文，它没有被收录到这个推文风暴中。那条是“通过做自己来规避无意义的竞争”。事实上，当你在与人竞争时，往往是因为你在复制别人，因为你在努力干着同样的事情。但是其实每个人生而不同，不要总是忙着复制别人。 很明显，人类喜欢模仿，René Girard有一套完整的模仿理论很有趣。大家都觉得模仿简单，但其实模仿远比你做自己要难。所以不要纯模仿，不要纯复制，专注于做自己的事情，当你真正在做自己时，你就会发现没有人能和你竞争，就是这么简单。 因此，你对你自己是谁和你喜欢做什么认识的越深入，你就会面临越少的竞争。也就是说，当你意识到真实做自己没人能和你竞争后，你就能够通过真实性逃离竞争陷阱。但是，这在前互联网时代是没用的建议，而后互联网时代你能将这些变成现实。 第十条：寻找财富游戏中的长期战友选择一个你可以和长期伙伴玩长期游戏的行业，所有的回报都来自于多次游戏的复利。 寻找财富游戏中的长期战友Nivi：我们来聊聊应该考虑在哪些行业工作？应该做什么样的工作？最好和什么样的人一起工作？这些话题。你说过，“你应该选择的行业是，在这里你有长期战友和你玩长期的游戏。” Naval：是的，这是解释为什么硅谷会成功，也是对高信任度社会能够成功的深刻理解。事实上，生活中所有的收益都来自于复利。无论是在人际关系中，创造财富中，或是在学习中。因此，复利是一种神奇的力量，如果你以1倍的价格开始，然后如果每年增长20%，并且持续30年，你得到的不只是额外的30年乘以20%。它有复利效应，所以它会增长，增长，增长，最后你得到的回报将会不可思议。不管是善意、爱情、人际关系还是金钱。所以，我认为复利是一种非常重要的力量。 为什么致富是一场持久战？长期博弈不仅对复利有利，对信任也有利。如果你看一下囚徒困境类型的游戏，囚徒困境的一个解决方案是以牙还牙，也就是我将对你做你上次对我做过的事，如果你犯了错，我会原谅你。但这只适用于重复的囚徒困境的环境中，换句话说，如果我们重复玩一个游戏多次。 因此，如果你处在这样一种情况下，比如你在硅谷，人们在那里互相做生意。他们彼此了解，相互信任，互相帮助，因为他们知道这个人会在下一场比赛的回合中出现，你迟早会遇到这些人。 当然，这并不总是奏效。也有情况是，有的人在硅谷一举成名，赚到很多钱，但人们会背叛彼此，因为他们只是想，“我要靠这个发财，我不在乎。”所以，所有这些情况都有例外。 但本质上，如果你想成功，你必须与他人合作。你必须知道谁可以信任，谁可以长期信任，和你一起在游戏中走下去。所以「复利效应」和「高度信任的圈子」就是你在游戏中生存的武器，同时也是在游戏的周期结束时，让你获利的主要原因。例如，沃伦巴菲特作为美国股票市场的投资者做得非常好，但他能做到这一点的重要原因是因为美国股市一直保持稳定，并且没有碰到美国政府政局非常差的时期，或者是战争时期。总之底层基础设施没有被破坏。因此，对于他来说，他正在玩一场长期比赛。这种信任来自于美国股市的稳定。 当你转行时，你是在从零开始在硅谷，信任来自于小范围内的人际网络，随着时间的推移，你会发现哪些人是你可以合作的，哪些人是你不能合作的。 如果你不停地更换地点，你就不停地更换团队……假设你从木工行业起步，并在那里建立了一个网络。你努力工作，你试图在木工行业制造产品。然后突然出现了另一个相邻但又不同的行业，但你真的并不了解其中的任何一个人，你想要投身其中，在那里赚钱。如果你持续在工业界跳来跳去——不，实际上我需要打开一系列电动汽车加油站。——这或许有道理。这可能是最好的机会。但是每次你重置时，每次你跳出原来的网络圈时，你都将从零开始。你不知道该相信谁，而且他们也不会很容易相信你。 当然也存在短暂的行业。他们总是进进出出。政治就是一个例子，对吧？在政治上，新人正在当选。你在政治上会看到，有很多老前辈的地方，比如参议院，这里有在这个行业中已经生存很长时间的人，他们都是职业政治家。对于职业政治家有很多不利因素比如腐败。但好处是他们实际上已经完成了彼此的交易，因为他们知道另一个人将在十年之后处于相同的位置，他们将不得不继续与这些老前辈打交道，所以他们最好学会如何合作。众议院每两年都要举行一次大型选举，选出一批新的众议员，由于一直在相互竞争，几乎任何事情都没法完成。“因为我刚来到这里，我不认识你，我不知道你是否会继续在身边，我为什么要和你合作，而不是只是尝试做我认为正确的事情？” 因此选择一个你能长期从事的行业、以及长期伙伴是非常重要的。这些人会表明他们会在你身边存在很久，他们是有道德的，他们的道德信条能从他们的行动上体现出来。 长期游戏中，每个人都在让彼此更富有Nivi：在长期游戏中，似乎每个人都在让彼此更富有。而在短期游戏中，似乎每个人都在让自己更富有。 Naval：我认为这是一个很棒的形容。在长期游戏中，这是一个正和现象。就好像大家在一起烤一个苹果派，大家都在努力尽可能将它做得越大越好。在短期游戏中，我们是在想方设法分这个派。 现在这不是在为社会主义者辩解，对吗？这些社会主义者不是参与烘焙派的人，他们最后出现，说”我想要一片，或者整个派。“他们出现时是带着枪的。但是我认为一个好的领导者并不能赢得荣誉。一个好的领导者基本上都在努力激励员工，这样团队才能将工作完成。然后，奖励将按照公平原则进行划分，谁贡献了多少（或尽可能接近）并承担了风险，而不是谁拥有最长的刀…谁有最锋利的刀。 收益来自重复游戏的复利Nivi：因此，接下来的两个推文是，“玩迭代游戏。生活中的所有的回报，不论是财富上的，还是人际关系上的，或者是知识上的都来自复利效应。” Naval：当你与一个相处了十年，二十年，三十年的老友做生意时，你根本不需要信任他，事情也可以做得越来越好。因为在相处过程中摩擦逐渐减弱，你们可以一起做越来越大的事情。 举个极端的例子，最简单的方法是与某人结婚，生孩子然后养孩子，这就是复利（笑）。投资于这些长期的关系，与更随意的关系相比，这些关系最终是无价的。 在健康和健身方面也是如此。 你的身体越健康，保持健康就越容易。 而你的身体恶化的越多，就越难回到正常的水平。 第十一条： 选择智慧、精力充沛和正直的合作伙伴选择高智商、精力充沛、为人正直的伙伴是你不能妥协的三要素 选择高智商、精力和正直的商业伙伴Naval：在挑选同事方面，选择那些高智商、精力充沛、正直的人，这是你不能妥协的三个要素。 你需要和聪明的人共事，至少他们不是在错误的方向上一路向西。你需要与精力充沛的人共事，因为世界上到处都是聪明却懒惰，光想不干的人。在生活中，我们都认识一些非常聪明的人，他们可以不起床，或者动一动手指就完成很多事情。我们也知道有些人精力很旺盛，但并不聪明，他们工作非常非常努力，但有时在朝着错误的方向埋头苦干。smart不是一个贬义词。这并不是说有人聪明，有人愚蠢。我想表达的意思是，每个人在不同的事情上会表现出很聪明的一面。因此，取决于你想做什么，你才可以找到在这方面很聪明的人来帮你。 然后关于精力，很多时候人们对特定的事情没有动力，但对其他事情有动力。例如，有人可能真的没有动力一天都坐在办公室里工作。但他们可能真的有动力去画画，对吧? 嗯，那样的话，他们应该是画家。他们应该把自己的艺术放到网上，试着探索如何以此为基础建立自己的事业，而不是认命了，戴着项圈，去做一份乏味的工作。这一定是一个长期的事情，很多人在兴致勃勃的发布第一个作品后，发现没有立马收获1w+粉丝的关注而对自己大失所望，然后以此为由失去动力就放弃了。我想说的是，做一件事情的动力终究来自于你自己到底想做什么，觉得什么有意义，而不是为了讨好别人。 最后一点是正直，正直是最重要的，如果只有另外两个品质，你就选择了一个聪明、勤奋的骗子，他最终会欺骗你。所以，你必须弄清楚这个人是否正直。 我之前说过，你要通过信号判断。信号是他们做什么，而不是他们说什么。当他们认为没有人在看他们时，他们会做一些非语言的事情。 动机必须是内在的Nivi：Sam Altman之前有个有趣的观点，当谈到委任时，他说：“委任的关键在于，让人们做他们擅长同时是你想让他们做的事情。”这个道理显而易见，你会和那些自然会做你想让他们做的事情的人合作。 Naval：是的。如果我认为他们不喜欢我想让他们做的事情，我几乎不会创办公司，不会雇人，也不会和别人一起工作。 当我年轻的时候，我常常试着说服别人。但事实证明，你可以说服某人帮你做一件事，但是有时候你不能。你无法让他们保持动力。你可以在一开始就给他们灵感，但除非你是像亨利五世那样的国王，拥有那样的权力指使别人做事情。但如果你想让人们长期保持动力，这种动力必须是内在的。你不能只是创造它，如果他们没有内在的动力，你也不能成为他们的拐杖。所以，你必须确保员工精力充沛，愿意做你希望他们做的事，愿意和你一起工作，一起创造。 诚信反映在一个人的行为，而不是他说了什么解读信号非常非常重要。信号不是人们说什么，而是他们做了什么。因此，注意细微的信号是很重要的。举个例子，比如在公众场合，如果有人对服务员态度非常不好，那么他们对你不好只是时间问题。如果有人压制了一个敌人，并对他们怀恨在心，那么他们把你从朋友重新定义为敌人只是时间问题，你会感受到他们的愤怒。所以，愤怒，愤怒，报复，短视的人在现实生活中的很多互动中都是这样的。人们奇怪地一致，至少身体很诚实。所以，你想找到长期合作的伙伴，你要找的是那些似乎没有理性道德的人。 举个例子，我有一个朋友，他的公司是我投资的，但是公司接近倒闭，他本可以把所有的投资者都鸽了。但他不断地投入越来越多的个人资金，直到公司最终又站起来。在这个过程中，他从未让投资者血本无归。为此我一直很感激他。我说，“哇，你对投资人这么好真是太棒了，你没有坑他们。他觉得被冒犯了。他说：“我这样做不是为了你（投资人），是为了我自己。这关乎我的自尊，是我真正关心的东西。”这种人才是你想要共事的人。 另一个我喜欢的引用，是我另一条相关的推特。我是在别的地方读到它，但是我稍微修改了一下。 “自尊是你对自己的评价”。 好人，有道德的人，容易共事的人，可靠的人，往往有很高的自尊，因为他们对自己的声誉非常在意，他们深刻的明白声誉的重要性。 第十二条：与理性的乐观主义者合作不要与愤世嫉俗者和悲观主义者为伴：他们总是以自我为中心 不要与悲观主义者为伍Nivi：最后一条推文。你说：“不要与愤世嫉俗者和悲观主义者为伍。他们总是自以为是。 Naval：是的。本质上，要创造事物，你必须是一个理性的乐观主义者。理性的意思是你必须看清世界的真相。但你必须对自己的能力保持乐观，对自己想要完成的使命保持乐观。 我们都知道有些人总是很悲观，他们会否定一切。每个人的生活中都有乐于助人的批判者，对吧？他认为他是在帮忙，但实际上他只是在批评（就像我所说的专业的评论家），而且他对每件事都很失望。这样的人不仅在他的生活中不会成就任何伟大的事情，他们还会阻止周围的人做一些伟大的事情或有大胆的想法。他们往往享受挑刺儿的快感，但从未想过提供更好的解决问题的方案，对，他们就是只说不做。有一句经典的军事台词：“要么当头儿，要么服从，要么滚。”这些人想要第四种选择，他们不想当领导，不想跟随，但又不想让路。他们就是想方设法告诉你为什么这事儿行不通。 我认识的所有真正成功的人都有很强的行动力，他们只是做事。判断一件事是否可行的最简单方法就是去做，至少做第一步，第二步，第三步，然后再决定下一步。 因此，如果你想在生活中取得成功，创造财富，或者拥有良好的人际关系，或者保持健康，甚至是快乐，你需要有一种超强的行动力，这样才能获得你想要的。 与理性的乐观主义者合作你要对合理的东西保持乐观。众所周知，没有什么比一个鲁莽的人去追求不值得的东西更糟糕的了。这就是为什么我说“理性”的乐观主义者。你需要在了解所有的陷阱，知道事物不利的一面的情况下，依旧保持乐观。 每个人只在这个星球上活一次，为什么不试着做点大事呢？这就是埃隆·马斯克这种人的牛逼之处，我认为他之所以能激励这么多人，是因为他承担了非常、非常大胆的责任和使命。他为人们树立了一个树立远大理想的榜样。即使是做一些小东西也要花很多功夫。我不认为街角杂货店老板的工作强度比埃隆·马斯克(Elon Musk)低，也不认为他付出的汗水和辛劳比马斯克少，甚至更多。无论是教育水平还是所处环境，不管什么原因，他们没有机会去想那么多，所以影响力就不那么大。因此，最好还是想得远一点。当然还是要理性地，在你的能力范围内保持乐观。 愤世嫉俗者和悲观主义者，他们真正想说的是，这很不幸，但他们基本上是在说，“我放弃了。我想我什么都做不了。所以对我来说，这个世界就像一个没有人能做任何事的世界。”所以他们不理解别人为什么费劲儿地要去做一些事情。 我们是悲观主义者的后代Nivi：也许做一个不理性的乐观主义者或做一个理性的愤世嫉俗者可能更好。 Naval：对于为什么你应该成为一个乐观主义者，有一个完全理性的框架。历史上，如果你回到2000年，5000年，10000年，两个人在丛林中漫步，他们听到了老虎的声音。一个是乐观主义者，说，“哦，它不是朝我们这边来的。另一个说：“我是个悲观主义者，我要离开这里。”悲观的人跑了，活了下来，乐观的人被吃掉了。 我们是悲观主义者的后代，我们天生就是悲观主义者。但现代社会要安全得多，没有老虎在街上游荡，虽然你应该避免彻底破产，但你最终不太可能一无所有。 我想分享的理念是，对于一个人来说，他的境遇是有下限的，但上限却很难说（白话说是你很难饿死，但是成功却不可限量）。因此，适应现代社会意味着要克服你的悲观情绪，做出稍微不理性的乐观押注，因为如果你创办下一个SpaceX、特斯拉(Tesla)或优步(Uber)，你可以为社会和自己创造数十亿美元的价值，并改变世界。 “如果你失败了，有什么大不了的？你损失了几百万美元的投资人（VC）的钱，而他们还有更多钱，这就是他们对你成功的赌注。” 对过去悲观是有道理的，对今天保持乐观是有意义的，尤其对于这么多受过高等教育且生活在第一世界国家的人，甚至是第三世界国家的人。我反而认为第三世界国家的经济机会要大得多。 当然，你必须注意的一件事就是，不要做任何违法的事情，远离可能会带来灾难性的损失的事。尽可能不做对身体有害的事情，注意你的健康。远离那些会让你失去所有资本和储蓄的事情。 因此，不要孤注一掷。但理性乐观的押注会带来巨大的好处。 第十三条：用特殊技能（Specific knowledge）武装自己Naval：如果你想变得富有，你需要想办法获得“规模化”的收入，而不是仅仅期盼每个月的工资。责任感决定了你的客户为什么选择你，杠杆效应决定了它可以被规模化。为什么大家要付给你钱而不是给别人，这需要特殊的技能。这里提到的特殊技能可能是整个推特风暴中最难传达的东西，也是人们可能最困惑的部分。 人们普遍持有一种观点是，任何事情都可以从学校学来，都可以“被传授”，但事实上最有价值的事情不是教来的。但好在任何事情都可以学，大部分情况下你想学的东，要么来源于你的兴趣或DNA，要么是源于你从小养成的一些习惯，这些在之后非常难被“教”会；当然也可能是一些全新的东西，所以没有人知道怎么做；或者在工作培训中也是如此，你在高度复杂的环境中进行各种尝试，在一个特定的领域建立判断。典型的例子就是投资，但也可以是其他方面。可以是开拖拉机的技巧，也可以是预测天气的能力。 因此特殊技能就是你特别关注的技能，尤其是你已经到了20、21、22之后，你几乎就不用去选你需要什么样的特殊技能了。你需要做的就是回顾之前的人生经历中，你建立了什么样的技能是你觉得可以着重被发展的。 特殊技能无法被训练出来特殊技能不是教出来的。如果学校可以教这些东西，那么其他人也可以接受培训，然后我们就可以大规模生产和大规模培训人员。我们甚至可以编程让电脑来做，让机器人来做。如果是这样的话，你就很容易被替代。当有无数的人可以经过培训做这件事的时候，雇主支付给你的只是最低工资，为的就是让你做“这件事”。你获得的收入=投资培训所产生的回报-培训你的成本。 特殊技能与你的兴趣高度相关举个例子，一个人拿到了心理学学位后，成为了一名销售人员。如果他已经拥有比较好的销售技巧，那么心理学就可以作为一种杠杆，使他在销售上做得更好。但如果他一直是一个内向的人，从来都不擅长销售，他们试图用心理学来学习销售，他们不会做得很好。因此，你会发现更多的特殊技能是通过认识到你的天赋、你真正的好奇心和你的热情而建立起来的。不是为了最热门的工作去上学，也不是盲目进入投资人认为的最热门的领域创业。 特殊技能往往处于知识的边缘它也是一些刚刚被发现或者很难被发现的东西。因此，如果你不是100%的投入，其他人会比你做得更好。他们不会比你好一点点，他们会比你好很多，因为现在我们正在运营创意领域，非常适用于复利，适用于杠杆。如果你的杠杆率为1000倍，有人在80％的时间都是正确的，而其他人在90％的时间都是正确的，那么90％的时间正确的人将因为市场的杠杆作用和复利获得数百倍的报酬。因此，如果你想确保自己在这方面具有优势，真正具有好奇心非常重要。 建立特殊技能对你来说就像游戏很多时候，它不是你坐下来然后推理的东西，它更多的是通过观察发现的。你几乎不得不回顾自己的生活，看看自己到底擅长什么。例如，我想成为一名科学家，所以我所坚持的价值观都是围绕着「科学家」来建立的。我认为真正的科学家处于人类生产链条的顶端，他们做出了真正的突破和贡献，对人类社会的贡献可能比任何其他阶层的人都要大。当然，我并不是说艺术、政治、工程或商业等贡献小，但如果没有科学，我们仍然会在泥土中挣扎，用棍子打架，每天忙着生火。我的整个价值体系都是围绕着科学家建立的，我想成为一名伟大的科学家。 但当我真正回头看我擅长的东西，以及我最终把时间花在了什么事情上时，我发现更多的是围绕着赚钱，钻研技术，卖东西（思想），解释事情，和人们交谈。所以，我有一些销售技巧，这是一种形式的具体知识；我有一些关于如何赚钱的分析技巧；我对数据足够敏感，有收集数据，整理并分析数据的能力，这也是我的一个特殊技能。当然我也喜欢摆弄技术。所有这些对我来说都像是游戏，但对其他人来说却是工作。 有些人会觉得这些事情很难，他们会说，“好吧，我怎么才能变得善于表达和推销想法呢?”如果你不是很擅长，或者你不是很喜欢，也许这不是你的专长，专注于你真正喜欢的事情。 有点讽刺的是，第一个指出我真正擅长什么的人是我的母亲。她是在厨房里说这些话的，当时我大概15、16岁。当我在和一个朋友说我想成为一名天体物理学家，她说：“不，你更适合去经商。” 我一脸懵逼，“啥？我妈妈不知道她在说什么吧。” 但事实上，妈妈当然知道她在说什么。她已经注意到，每次我们走在街上，我都会批评当地的披萨店，为什么他们要用特定的配料和特定的方式出售披萨，为什么他们点披萨的过程是这样的，而实际上应该是那样的。因此，她知道我对商业更有好奇心，到后来与我对科学的痴迷结合起来，创造了技术和科技企业，我才发现了真正的自己。因此，你的特殊技能可能是由那些了解你的人观察到的，而且经常是由那些了解你的人观察到的。 第十四条：特殊技能（specific knowledge）极富创造性或技术性特殊技能能通过课程传授获得Naval: 如果说特殊技能可以被传授，那就是在工作中，通过学徒制。这就是为什么最好的企业、最好的职业是学徒或自学的职业，因为这些都是社会还没有弄清楚如何培训以及使其批量自动生产的事情。这方面的经典例子是沃伦·巴菲特从学校毕业后去找了本杰明·格雷厄姆。本杰明·格雷厄姆（Benjamin Graham）是《聪明的投资者》（Intelligent Investor）一书的作者，可以说他将价值投资发展成了一套理论并将其发扬光大。巴菲特去找了本杰明·格雷厄姆，并主动提出免费为他工作。 但格雷厄姆说：“你开的价格太高了，免费恰恰是一种高价格。”格雷厄姆说得没错。就像后来1954年时格雷厄姆决定要与巴菲特共事时（给予他学徒机会），巴菲特给他多少钱都不为过。 特殊的技能具有高度的创造性或者技术性特定的技能也往往具有技术性和创造性。它在技术的前沿，艺术的前沿，交流的前沿。再举个例子，在今天，互联网上有一些梗王能够创造出令人难以置信的梗，并将这一想法传播给数百万人。斯科特·亚当斯（Scott Adams）就是一个很好的例子，他通过有说服力的文字和视频做出准确的预测，基本上正在成为世界上最可信的人之一。 这是他多年来积累起来的特殊技能，因为他年轻时就沉迷于催眠，他通过漫画学会了如何沟通，并很早就开始用直播平台Periscope，所以他一直在练习和人对话，他读过所有关于这个话题的书，他将工作融入到生活的点点滴滴。 这是一个在职业生涯中积累了特殊技能的人的例子。它具有高度的创造性，它具有技术性的元素，而且它永远不会被机器自动化所取代。没有人会把这一点从他身上夺走，因为斯科特·亚当斯（Scott Adams）为了发展自己的品牌也尽心尽力。他积极地创作Dilbert系列卡通画、写书，并懂得借助Periscope直播平台的媒体优势运作。他在这个品牌上拥有巨大的影响力，如果他想在现有的基础上创造更多的财富，他现在积累的东西就他的杠杆。 特殊的技能特定于个体和情境Nivi：我们应该称之为独特的知识还是特殊的技能更贴切？ Naval： 我很小的时候就提出了这个框架，当时特殊的技能就一直伴随着我，我没有尝试改变它是因为我所发现的每一个术语都以不同的方式夸大其词。至少特殊的技能（specific knowledge）这个词没被过度消费，因此我可以赋予他新的含义。独特知识的问题是，是的，也许它是独一无二的，但是如果我从别人那里学到它，它就不再是独一无二的，那么就是我们都知道的东西了。所以，与其说它是独一无二的，不如说它是高度依附于现实的，根据个体的实际情况，根据具体问题存在的，它只能依赖于在这个领域中极度的痴迷、兴趣和所花在这个领域的时间来获得。它不能仅仅从一本书中直接读出，也不能在只在一门课程中获得，也不能被设计成一个算法。 特殊技能不能刻意获得Nivi：说到斯科特·亚当斯，他在博客上发表过一篇文章叫做「努力在2个或以上的领域做到前25%」的文章。在此摘录一段： 如果你想要一个普通的成功的生活，不需要太多的计划。只要远离麻烦，去上学，申请你可能喜欢的工作。但如果你想要与众不同的东西，你有两条路: 成为某方面的最牛逼的人（世界第一梯队） 在两件或两件以上的事情上变得非常优秀(前25%)。 第一种策略几乎是不可能的。很少有人能在NBA打球，也很少有人能出一张白金唱片。真的很难，我不建议任何人去尝试。 第二种策略相当简单。每个人都至少有几个领域是他们可以努力进入前25%的。就我而言，我比大多数人画得都好，但我算不上艺术家。我并不比一般的单口相声演员更幽默，虽然我从来没有成功过，但我比大多数人都更幽默。神奇的是，很少有人能画得很好，也很少有人能写笑话。正是这两者的结合，让我的作品变得如此罕见。当你再加上我的商业背景，我突然有了一个很少有漫画家不亲身经历就能理解的话题。 我总是建议年轻人成为优秀的演说家(前25%)。任何人都可以通过练习来做这件事。如果你把这种才能加到其他任何一种才能上，你就会突然成为那些只有一种才能的人的老板。或者在你的工程学位、法律学位、医学学位、科学学位或其他任何学位的基础上再获得一个商学学位。突然之间，你掌握了主动权，或者你正在利用自己的综合知识创办自己的公司。 因此，不要试图在一件事情上做到最好，这太难了。你需要尝试在三件或更多的事情上做到非常优秀。这是一种获得特殊技能的方式吗？ Naval：我认为最好的方法就是追随自己的内心真正喜欢的事物。在你脑海的某个角落，你会意识到，事实上，这个方面我喜欢，我会留意它的商业方面的可能性。 但我认为，如果你单单为了获得「特殊技能」无病乱投医，或过于以目标为导向地关注钱，那么你不会选择做正确的事情，不会选择你喜欢做的事，所以你不会真正深入进去。根据统计数据，斯科特・亚当斯的观察结果很准。就知识而言，今天有 10,000 个对人类有价值的区域，这 10,000 个区域中排名第一那些位置已经被抢占了。除非你碰巧成为各种领域最痴迷的一万人之一，否则其他人可能会成为这万人中的第一人。 当你开始把3728种一流的销售技巧和很好的写作技巧以及一个非常了解会计和财务的人结合起来，当这个交叉点的需求到来时，你已经通过组合数学从10000扩展到了数百万或数千万。所以，它只是变得没有竞争力。此外，收益在递减。因此，在三四件事上成为前25%要比在某件事上成为世界第一容易得多。 在你擅长得领域建立自己的特殊技能natural是天生的、本来的意思，这里翻译成擅长的。我认为这是一个非常务实的方法。但最重要的是，我认为一个人不要太刻意地开始积累，因为你内心其实是想挑选你最擅长的东西。每个人都有与生俱来的擅长的东西。 我们都很熟悉这句话，一个有天赋的人。“哦，这个人是天生的与人为善的人，这个人就是社交名媛的料，这个人是天生的程序员，这个人是天生的读者。”所以，不管是干什么的料，你都会想着在这方面加倍努力。 因为人类的个性非常复杂，你可能在很多方面都很有天赋。如果把你在这些方面的天赋结合起来，这样你就可以自动地，仅仅通过纯粹的兴趣和享受，在很多事情上，最终达到25%，10%甚至5%的最高水平。 第十五条：学会销售，学会建造如果你两者都能做到，你将势不可挡 学会销售，学会建造Nivi：谈到技能组合，你说过你应该“学会销售（Sale），学会建造（Build），如果你两者都能做到，你将势不可挡。” Naval：这是一个非常广泛的范畴。其中之一是开发产品，即建造。这很难，而且定义很多元。它可以包括设计，开发，可以包括制造，物流，采购，甚至是设计和完成一整套服务。在每个行业，都有一个建造者的定义。在我们所处的科技行业，就是首席技术官CTO，程序员，软件工程师，硬件工程师。但即使在洗衣行业，也可能是创立洗衣服务的人，让物流准时到达的人，确保所有的衣服在正确的时间出现在正确的地方的人，等等。另一方面是销售。同样，销售也有一个非常宽泛的定义。销售不一定只意味着卖东西给个人，它可以意味着营销，意味着沟通，意味着招聘。它也可以意味着筹集资金，意味着鼓舞人心，意味着做公关，等等。 硅谷模式：建造者+销售者=最佳拍档总的来说，硅谷的创业模式是最好的。最常见的形式是有两个创始人，其中一个擅长销售（Sale），另一个擅长搭建（Build）。举几个经典例子，比如苹果创始人史蒂夫·乔布斯和史蒂夫·沃兹尼亚克；微软的盖茨和艾伦在早期可能有类似的分工；谷歌的拉里和谢尔盖可能稍微有点不同，可能是因为谷歌早期交付的是一个非常技术性的产品——搜索，通过一个简单的UI直达终端用户。 在硅谷，你会看到这种模式反复出现。一个建造者和一个销售者的组合：CTO和CEO的组合。风险投资者和技术投资者几乎心照不宣的尽可能地寻找这种组合，这就是神奇的组合定律。 如果你两者都能做到，你将势不可挡如果一个人可以同时做到这两者，这才是真正的超能力。那时你就是可以创造整个行业的人。马一龙(Elon Musk)就是一个活生生的例子。他不一定是自己造火箭，但他实际上做出了技术上的贡献。他使自己成为最了解这项技术的人，没人会对他说三道四，他也不会说一些自己做不到的事（意思是说到就会做到）。他视时间为朋友，并想尽办法运用它。即使是史蒂夫·乔布斯（Steve Jobs）也拥有足够的产品技能，并且对产品的参与度也很高，实际上他也同时具备这两种能力。拉里·埃里森（Larry Ellison）最初是一名程序员，他编写了Oracle的第一个版本，或者说他深度参与其中。马克·安德森（Marc Andreessen）也属于这一类。他可能对自己的销售技能没有足够的信心，但是他可是写出Netscape Navigator的程序员，或者至少是其中很大的一部分。因此，我认为在任何领域中真正的巨人就是可以「自产自销」的人。 宁愿教工程师销售，也不愿教营销人员工程？我认为你可以从建造技能开始入手，并在你人生的早期尽量掌握一定的建造技能。或者你有足够的时间可以专心地学习销售，而且你正好有一定的天赋和亲和力促使你成为一个好的销售者。这样你做事的效果可以翻番。现在我们谈到的销售技能可能不同于传统概念中的，卖东西。 举个例子，假设你是一个很棒的工程师，然后人们会说，你需要擅长销售。你可能不擅长上门推销东西，但你可能是一个很好的作家。写作是一种比面对面销售门槛更低的技能，所以你可以培养写作技能，直到你成为一个良好的在线交流者，然后将其运用在你的销售上。另一种情况，你可能是一个很好的建造者，但你不擅长写作，你不喜欢与大众沟通，但你擅长一对一说服，所以你可能会用你的销售技能来招聘或募资，这需要更多一对一方向的努力。 因此，如果你在这两个领域的十字路口，千万不要绝望。因为你不可能成为最好的技术，也不会是最好的销售人员。但神奇的是，我们再回到斯科特·亚当斯（Scott Adams）的技能组合理论，将两个技能是结合将是不可阻挡的。 从长远来看，那些了解潜在需求产品的人，知道如何建造和销售它的人，最能受到顶尖投资者的青睐。如果他们有足够的精力，他们可以突破任何障碍，做成任何事情。 Nivi：如果你只能选一个擅长的，你会选哪一个? Naval：抛开噪音来说，建造的技能实际上是更好的，因为市场上充斥着太多的骗子和没有任何内核的销售人员。当你刚起步、想要被认可的时候，建造技能会更好。但是之后的建造会很累，因为这是一项专注的工作，很难保持与时俱进，因为总是会有新人出现，有新产品，有更新的工具。 因此，随着时间的推移，销售技巧实际上更容易产生规模效应。比如，如果你在构建产品上享有声誉，这是好的，但当你推出你的新产品时，我将去验证的是产品本身（意思是和建造的名声关系不大）。但是，如果你在大家的眼中是一个值得信赖的生意伙伴，并且你很有说服力，善于沟通，那么这个名声会让很多事变得容易很多。 因此，我认为如果你需要选一个，你可以从建造开始，然后过渡到销售。这是一个比较中庸的答案，但我觉得这奏是大实话。 第十六条：阅读你所热爱的内容 直到你爱上阅读你应该可以在图书馆中拿起任何一本书阅读 阅读你所热爱的内容 直到你爱上阅读Nivi：在我们讨论责任、影响力和判断之前，你已经有了一些相关的推特，我会把它们放在持续学习的范畴。这些推文本质上是在说，“没有所谓的商业技能。少读商业杂志和商业课程，学习微观经济学、博弈论、心理学、说服力、伦理学、数学和计算机”。你在Periscope上还发表了另一条评论“你应该可以从容的拿起图书馆里的任何一本书来读。”这一类的最后一条推特是，“阅读比听快，做比看快”。 Naval：是的，这是最重要的一条，因为学习的基础是阅读。我认识的聪明人，他们都经常读书。 问题是，我读什么？我怎么读？因为对大多数人来说，这是一场斗争，是一件家务活儿。但是，读书不是目的，重要的是学会如何教育自己，教育自己的方法就是培养对阅读的热爱。我想说的是，“读你喜欢的内容，直到你爱上阅读。”就这么简单。 我认识的每一个经常读书的人都“爱”阅读，他们爱读书是因为他们读自己喜欢的书。这有点像第二十二条，阅读是没有门槛的，你可以随时开始，然后不断积累，直到它成为一种习惯。接着，你开始不满足于只涉猎单一的领域。 也就是说，你可以从读小说开始，接着你可以读科幻小说，你可以读非小说，然后你可以读科学，哲学，数学甚至更多。但是重要的是，这个过程是顺其自然非强迫的，读你感兴趣的东西，直到你理解它们。然后你就会自然而然地进入下一步，再下一步。 阅读某一领域的科学原著但是，你会发现在你真正想学的东西中，有太多东西要读。我要提醒的是，即使是阅读也充满了垃圾。实际上有些东西你可以阅读，特别是在早期，它会以某种方式对你的大脑进行编程，然后在你阅读的后期，你会根据之前的东西来分辨这些东西是真是假。因此，阅读基础性的东西是很重要的。基础性的东西，是在特定领域最原始（fundamental）书籍，在本质上是经过时间和历史的检验，科学的东西。 比如，与其读一本商业畅销书，不如读亚当·斯密的《国富论》。与其读今天谁写的一本关于生物学或进化论的书，我更愿意读达尔文《物种起源》。与其现在读一本可能非常先进的生物技术方面的书，我只想学习Horace F. Judson的《创世第八天》(The Eighth Day of Creation)。你不必死磕关于宇宙学和尼尔·德格拉斯·泰森和斯蒂芬·霍金一直在说什么的高级书籍，你需要的是拿起理查德·费曼的《费曼讲物理：入门》，从基础物理学开始。 不要害怕任何书如果你基础打的好，特别是数学、物理和科学，那么你就不会害怕任何一本书。我们所有人都有那种坐在教室里学数学的记忆，这一切都是合乎逻辑的，而且都是有意义的，直到有一次，课程进度太快，我们跟不上了。在那之后，我们被留下来背方程式，记忆概念，却无法从第一原理中推导出它们。在那一刻，我们迷失了，因为除非你是一个专业的数学家，否则你不会记得这些东西。你要记住的是技术，基础。 因此，你必须确保阅读是建立在一个理解的框架上，因为你正在为建摩天大楼打地基，而不只是在反复记忆你不断在丢失的东西。所以基础非常重要。 最后，阅读的终极是当你走进一个图书馆，你上下打量，你不害怕这里的任何一本书。因为你知道你可以把任何一本书从书架上拿下来，你就能阅读它，理解它，你可以接收什么是真的，拒绝什么是假的。你有一套自己的方法论，分辨哪些是逻辑和科学的，而不仅仅是基于大字报和意见（opinions）。 学习的手段是丰富的，学习的欲望是稀缺的互联网的美丽是整个亚历山大图书馆的十倍，并且时刻在你的指尖，为你所用。不是教育手段或学习手段稀缺，相反稀缺的是学习的欲望。所以，你真的要培养欲望。 欲望意味着我不允许这种能力的丧失。孩子们天生就有好奇心。如果你去找一个第一次学语言的小孩，他们总是问：这是什么？那是什么？这是为什么？那是谁？他们总是问问题。 但问题之一是，学校和我们的教育系统，甚至我们培养孩子的方式，都用顺从取代了好奇。一旦你用顺从取代好奇心，你就会成为一个顺从的工厂工人，而不再是一个创造性的思考者。你需要创造力，你需要有激励自己的大脑去学习你想要的东西的能力。 第十七条：数学和逻辑才是一切事物的基础数学和逻辑是理解其他一切事物的基础 终极基础是数学和逻辑Naval：最基本的东西是原则性的，可以是算法，是根深蒂固的逻辑理解，你可以从任何角度保护它或攻击它。这就是为什么微观经济学很重要，而宏观经济学就是大量的记忆堆砌，大量的宏观废话。 正如纳西姆•塔勒布(Nassim Taleb)所说，宏观上的扯淡比微观上的扯淡更容易。因为宏观经济学是巫术—复杂—科学与政治的结合。如今，你找不到两个宏观经济学家在任何事情上达成一致，不同的政治家会用不同的宏观经济学家来兜售他们各自偏爱的理论。 现在甚至有宏观经济学家在兜售所谓的现代货币理论，大概意思就是，有个讨厌的东西叫做通货膨胀，我们可以印所有我们想要的钱。这就像说，有了无限的能量，我们可以发射火箭进入太空一整天。这简直是一派胡言。现实是，有些人打着“宏观经济学家”的旗号，兜售什么现代货币理论，这只能说明，宏观经济学作为一门“所谓的科学”已经腐败。它现在是政治的一个分支。 因此，你要把重点放在基础上。最终一切事物的基础是数学和逻辑。如果你懂逻辑和数学，那么你就有了理解科学方法的基础。一旦你理解了科学方法，你就能理解如何在其他领域和其他你正在阅读的东西中区分真理和谬误。 速食一百本书毫无意义在阅读别人的观点（opinion）时要非常小心，甚至在阅读事实（facts）时也要小心，因为所谓的事实往往只是表面上的(伪科学)观点。你真正需要的是算法（algorithm），是理解（understanding）。最好是慢慢地啃完一本书，然后挣扎、绊倒、倒带，而不是快速地浏览一遍，然后貌似很有成就感：“我已经读了20本书，我已经读了30本书，我已经读了50本这个领域的书…”就像李小龙说的，“我不害怕那些知道一千种踢腿招式的人，我害怕那些练习了一万次出拳或一万踢腿的人。”通过不断重复和运用，不断深入理解逻辑和基础，你才能成为一个聪明的思考者。 学习讲故事和编程Nivi：要为你以后的学习打下基础，我认为你需要两样东西，总结来说。第一，练习说服别人，不断实践怎么讲好一个故事。第二，深入了解一些技术范畴的东西，无论是学习抽象数学，还是读唐纳德·克努斯关于算法的书，或者听费曼关于物理学的讲座。如果你有实际的说服力，对一些复杂的话题有深刻的理解，我认为你的余生将有一个很好的学习基础。 Naval：是的。我把它展开一下。我认为五个最重要的技能是，阅读，写作，算术，然后加上说服的技巧，也就是会讲故事（storytelling）让别人信服。最后，我还要加上计算机编程，因为它是一种应用形式的运算它能让你在任何领域都能自由的建造。如果你擅长电脑，擅长基础数学，擅长写作，擅长说服，如果你喜欢阅读，你就已经为生活做好了准备。 第十八条：没有被称为“商业”的技能避开商学院和杂志 没有被称为“商业”的实际技能Naval：没有所谓商业的实际技能，它太普通了。这就像一种叫做“关联”的技能，定义为“与人相关”。这都不能称作一种技能，它太宽泛了。 我并不想完全贬低商学院传授的东西的价值，他们会传授非常聪明的东西—一些成功的案例/轶事，并称之为“案例分析”（case study）。但它们只是一些趣闻轶事，它们试图通过向你抛出大量数据点来帮助你进行模式匹配，但事实是，在你设身处地思考之前，你永远不能完全理解它们，就像你无法重复打造一个可口可乐一样。但是，你会发现博弈论、心理学、伦理学、数学、计算机和逻辑学中的这些基本概念才会更好地帮到你。这也是我为什么会更专注于基础科学、基础逻辑的原因。我会培养对阅读的热爱，包括阅读那些我们明知道不应该阅读的所谓垃圾。你不必（只）读经典。阅读是你进行自我教育的基础。 着手做比光想要快得多 Nivi：你之前所说的“做比看快”是什么意思呢？ Naval：这涉及到学习曲线的话题，人们总是想方设法的优化自己的学习曲线。尽管我也是一个播客博主，但我不喜欢播客的原因之一是，播客无法让我最快的获取知识和信息。我是一个很好的读者，或者说是一个很快的读者，我能读得很快，但我只能以一定的速度听。我知道人们听的时候都是二倍速，三倍速，但那时每个人听起来都像一只花栗鼠，很难再回头看，抓重点，很难精确定位片段并记笔记，等等。 同样地，很多人认为他们可以通过观察别人做的事情，甚至通过阅读别人做的事情，变得非常熟练。比如刚提到的商学院的案例研究，就是一个非常典型的例子。他们研究其他人的生意，但实际上，你开一个自己的柠檬汽水摊，甚至在街上开一家小杂货店，都会学到比书本上多得多的经营生意的知识。这就是你在工作中要学习的方法，因为很多微妙的东西在你真正进入这个行业之前是不会真正懂得的。 例如，现在人人都喜欢研究心理学。你去看看Farnam Street，读读Poor Charlie’s Almanack*，你可以学习所有不同的心理模式。但哪个更重要？你更常应用哪些？在什么情况下哪一个更重要？这其实是最难的部分。比如，我从心理学研究中最大的收获是，委托-代理问题在现实世界中的驱动力太强大了，这本质是一个激励问题。它让我明白，针锋相对的重复囚徒困境是最值得了解的博弈论。在那之后你几乎可以把博弈论理论书束之高阁了。 顺便说一下，学习博弈论的最好方法是自己设计游戏，自己亲身体验。虽然我从没读过博弈论的书，但我认为自己非常擅长博弈论实践。我从来没有打开过一本博弈论的书，从未尝试在里面发现任何一个我没想到的结果。原因是我从小玩各种游戏，和各种各样的朋友在游戏中碰到各种各样的实际情况，所以这对我来说只是第二天性。实践会告诉你一切你想知道的答案。 “执行”迭代的次数决定着你的学习曲线执行本身是一件很微妙的事请，它包含着很多东西。比如说，我想学习如何经营一家企业。如果我在每天上班的地方重复做同样的事情，比如说我在街上开了一家零售店，每天的任务就是在货架上摆满食物和酒，我不会学到很多东西，因为我每天只是在不断重复。因此，即使我花了几千个小时，但我也只是花了几千个小时做同样的事情。而如果在这个过程中我进行了数千次迭代，那结果就会不一样了。因此，学习曲线是需要迭代的，而不是重复。 但如果我在商店里每天尝试新的营销实验，我不断地改变库存，不断地改善品牌策略，不断尝试新的讲故事的方法，不断地拓展增大客流量的在线渠道，我试着在不同的时间营业，并且经常有目的地四处走走，和其他店主交谈，拿到他们的书，弄清楚他们是如何经营自己的生意的。真正影响学习曲线的是迭代次数。迭代次数越多，收获的就越多，学习速度就越快。而不仅仅是投入的时间长短的问题。 如果你愿意每天流一点血，你可能在未来的人生路上赢得很多虽然世界为我们提供着一次又一次做同样事情的机会，但事实上，如果我们能从零开始寻找新的方法，世界会呈现出不一样的精彩。 第一次尝试新事物是很痛苦的，因为你正徘徊在不确定的领域，很有可能你会失败。因此你只需要不断让自己适应频繁的小失败（bleed a little）。 Nassim Taleb也谈到了这一点。他靠做一个基本上依赖黑天鹅的商人的生意发家致富。Nassim Taleb通过每天损失一点点钱来赚钱，然后在一个偶然的时机，当一件被常识定义为不可能发生的事情发生在其他人身上时，他会赚很多钱。 虽然大多数人每天都想一夜暴富，但相应的，他们需要承担爆炸式的风险，做好破产的心理准备。 如果说你在自然界里割伤了，然后每天都在流血，你最终会因失血而死亡，你必须想办法及及时想办法挽救生命。但其实现实生活没那么夸张，我们并不是每天都在流血，流血在这里只是一个比喻，每天让自己损失一点点。 但现实是，大部分人都不这么做，相反他们每天都在追求着小的胜利，这最终会被证明是不合算的。我想说的是，如果你愿意每天都流一点点血，将来你会赢一笔大的。 其实，这就是创业精神，企业家们每天都在流血（bleed a little）。他们不是在赚钱，他们是在赔钱，而且他们总是亚历山大，因为所有的责任都在他们身上，但是当他们赢了，他们就会大赚一笔，所以总体上来看他们会赚得更多。 第十九条：勇敢承担责任才能获得影响力勇敢冒险你就会在社会上获得影响力 你需要通过责任获得影响力Nivi: 我们何不谈谈责任呢，我觉得这很有趣，我估计你对此有自己独特的看法。因此，你的关于责任的第一条推文是，“拥抱责任，以自己的名义承担商业风险。社会将以责任、公平和影响力来回报你。” Naval: 是啊，所以要想发财，你需要杠杆。杠杆来自于劳动力、资本，也可能是通过代码和媒体。但其中的大多数，比如劳动力和资本，必须来自于他人的给予。对于劳动力，必须是有人愿意跟随你；对于资本，必须有人给你钱或资产来让你管理和使用。 所以要得到这些，你必须建立信誉，而且你必须尽可能以自己的名义去做，当然这也是有风险的。所以责任是一把双刃剑。它能让你在事情顺利的时候收获信誉，在事情糟糕的时候承受失败的冲击。 以自己的名义承担商业风险从这个意义上说，那些在各种事物上贴上自己标签的人并不愚蠢，他们只是对自己有信心。也许最终结果是愚蠢的，但如果你看到一个坎耶、奥普拉、特朗普、马斯克或其他类似的人，这些人之所以可以凭借自己的名字致富，是因为他们的名字就是强大的敲门砖。 不管你如何看待特朗普，你必须意识到，这家伙的名字就是世界名片。你为什么要去特朗普赌场？只是因为是特朗普。你为什么要去特朗普大厦？也是因为特朗普。 到了投票的时候，我想很多选民只是进去说“特朗普”，他们认出了这个名字，所以这个名字得到了回报（获得选票）。 奥普拉也是同样的，她把某样东西打上自己的标签，当商品到达人们手中，她的名字就是这些商品的招牌。 这些人在坚持把自己的名字打造成招牌的同时当然也面临着一系列的风险。显然，特朗普现在可能被世界上的一大部分人憎恨着，也同样是因为特朗普式的风格。 把你的名字公之于众，你就会成为一个名人，而名声也有很多缺点。隐姓埋名、有钱总比穷出名好，但即便是名利双收，也有很多不利因素。你需要在公众的眼皮子底下生活。 一个运作良好的团队对每个职位都有明确的责任分工责任感是非常重要的，当你正在开发一个产品，或者你在一个团队中工作，或者你在一个企业中工作时，我们就会不断地提醒自己成为一个团队的一员是多么的重要。这的确是非常重要的。 我们在社交方面的很多训练都告诉我们不要强出头。就像中国的一句俗语，枪打出头鸟，别紧张，但是我要说的是，一个真正运作良好的团队规模很小，对每一个不同的部分都有明确的责任分工。 你可以说，“好吧，这个人负责制造产品，这个人负责信息发布，这个人负责筹款，这个人负责定价策略，也可能负责在线广告。“所以如果有人搞砸了，你就知道到底是谁负责。同时，如果事情进展顺利，你也清楚地知道是谁做得很好。 如果你有一个很小的团队，并且你已经清楚地划分了责任，那么你仍然可以保持很高的责任感。问责制在面对结果时显得真的很重要，不然就会出现，如果失败了，每个人都会互相指责，如果成功了，每个人都会站出来争夺功劳。 我们在学校的时候都有过这样的经历，有一个小组作业要做，里面可能有几个人做了很多工作，然后有一些人只是做了很多哗众取宠的工作或者强行给自己做的工作加戏。我们从小就习以为常，但说出来难免会感到不舒服。 能在公众面前坦然面对失败的人都有很大的能量明确责任很重要。没有责任感，你就没有动力；没有责任感，就无法建立信誉。但你要冒险，你冒着失败的风险冒着被羞辱的危险，你冒着以自己名义承受失败的风险。 幸运的是，在现代社会，不再有债务人的监狱，人们也不会因为失去别人的钱而坐牢或被处死，但与生俱来的，我们不会以自己的名义在公共场合失败。那些以自己的名义在公共场合面对失败的人，实际上拥有很大的能量。 例如，我讲一个个人轶事。直到2013年，2014年，我的公众形象完全围绕着创业和投资。直到2014年、2015年左右，我才开始谈论哲学、心理学等等。 这让我有点紧张，因为我是以自己的名义做的。肯定有业内人士通过背后悄悄戳我，比如“你在干什么？你要结束你的职业生涯了吗？这太愚蠢了。” 我有点同意了，的确，我冒险了。 当你把你的名字放在那里，你就要冒着某些风险。但同时你也会得到回报，你会得到好处的。 第三十五条：冷静的头脑，健康的身体，充满爱的家庭当你变得富有时，你会发现这些都不是你一直以来追求的 Nivi：最后一条关于长期工作的推特是：“当你最终变得富有时，你会意识到这些并不是你最初想要的。” Naval：这本身就是一个能谈论很久的话题。首先，我认为这是一个非常聪明的结论，它解放了那些说“致富有什么意义？”的人们的思想武装。有很多人喜欢以德服人，反对创造财富或赚钱的想法。这其实也没错。是的，钱能解决你所有能用钱解决的问题，但钱也不是万能的。 当你赚了一大笔钱后，你首先意识到你仍然是同一个人。如果你本来快乐，你就还是快乐的。如果你本来不快乐，你就会不快乐。如果你平静、满足、平和，你还是那个人。我认识很多非常富有的人，他们身材非常不好。我也认识很多有钱人，他们的家庭生活很糟糕。我同时也知道很多有钱人，他们内心很混乱。 平静的头脑，健康的身体和充满爱的家庭必须要经营我想到我之前发的另一条推特，也是我最喜欢的一条。它不一定是最有见地的，也不一定是最有用的，这甚至不是我想的最清楚的。但那里面有一个非常确定的事实，它引起了共鸣。 “健康的身体，平静的头脑，充满爱的家庭。这些东西是买不来的，必须要经营才能得到。” 即使你拥有世界上所有的钱，你也不会拥有这三样东西。Jeff Bezos（亚马逊董事长）还得健身，他也得为他的婚姻努力，他的内在精神状态仍然很难不被外部事件所影响。这将取决于他内心的平静与安宁。因此，我认为这三件事——你的身体健康，你的心理健康和你的亲密关系是你必须要培养的。他们能给你带来比任何金钱都多的安宁和幸福。 关于平静内心状态的实用性建议如何才能保持内心平静，这个话题是我一直在研究的。我大概有100条这个方面的推特。在这个话题上，最近经常会遭到至少50种不同形式的攻击。所以我一直在犹豫要不要做，因为我想针对一种非常特殊的人群。 有很多人不相信研究内在状态是有用的，他们太注重外在。没关系，这样也的确没什么问题。这就是“如何致富”推特系列的目的。有很多人认为唯一值得努力的就是**彻底解放(complete liberation)**，就像，你成了佛。他们会怀疑过程中的任何东西，认为它们毫无用处。但事实是绝大多数人没法儿成佛不是吗？ 我想创建一个新的推特系列，来为那些想要一个更平静的内在的人们提供实用的建议。一套理解、分辨半真半假和真理的理论，如果你能正确地吸收它们，这些都是指向你已经拥有的想法和经验的指针；如果你把这些理论慢慢融会贯通，它将帮助你、引导你进入一个更平静的内在状态，这就是我想做的。 健身是另一个大问题，我不是这方面的专家，推特上有很多比我更擅长健身的专业人士。 很多离婚案例是为了钱，很多争吵是因为内心恐惧我认为，一个充满爱的家庭和人际关系实际上是自然而然地从其他事情中脱颖而出的。如果你有一个冷静的头脑，你已经赚了钱，你应该有良好的关系。你没有理由不这样做，很多离婚都是为了钱，不幸的是，这就是现实，有了钱但是丢失了家庭这部分。 很多外在的纷争主要是因为你的内在状态不好。当你内心自然平静的时候，你会选择更少的争斗，你会变得更有爱心而不期待任何回报，这会让你应对外部关系更加得心应手。 Nivi：总结一下，钱能解决你的关于金钱的问题，金钱可以让你在物质世界中获得自由。金钱能给你不去做你不想做的事情的自由。 Naval：是啊。对我来说，金钱的最终目的是让你不必在某个特定的地方的某个特定的时间，做任何你不想做的事情。 第三十六条：没有什么快速致富的方法别相信能快速致富的鬼话，那些人只是想从你身上赚钱而已 Nivi：我们跳过了一条推文，因为我想涵盖所有关于长期话题的推文。我们跳过的那条推特是，“世界上没有快速致富的捷径，如果谁告诉你有，那不过是他想从你这里发财罢了。” Naval：我们说回有效率的世界。如果有一种简单的致富方式，那就是已经被开发了。有很多人会向你推销如何赚钱的产品，比如他们总是卖给你一些79-95美元的课程或一些有声读物，或研讨会门票。这没什么对错，人们总是需要谋生。他们可能真的有很好的建议，但如果他们给你可行的、高质量的建议，承认这（致富）是一个艰难的旅程，会花很多时间，那么我认为这是现实的。但是，如果他们卖给你一些快速致富的各种线上线下的产品，他们只是想从你身上赚钱，你要掂量一下它的价值。 我们不放广告，因为我们知道那只会损害信誉关于整个推特风暴和这个播客，我想强调的一件事是我们这里没有广告，也不收任何费用。我们不卖任何东西。不是因为我不想赚更多的钱，赚更多的钱总是好的。但是，它会完全破坏企业的信誉。如果我说，“嘿，我知道如何致富，我要把它卖给你。“这就毁了它。 我年轻的时候就开始思考致富的话题，我最喜欢的书之一就是《如何致富》，作者是Felix Dennis，《Maxim》杂志的创始人，一位去世的亿万富翁。他写了很多疯狂的东西，但他对财富的理解真的好。 但每当我读到他或GoDaddy创始人鲍勃·帕森斯或安德鲁·卡内基的作品时，这些已经非常富有的人写的东西，他们显然是在其他领域发家致富的，而不是靠推销如何致富的方法。他们不是想从你身上赚钱。他们显然是想赢得一些地位和一些自尊，对吧，你总是要有做某事的动机。但是，至少这是他们没有撒谎的一个更清晰的理由。 每个创始人都会对他的员工撒谎在某种程度上，每个创始人都要对公司的每个员工撒谎。他们必须让员工觉得，你为我工作比做你自己想做的事，为你自己工作（创业）要好。同样作为一个创始人，但对此我总是很难接受。 于是我开始尝试一些保持诚实的方法，我招募了一些有企业家精神的员工，然后告诉他们，“你们可以在这个公司成为企业家，当你们准备好开始自己的事业的那一天，我将支持你们。我永远不会妨碍你创业。但在你想开始一些新东西之前，这里可能是一个好地方，让你学习如何构建一个良好的团队，建立一个好的企业文化，通过打磨自己的技能找到适合的产品市场，见更多更加优秀的人、和他们交流碰撞，直到最终想通自己到底想做什么。因为定位、时机、以及必要的深思熟虑，在开始创业时很重要。” 但我从来不会做一些无谓的监督，告诉员工“你必须在早上8点之前到你的办公桌。”因为我自己就不会在早上8点之前坐在办公桌前，我想要自由。这就像告诉他们你今天很擅长做董事，明天你就会成为副总裁。这种话我自己都不相信。 任何提供致富建议的人，去想想别的赚钱方式吧就好像，你不会想从一个胖子那里学到如何保持健康；也不会想从一个抑郁的人那里学到如何快乐。所以，你不会想从一个穷人那里学习如何致富，也一定不想从一个通过告诉别人如何致富来赚钱的人那里学习如何致富。想想都奇怪不是吗？ Nivi：任何时候，如果你看到有人按照大师的建议致富了，只要记住，在任何随机事件中，如果你持续足够长的时间，如果有足够多的人参与其中，你就会得到想要的结果。 Naval：这里面存在着幸存者偏差，这也是为什么当商业记者和经济学家谈论私营公司时，你可以完全忽视他们的原因。 我不会指名道姓，但当一位著名的经济学家对比特币大加抨击，或者当一名商业记者攻击最新一家即将上市的公司时，这完全是胡说八道。那些人什么都没做，他们只是「专业的评论家」。他们对赚钱一无所知。他们只知道如何通过吐槽和批评来博眼球。你要是不停的被他们洗脑可就太蠢了。 最后我想引用纳西姆·塔勒布*的一句话，我很喜欢他说的话，“如果你想成为一个哲学家，先当国王，再当哲学家。”不是先成为哲学家，再成为国王。” Nivi：我很高兴你提到了塔勒布，我想请大家记住他成名作的书名《随机骗局》。 Naval：我们在这期播客中有些模糊的原因之一是，我们试图去讨论值得长期遵循的原则，而不仅仅是告诉你昨天中奖的彩票号。 第三十七条：产品化你自己找出你最擅长的，并尽可能多地运用杠杆 Nivi：你用两个词概括了整个推特风暴。“产品化（Productize）你自己。” Naval：产品化你自己这个概念的意思是：你自己是独特的、有责任心的，产品化需要独特的技能和杠杆。所以所有这些部分，你可以把它们合并成这两个词。 如果你想要长期致富，你应该问自己：“这是我的真实想法吗？”我在打造的是我自己吗？然后，“我在生产它吗？”我在规模化它吗？我是在用劳动力还是资本，代码还是媒体来衡量？所以这是一个非常方便、简单的记忆方法。 这是什么播客？这是一个叫做Naval的播客。我实际上是在用播客在产品化自己的一部分 Nivi：你要弄清楚你有什么特别擅长的，或者你有什么特别之处，然后尽可能地运用杠杆。在这种情况下你不是在刻意赚钱，赚钱甚至也不是一种技能。你就是在做你自己，探索成千上百种方式找到真正的你。 找到让你富有、健康和有创造力的爱好Naval：赚钱应该取决于你是谁和你喜欢做什么。另一条我特别喜欢的推特是…这不是我说的，是别人发过的。他们说“找三个爱好”。一个能让你赚钱，一个能让你保持健康，一个能让你富有创造力。” 我会稍微改变一下。我会说，找到三个爱好，一个让你赚钱，一个让你健康，一个让你更聪明。就我而言，我的爱好是阅读，赚钱，因为我喜欢与初创公司合作。要么投资，要么集思广益，要么开始行动。我很喜欢创业初期的创意和创造阶段。 至于让你保持健康的爱好，我真的没有。我最喜欢的是瑜伽，但那是我崩溃的地方。我认为，那些早年发现冲浪、游泳、网球或某种他们一生中大部分时间都在做的运动的人是非常幸运的，因为他们发现了一种使他们健康的爱好。","categories":[{"name":"Article","slug":"Article","permalink":"http://example.com/categories/Article/"}],"tags":[]},{"title":"数字周刊 21","slug":"Weekly/数字周刊21","date":"2021-10-09T16:00:00.000Z","updated":"2021-10-13T10:31:23.000Z","comments":true,"path":"2021/10/10/Weekly/数字周刊21/","link":"","permalink":"http://example.com/2021/10/10/Weekly/%E6%95%B0%E5%AD%97%E5%91%A8%E5%88%8A21/","excerpt":"","text":"可以证明，一个项目拖得越久，它的预期完成日期就越遥远。 刊首语最近，我看到一个心理测试《你是不是一个完美主义者？》，题目还挺有意思的。 （1）你是不是经常为自己设定目标，而且最终往往达不到那些目标？ （2）当一件事件做得不够好时，你是否有再试一次的想法？ （3）你是否休息时仍想着学习、工作、或者其他还没有解决的事？ （4）如果遇到别人说话或打岔，破坏了你的注意力，你是否觉得不太高兴？ （5）你是否常常会在事后想，如果当时能换成另一种方式来解决，也许会更加理想？ 如果上面的问题，你的回答全是肯定的，那么你就有完美主义倾向。 简单说，完美主义就是追求一个较高水平的目标，不接受一个较低水平的、但可用的结果。这是不好的。我就一直告诫自己，千万不要追求完美。就像一篇文章说的，完美主义的最大问题是，它实际上让你追求高成本。 完美主义是一种压力，它让你为自己创造不切实际的期望。你明明做到了正常水平，但是因为设定的目标太高，所以看上去距离目的地仍然很遥远。你的心态变成了：这一切还不够好，依然可以改进。 完美主义消耗了我们最宝贵的资源和时间，让你将注意力从真正的优先事项上移开。 我在以前的周刊里也写过，”做得快”比”做得好”更重要。我们需要的是，低成本地做出尽量多的成果，而不是高成本地创造一件精品。完美主义会妨碍我们”做得快”。 另外，完美主义带来的高压力，也不利于身心健康。不要追求完美，要随心所欲地生活。 1.识别习惯。 尽量具体。比如说，你是否希望减轻体重？尽可能了解清楚你希望减掉的重量，以及在多长的时间内达成目标（如6个月内减掉30磅）。稍微做些研究。例如，如果你希望节食，就可先计算出合理的预期减肥量。理论上你可以在每个星期内安全的减下1到2磅，所以6个月减掉30磅就是个合理的目标，并且容易达到。为什么容易？因为只要你按步骤进行，成功就是有保障的。没有技巧，不讲噱头，成功完全取决于你的选择。你是不是为此趋之若鹜呢？ 2.形成或改掉习惯的欲望。 你需要真心去向往，那是一种促使你达到目标的欲望。为此你不得不放弃当前的生活方式。这是促成真正改变的唯一途径。如果你对当前的生活非常满意，就没法成功的改变它。你是不是仅仅在别人告知你应该做什么的时候才会去尝试改变？这种外力并不足以成为你的驱动源。正相反，你该问问他们为什么。你是否在拒绝习惯（或某种习惯的缺乏）给你的生活带来的影响？听一听你所爱戴的人们的意见，让他们接近你，并激起你做出改变的欲望。你可以列出下面的内容：若不形成新习惯，你将会失去什么；或者，若不抛弃旧习惯，你将获得什么。要达到成功，你不得不了解为何自己需要改变。你真的希望达到你的目标么？如果是，你就会达到；如果不是，你就不会达到。计划成功，你就会成功。”若无法成功的做计划，你就在为失败做计划” 3.了解你为什么要做这件事（或为什么不做）。你从自己的当前状况中得到了些什么？这种状况填补了哪些需求（这样你就可以用另外的方式填补）。你的习惯只是一种应付差事的办法么？只能帮你缓解压力或者从生活的痛苦中暂且逃避出来么？事实上，你可以用健康的方式处理压力，并通过一次健康的转变找到真正的幸福。你的习惯只是一些针对特定事件的条件反射么？只是为了在沮丧和挫折到来时借以寻求立竿见影的满足感么？你可以改变自己的行为模式，学着随机应变而不是条件反射，进而创造出一个健康的习惯予以取代。你是不是一直在逃避过去的经历所带来的痛苦？是不是只想绕个弯子混过去？如果是这样的话，破除旧习惯的想法可能会让你害怕。但相信我，你可以做到的。例如，若希望开始一项训练计划，就该在自己的每一天中寻找被浪费掉的时间，并把它们利用起来建立新的习惯。抽出时间去锻炼，而不是去看电视。为何你以前没能建立新习惯（并一直坚持）？你真的认为自己很懒惰么（是否该改变对自己的看法）？ 若需要看到远景，不妨找位朋友聊聊。无论你被何种痛苦驱使，都需要付出努力去穿越它并重新引导它。若你被某些严重的创伤或无法解决的痛苦困扰，就需要与别人聊一聊，只有这样才超越痛苦。这么做并不是让自己”无所作为”。从创痛中痊愈需要时间，但你必须改变对痛苦的反应，才可能逐渐好转。若你在被火烧伤时随便找到什么液体就往身上泼，结果碰巧把油泼在身上，火只会烧得更旺！你得去找水才行（甚至找个灭火器才更好）！生活也是这样运转的。你必须改变习惯才能痊愈。当前的生活方式在向你传递什么讯息？它是如何加强负面影响的？ 4.哲学剃刀奥卡姆剃刀：更简单的解释更可能是正确的。引申为某个命题成立，所需要的假设越少越好。 汉隆剃刀：可以归咎于愚蠢的事情，不要归咎于恶意。 希钦斯剃刀：凡是无证据的断言，也可以无证据地驳回。 休谟剃刀：从一样东西是什么，无法推导出它应该是什么，即无法从事实推导出价值判断。 牛顿剃刀：无法通过实验或观察解决的问题，不值得争论。 萨根标准：非同寻常的主张，需要非同寻常的证据。 波普原则：一个理论被认为是正确的，前提必须是有可能证明它是错误的，即必须是可证伪的。 5.给软件工程师的建议 6.奴性文化所有的奴才，都有什么梦想？当主子 他们在主子面前的温顺，是真的还是假的？假的，他们的目的是有一天当主子 那你的启发是什么？有奴性的人，表现的温顺，不是他真实的本性 其实是这样的，奴才在主子面前表现的温顺，和善良无关。那只不过是眼前利益的驱使，他们之中，奴性越重的人，会对同类表现得越残忍。那是因为，他们想把从主子那里失去的尊严，和得到的侮辱，从比他们低一级的人那里得到补偿。比如有些媳妇熬成婆后，会表现的比婆婆还恶毒，其背后也是这个道理。也可以理解为，这是报复心理所形成的一种恶性循环。 还有呢，就是越奴性的人，越没有自己的思想，他们没有是非不分善恶，对主子忠心耿耿，死心塌地。特别是在拿到主子，给予他们一点点小权力之后，就拿鸡毛当令箭，小题大做，借题发挥，不管别人死活。 所以我们经常会看到的现象就是：看大门的保安殴打外卖小哥。。。 鲁迅也曾说过，奴性极重的人，对同类一定极其残忍。当然了，背后还有另外一种心理：那就是有主子的奴才，通常充满了极大的优越感。往往看不起那些没有主子的平民百姓。 总之在数千年的封建专制传统影响下，确实是小人奴才骗子戏子和伪君子，一直长盛不衰。。。 7.赫赫有名的北洋军阀10巨头袁世凯 袁世凯（1859年—1916年），字慰庭，号容庵，是中国近代史上赫赫有名的北洋军阀鼻祖、中华民国大总统，风云一时，叱咤中国政坛。1859年9月16日，他出生在河南项城县一个世代官宦的大家族。父祖多为清朝显贵，权重一方。袁世凯早年科举不第，又逢清季兵燹，便弃文投军，依附淮军将领吴长庆门下。1892年，大清藩属朝鲜内乱，求助于清庭，袁世凯即随军入朝平乱。驻朝期间，袁世凯头脑灵活，办事机敏、干练，表现出较高的外交、军事才能，颇为清庭朝野瞩目。1894年受李鸿章保举为驻朝总理大臣。1895年受命以道员衔赴天津督练“新式陆军”。他仿造欧洲军制训练军队，取得极大的收获。同时在此基础上扶植自己的势力，形成了日后北洋军阀的班底。1898年参与镇压维新派。1899年任山东巡抚，逐步接近清廷的权力中枢。1901年升任直隶总督兼北洋大臣。1907年入主军机处、兼任外务部尚书。1908年宣统帝继位，受清皇室排挤，袁世凯被迫下野，隐居彰德府（今安阳市）洹上村别墅——“养寿园”。1911年辛亥革命爆发，受国内外形式所迫，清庭被迫重新起用袁世凯，由其出任总理内阁大臣，主持军政。革命当前，袁世凯深知清庭气数已尽，无可挽回，便联络全国革命势力及其旧部，倒戈一击，逼迫清帝退位，实行共和。1912年3月，袁世凯因促成共和有功，当选中华民国临时大总统。随后不久，被推举为中华民国首任总统。1915年12月宣布恢复帝制，建立中华帝国，幷改元洪宪。1916年3月22日，内外交困，被迫宣布撤消帝制，恢复民国。1916年6月6日，因尿毒症不治，死于北京，时年57岁。同年8月24日正式归葬于河南安阳。 冯国璋 袁世凯当上民国临时大总统后，冯国璋于1912年9月出任直隶都督兼民政厅长。二次革命爆发后，冯国璋任江淮宣抚使兼北洋军第二军军长南下镇压，于1913年9月2日攻占南京。12月16日冯国璋出任江苏都督，同年晋升陆军上将，后又授以宣武上将。袁世凯死后，黎元洪继任总统，国会选冯国璋为副总统。1917年7月，张勋复辟，黎元洪进入外国使馆。冯国璋以副总统代理大总统，通电讨伐张勋。张勋战败后，冯国璋依法将大总统职权还予黎元洪。1918年8月13日，冯国璋通电辞去副总统，于1919年返回河间故里。1919年10月，冯国璋抵北京，12月28日病逝，终年60岁。 段祺瑞 段祺瑞字芝泉，安徽合肥人，1865年3月6日出生于六安，数年后迁至合肥。1881年，段祺瑞怀只身前往山东威海投军。1885年，段祺瑞考入天津（北洋）武备学堂炮兵科。两年后，被派往旅顺督建炮台。1888年，段祺瑞到德国柏林学习一年半年军事，后独自留在埃森克虏伯兵工厂实习半年。回国后到威海任随营教官5年。1896年31岁，被调往天津小站，任新建陆军炮队统带、武卫右军各学堂总办，还任过江北提督、湖广总督等职。他与冯国璋、王士珍被称为“北洋三杰”。武昌起义后，段祺瑞致电清帝退位。民国成立后，1912年3月段祺瑞任陆军总长。1913年代理国务总理。1915年5月，他因不满袁世凯自为帝制，称病辞职。袁于1916年3月22日被迫取消洪宪帝制，请段复出，任参谋总长。4月，段代徐世昌为国务卿兼陆军总长。6月，袁世凯死，黎元洪继任总统，段任国务总理兼陆军总长，掌握北京政府实权。1920年7月直皖战争爆发，皖军败北，段去职移居天津。1924年10月，奉系联合冯玉祥部打败直系，段被推为“中华民国临时执政”，他召集“善后会议”以抵制孙中山所主张的国民会议。1926年，三一八惨案发生后，辞去所有职务。此后退居天津，自号正道居士。1933年2月，段祺瑞移居上海，1936年11月2日在上海病逝。 吴佩孚 吴佩孚(1874年—1939年)，字子玉，山东蓬莱人。1898年投淮军。1906年任北洋陆军曹锟部管带，颇得器重。后升任旅长。护国讨袁运动兴起，随营入川镇压蔡锷领导的云南护国军。1917年7月，任讨逆军西路先锋，参加讨伐张勋复辟。同年孙中山组成护法军政府。段祺瑞派曹锟、张怀芝带兵南下讨伐；吴任第三师代理师长兼前敌总指挥。因湖南督军席位为皖系张敬尧所得，吴仅获空衔，十分气愤。遂发出罢战主和通电。1919年五四运动爆发，吴曾多次通电反对在巴黎和约上签字，支持学生运动，颇得舆论的好评。11月吴与西南地方当局结成反段军事同盟。12月冯国璋病死。曹锟、吴佩孚继承了直系军阀首领的地位。1920年5月，吴率军自衡阳北撤，布置对皖军事。14日直皖战争起，在奉军配合下大败皖军。此后，直奉两系共同把持了北京政府。1922年4月，第一次直奉战争爆发。直军胜，奉军败退关外，吴佩孚成为北洋军阀的首要人物，操纵政局。1923年2月，吴镇压京汉铁路工人罢工，造成“二七”惨案。1924年9月，第二次直奉战起，吴任“讨逆军总司令”，为奉军及冯玉祥国民军所败。1925年10月，浙江督办孙传芳发动反奉战争，吴出任“讨贼联军总司令”，派兵攻入河南，后与奉系沟通，南北夹击国民军。1926年夏北伐战争起，吴从北方赶赴前方督战，在鄂南汀泗桥、贺胜桥连遭惨败。10月北伐军攻占武汉三镇，吴部主力被歼，从此一蹶不振。1932年回到北平（今北京）。吴曾通电声讨溥仪充当伪满傀儡，拒绝日伪拉他下水。1939年12月4日，暴卒于北平。 曹锟 曹锟（1862年12月12日出生于河北大沽口，1938年5月17日逝世于天津），字仲珊。幼年家贫，稍长贩布为业，1885年进入天津武备学堂投兵，参加过甲午战争，战后参加袁世凯在小站训练的新军，任帮带，次年升官带。1903年升任北洋陆军第一镇第一协统领。1906任北军第一混成协统领。1907年升任第三镇统制，同年经东三省总督徐世昌奏调该部移驻长春。武昌起义后，移驻京郊南苑附近。1914年任长江上游（电视剧）警备总司令驻岳州。1915年袁谋称帝，曹上书请求改变国体，被授“虎威将军”，再封一等伯。1917年7月张勋复辟，曹任西路讨逆军总司令。复辟乱平，曹以直隶督军兼省长。孙中山南下护法，曹锟曾通电附和段祺瑞反对恢复旧国会、反对护法军政府，导致护法战争爆发。1919年12月冯国璋病死，曹锟被奉为直系首领。1920年4月，曹锟组成八省反段联盟，7月直皖战争起，皖军战败，段祺瑞下野。直奉两系共掌北京政权。9月，曹任直鲁豫巡阅使。1922年4月，第一次直奉战争起，直系胜，曹锟与吴佩孚等控制了北京政府。1923年10月，曹锟以每票五千银元收买国会议员的贿选手段当上了总统。1924年10月，第二次直奉战争爆发，直系以冯玉祥反戈发动北京政变而失败，曹锟被软禁。1926年4月，冯军将领不满北洋政府临时执政段祺瑞与奉系勾结，发动驱段兵变，将曹锟释放。曹一度去开封依靠吴佩孚，此后，长期在天津英租界作寓公。卢沟桥事变后日本占领天津曾企图说服曹出面组织政府，但遭到曹的拒绝。国民政府在1939年12月追赠曹锟一级上将，以彰其民族气节。 黎元洪 黎元洪(1864年－1928年)，字宋卿，湖北黄陂人。黎元洪早年在海军服役，曾在北洋水师中任广甲号管轮。中日甲午战争时被日舰击沉，飘海遇救。之后投张之洞，被派督练新军，幷且到多次赴日本学习军事。1906年任第二十一混成协协统，驻守湖北。1911年辛亥革命武昌起义时，黎元洪出任湖北军政府都督。1912年南京军政府成立，黎被选为副总统。1916年袁世凯死后，黎接其第一任任期为大总统。1917年与总理段祺瑞发生府院之争，张勋以调解之名入京，之后发生张勋复辟。事后黎的总统职位为原副总统冯国璋所取代。1922年直奉战争后，徐世昌被驱逐，黎再接徐世昌的第二任任期为总统。次年由曹锟接任总统，黎下野。之后赴天津经商。1928年病逝天津。1935年国民政府于武昌为黎元洪举行国葬。 张作霖 张作霖，字雨亭。1875年3月19日出生于辽宁海城县城西小洼村。张作霖幼年家境贫寒，1894年投入驻营口的毅军甲午战争失败后，1895年3月被遣返，回到故里，投身草莽。1902年被官府收编，任巡警马队帮带、统带，因剿匪有功升为洮南镇守使。武昌起义时，张作霖任“奉天国民保安会”军事部副部长，后出任“关外练兵大臣”。袁世凯出任大总统后，1912年被任命为第27师中将师长，袁世凯称帝后，被封为子爵、盛武将军，督理奉天军务兼巡按使；袁死后，被北京政府任命为奉天督军兼省长、东三省巡阅使，在日本帮助下控制了辽吉黑三省，成为奉系首领。此后，张作霖以东北为基地，向关内扩张势力。1920年7月直皖战争爆发前，与直系共同把持了北京政府。1922年4月，发动第一次直奉战争。战败后，张作霖挟“东三省议会”推举自己为东三省保安总司令，宣布东北自治。1924年发动第二次直奉战争，打败直系军阀，控制北洋政府。1926年称安国军总司令。1927年6月18日，张作霖在北京就任北洋军政府陆海军大元帅，代表中华民国行使统治权，成为国家最高统治者，幷组成北洋军阀统治时期第32届、也是最后一届内阁，成为北洋军政权最后一个统治者。1928年4月，奉军战败。6月2日，张作霖退出北京。1928年6月4月晨5时许，当张作霖所乘由北京返回奉天专列驶到皇姑屯附近的京奉、南满两铁路交汇处桥洞时，被日本关东军预先埋好的炸弹炸毁，张作霖身受重伤，当日逝世，时年53岁。 冯玉祥 冯玉祥（1882年—1948年），安徽巢县（今安徽省巢湖市居巢区夏阁镇竹柯村）人。冯玉祥清末时加入淮军，曾参与滦州起义，后投北洋军，任营、团、旅、师长。1922年出任陆军检阅使，率其部队入陕西，幷以此地为地盘，其军队因此被称为“西北军”。1924年第二次直奉战争时在参战途中率军返回北京，发动北京政变，囚禁曹锟，推翻直系军阀政府，逐溥仪出宫，脱离北洋军系，改编所部为“国民军”，电请孙中山北上。因无法抗拒直、奉系军阀的压力请来段祺瑞主政，遭到排挤。1925年，北方军阀联合攻打冯玉祥，冯不敌而退回陕西，后赴俄考察。1926年自苏联考察回国，在绥远五原誓师，任国民革命军联军（后改国民革命军第二集团军）司令，宣布所部加入国民党，出潼关参加北伐。1927年宁汉分裂之际选择与南京合作，响应蒋介石在军中清除中国共产党人。1929年，冯玉祥不满国军编遣会议比例式裁兵原则的决议，称病离开南京，幷于5月出任“护党救国军”总司令，但迅速被南京方面内外夹攻而失败，被迫离职前往山西。1930年联同阎锡山、李宗仁等与蒋介石对抗，引发中原大战，兵败后迁居山东。1933年5月26日与吉鸿昌、方振武、佟麟阁在察哈尔张家口建立察哈尔民众抗日同盟军，任总司令，时任察省主席的部将宋哲元幷不支持，但又不便反对，因而离职，之后冯率军攻下由伪军占领的多伦，引起一阵骚动，但不久后便离察返鲁。抗战时任国防最高委员会常委，第三、第六战区司令长官，不久被蒋介石撤职。1946年赴美国考察水利，幷发表反蒋言论。1948年参加中国国民党革命委员会，任中央政治委员会主席。同年响应中共号召，由美返国参加新政协，不幸中途因轮船出事而于黑海遇难。笃信基督教，故有“基督将军”的称号。 张勋 张勋(1854–1923)字绍轩，江西奉新人。行伍出身。1895年投袁世凯，任管带，1899年升至总兵。1901年调北京，宿卫端门，多次担任慈禧太后、光绪的扈从。1911年任江南提督，率巡防营驻南京。武昌起义后，江浙联军围攻南京，张勋兵败后退驻徐州一带。袁世凯任大总统后，所部改称武卫前军，驻兖州，表示仍效忠清室，禁其部卒剪去发辫，人称＂辫帅＂，所部称＂辫子军＂。1913年奉袁世凯命，率部往南京镇压讨袁军，纵兵抢掠。旋调往徐州，任长江巡阅使。1916年袁死后，在徐州成立北洋七省同盟，不久任安徽督军，扩充至十三省同盟。1917年6月，以调解府院之争为名，率兵入京，解散国会，赶走黎元洪。7月1日与康有为拥溥仪复辟，自封议政大臣兼直隶总督、北洋大臣。至12日为皖系军阀段棋瑞击败，逃入荷兰使馆，被通缉。1923年病死天津。 张宗昌 张宗昌(1881年–1932年)，字效坤，山东掖县人。张宗昌出生穷苦家庭，幼年失学，父早亡。十八岁后到东北闯荡流浪，之后因为在哈尔滨杀人，到海参崴做了土匪。辛亥革命后，率一众绿林兄弟投靠山东都督胡瑛，后转到上海，在陈其美部下任光复军的团长。1913年，张宗昌升任江苏陆军第三师师长。二次革命时，张宗昌第阵前倒戈，投靠冯国璋。1916年11月，冯国璋出任代理总统，张宗昌则任侍卫武官长。1918年，张宗昌又出任江苏第六混成旅旅长，随张怀芝赴湘参加对南方军队的作战，结果大败而逃，改任暂编第一师师长。1921年，张宗昌又奉命率部入江西与江西督军陈光远交战，兵败后本来欲投靠直系曹锟，因吴佩孚反对而作罢，于是改投奉系张作霖。之后因为替张作霖收编了一帮东北土匪，被任为吉林省防军旅长，再招揽数千流落中国东北的白俄部队，发展至近万人马。1924年9月第二次直奉战争，张宗昌率兵入关，转战江苏，打败孙传芳部，进驻上海。后任山东省军务督办，兼省主席。1926年国民党北伐，张作霖、孙传芳合作组”安国军”对抗，张宗昌为副司令。1927年初，张宗昌部在南京上海一带被国民革命军打败，退回山东。宁汉分裂期间，张宗昌进攻冯玉祥军队，又大败。之后张的余部在山东被白崇禧收编，张本人则逃到日本。1931年九一八事变后，张学良怕张宗昌会附和日本，邀其回国寄居门下。1932年，张宗昌受国民党山东省主席韩复榘之邀回到山东，离开济南时被刺身亡。 8.新闻1.特斯拉双向供电 特斯拉已经悄悄地为 Model 3 和 Model Y 电动车，准备好了双向充电的功能。所谓”双向充电”，就是当作电池使用。用电低谷时，电网向汽车充电，用电高峰时，汽车反过来向电网供电。 2.为什么我不用框架？ 现在，开发者不再使用普通的 HTML、CSS 和 JS 编写网页，而是使用各种各样的框架，来构建越来越复杂的 Web 和移动应用。 框架的问题在于，你会与自己编写的代码越来越失去联系。举例来说，我使用 Ionic 框架做了一个按钮，它是精心设计的，很美观，但是它还附加了10个我不太了解的 CSS类。有时，我觉得我写出的这些代码，并不是真的是”我写的”。 因此，我决定回到原始技术，不使用框架，手写一个自己的小型网站。这是十多年以来，我第一个没有用到框架的网站。 不使用框架让人耳目一新。我写出了一个简化的加载超快速的网站。网站的每个部分都是我写的。我可以随意调整它，修改很容易。因为使用的技术很简单，所以不会有复杂的样式问题，你不必为不同设备上产生不同的外观而烦恼了。 我感觉，自己从框架中得到了解放，整个开发过程重新变得有趣。 3.多用库，少用框架 库和框架的一个区别是，一次可以使用多个库，但是框架一次只能使用一个。 这就是为什么我不使用框架的原因。一旦用了一个框架，就无法再用另一个框架了，移植的成本太高了。使用库就没有这个问题。 4.不分科教育 芬兰宣布，从今年开始，小学将尝试不分科教育。学校不再开设物理、数学、文学、历史、地理等不同的课程，而是统一上课，引入基于现象的综合教学。 学生将以现实世界的现象作为起点，去学习涉及的各种知识，而不是传统的方式，先学习各学科的知识，再去认识不同的现象。新的方式把现象作为完整的实体进行研究，把跨越学科的知识和技能融合在一起。比如，一个学习主题是欧盟，内容将包括经济、语言、地理、历史等相关知识。 5.新闻简报2021.10.09 全国多地启动新冠疫苗加强针，对象为接种过疫苗满6个月人群，涉及安徽、福建、湖北、黑龙江、海南等地； 杭州：调整大学毕业生落户政策，15日之后大专学历不能按照人才引进途径落户，博士研究生可享先落户、后就业；10日起国内油价或迎年内最大涨幅，预计油价上调价格在0.25-0.26元/升，加满一箱50升油将多花约13元； 国常会：将市场交易电价上下浮动范围调整为原则上均不超过20%； 微信：网友爆料微信后台数次读取用户相册，每次长达1分钟；微信回应：为便于用户聊天时快速发图使用，最新版本将取消； 美团：因实施二选一垄断行被罚款34.42亿元，美团回应被处罚：诚恳接受，深入自查整改，杜绝二选一； 台媒：台湾地区接种新冠疫苗死亡人数852人，首次超过感染新冠死亡人数844人，网友：确实是让人感到非常讽刺与困惑； 上海车展维权女车主被特斯拉起诉，要求其赔礼道歉，并赔偿名誉权损失500万；另一退一赔三的车主也被特斯拉索赔505万； 福布斯：特斯拉CEO马斯克的身价突破2000亿美元，达到2034亿美元，身价再度超越贝佐斯成全球首富； 上海楼市调查：价格虚高学区房挤掉300万水分，投资客淡出；张家口楼市限跌令背后：主城区房价已从最顶峰跌落近四成； 9.Fun 前些日子我在淘宝上看到一条评论，“物流真是慢，发件小伙太丑了，差评！”掌柜就解释了，物流慢真不是我们的问题，还是得和你道歉，但是快递小伙子长得丑和我半毛钱关系都没有，再说了，长得帅的他也不会做快递啊！ 崔某跟许某结婚7年，妻子许某性格强势，脾气暴躁。4月崔某向许某提出，想要一个孩子，但遭到了许某的强烈反对，为了缓和局面，崔某给妻子发了一张自己上半身的“裸照”，并附上了几句温情的话，可是许某却大骂他变态，准备起诉离婚。妻子向法官说：我们两个恋爱的时候明明很好的，他从来不动手动脚，没想到结婚之后就原形毕露了，经常抱我不说，还想跟我一起睡觉！天哪，怎么会有这么变态的人，不行，必须离婚。 武汉的王先生去女友家“见家长”，吃饭时候岳父拿出白酒，虽不胜酒力，但王先生碍于初次见面不能露怯，硬着头皮喝，两人喝了大概两斤，结果就是呕吐不止，后来在沙发上瘫倒，不醒人事，女友见状忙将其送医院救治。这个故事告诉我们：凡事要量力而行，不要勉强自己交女朋友。 10.言论 当我还是傻逼的时候，常被他们一套谎言骗得热泪盈眶，义愤填膺。你要小心这世界上的坏人，他们都憋足劲教你学好，然后由着他们使坏。— 王朔 我认为，每个人都有一个觉醒期，但觉醒的早晚决定个人的命运。 ——路遥 《平凡的世界》 人生所有的事情之中，后悔是最可怕的。失败是一种答案，拒绝也是一种答案，但后悔却是永远得不到答案。”要是我当初……”、”如果我那样选了……”、”不知道如果走了那条路会怎样……”，你永远、永远都不会知道答案，而且这些疑问会纠缠你一辈子。– [南非] 特雷弗·诺亚《天生有罪》 三毛曾经说过：“所有的人起初都只是空心人，所谓自我，只是一个模糊的影子，全靠书籍绘画音乐电影里他人的生命体验唤出方向，并用自己的经历去填充，渐渐成为实心人。”我深以为然。所谓的脱颖而出、众星拱月，所谓的气度不凡、雍容大方，不过是一个有着丰富学识被正确引导过的小心翼翼呵护过的幸福灵魂。 一个人选择职业的时候，真的应该考虑这些问题。这个职业受外部因素的影响有多大，外部因素对你是否有利？这么说吧，如果你不是在一个经常下雨的地方，就不要去卖伞。","categories":[{"name":"周刊","slug":"周刊","permalink":"http://example.com/categories/%E5%91%A8%E5%88%8A/"}],"tags":[]},{"title":"数字周刊 20","slug":"Weekly/数字周刊20","date":"2021-10-08T16:00:00.000Z","updated":"2021-10-10T05:16:50.000Z","comments":true,"path":"2021/10/09/Weekly/数字周刊20/","link":"","permalink":"http://example.com/2021/10/09/Weekly/%E6%95%B0%E5%AD%97%E5%91%A8%E5%88%8A20/","excerpt":"","text":"很多程序员创业，会选择做开发工具，给其他程序员使用，专攻开发者市场。 背后的想法很简单：我知道程序员需要什么工具，我给你写，如果你觉得好用，就让你的公司采购我的软件。这种模式在国外或许可行，但是我觉得，在国内很困难。 企业级开发工具创业，在国内生存下来的难度极高。 理由是国内企业采购开发工具的金额和意愿都很保守，尤其是采购创业公司的产品。 绝大部分的国内企业都不是技术导向的，负责人普遍不是技术出身，不了解工程师和程序员的需要。技术部门的主管，在公司往往不占主导地位，不能拍板。即使公司内部的程序员（码农）都觉得很好用，但是他们对管理层没有影响力，无法说服管理层为他们购买这个工具。 那么，为什么工程师在公司里通常不占主导地位，对管理层没有影响力？ 因为在国内，技术并不是企业生存的决定性因素，非技术因素（比如融资能力）对企业生存影响更大。 以创业为例，技术好就能创业吗？不一定。常见的模式是，看准市场热点，先写一份创业计划书，准备好 PPT，去找风投，看看谁愿意投你。有钱以后，再高价雇佣程序员，来实现产品。 结果就是，公司的创始人不是技术最好的人，而是最能够找到资金的人。 这就是为什么中国创业公司的发起人和大股东，往往不是程序员的原因。 程序员只是公司雇佣的高级劳工，对于管理层的决策没有影响力。 综上所述，在中国创业，最好不要做面向企业的开发工具。不仅融资难，销售更难，个人向企业销售软件产品，难度太高。反而是做一个面向大众的产品，有了一定数量的用户，再去找风投，更容易创业成功。 1.Python3 日期和时间Python 程序能用很多方式处理日期和时间，转换日期格式是一个常见的功能。 Python 提供了一个 time 和 calendar 模块可以用于格式化日期和时间。时间间隔是以秒为单位的浮点小数。 每个时间戳都以自从 1970 年 1 月 1 日午夜（历元）经过了多长时间来表示。 Python 的 time 模块下有很多函数可以转换常见日期格式。如函数 time.time() 用于获取当前时间戳, 如下实例: 实例 import time # 引入time模块 ticks = time.time() print (&quot;当前时间戳为:&quot;, ticks) 以上实例输出结果： 当前时间戳为: 1459996086.7115328 时间戳单位最适于做日期运算。但是1970年之前的日期就无法以此表示了。太遥远的日期也不行，UNIX和Windows只支持到2038年。 struct_time 元组 获取当前时间： 从返回浮点数的时间戳方式向时间元组转换，只要将浮点数传递给如localtime之类的函数。 import time localtime = time.localtime(time.time()) localtime = time.asctime( time.localtime(time.time()) ) #格式化的时间 print (&quot;本地时间为 :&quot;, localtime) # 输出结果 本地时间为 : time.struct_time(tm_year=2016, tm_mon=4, tm_mday=7, tm_hour=10, tm_min=28, tm_sec=49, tm_wday=3, tm_yday=98, tm_isdst=0) # 格式化成2016-03-20 11:45:39形式 print (time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.localtime())) # 格式化成Sat Mar 28 22:24:24 2016形式 print (time.strftime(&quot;%a %b %d %H:%M:%S %Y&quot;, time.localtime())) # 将格式字符串转换为时间戳 a = &quot;Sat Mar 28 22:24:24 2016&quot; print (time.mktime(time.strptime(a,&quot;%a %b %d %H:%M:%S %Y&quot;))) python中时间日期格式化符号： %y 两位数的年份表示（00-99）%Y 四位数的年份表示（000-9999）%m 月份（01-12）%d 月内中的一天（0-31）%H 24小时制小时数（0-23）%I 12小时制小时数（01-12）%M 分钟数（00=59）%S 秒（00-59）%a 本地简化星期名称%A 本地完整星期名称%b 本地简化的月份名称%B 本地完整的月份名称%c 本地相应的日期表示和时间表示%j 年内的一天（001-366）%p 本地A.M.或P.M.的等价符%U 一年中的星期数（00-53）星期天为星期的开始%w 星期（0-6），星期天为星期的开始%W 一年中的星期数（00-53）星期一为星期的开始%x 本地相应的日期表示%X 本地相应的时间表示%Z 当前时区的名称%% %号本身 Calendar 模块有很广泛的方法用来处理年历和月历 See also Python3 日期和时间 2.Python3 – Python获取昨天，今天，明天，本周，上周，本月，上月，本季，本年，去年时间#coding=utf-8 import datetime from datetime import timedelta now = datetime.datetime.now() #今天 today = now #昨天 yesterday = now - timedelta(days=1) #明天 tomorrow = now + timedelta(days=1)&lt;br&gt;&lt;br&gt;#当前季度 now_quarter = now.month / 3 if now.month % 3 == 0 else now.month / 3 + 1 #本周第一天和最后一天 this_week_start = now - timedelta(days=now.weekday()) this_week_end = now + timedelta(days=6-now.weekday()) #上周第一天和最后一天 last_week_start = now - timedelta(days=now.weekday()+7) last_week_end = now - timedelta(days=now.weekday()+1) #本月第一天和最后一天 this_month_start = datetime.datetime(now.year, now.month, 1) this_month_end = datetime.datetime(now.year, now.month + 1, 1) - timedelta(days=1) #上月第一天和最后一天 last_month_end = this_month_start - timedelta(days=1) last_month_start = datetime.datetime(last_month_end.year, last_month_end.month, 1) #本季第一天和最后一天 month = (now.month - 1) - (now.month - 1) % 3 + 1 this_quarter_start = datetime.datetime(now.year, month, 1) this_quarter_end = datetime.datetime(now.year, month + 3, 1) - timedelta(days=1) #上季第一天和最后一天 last_quarter_end = this_quarter_start - timedelta(days=1) last_quarter_start = datetime.datetime(last_quarter_end.year, last_quarter_end.month - 2, 1) #本年第一天和最后一天 this_year_start = datetime.datetime(now.year, 1, 1) this_year_end = datetime.datetime(now.year + 1, 1, 1) - timedelta(days=1) #去年第一天和最后一天 last_year_end = this_year_start - timedelta(days=1) last_year_start = datetime.datetime(last_year_end.year, 1, 1) 3.自己整理的css笔记css笔记 4.innerHTML、innerText、textContentinnerHTML 可获取标签中的所有的内容，包括标签、空格、文本、换行等。 innerText此方法获取标签(及其子标签)中的所有文本，不会获取标签（或者说可以过滤掉所有的标签）。如果有多个空格或者是换行，解析为一个空格。 如果想要清空标签的内容，innerText = “”；即可 textContent来获取标签中的内容。但是textContent在过滤掉标签时，会保留标签结构。 5.JavaScript数组去重 var a = [1,2,3,3,2,3,2,5,20,2,20,9,5] function unique(arr) &#123; return arr.filter(function(item, index, arr) &#123; //当前元素，在原始数组中的第一个索引==当前索引值，否则返回当前元素 return arr.indexOf(item, 0) === index; &#125;); &#125; var b = unique(a); console.log(a); 6.js数组与字符串的相互转换方法1、数组转字符串需要将数组元素用某个字符连接成字符串，示例代码如下： var a, b; a = new Array(0,1,2,3,4); b = a.join(&quot;-&quot;); //&quot;0-1-2-3-4&quot; 2、字符串转数组 实现方法为将字符串按某个字符切割成若干个字符串，并以数组形式返回，示例代码如下： var s = &quot;abc,abcd,aaa&quot;; ss = s.split(&quot;,&quot;);// 在每个逗号(,)处进行分解 [&quot;abc&quot;, &quot;abcd&quot;, &quot;aaa&quot;] var s1 = &quot;helloworld&quot;; ss1 = s1.split(&#39;&#39;); //[&quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;, &quot;w&quot;, &quot;o&quot;, &quot;r&quot;, &quot;l&quot;, &quot;d&quot;] 7.如何使用Animated动画window.onload = function()&#123; $(&quot;#login-box&quot;).addClass(&quot;animated bounceInLeft&quot;); console.log(111); &#125; window.onload要等整个窗口（包括图片）都加载完才触发 执行 jQuery加载即执行： $(function()&#123; $(&quot;#name&quot;).click(function()&#123; //adding your code here &#125;); &#125;); 增加和移除一个class $(&quot;.default&quot;).addClass(&quot;hover_s&quot;); $(&quot;.default&quot;).removeClass(&quot;default &quot;); 8.Web资源书栈网 · BookStack极力推荐。程序员IT互联网开源编程书籍免费阅读与下载，取之于猿用之于猿！ 10 个超好看Web可视化面板 数字雨浏览器还原电影《黑客帝国》的数字雨，链接为 Codepen.io 演示 简单好用的在线流程图工具。 中国传统颜色手册 View Source一个 Web 小工具，输入网址，就可以高亮显示该网址的源码，非常好用。 MDvideo一个桌面软件，自动将 Markdown 文档转成一段视频。文档里面的视频、音频、图片网址，都会抓取后插入视频，还可以根据文字生成人工语音的旁白朗读。 它非常适合快速生成产品的介绍视频。 Neumorphism一个网页工具，用来生成照明阴影效果的 Flutter 代码。 Samantha Ming 个人网站Samantha Ming 是一名加拿大前端工程师，她在个人网站上分享了很多前端代码的技巧，内容质量很高，制作精美。 9.在Express中测试jQuery的Ajax我要在博客中，添加一个Timeline，静态的HTML已经准备好了。 ### 安装Express框架，就是使用npm的命令。 npm install --save express ### –save参数，表示自动修改package.json文件，自动添加依赖项。 npm init ###生成package.json文件 touch app.js ## 创建文件 app.js //在node_moudules里引入express模块 var express = require(&quot;express&quot;); var app = express(); app.use(express.static(&quot;./public&quot;)); app.listen(3000); public/index.html &lt;div id=&quot;div1&quot;&gt;&lt;h2&gt;使用 jQuery AJAX 修改文本内容&lt;/h2&gt;&lt;/div&gt; &lt;p&gt;hello world&lt;/p&gt; &lt;button&gt;获取外部内容&lt;/button&gt; &lt;script&gt; $(document).ready(function()&#123; $(&quot;button&quot;).click(function()&#123; $.ajax(&#123; url:&quot;/1.json&quot;, type: &quot;GET&quot;, dataType: &quot;json&quot;, success:function(data)&#123; $.each(data.employees, function(i, item) &#123; var str = &#39;&lt;div&gt;姓名:&#39; + item.firstName + &#39;性别：&#39; + item.lastName + &#39;&lt;/div&gt;&#39;; document.write(str); &#125;) &#125;&#125;); &#125;); &#125;); &lt;/script&gt; 使用ajax加载的是json文件，而不是接口 10.言论 我觉得程序员，尤其是年轻程序员，投入太多脑力在编程。他们去学习编程语言的各种奇怪特性，学习类型系统的古怪设定，学习巨型 JavaScript UI 库的各种细节，反而没有投入很多时间在他们要解决问题的专门领域。 不管做什么事，都应该进行数据记录和数据分析。对个人来说，可以从一个业余爱好者变成专业人士；对产品来说，可以从一个普通产品变成数据产品。 所有算法都可以称为人工智能。","categories":[{"name":"周刊","slug":"周刊","permalink":"http://example.com/categories/%E5%91%A8%E5%88%8A/"}],"tags":[]},{"title":"数字周刊 19","slug":"Weekly/数字周刊19","date":"2021-10-02T16:00:00.000Z","updated":"2021-10-08T08:54:11.000Z","comments":true,"path":"2021/10/03/Weekly/数字周刊19/","link":"","permalink":"http://example.com/2021/10/03/Weekly/%E6%95%B0%E5%AD%97%E5%91%A8%E5%88%8A19/","excerpt":"","text":"**提早退休:**这是维基百科的条目，介绍正在兴起的一种社会运动，能否通过高度储蓄，实现提前退休？具体做法是，年收入的50%以上都储蓄，目标是把每年的消费压低到你个人财富总额的4%。 刊首语等几年，再用新框架 在技​​术领域，每个月都有一个新框架。例如，iOS 就有一个新的 UI 框架 SwiftUI。 我的建议是，等待几年再去学习它。不要担心会错过机会，这不是飞机航班，你仍然随时可以登机。任何时候，你都不应该因为害怕落后于潮流，而做出决定技术决定。如果你学习一个 UI 框架，它就应该对你的业务带来帮助，而不是为了学而学。 新技术总是被其制造商大肆宣传，他们不会说：”我们的新东西是平庸的”，他们有动机大肆炒作，以光彩照人的方式谈论自己的产品，这对他们有好处。一些在职业生涯早期的开发人员，也会加入炒作，他们是第一次见到这样的东西，因此非常兴奋。总之，新框架总是有自己的支持者，你问他们这个框架好不好，他们总是会说这很棒。 但是，新框架总是有这样或那样的问题，很少像承诺的那样好。它在某些方面可能会很好，而在其他方面则很糟。文档通常不完整，如何有效使用框架也没有形成规范。一旦你使用了它，团队的其他人也必须学习它，才能让整个团队适应你的代码，这给团队带来了额外的负担。因此，等待几年消除所有这些问题是有意义的。 如果你急于采用一个框架，可能会花费很多时间来研究它，之后很可能会发现，它根本不起作用。或者它确实有效，但不适用于你。再或者它以某种方式工作，但在性能或者向后兼容性上有严重问题。新框架就是一个未知数。 如果你采用了新框架，结果它无法正常工作，而你又必须切换回去，就要付出两次过渡成本。 新框架的出现并不会立即使旧框架过时。例如，Swift 1.0 是2014年发布，但真正可用是在2016年。这也不意味着你2016年就要使用它，因为2016年的版本是最早可投入生产的版本，真正成熟可能要等到2018年的版本。因此，新的语言、工具或框架不会淘汰旧的语言、工具或框架。过渡期会有很多年，在此期间，你可以随时采用新技术。没必要在出现的那年就赶上潮流。 1.人生不过游戏一场生存是一种即时策略游戏，所有的人都是这场游戏的玩家。财务自由了，就是游戏赢家。 具体来说，又分成两种游戏：财富游戏和地位游戏。财富游戏的玩家追求更多的财富，地位游戏的玩家追求更高的地位。 古时候，地位越高，财富越多，当大官就是发大财，所以大家都玩地位游戏。现代社会，财富游戏和地位游戏慢慢脱离了关系，不当大官也可以发大财，财富游戏的玩家多了起来。 这两种游戏有本质的区别。地位游戏一定是零和的，有赢家就肯定有输家。 比如，我当了部门主管，你就不能当了。所以，地位游戏很凶险，必须时刻提防其他玩家的冷枪。财富游戏不是零和的，我盖了一幢漂亮的房子，不影响你也盖一幢。我赚钱了，不影响其他人的利益，很可能还让其他人过得更好。比如，乔布斯创办了苹果公司，其他人就有了更好的电子产品可用。 创业是财富游戏，政治是地位游戏。 因为上面的原因，我认为，创业值得参与，政治不值得参与。有些创业项目也是零和的，比如抢票技术、秒杀技术、游戏外挂等等，那也不值得参与。 2.写日记的法则：一、保持弹性，重表达思想，而不用太多严格规则； 二、持续； 三、用来设计你的生命价值和中心思想； 四、记录每件事情的差异化； 五、记录特殊时刻及事件； 六、解决问题； 七、学习问更好的问题； 八、在日记上写下自己的宣言； 九、把每日写下的东西在月底复习； 十、深刻自己的记忆和经验。 3.互联网收费打开很多网站或 App，都要求你付费：听歌要钱，视频要钱，下载要钱，读一篇文章也要钱。这当然无可厚非，但是我总觉得，纯粹的信息收费不是一个好的商业模式，除非有增值服务。 这有两个原因。 第一个原因是，信息与实体商品不同。实体商品具有排他性，我吃了这只苹果，别人就吃不到，但是信息可以无数次消费。 而且，信息有一个奇怪的特征：消费的人越多，它的价值越高。一篇文章只有二三十人看，很快就会被忘记；但有一百万人看，就是全国的热点。 收费会阻止信息的这种零成本的自我增值。 第二个原因是，信息收费很难扩展。80%的用户都是看一眼就走了， 收费会阻止这些轻度使用的用户。 比如，《纽约时报》网站是收费的，但是我一个月就看几篇文章，不太可能为这几篇文章成为付费用户。信息收费的前提是，用户会深入地、长期地使用这个服务，这种深度用户很难找，因此收费很难扩展。 所以，我认为， 信息的商业模式，不应该是收费，而是应该鼓励更多的人消费它。 越多人消费，信息的价值越高，这时就可以开发增值服务，从服务赚钱。 开源软件就是很好的例子。Linux 原来是一个大学生的作品，可以免费用，结果成了行业标准。基于 Linux 的 Red Hat 公司，所有产品都是开源的，只对服务收费，最终被 IBM 以 340亿美元的价格收购。 就像上图的那句话：”Open is smart. Smart is open” 。我们不要做 closed 的产品，而要做 open 的产品。Open 一定会带来更大的价值。 4.40% 规则互联网创业公司有一条40％规则： 年收入增长率 + 营业利润率 应该等于40％。 如果你的年增长率达到100％，那么可以承受60％的亏损。 如果年增长率为40％，你应该收支平衡。 如果增长率为20％，你应该有20％的营业利润率。 如果没有增长，你应该有40％的营业利润率。 如果业务下降10％，你应该有50％的营业利润率。 我从来没有见过一个如此简单的规则。我总是觉得如果你快速增长，就可以接受赔钱。随着增长放缓，你必须赚钱并增加利润。现在有这样一个简单的公式，我非常喜欢。 5.比你的工资更重要的十件事你需要有一个目标和相应的计划。你可以随时进行调整，但是你需要有目标和计划，而且要专注于这个目标。 这并不是一个为了吸引你点击而故意设计来吸引眼球的标题。我将向你证明为什么如果你只通过薪水的高低来衡量自己的事业，从长期看，你将蒙受巨大的损失。 是的，我知道时事艰难，你需要工资来支付账单。这些我都了解。我也有需要支付的账单。但是如果挣工资是你最主要的工作诉求，那么你就失去了参与出人头地游戏的机会，一辈子都会处在手停口停的境地。 而且更糟糕的是，你总会不明白为什么那么多的人都做得比你好，你到底哪里做错了。而且完全不知道怎样改变。所以我们很明确，我并不是说钱不重要。你在开玩笑吗？我们的目标是实现财务上的成功，享受整个过程，并对结果感觉良好。 我要说的是，在考虑职业生涯的时候，你需要有大局观。如果你太过短视或者狭隘，你就不能做大事。例如，一份更高的薪水比不上在一家有机会成长到更高阶层的工作机会。那还有意义么？ 你看，这并不是什么最新的商学院的说教，什么教授们的研究成果或者是Monster或者Manpower的研究成果。这是严肃的事——在真实的工作世界里会奏效的真正的职业建议。好吧，刚才我是开了个头，下面让我来详细地介绍，比你的工资更重要的十件事： 1、你的目标。“如果你不知道自己想去哪的话，你就不会到达。”这句话是对的。你需要有一个目标和相应的计划。你可以随时进行调整，但是你需要有目标和计划，而且要专注于这个目标。如果你很聪明、善于把握机会、有很强的适应能力并且愿意努力工作，你就能够做出了不起的成绩，当然也包括财务上的成功。 2、热爱你的工作。斯蒂夫。乔布斯在斯坦福毕业典礼的演讲中说：“你的时间很有限，所以不要浪费时间去过别人的生活。你必须相信点滴的进步会连接着你的未来。这种方法从来没有让我失望，它完全改变了我的生活。取得了不起的成绩的唯一的方法是热爱你的工作。如果你还没有找到你的热爱，一直寻找。不要随遇而安。” 3、你为之工作的公司。如果说我有什么职业成功的秘诀的话，那么就是这个了。把每家公司都当做可能会载你飞向月球的航天飞船。当然，你已经登上了这艘飞船，但是如果这艘船无法将你送到月球怎么办？你可以选择在一家已经成功的公司里工作，这样会有进步的空间，或者选择一家很酷的创业企业里工作，在那里你可以变成一个多面手。你有选择。可以尝试一下。 4、你有多喜爱投机。如果在通过谈判能够获得丰厚报酬的能力和善于创造自己机会的能力之间选择，我会选择后者。这种能力会在你的整个职业生涯中帮助你。 5、你工作的勤奋程度。现在，似乎谈论如何聪明地工作比如何勤奋的工作更时髦。可是两者你都需要。没有努力的工作就没有成功。在一段时间内，你应该竭尽全力地去达成你的目标。 6、你的态度。如果你相信你有资格得到自己没有努力争取的东西，你可能会得到它，但是这不是你得到的全部，而且也不会是什么了不起的东西。另一方面，如果得到的每一件东西都是你挣来的，并且愿意努力工作以求晋级，对自己的工作抱有积极的态度，那么你就会拥抱成功，这是肯定的。 7、对业务产生影响。公司的目的是实现业务，你越接近业务核心，对业务的成败影响越大，你对于这家公司就越有价值，你成长提升的机会也就越多，你也就能够赚更多的钱。 8、走出去拓展人脉网络的机会。如果你整天都坐在办公桌前，你的机会将会很有限。但是走出去，多和行业人士闲聊，拓展人脉对于一个年轻而富于进取心的人来说是非常重要的。和未来的机会相比，丰厚的工资远没有那么重要。 9、股权。从我的经验看，工资用于支付账单，而账单用一种很有趣的方式会尽可能地消耗掉你的工资。另一方面，股权是一种意外之财，顾名思义，在股权能够流通之前，你无法获得任何收益。这种权益也让你的收益变得更为多样化，因为它的价值更多的取决于整个公司的绩效水平，而不是你个人的绩效水平。 10、绩效工资。工资只是薪酬的一部分。如果你有进取心并且相信自己，你可以选择一份健康、结构合理，在某种程度上不封顶不封底的奖金计划，只要目标清晰并且可行，你就能够得到这些报酬。 总结：如果你关注上面这十点胜过关注工资，从长期看，你就能做得更好。特别是在财务上。我不开玩笑。 而且，显然，如果你能接受挑战、满足、专注，就像你的老板一样，有更好的价值，灵活的条件等，你会更快乐，从长期来看也会做得更好。这是不用说的，不是么？ 6.说话技巧 智退性骚扰句型：这种话好像不大适合在办公室讲喔！ 如果有男同事的黄腔令你无法忍受，这句话保证让他们闭嘴。男人有时候确实喜欢开黄腔，但你很难判断他们是无心还是有意，这句话可以令无心的人明白，适可而止。如果他还没有闭嘴的意思，即构成了性骚扰，你可以向有关人士举发。 不着痕迹的减轻工作量句型：我了解这件事很重要；我们能不能先查一查手头上的工作，把最重要的排出个优先顺序？ 不如当下就推辞。首先，强调你明白这件任务的重要性，然后请求上司的指示，为新任务与原有工作排出优先顺序不着痕迹的让上司知道你的工作量其实很重，若非你不可的话，有些事就得延后处理或转交他人。 恰如其分的讨好句型：我很想您对某件案子的看法…… 许多时候，你与高层要人共处一室，而你不得不说点话以避免冷清尴尬的局面。不过，这也是一个让你能够赢得高层青睐的绝佳时机。但说些什么好呢？每天的例行公事，绝不适合在这个时候被搬出来讲，谈天气嘛，又根本不会让高层对你留下印象。此时，最恰当的莫过于一个跟公司前景有关，而又发人深省的话题。问一个大老板关心又熟知的问题，但他滔滔不绝的诉说心得的时候，你不仅获益良多，也会让他对你的求知上进之心刮目相看。 承认疏失但不引起上司不满句型：是我一时失察，不过幸好…… 犯错在所难免，但是你陈述过失的方式，却能影响上司心目中对你的看法。勇于承认自己的疏失非常重要，因为推卸责任只会让你看起来就像个讨人厌、软弱无能、不堪重用的人，不过这不表示你就得因此对每个人道歉，诀窍在于别让所有的矛头都指到自己身上，坦承却淡化你的过失，转移众人的焦点。 面对批评要表现冷静句型：谢谢你告诉我，我会仔细考虑你的建议。 自己苦心的成果却遭人修正或批评时，的确是一件令人苦恼的事。不需要将不满的情绪写在脸上，但是却应该让批评你工作成果的人知道，你已接收到他传递的信息。不卑不亢的表现令你看起来更有自信、更值得人敬重，让人知道你并非一个刚愎自用、或是经不起挫折的人。 7.新闻1.太阳能汽车2019.07 一家荷兰创业公司推出了太阳能汽车，汽车的上半部都是太阳能板，也可以接受外部充电，满电状态下可以行驶400公里～800公里。现在接受预订，价格15万欧元（约120万人民币），2021年交货。 根据该公司披露，太阳能充电效率是每小时12公里。这意味着，晴天只靠太阳能，每天可以跑到50公里以上，对于城市通勤还是够的。 2.神奇的北极狐2019.08 挪威的科学家在一只北极狐身上安装了 GPS 追踪器，想知道它的行踪，结果发现了惊人的结果。从2018年7月开始，这只狐狸在短短76天内，从挪威跑到了加拿大，总行程超过3500公里，平均每天移动46.3公里，最多一天移动了155公里。它成为已知的移动速度最快的狐狸。 由于它的路线相当于从欧洲跑到了北美洲，横跨了北冰洋，所以有一部分路线是在海冰上。整整两周，它都待在冰上。科学家曾经怀疑，是不是有人把它抓到船上，但是不可能有船在北极行驶3000公里。 北极狐是非常耐寒的动物，可以在冰下50度的冰冻温度生存。我们永远不会知道这只狐狸的下落，因为2019年2月，GPS 追踪器不再工作，停止发送信号。 3.淘汰纸制教科书2019.08 美国主要的教科书出版公司 Pearson 宣布，将逐步淘汰纸制教科书，向电子书转变。这家公司目前数字业务的收入，已经超过总收入的一半。 大家都知道，美国的大学教科书是非常贵的，很多学生买不起，只能选择购买二手书或者租用教科书。为了保证收入，书商不得不每三年推出教科书的新版，这是行业的通用做法。Pearson 公司认为，改成电子书以后，对收入更有利，因为可以持续不断地更新教科书，不再是三年一个版本，而是每个月都有新内容，能够推动学生付钱购买。 4.软件外包的风险2019.08 西门子公司的很多软件都是外包开发的。一个外包程序员在软件里面留下了一个逻辑炸弹，设置在指定日期后触发，会使得软件崩溃。 结果，2014年开始，软件就发生故障了。西门子只能打电话找那个外包程序员，付费让他修复。这种情况发生了多次，直到2016年5月，才有西门子员工发现这是故意留下的逻辑炸弹。目前，该外包程序员已经认罪，等待法庭判决，面临最高10年的监禁，罚款25万美元。 5.为什么北极融化不会导致海平面上升？ 北极都是海冰，漂浮在水中。我们知道，冰山质量的90％都在水下。当冰融化变成水时，体积会缩小，所以不会导致海平面变化。 但是，南极完全不一样，冰山基本都在陆地上。当陆地冰川融化时，就会导致海平面上升。南极洲的冰量是世界上其他陆地冰川总和的50倍。 有研究称，过去2000年，海平面保持稳定。但是从1990年以来，海平面上升速度增加了一倍。据估计，到本世纪末，海平面预计将上升2英尺（61厘米）。 8.资源聚BT磁力多zhongziso Storyset丰富的插画网站，关键是免费，有动画 华律网这是一个快捷的法律咨询网，为各地有法律咨询需求的公众提供免费律师在线咨询服务，法律常识浏览及律师和律师事务所查询，律师在线为您解决法律问题。 创造者日报 - 每天发现有趣的产品 太平洋汽车网精准报价_专业评测_以车会友,汽车世界由此精彩 简单英语指南美国政府的官方网页，有几百条单词建议，指导你怎么写出简单的文章，不要用复杂的单词。 9.Fun 小时候，和妈妈一起去一家杂货店里买洗脸盆（塑料的），我妈就问了一句，“这盆结实吗？”，老板把盆拿过来，二话不说，啪的一声摔在地下，结果，结果盆摔坏了，两个人某些楞了一下，老板当即反应过来，说“看，这种质量的盆我是不会卖给你的，来我们看看这边八块的” 学生间兴起炫富新形式：比比谁跟敢扶老人。Ipad、Iphone越来越平民化，导致很多地富二代学生抱怨，难以炫富了（怎么才能显摆得自己很有钱呢？）然而，最近在浙江某中学，“扶老人”成为新一代炫富杀手锏，“我有钱，我敢扶”已经是公认土豪标签。其中初三的王小二同学，因一个月内连扶18位老人，赔款173玩，被公认为全校首富，众多女生疯狂追逐。 前不久有个19岁内地男青年闯李嘉诚豪宅，然后被抓起来了嘛。他在法庭上声称自己是李嘉诚的孙子，自己是为了见一面才爬墙的，不是为了盗窃。最后，因为证据不足只好把他放了。 10.言论 人才政策一贯是”爱一行，干一行；干一行，专一行”，没有强迫大家去干一行就一定要爱一行。– 任正非 喜欢读书的人在死之前，活过1000次，不读书的人只活过一次。– 乔治 R.R. 马丁，《冰与火之歌》的作者 知识使人自由，或者起码渴望自由。– [南非] 特雷弗·诺亚《天生有罪》","categories":[{"name":"周刊","slug":"周刊","permalink":"http://example.com/categories/%E5%91%A8%E5%88%8A/"}],"tags":[]},{"title":"数字周刊 18","slug":"Weekly/数字周刊18","date":"2021-10-01T16:00:00.000Z","updated":"2021-10-08T09:03:10.000Z","comments":true,"path":"2021/10/02/Weekly/数字周刊18/","link":"","permalink":"http://example.com/2021/10/02/Weekly/%E6%95%B0%E5%AD%97%E5%91%A8%E5%88%8A18/","excerpt":"","text":"人类所烦恼的事是“对未来感到不安”和“对过去感到后悔”的其中一项。 刊首语如果要长期保存一样东西，就不要用不能持久的东西作为它的基础。 有一些技术，就不适合用来建立长期的网站。你能想象连续25年运行一个 WordPress 网站吗？它依赖的 PHP 版本将在很早之前就不能运行了。 1.成功者的习惯习惯一：成功者清楚地了解他做每一件事情的目的。成功者虽重视事情的结果，但更重视事情的目的，而目的的清楚则有助于他达到结果并且享受过程； 习惯二：成功者下决定迅速果断，之后若要改变决定，则慎思熟虑。一般人经常在下决定时优柔寡断，决定之后却有轻易更改；成功者之所以能迅速下决定，因为他十分清楚自己的价值层级和信念，了解事情的轻重缓急，因此能有系统的处理； 习惯三：成功者具有极佳的倾听能力。倾听并非是去听对方说的话，而是去听对方话中的意思。 倾听的技巧包括： 一、倾听时不打断对方的谈话； 二、把对方的话听完； 三、即使不需要记录，你都可以听出来对方的意思； 四、把所有的问题记在脑海，等对方说完后在一同发问。 习惯四：成功者设定”当日计划”。成功者在前一天晚上或一早就会把当天要处理的事情全部列出来，并依照重要性分配时间。他管理事情而非管理时间。 习惯五：写日记。 习惯六：做喜欢的事。 习惯七：勤于练习基本动作。 习惯八：运用自我暗示的力量。自我暗示就是把目标用强烈语气不断念出声音，告诉自己，让潜意识无法分辨真假，因此相信它。 习惯九：运用冥想的技巧。当你不断想象自己达成目标是情景，潜意识会引导身体作出那些效果。 习惯十：保持体力或创造更多精力。 习惯十一：成功者人生的目的通常超越自我，立志为大多数人贡献自己的力量。使命而非为金钱工作。 习惯十二：成功者有系统。成功者都有一套方法来整理思想、行为，因此能不断实践在自己身上，并且教导别人。 习惯十三：成功者找方法，失败者找理由。成功者愿意做失败者不愿意做的事情。 2.厨房装修地砖通铺 网购岩板做台面，省去挡水条，直接用防霉胶收口。外露的墙面也用岩板 橱柜都做大抽屉：餐具放抽屉里，方便又好拿。无拉手门板，好看又好用。 吊柜做两层，常用是玻璃柜，瓶瓶罐罐随手拿。 洗水池用大单口，水龙头可抽拉。 南北屋用吊轨推拉门隔开。 厨房要有洗碗机和烤箱。 3.问责制度与支持体系。建立你的习惯，句号。没有多余的借口。找到一位朋友，一位资助人，或一个支持小组（有专门应对悲伤、沉迷和其它问题的支持小组）。 停止那些阴谋破坏你计划的事，用成功者的故事来激励自己。无论是面对面，打电话还是上网，都要敢于承担问责。 在上帝与你同在的安静时刻，默默祷告，祷告时要为自己的决定做出承诺，得到力量。最后，要拥有防止失败的行动计划。 4.投资对于投资如何获得成功，巴菲特认为智商并没有大家想的那么重要，更重要的是稳定的情绪和独立思考的能力，对事实的掌握和逻辑推理能力，以及专注于自己的能力圈和对自己的信心。 5.音乐下载第一选择酷我音乐 其次是网易云 6.法律我国的法律分类: 宪法，它是国家的根本大法，是我国一切法律、法规的母法。其他法律、法规是宪法的子法。子法如与母法的内容相违背，子法则无效。除了母法–宪法之外，我们可以把其余一切法律、法规分为以下四大部门。即:(1)刑事;(2)民事;(3)经济;(4)行政。打官司的人可以根据自己所打的官司，侧重学习其中的一个部门法律、法规。 (1)刑事方面。它又分两类，一类是实体法，即规定哪些行为是犯罪的，犯了什么罪，将要受到怎样的处罚等。如:刑法、惩法军人违反职责罪暂行条例和全国人大常委会所作的有关决定、通知、补充规定等。另一类是程序法，即规定办理刑事案件程序、步骤的法律。如刑事诉讼法和全国人大常委会所作的有关补充规定等。 (2)民事方面。它也分两类，一类是实体法，如民法通则、婚姻法、继承法、收养法、著作权法等等，以及有关的补充规定。另一类是程序法，如民事诉讼法、仲裁条例等，也包括各种有关的补充规定、暂行规定等。 (3)经济方面。实体法主要有经济合同法、技术合同法、税法、产品质量法等。程序法与民事方面的程序法相同或基本相同。 (4)行政方面。实体法有食品卫生法、环境保护法、劳动法、安全法、治安管理处罚条例等。程序法有行政诉讼法、行政复议条例和其他有关补充规定等。 7.中华人民共和国刑法第六章 妨害社会管理第八节 组织、强迫、引诱、容留、介绍卖淫罪第三百五十八条 【组织卖淫罪】【强迫卖淫罪】组织、强迫他人卖淫的，处五年以上十年以下有期徒刑，并处罚金;情节严重的，处十年以上有期徒刑或者无期徒刑，并处罚金或者没收财产。 组织、强迫未成年人卖淫的，依照前款的规定从重处罚。 犯前两款罪，并有杀害、伤害、强奸、绑架等犯罪行为的，依照数罪并罚的规定处罚。 【协助组织卖淫罪】为组织卖淫的人招募、运送人员或者有其他协助组织他人卖淫行为的，处五年以下有期徒刑，并处罚金;情节严重的，处五年以上十年以下有期徒刑，并处罚金。 第三百五十九条 【引诱、容留、介绍卖淫罪】引诱、容留、介绍他人卖淫的，处五年以下有期徒刑、拘役或者管制，并处罚金;情节严重的，处五年以上有期徒刑，并处罚金。 【引诱幼女卖淫罪】引诱不满十四周岁的幼女卖淫的，处五年以上有期徒刑，并处罚金。 第三百六十条 【传播性病罪】明知自己患有梅毒、淋病等严重性病卖淫、嫖娼的，处五年以下有期徒刑、拘役或者管制，并处罚金。 第三百六十一条 【特定单位的人员组织、强迫、引诱、容留、介绍卖淫的处理规定】旅馆业、饮食服务业、文化娱乐业、出租汽车业等单位的人员，利用本单位的条件，组织、强迫、引诱、容留、介绍他人卖淫的，依照本法第三百五十八条、第三百五十九条的规定定罪处罚。 前款所列单位的主要负责人，犯前款罪的，从重处罚。 第三百六十二条 【窝藏、包庇罪】旅馆业、饮食服务业、文化娱乐业、出租汽车业等单位的人员，在公安机关查处卖淫、嫖娼活动时，为违法犯罪分子通风报信，情节严重的，依照本法第三百一十条的规定定罪处罚。 第九节 制作、贩卖、传播淫秽物品罪第三百六十三条 【制作、复制、出版、贩卖、传播淫秽物品牟利罪】以牟利为目的，制作、复制、出版、贩卖、传播淫秽物品的，处三年以下有期徒刑、拘役或者管制，并处罚金;情节严重的，处三年以上十年以下有期徒刑，并处罚金;情节特别严重的，处十年以上有期徒刑或者无期徒刑，并处罚金或者没收财产。 【为他人提供书号出版淫秽书刊罪】为他人提供书号，出版淫秽书刊的，处三年以下有期徒刑、拘役或者管制，并处或者单处罚金;明知他人用于出版淫秽书刊而提供书号的，依照前款的规定处罚。 第三百六十四条 【传播淫秽物品罪】传播淫秽的书刊、影片、音像、图片或者其他淫秽物品，情节严重的，处二年以下有期徒刑、拘役或者管制。 【组织播放淫秽音像制品罪】组织播放淫秽的电影、录像等音像制品的，处三年以下有期徒刑、拘役或者管制，并处罚金;情节严重的，处三年以上十年以下有期徒刑，并处罚金。 制作、复制淫秽的电影、录像等音像制品组织播放的，依照第二款的规定从重处罚。 向不满十八周岁的未成年人传播淫秽物品的，从重处罚。 第三百六十五条 【组织淫秽表演罪】组织进行淫秽表演的，处三年以下有期徒刑、拘役或者管制，并处罚金;情节严重的，处三年以上十年以下有期徒刑，并处罚金。 第三百六十六条 【单位犯本节规定之罪的处罚】单位犯本节第三百六十三条、第三百六十四条、第三百六十五条规定之罪的，对单位判处罚金，并对其直接负责的主管人员和其他直接责任人员，依照各该条的规定处罚。 第三百六十七条 【淫秽物品的范围】本法所称淫秽物品，是指具体描绘性行为或者露骨宣扬色情的诲淫性的书刊、影片、录像带、录音带、图片及其他淫秽物品。 有关人体生理、医学知识的科学著作不是淫秽物品。 包含有色情内容的有艺术价值的文学、艺术作品不视为淫秽物品。 8.新闻垂直农业 苏格兰一家公司正在开发”垂直农业”，在室内种植草莓、甘蓝、莴苣和香菜。 农作物种在托盘里面，托盘一共有9层，40平米的占地可以种植350平米的农作物。每个托盘上方有1000个发光二极管提供照明。手机控制温度、湿度、通风，以及水和养分的培植系统，可以远程操作，一个人就能经营整个农场。 整套系统的成本主要是电力。为了省电，LED 只发出植物所需的颜色，而不是纯白光的全谱光线。 马斯克罕见批判: 若一些人总赢, 势必为所欲为 世界最快超级计算机 超级计算机制造商 Cray 公司与美国政府签署了一份价值6亿美元的合同，建造世界第一台每秒100亿亿次（10的18次方）浮点运算的超级计算机，名为 El Capitan。它预计将在2023年末投入使用。 目前，世界最快的超级计算机是美国的 Summit，每秒运算20亿亿次，占地面积相当于两个网球场，耗资2亿美元。 最安全的旅行方式 有三种指标，可以衡量某一种旅行方式的死亡风险。 每十亿次出行的死亡人数每十亿小时出行的死亡人数每十亿公里出行的死亡人数 按照公里算，飞机是最安全的方式，但是按照出行次数算，飞机的死亡率是小汽车的三倍。另外，三种标准都显示，公共汽车非常安全。 9.Fun 刚刚又看到新闻说储户存款消失，从几百万到几个亿不等，储户索赔无望。对此我深感恐惧，赶紧骑车到银行查看，卡里的30块钱还在，吓死我了。以后再也不看新闻了，心好累。 妈的，走出银行，一看自行车没了！ 小时候每次伤风，妈妈都会为我冲一杯咖啡。她温柔的说：外国人都是这样的。可是我总是害怕咖啡的味道，酸痛苦涩交错，就像人生。如今我走两岸的上岛，星巴克都不见小时候喝的那个牌子，我依稀记得他有个很洋气的名字：板蓝根。 刘羽琦 10.言论 刚知道件有些浪漫的事：在人的大脑中，有至少一千亿个神经元细胞，这与银河系中恒星的数量相仿，所以你的思维就是自己的星辰大海，要快乐些，照顾好自己的宇宙。 阅读可以是一种放松和休闲，可以没有任何目的。但自我提升，必然是一项需要努力的任务。没有谁能轻轻松松，毫不费脑，就把知识吸收内化。 量小非君子，无度不丈夫。而不是无毒不丈夫。无度是说做人谋事能把握住度。","categories":[{"name":"周刊","slug":"周刊","permalink":"http://example.com/categories/%E5%91%A8%E5%88%8A/"}],"tags":[]},{"title":"数字周刊 17","slug":"Weekly/数字周刊17","date":"2021-09-25T16:00:00.000Z","updated":"2021-09-30T00:54:29.000Z","comments":true,"path":"2021/09/26/Weekly/数字周刊17/","link":"","permalink":"http://example.com/2021/09/26/Weekly/%E6%95%B0%E5%AD%97%E5%91%A8%E5%88%8A17/","excerpt":"","text":"“工作随时努力，生活随遇而安”。这句话等于是我的座右铭，虽不能至，而心向往之。——严耕望《治史三书》 1.重要的提示目前来说，对我个人而言最重要的事，就是实现核心目标。 如何实现核心目标呢？ 每一期至少要完成八个不被干扰的时间。在这段期间内要不断地铺设架好的路，直至高可能性的东西出现。 你，要做完它。 如果因为某些原因，不能很好的去执行核心目标了，那也不能闲置下来，可以立刻去做重要目标相关的事务。 2.生活中的一些现象【化妆品】 朋友刚结婚不久，开了家化妆品店，生意好得不得了。 有天我去店里玩，见一40多岁的女顾客问小李：“这款化妆品效果怎么样？” 小李：“哦，这款我不熟悉。请等一下，我妈帮你介绍。”说着把他老婆拉了过来。 顾客直视其老婆足足十分钟，什么也没问就掏出钱包：“买＂。 【营销哲学】 一害羞男孩在教室自习，看到一个很中意的女孩，眼看女孩看完书要离开了，害羞的男孩憋红了脸上前搭讪：同学能借我10块钱吃面条吗？钱包丢宿舍了，这是我的学生证，你给我手机号 ，回头还你钱。女孩想了想说：行吧。正掏钱，男孩又说：要是能借20，我请你也吃一碗。 【琐事】 一只鼬鼠要与一只狮子决战，狮子果断地拒绝了。鼬鼠说：“你害怕了吗？”狮子说：“如果答应你，你就可以得到曾与狮子比武的殊荣；而我呢，以后所有的动物都会耻笑我竟和鼬鼠打架。”——不要被不重要的人和事过多打搅，因为成功的秘诀就是抓住目标不放，而不是把时间浪费在无谓的琐事上。 【销售心理】 某富翁娶妻，有三个人选，富翁给了三个女孩各一千元，请她们把房间装满。女孩A买了很多棉花，装满房间的1/2。女孩B买了很多气球，装满房间3/4。女孩C买了蜡烛，让光充满房间。 最终，富翁选了胸部最大的那个。——这个故事告诉我们：了解客户的真实需求非常重要。 【有效沟通】 两头牛在一起吃草，青牛问黑牛：“喂！你的草是什么味道？”黑牛道：“草莓味！”青牛靠过来吃了一口，愤怒地喊到“你个骗子！”黑牛轻蔑地看他一眼，回道：“尼玛，我说草没味。”启示：团队合作、管理过程中，能否有效沟通、掌握有效沟通渠道是凝聚竞争力，强化执行力，提升业绩的关键。 【卖菜中的销售学问】 在一菜摊前看见两堆菜。买：“这边多少钱一斤？” 答：“1块。”再问：“那边呢？” 答：“1块5。” 问：“为什么？” 答：“那边的好一些。” 于是买了1块5的。后来发现摊主快速把1块的一分变成两堆，很快1块5一斤的又都卖光了！，，， 3.简单做（ZTD）的十个习惯总结习惯1：收集 –全面收集 这个习惯与 GTD 的完全一样：把所有在脑海里浮现的信息（任务, 想法, 项目等等）记录到随身携带的小本子上（或者任何适合你的工具）。因为只有把信息从脑海里拿出来记在纸上，你才不会忘记它们。 对于这个习惯，我更推荐大家使用纸质的工具而不非电子产品，比方说：非常流行的Moleskine笔记本和Hipster PDA。如果觉得使用PDA或者Smartphone更适合你，那当然也可以。我推荐纸质工具的原因是因为它们速度快。使用电子产品，你先要开机，然后进入合适的程序，最后添加条目才能开始输入。若使用纸笔，你只需要拿出来写就行了。总之什么工具更适合你，就采用什么工具。我只是认为工具越简单易用, 你就越有可能去使用它。 全面收集的关键在于你必需在忘记事情之前赶紧把信息写下来, 并且尽快地把这些信息从笔记本中清除、存入任务清单中。千万不要拖延上面几步，否则信息会积累得越来越多，最后让你失去坚持下去的动力。记住要积极主动地规划你所收集的信息，不要让信息堆积堵塞你的动力。同样的，无论你在哪里（床上，商店，住院，等等），都要随身携带你的记录工具。最后再重申一遍，不管你用的是什么工具，它必须便于携带且能快速的记录信息。 习惯2：处理 —— 快速地对信息作出决定，从而避免收件箱堆积 收件箱中原料的堆积是造成耽搁的重要原因。只有及时处理信息，对原料及时做出决定和归纳成类，你才能避免原料的堆积。我建议至少每天处理一次收件箱，从上而下的，一项一项任务地处理，就像GTD所做的一样：二分钟法则、删除、指派给别人、归档、或者放在日程表上以后做。 习惯3：计划 —— 设定每天，每周的最重要的事(MIT) 每周，列下你需要完成的重大事件，把他们排进日程表。每天，列出1-3个最重要的事(MITs)。记住一定要保证你有很好的完成这些最重要的事。 这是ZTD中最简单也是最重要的一个习惯。它为你的每一天和每一周都设定了目标，因为与其去盲目的去完成那长长的任务清单，你总是在完成那些最重要最有用的事情！当然，你还是要去完成其余的事情的。但是完成最重要的任务，会使你知道自己总在做真正想做的事——那些当你回顾的时候，会感到自豪的事，而不会操劳一天后却发现自己一无所成。 以下是一些如何运用这个好习惯的小技巧： 1.重大事件(Big Rocks)：在每周开始的时候（星期天或星期一），坐下来看看你的任务清单。想想这周你最想要完成什么？刚开始的时候尽量将数目限制在4-6件，待到熟练了且你觉得自己能完成更多的时候，再添加多的任务。不要忘了要确保这些重大事件中包含至少一项与你年度目标有关的任务。2.安排日程：将本周重大事件放在你的周程计划中。每天放置只一个或两个，否则你会忙不过来。并且分出1-2小时的时间去完成它们，尽量把时间安排得越早越好。放置好这些重大事件后，你就可以计划其它的不是那么重要的事情了。3.最重要的任务：每天早上，马上决定今日最重要的任务。这和你的重大事件很相似，每日选择1-3个最重要的任务，而这其中可能包括一个你已经安排了的重大事件和其它几个最重要的任务。同样的，尽量将它们安排在尽可能早的时段。如果安排的太晚，你常常会被其他的任务干扰，而导致任务失败。4.完成它们：前面说的这些无非就是为了搞定这些最重要的任务。每天早上做的第一件事就是完成第一件最重要的任务，远离干扰，把所有精力都放在任务上直到完成它为止。做完之后可以简单的奖赏自己。然后去完成第二件最重要的任务! 习惯4：执行 —— 一心一意，每次只执行一件事 执行，作为一切时间管理的核心，同样是ZTD中非常重要的一部分。如果你不执行计划的行动，那其他的所有管理习惯也就是无意义的，你准备的工具、管理系统、计划列表、任务清单等等也就是白费了。所以执行是所以习惯中最最重要的！ ZTD着重于在不分心的情境下，一次只执行一件事。千万不要多线工作，也不要让你的工作突然中断。这里是一些建议，希望你能够真正地执行行动并且完成它们： 1.重大事件(Big Rocks)：选择一个任务（最好是每日最重要的任务之一），做出决定：是一次全部完成、还是现在抽出一段时间（30分钟）去做它。更详细请参考《放置大石头的艺术：让你的效率翻倍》。2.选择好环境：在你开始工作前，消去所有使你分心的事。关闭Email、关上手机、拔掉网线等等，把办公桌上堆积的混乱的东西写清理干净。3.记录时间：设置一个计时器（像CoolTimer等等），或者尽可能的集中于你的任务不要松懈，不让自己变得心烦意乱的。4.避免干扰：如果你在执行时被干扰了，马上把这些新到的信息或者任务记录到你的笔记本或收集箱中，然后继续原来的任务。重申一遍，千万不要尝试多线工作。5.快速调整状态：如果你必需去检查你的Email或者执行其他的任务，那停下来，深呼吸，重新使自己的思绪集中，调整到正确的状态再继续任务。6.不可避免的中断：无论如何，有时总会碰到一些我们无法避免和拖延的事情而中断现在的任务。当遇到这个情况时，把现在的任务进度记录下来，把所用的资料也都整理放到一旁。当你弄完那些无法避免的任务后，简单地把所有的资料重新拿出来，然后再看看记录的任务进度，又可以马上开始原来的任务了。7.享受休息：深呼吸，舒展一下身子，在工作时也要享受好的休息。身体可是革命的本钱，千万不要亏待了哦～8.Ahhh：当你完成任务后，表扬你自己！奖励你自己上一会儿网，看一会儿电视——但是不要太长了（10分钟），然后继续你的下一步行动。千万不要让你被奖励冲昏了头脑，忘记了下面的任务。 习惯5：信任的系统 —— 建立简单的列表，并每日查看 ZTD（简单做）建议你尽可能的维持列表简单化。不要增加复杂的系统，也不要持续尝试新工具，以免时间上的浪费。尽可能的使用简单的清单方式，因为你注重的是如何执行的任务，而非玩弄你的GTD系统或者GTD工具 习惯6：管理 —— 一个存储所有信息的地方 把所有接收的信息都放入你的收集箱中，处理你的收集箱，执行任务，完成任务。在这个系统里，你永远都不应该有疑问自己下一步该做什么。而且也使你更能专心注重于工作，也避免的拖延的。 这些我只想说明的是：你的生活是可以完全被管理的，只需要这个简单的规则：把所有信息都放在正确的地方。这个习惯也正是我在传授给我的孩子们的，所以我可以不要在他们玩耍后，帮他们将玩具收好；更重要的是我觉得这个习惯是最有价值的之一。 这里是如何培养这个习惯的方法： 形成系统：把所有接收的信息都放入你的收集箱（在工作与家庭中）。处理你的收集箱，马上完成一些任务或者将其中一些放入任务清单中，然后完成它，从清单中清理出去。在这个系统里，你永远都不应该有疑问自己下一步该做什么。 为信息找个家：如果你总是把一些资料堆放在你的工作台、书桌、床上或者卧椅上，你就应该想想：这些东西是应该放在哪儿的呢？它们的“家”在哪儿？如果它们还没有“家”，你就为它们找一个吧。安排一个地方专门放东西或某一类东西。车钥匙？找一个地方专门放钥匙；脏衣服？不要把它们都扔在床上；首饰？把它们放到一个安全的地方收好。 简单的整理系统：一旦你已经把收集箱中的项目处理，你可能还需要参考其中的条目，这时你就需要一个地方来收集这些项目。千万不要把这么一叠文件随便堆在不知道什么地方——建立一个简单的整理系统（方便的字母安排顺序，或者Geek喜欢的十六进制方式等等）。准备几个备用的空白标签和文件夹以便随时建立一个新的整理夹。不要害怕有太多的整理夹，相反的，你应该避免将不同的文件混杂在一个整理夹中（那就失去意义了）。 马上开始。我知道，你在看这篇文章的时候正在想“等下我就去做建立一个管理系统”。不要“等下”，现在就开始！ 习惯成自然。把所有的东西都放在正确的地方的习惯不是一夜就能培养成的。你可能忘记，也可能为了偷懒而没做。你应该坚持，黏住这个习惯，至少坚持这个习惯30天，直到它已经变成自然使之。 注意过渡阶段。当你从一件事情转移到另一件事时，其中过渡的时间是应该注意的。因为你需要把一些材料整理到一边和清理一下，但是这个时间我们常常不会去想该如何整理和收集，而是下一步该自己做什么。当你在培养这个管理习惯的时候，注意这个转移过渡，这样你就能记得去整理和更容易的管理好事情。 保持桌面干净。永远都不要让你的工作台、书桌、床、床头柜、咖啡桌和地板上堆着东西。如果你正在犯这个错误，请为那些东西找个“家”。 使用标签。标签是管理中最好用的工具。准备一些空白标签，为那些抽屉和文件箱都标上标签。所以你就可以对事情都了如指掌。 评估审核。无论何时，回顾你的管理习惯都是一件保持进步的事情。你会发现有一些管理上的不当之处，像某一些资料都被整理在一个房间，而你却常常在另一个房间使用这些资料等等。而有些时候，你需要重新整理一遍所以抽屉和文件箱，以便保持事情都在可控制的范围内。 习惯7：回顾 —— 每周回顾你的系统和目标 无论你多么优秀，仍然有忘记事情的时刻、有失去目标的时刻、有时间管理系统失衡的时刻。当你陷入繁忙的工作，忙碌的生活中时，即便最好的管理系统都有可能变得一团糟。 每周回顾的重要意义在于它给了你一次机会，来重新整理所有的事情和检视什么是最重要的任务。GTD中的每周回顾已经非常棒了，简单做（ZTD）基本上仍延用它，不过添加了对目标回顾的重视度。每次只要集中于一个目标，并且确保它是一个你能完成的目标。 1.回顾你的长期目标(1)，中期目标(1)和短期目标。回顾你的人生目标（如果你没有，抽出时间仔细考虑一下），根据你的人生目标制定一个今年自己想完成的长期目标，只需要一个（如果你制定了太多，就选择最重要的，目标太多便会失去准心）；然后再为接下来的几个月制定一个中期目标，这个目标应当是帮助你进一步接近自己的长期目标；最后再为接下来的几周选择一个短期目标，来帮助你接近自己的中期目标。当你完成这些步骤后，以后的每周回顾也就是一次对自己目标进展的回顾和对目标的重新确定。每周对你目标重新确定是非常重要的，只有这样才能保证你的前进方向正确，保证你的精神和体力上都做好准备，继续保持不断前进。（刚开始的目标设定大概需要10-15分钟，以后的每周回顾大约5分钟。 2.回顾你的笔记。如果你有跟随简单做好习惯1(收集)，你就会有一份上一周的笔记。在你的笔记上，大部分的任务都应该已经完成的，但是重要的是在重新回顾它们时，发现那些没有完成的任务、没有处理的信息等等。就是简单的扫过然后把未完成的事情重新记录下来。（大概5-10分钟） 3.回顾你的日程表。回顾上一周的日程表，看看是否有需要提前的事项，或者有新产生的需要完成的任务。然后再看看下一周你需要完成的事情。（大约5分钟） 4.回顾你的清单。无论你是使用多份情境清单或者一份任务清单，回顾它们是同样重要的，确认上面列出的事项是最新的。划掉那些已经完成的事项，并且看看你的“接下来的任务清单”、“某一天/可能清单”、“工程清单”，如果你有使用这些清单。（大约10分钟） 5.设定你的短期目标和放置你的“大石块”。如果你已经完成了一个短期目标，你就回到第一个步骤重新设定一个新的。如果还未达到短期目标，那回顾自己的任务时，看看怎么样能取得更好的成果。列出这周你想完成的重要任务和其他的任务，然后将它们安排到日程表中，尽量将它们安排在早晨。这些任务是优先级最高的，所以每天不要安排太多的，只需1、2个便可。参考阅读《放置大石头的艺术：让你的效率翻倍》 如果你不分心，并且按照步骤来，总共回顾时间为30分钟。回顾时，你应该避免所有的打搅，关掉Email和网络（除非你的清单都是在线的），关掉你的手机。最多的情况，一次每周回顾大概也就45分钟而已。 记住，每次只要集中于一个目标，并且确保它是一个你能完成的目标。将它贴出来、告诉朋友、使用Email提醒等等，无论如何都不要放弃或者远离目标。 习惯8：简化 —— 减少你的任务清单，只留下最必要的 将你的任务列表简化到最少，只剩下最重要的任务，这样你就不需要那些复杂的计划体系了。由于GTD并不对任务进行的优先级划分，所有的任务都被添加到一份清单中，于是这份清单就变得越来越长，而你就不得不每天都疲倦地忙碌于任务完成之中。取而代之的，ZTD要求你不断地简化自己的任务清单，确定你的任务只是最重要的。 清除，再清除。花几分钟时间回顾你的任务和项目清单，想想如何简化他们。或许你可以把这当作一项考验：把自己的任务消去一半。如果你有50个任务，试着减少到25件。该如何清除任务呢？有些任务是很久以前的，不再需要做了，而还有一些任务可以被拖延。参考阅读《同强动力的任务改善你的工作效率》。 什么才是最重要的。了解你的主要目标是什么，其他目标是什么。你应该把精力都集中于一件事情上，同时两三件也可以，但千万不要同时进行十几件事。当你的小任务与你的主要目标有关系时，那么它们就是重要的，否则就不是。 减少你的承诺。你打算完成多少项目？你打算做多少额外的工作？可你是不可能完成所有事情的，你需要学会说不。就算已经说好了，你仍然可以说不，对别人坦诚相告：你有其他紧急任务要去做，不能答应他们干某事了。慢慢的，你就应当减少你的承诺。 简化你的信息源。我减少了RSS订阅量，也减少了每日Email回复的数量。这一年多来，我只读一份报纸或一份杂志。有些新闻是不能带给我们任何价值，所以简化你生活中的信息输入，从而也简化输出。参考阅读《处理信息膨胀的21条小贴士》。 每周回顾。每周花一点时间去回顾，清除那些掉不必要的任务，你不需要一份庞大的任务清单来变得高效。 完成大石头。在每周回顾中，找出你打算在下周完成的几份重要任务。这些就是你的大石头。把这些大石头放进你的每日日程中，把它们安排在最前面，优先先完成你的大石头，不要把它们推到每天的最后。参考阅读《放置大石头的艺术：让你的效率翻倍》。 让价值最大化。看看这两个新闻作者：一个超级忙碌，每周写很多文章，这些文章都不错，但还不是非常优秀；另一个作者每周写一份文章，但是总能上头版，而且到处都在讨论这些文章，它在互联网上也到处被转载，这些文章使他在记者的行业很成功，他也因此得到了更好的工作，甚至出版了自己的著作。也许这个例子有些极端，但它说明了要点：有些任务需要长期投入，有些只会你一直忙碌，实际上却不重要。把精力放在那些重要任务上，它们将使你成名，带来长时间的回报和长时间的幸福与满足。这些就是你的“大石头”，清除其它的不重要的。 三件最重要的事。写下你一天中最重要的三件事（我记录在自己的Moleskine上），当你完成它们的时候划掉它。如果可能的话，将一天的时间都花在这三件事上，至少也应该投入前半天来做这三件事情。你的最重要的三件事可以是你每周的“大石头”，或者任何你需要当日完成的任务。 把小事放在一起做。每天都会有些小事情需要你去处理，因为不及时处理掉它们，它们或许会带来更多的一些小麻烦。所以把这些小事情都写在一起（我写在页面的底部）。一般来说，你不需要立即着手它们。设定一个段时间（大约30分钟，放在一天末，比如4点之后），然后一起完成所有的这些事情。这些小事可能是：打电话、回复电子邮件、处理信息或文件等等。快速地完成它们，然后将它们从清单中消除出去。这样，一天过去你就没剩下多少没完成的任务了。如果不行，也最好是将小事情（而非重要的任务）拖到第二天，Email也可以放到一起处理。如果你不这样，这些小事情就是一种干扰，每天利用一次或是两次的时间把它们全文搞定！ 习惯9：常规 —— 设定每周、每日例程 设定每周、每日例程可以使你的工作和个人生活得到极大的简化。更重要的是，使你掌控自己的生活，而非让任务处在搁浅之中。没有日程，我们就不太容易对新进入的信息说不。因为我们总是被那些希望占用我们时间的人、吸引注意力的网站所拖住，这不是一件好事（除非你不想做完重要的事情），所以你需要掌控自己的生活，设定日程，并且跟着它走。 习惯10：激情 —— 做你充满梦想的事情 当你真正地想去做一件事，无论多么辛苦，你都会去努力的完成。你会付出更多的努力，抽出更多的时间，耽搁的时间也减少了。所以，培养这个习惯正是为了持续搜寻使你保持热情的事情，使你精神饱满，动力十足。 或许你是该想想自己到底想做什么？（不要说是睡觉）你最喜欢从事什么？你心仪的工作岗位是什么，如何达到它？仔细想想，多考虑几天，待你确认以后，下一步就去实现它吧： 调查：有谁在从事你心仪的工作？他们有什么经验和想法？他们是如何得到这份工作的？获取这份工作有什么要求与标准？在网络上搜索、询问认识的朋友，你能获取的信息越多，对你也就越有好处； 找出绊脚石：你还需要什么去获得这份工作？是一份更高的学位、已有一份不错的工作经验、或者是需要其他的技能？ 设定计划：想出一些有用的方法去解决你的绊脚石。如果你永远都不开始计划，那你就永远不会获得自己想要的工作。所以，为自己的成功铺好道路吧。 开始行动：不要等待机会，机会只会降临给时刻准备的人。所以，主动去发现和抓住机会，执行你的计划——至少每天一点，直到你达到目标。也许现在看起来，需要走的路还很长，但是你一旦实际行动起来，总有一天，你就会到底目的地的。 坚持不懈：不要因为几次失败而放弃，为了自己的目标而奋斗。Don’t Give Up! 4.真正的成功，是改变自己一个不会游泳的人；老换游泳池是不能解决问题的；一个不会做事的人，老换工作是解决不了自己的能力的；一个不懂经营爱情的人，老换男女朋友是解决不了问题的；一个不懂经营家庭的人，怎么换爱人都解决不了问题；一个不学习的老板，绝对不会持续的成功；一个不懂正确养生的人，药吃得再多，医院设备再好，都是解决不了问题的。 让你烦恼的人，让你痛苦的人，让你怨恨的人，让你讨厌的人，他们都是你自己的不同侧面， 都是另一个你自己。你要好好改变你的心境和想法。 5.2015年的315晚会 6.培根在《论读书》中说： “读书可以恬人养性，可以提高修养，可以锻炼能力。获得读书的乐趣是在个人独处一室沉静平和的时候；高度的修养是在谈吐举止中处处体现优雅的风范；超常的能力是在判断和处理事务时表现精明睿智。精通一行的人才有能力作出执行事务的决定，针对一个接一个的特殊情况作出判断；而一般高明的见识，事情的谋划和部署只有那些教养良好的人才能做到…… 天性狡诈的人贬低学习；头脑简单的人盲目推崇；只有明智的人才懂得把学习所得为我所用…… 读书时不要一味鄙薄或存心诘难作者的观点；也不要轻易接受不假思索；不要只是为了谈话和辩论时可以引经据典令人佩服，而是要权衡考虑作者的看法。读史使人明智，诗歌使人聪慧，数学使人严密，哲理使人深刻，伦理学使人有修养，逻辑修辞使人善辩。” 7.生活中的一些现象【营销哲学】 一害羞男孩在教室自习，看到一个很中意的女孩，眼看女孩看完书要离开了，害羞的男孩憋红了脸上前搭讪：同学能借我10块钱吃面条吗？钱包丢宿舍了，这是我的学生证，你给我手机号 ，回头还你钱。女孩想了想说：行吧。正掏钱，男孩又说：要是能借20，我请你也吃一碗。 【琐事】 一只鼬鼠要与一只狮子决战，狮子果断地拒绝了。鼬鼠说：“你害怕了吗？”狮子说：“如果答应你，你就可以得到曾与狮子比武的殊荣；而我呢，以后所有的动物都会耻笑我竟和鼬鼠打架。”——不要被不重要的人和事过多打搅，因为成功的秘诀就是抓住目标不放，而不是把时间浪费在无谓的琐事上。 【销售心理】 某富翁娶妻，有三个人选，富翁给了三个女孩各一千元，请她们把房间装满。女孩A买了很多棉花，装满房间的1/2。女孩B买了很多气球，装满房间3/4。女孩C买了蜡烛，让光充满房间。 最终，富翁选了胸部最大的那个。——这个故事告诉我们：了解客户的真实需求非常重要。 【有效沟通】 两头牛在一起吃草，青牛问黑牛：“喂！你的草是什么味道？”黑牛道：“草莓味！”青牛靠过来吃了一口，愤怒地喊到“你个骗子！”黑牛轻蔑地看他一眼，回道：“尼玛，我说草没味。”启示：团队合作、管理过程中，能否有效沟通、掌握有效沟通渠道是凝聚竞争力，强化执行力，提升业绩的关键。 【卖菜中的销售学问】 在一菜摊前看见两堆菜。买：“这边多少钱一斤？” 答：“1块。”再问：“那边呢？” 答：“1块5。” 问：“为什么？” 答：“那边的好一些。” 于是买了1块5的。后来发现摊主快速把1块的一分变成两堆，很快1块5一斤的又都卖光了！，，， 8.常用的礼貌用语我有口诀的给你啦： 头次见面用久仰，很久不见说久违。 认人不清用眼拙，向人表歉用失敬。 请人批评说指教，求人原谅用包涵。 请人帮忙说劳驾，请给方便说借光。 麻烦别人说打扰，不知适宜用冒昧。 求人解答用请问，请人指点用赐教。 赞人见解用高见，自己意见用拙见。 看望别人用拜访，宾客来到用光临。 陪伴朋友用奉陪，中途先走用失陪。 等候客人用恭候，迎接表歉用失迎。 别人离开用再见，请人不送用留步。 欢迎顾客称光顾，答人问候用托福。 问人年龄用贵庚，老人年龄用高寿。 读人文章用拜读，请人改文用斧正。 对方字画为墨宝，自己字画用拙笔。 邀请别人用屈驾，招待不周说怠慢。 请人收礼用笑纳，辞谢馈赠用心领。 问人姓氏用贵姓，回答询问用免贵。 表演技能用献丑，别人赞扬说过奖。 向人祝贺道恭喜，答人道贺用同喜。 请人担职用屈就，暂时充任说承乏。 对方亲眷多带令，称呼己方常带家。 9.开心一笑 互联网年纪和学历的变化蛮可怕的，下沉之快超出想象。 10.言论 无论你是为了考试而死记硬背，还是为了学习一门新语言，充足的睡眠才是你提高记忆力的秘密武器】如果睡眠不足，大脑就会像浸满水的海绵，无法再吸收新信息。而睡眠不仅仅是在学习之前很重要，在学习之后也需要充足的睡眠，才能够为那些新记忆下来的信息按下保存键。 勒庞在《乌合之众》中，生动形象揭示了一群乌合之众的丑陋嘴脸：“他们从未渴望过真理，他们对不合口味的证据视而不见。假如谬误对他们有诱惑力，他们更愿意崇拜谬误。谁向他们提供幻觉，谁就可以轻易地成为他们的主人；谁摧毁他们的幻觉，谁就会成为他们的敌人” 精通人性是用来保护自己，不是用来算计别人的。人与人之间的相处，根本没有捷径可走，只能用真心换真心，千万不要耍心眼。","categories":[{"name":"周刊","slug":"周刊","permalink":"http://example.com/categories/%E5%91%A8%E5%88%8A/"}],"tags":[]},{"title":"数字周刊 16","slug":"Weekly/数字周刊16","date":"2021-09-24T16:00:00.000Z","updated":"2021-09-26T14:47:21.000Z","comments":true,"path":"2021/09/25/Weekly/数字周刊16/","link":"","permalink":"http://example.com/2021/09/25/Weekly/%E6%95%B0%E5%AD%97%E5%91%A8%E5%88%8A16/","excerpt":"","text":"每个月问问自己，我这个月学了什么?这个月问了什么?这个月改善了什么?因为一个人的成就，与岁月无关，与学历无关，与经历有关，最根本是跟经历之后做了什么–有没有去思考、去悟有关。 1.程序员陷阱前几天，我听一个广播节目。主持人问，现在很多人开网约车，这样能赚多少钱，能够赚到大钱吗？ 这个问题很容易回答，答案就是不能。出租车司机的收入，主要由营业时间的长短决定。基本上，一天开12个小时，就是比开6个小时，收入高出一倍。每天只有24个小时，因此收入存在上限，不可能偏离平均水平很远。 出租车是”时间换收入”的典型行业，投入的时间越多，收入越高，在家休息就没收入。很多行业都属于”时间换收入”，所有此类行业都赚不到大钱。因为你能用来交换的时间是有限的，而且进入中年以后，你就拿不出更多的时间来交换。开出租车赚零花钱，或者作为短期过渡，这是没问题的，但作为终身职业是很糟糕的。 我觉得，越来越多的程序员正在落入这个陷井，用编码的时间换取收入。只有不停地做项目，才能拿到钱。项目做得越多，收入越高。这个项目开发完了，公司又让他去干下一个项目。 忙了好几年，项目完成了一大堆，但是自己什么也没留下，以后的收入还要取决于从零开始的新项目。这样的话，你跟出租车司机有何两样，哪一天你不写代码了，不是照样没收入。 那些赚到大钱的人，没有一个是靠时间换取收入的。他们要么通过积累资产致富，要么购买他人的时间，为自己创造财富。你应该警惕，不要落入”时间换取收入”的陷井，不要只顾着为别人生产代码，而要注意积累自己的资产，以及适时开展属于自己的业务。 2.每周时间的规划A类时间：每周36小时左右，平均每天6小时。B类时间：编程每周5小时、阅读6小时（线上笔记和书籍）、学习英语3小时C类时间：有氧运动6小时、整理资料2小时、听英语玩游戏 3.Another townI went to another[əˈnʌðər] town on this afternoon, the town name is Beilong, the journey[ˈdʒɜːrni] will take about half an hour. I ride my bike very carefully, because there will be too many cars along the road, big trucks are very dangerous[ˈdeɪndʒərəs] in particular[pərˈtɪkjələr]. There is a square in the town, and across the square is a supermarket. other表示别的、另外的，只能与复数名词连用。但other前有冠词the即可与单数名词连用，The other表示两个中的另一个，是特指。another表示三个以上中任意的另一个，是泛指。 Some students like English and other students (others) like physics.有些学生喜欢英语，有些学生喜欢物理 on和in都可用于afternoon的前面 1、on用在afternoon 前面表示有具体日期(包括该天的下午)的下午 2、in放在afternoon前面，用于泛指一天的下午 half an hour 半小时 half an hour ago 半小时之前 along the road 沿路 4.知识广度 vs 知识深度 国外作者画了一张图，将世界上的程序员比喻成三种形状。 （1）大饼型：拥有知识广度，但没有知识深度。 （2）竹竿型：拥有知识深度，但没有知识广度。 （3）T 型：介于前两者之间。 那篇文章也认为，通常情况下，竹竿型程序员的出路最好，雇主愿意为知识深度买单。因为现代社会高度分工，越是大公司，岗位职责越明确，需要的是领域专家，而不是多面手。 但是作者提到，有一种情况例外，知识广度有明显优势，那就是确定项目路线的时候。 请看上图，右上角有一个黑点，那是公司的目标。当前位置在左下角的原点，两点之间没有现成的道路，需要自己寻找实现路径。 这时，知识广度就发挥作用了，了解的信息越广泛，知道的情况越多，就越可能具备洞察力，能够在多条路径里面，选出最合适的道路。知识面狭窄的人，由于不了解其它道路，不管遇到什么问题，可能都选择他会的那一条路，比如 Java。 这就是全能程序员的优势，判断正确的仰角 θ，使得两点之间距离最短；特长程序员的优势是前进速度 r，可以在既定道路上做到快速前进。所以，知识的广度能告诉你什么是正确的方向，知识的深度则可以让你在该方向上快速前进。 对于长期而艰巨的项目，走得快固然重要，但更重要的是走对方向。如果仰角 θ 不对，走得再快也没用，因为一开始就走错方向，后期必须停下来校正方向，甚至可能永远到达不了目标，白白浪费了生命。 因此，全能型的人才比较适合确定项目方向，担任团队领导。 乔布斯、马斯克就是这样的人，强在知识的广度，而不是知识的深度。他们既懂技术，又懂市场和管理，还了解人文（”我喜欢站在人文和技术的交叉点”），一旦掌握资源，就能带领团队，做出创新的产品。但是，如果让他们担任工程师，绝对是糟糕的工程师，会被开除。 不过话说回来，现实中，谁会因为你知道的事情多，就让你担任团队领导呢？反而是因为你克服了技术难题，才有机会来领导团队。乔布斯和马斯克都是自己创业才出头的，恐怕不是偶然。 总结一下，对于公司来说，如果有明确的技术方向，那么就需要聘请特长程序员，帮助加快开发速度。如果是刚刚诞生的创业公司，方向还在摸索之中，那么全能程序员也许更有价值。 5.关于新陈代谢《科学》杂志报道，科学家发现人体新陈代谢的速率，与以前认为的不一样。 1岁时，新陈代谢达到最高点。1岁到20岁，新陈代谢每年放缓约3%。20岁到60岁，新陈代谢保持稳定。60岁以后，每年下降约0.7%。这意味着，青年和中年时期，人体的能量消耗速度并没有下降。 所以，20岁到60岁之间，节食可以减肥，因为新陈代谢并没有放缓，只要吃得少，体重就会下降。进入60岁以后，就很难通过节食减肥，因为新陈代谢每年都在下降，节食效果越来越小。 6.时间管理上帝是对每个人都公平的就是——时间，同样的一天24小时，同样的一年365天，遇到闰年是366天。 这必然会涉及到的一个词叫机会成本，当同一块地当你选择了养猪，你不得不因此而放弃另外可能的养鸡的收益，这就是你的机会成本。 其实每个人每天都在面临这样的选择，我假如选择周末参加课程学习，我的技能会有提升，从而可能改善我的工作表现以获得晋升，但是我却因此放弃了出去逛街心情放松以及增进朋友感情的机会…等等。 在这里我没有权利来评判任何人的价值观，也没有必要干涉任何人的生活方式，我只想明确一点：对自己的选择要负担起责任，抱怨过去毫无价值，及时的总结跟反思却很有必要。 也许推动我快速提升的重要因素是我一年有600小时学习和培训的时间。但更重要的因素是我的总结思考和领悟。 另外，工作上时间管理的实质就是：如何分清是否重要和是否紧急，并把重要紧急的事情先做，平时尽量多做些重要但不紧急的事情，这样你的工作就不会那么被动和狼狈。 7.职场上一些说话技巧 以最婉约的方式传递坏消息句型：我们似乎碰到一些状况… 你刚刚才得知，一件非常重要的案子出了问题，如果立刻冲到上司的办公室里报告这个坏消息，就算不干你的事，也只会让上司质疑你处理危机的能力，弄不好还惹来一顿骂，把气出在你头上。此时，你应该以不带情绪起伏的声调，从容不迫的说出本句型，千万别慌慌张张，也别使用”问题”或”麻烦”这一类的字眼；要让上司觉得事情并非无法解决，而”我们”听起来像是你将与上司站在同一阵线，并肩作战。 上司传唤时责无旁贷句型：我马上处理。 冷静、迅速的做出这样的回答，会令上司直觉的认为你是名有效率、听话的好部属；相反，犹豫不决的态度只会惹得责任本就繁重的上司不快。夜里睡不好的时候，还可能迁怒到你头上呢！ 表现出团队精神句型：安琪的主意真不错！ 安琪想出了一条连上司都赞赏的绝妙好计，你恨不得你的脑筋动得比人家快；与其拉长脸孔、暗自不爽，不如偷沾他的光。方法如下：趁着上司听得到的时刻说出本句型。在这个人人都想争着出头的社会里，一个不妒嫉同事的部属，会让上司觉得此人本性纯良、富有团队精神，因而另眼看待。 说服同事帮忙句型：这个报告没有你不行啦！ 有件棘手的工作，你无法独力完成，非得找个人帮忙不可；于是你找上了那个对这方面工作最拿手的同事。怎么开口才能让人家心甘情愿的助你一臂之力呢？送高帽、灌迷汤，并保证他日必定回报；而那位好心人为了不负自己在这方面的名声，通常会答应你的请求。不过，将来有功劳的时候别忘了记上人家一笔。(您想学习更多相关文章吗？请加QQ:622005037,421612654每天为您更新励志，销售，管理，商战案例，等经典文章，免费学习。此QQ空间已经改变了千万人的命运，欢迎您的加入。) 巧妙闪避你不知道的事句型：让我再认真的想一想，三点以前给您答复好吗？ 上司问了你某个与业务有关的问题，而你不知该如何做答，千万不可以说”不知道”。本句型不仅暂时为你解危。也让上司认为你在这件事情上头很用心，一时之间竟不知该如何启齿。不过，事后可得做足功课，按时交出你的答复。 8.生活中的一些现象【经验与学历】 一伙劫匪在抢银行时说了句至理名言：“通通不许动，钱是国家的，命是自己的！”劫匪回去后，其中一新来的硕士劫匪说，老大，我们赶快数一下抢了多少，那老劫匪（小学文化）说：“你傻啊？这么多，你要数到什么时候？今天晚上看新闻不就知道吗？” 网友微评：这年头工作经验比学历更重要！ 【值得思考】 某人买了一坛好酒，放在小院，第二天，酒少了1/5，便在酒桶上贴了不许偷酒四个字。第三天酒又少了2/5，又贴了偷酒者重罚。第四天，酒还是被偷，于是贴尿桶二字，看谁还喝。第五天他哭了。桶满了……故事还没完，第六天，他再次在酒桶上贴了不许偷酒四字。那一天很多人都哭了。 【鹦鹉与乌鸦】 鹦鹉遇到乌鸦，笼中的鹦鹉安逸；野外的乌鸦自由。鹦鹉羡慕乌鸦自由，乌鸦羡慕鹦鹉安逸，二鸟便商议互换。乌鸦得到安逸，但难得主人欢喜，最后抑郁而死；鹦鹉得到自由，但长期安逸，不能独立生存，最终饥饿而死。——做最好的自己，不要羡慕他人的幸福，也许那并不适合你。 【顿悟】 老师问：“有个人要烧壶开水，生火到一半时发现柴不够，他该怎么办?”有的同学说赶快去找，有的说去借、去买。老师说：“为什么不把壶里的水倒掉一些呢?”。——同学顿悟，世事总不能万般如意，有舍才有得。人生的许多寻找，不在于千山万水，而在于咫尺之间。 【穷人】 穷人问佛：我为什么这样穷？佛说：你没有学会给予别人。穷人：我一无所有如何给予？佛：一个人一无所有也可以给予别人七种东西。颜施-微笑处事；言施-说赞美安慰的话；心施-敞开心扉对人和蔼；眼施-善义的眼光给予别人；身施-以行动帮助别人；座施-即谦让座位；房施-有容人之心。 9.知识量一个人必须要有很好的DATA BASE，因为，你需要在适当的时机，对公司政策/产品/市场/客户/流程问题，提出多元化反思，有个现象很可怕，叫做“瞎忙”，很多年轻的光阴会葬送于此，你一定要学会跳出来，学会站在你希望的位置上看问题…这也可以称作你成长的目标节点。我建议你们每天都能看一点财经以掌握市场和国家动态，看一章管理的知识提升自己竞争力，看一些专业领域的信息巩固自己知识储备，再看一点你个人感兴趣的内容轻松你的大脑。希望你们能够时时刻刻做有价值的事。 10.言论 为别人工作，就要做别人认为正确的事；为自己工作的话，就不需要考虑别人的想法 如果你走得足够远，其实就再也没办法回去了。当你回到故乡，原来的一切都已经消失了。不过，这也不算什么，归根结底，旅程才是你的故事中最重要的部分。 – 《如果有无尽的推动力，宇宙飞船可以飞多远？》 人生嘛，到底是努力重要，还是选择重要？这个问题的终极答案是这样的：当你有选择的时候，选择重要。当你没有选择的时候，努力重要。","categories":[{"name":"周刊","slug":"周刊","permalink":"http://example.com/categories/%E5%91%A8%E5%88%8A/"}],"tags":[]},{"title":"数字周刊 15","slug":"Weekly/数字周刊15","date":"2021-09-18T16:00:00.000Z","updated":"2022-02-27T12:03:54.807Z","comments":true,"path":"2021/09/19/Weekly/数字周刊15/","link":"","permalink":"http://example.com/2021/09/19/Weekly/%E6%95%B0%E5%AD%97%E5%91%A8%E5%88%8A15/","excerpt":"","text":"1.关于json一些操作在javascript中字符串转换json格式： var data = JSON.parse(str); 改变json数据中键值： function changeTreeDate(arrayJsonObj, oldKey, newKey) &#123; let str = JSON.stringify(arrayJsonObj); let reg = new RegExp(oldKey, &#39;g&#39;); let newStr = str.replace(reg, newKey); return JSON.parse(newStr); &#125; let newJson = changeTreeDate(data, &#39;week_things&#39;, &#39;title&#39;); 截取json数据的某一部分： var mydata = []; for (var i = 0; i &lt; data.length; i++) &#123; mydata.push(data[i][&#39;fields&#39;]); &#125; json格式化转化 2.div、css基础知识DIVCSS5致力于成为中小站长与DIV+CSS网页布局开发制作技术人员的CSS学习平台，并提供有意义的div css教程、CSS培训、css+div资源、css div信息(模板特效模块资源)等。 3.js数组与字符串的相互转换方法1、数组转字符串需要将数组元素用某个字符连接成字符串，示例代码如下： var a, b; a = new Array(0,1,2,3,4); b = a.join(&quot;-&quot;); //&quot;0-1-2-3-4&quot; 2、字符串转数组 实现方法为将字符串按某个字符切割成若干个字符串，并以数组形式返回，示例代码如下： var s = &quot;abc,abcd,aaa&quot;; ss = s.split(&quot;,&quot;);// 在每个逗号(,)处进行分解 [&quot;abc&quot;, &quot;abcd&quot;, &quot;aaa&quot;] var s1 = &quot;helloworld&quot;; ss1 = s1.split(&#39;&#39;); //[&quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;, &quot;w&quot;, &quot;o&quot;, &quot;r&quot;, &quot;l&quot;, &quot;d&quot;] 5.HTML5 Canvas炫酷背景动画特效 demo演示 6.Django将queryset转为json对象from django.core import serializers data = WeekPost.objects.all() week = serializers.serialize(&quot;json&quot;,data) 7.使用Animated动画window.onload = function()&#123; $(&quot;#login-box&quot;).addClass(&quot;animated bounceInLeft&quot;); console.log(111); &#125; window.onload要等整个窗口（包括图片）都加载完才触发 执行 jQuery加载即执行： $(function()&#123; $(&quot;#name&quot;).click(function()&#123; //adding your code here &#125;); &#125;); 增加和移除一个class $(&quot;.default&quot;).addClass(&quot;hover_s&quot;); $(&quot;.default&quot;).removeClass(&quot;default &quot;); 8.Mac电脑MySQL安装和登录在macbookpro 上安装mysql 登陆mysql alias mysql=/usr/local/mysql/bin/mysql mysql -u root -p 这种方式只能临时有效 9.Django的数据传入js中我是先把数据传入Html标签中，然后通过document获取元素，把字符串数据转化成json传入js里面的。 没有使用ajax 10.言论 如果你有足够的权，一切的规则都是为你服务的；如果你有足够的钱，任何规则都可以变通的；如果你既没有钱又没有权，所有规则是为你定制的。 很多人结婚后能白首不相离的秘诀是：结婚后生儿育女，工作赚钱还房贷，送孩子上幼儿园，上学，上各种学习班，双方父母中有人生病了还得去照顾，这样的家庭生活就像一团乱麻的烂摊子，两个人应付都得焦头烂额，一个人根本应付不了，这种情况下还想离婚？做梦去吧… 光是聪明还不够的，还应该有足够的聪明以避免过分聪明。","categories":[{"name":"周刊","slug":"周刊","permalink":"http://example.com/categories/%E5%91%A8%E5%88%8A/"}],"tags":[]},{"title":"数字周刊 14","slug":"Weekly/数字周刊14","date":"2021-09-17T16:00:00.000Z","updated":"2021-09-15T06:21:15.000Z","comments":true,"path":"2021/09/18/Weekly/数字周刊14/","link":"","permalink":"http://example.com/2021/09/18/Weekly/%E6%95%B0%E5%AD%97%E5%91%A8%E5%88%8A14/","excerpt":"","text":"鲁迅先生说：“人一旦悟透了 就变得很沉默 不是没有了与人相处的能力 而是没有了与人逢场作戏的兴趣 。” 1.TED演讲：如何在六个月内掌握一门外语人类会记住和自己重要关联的事物。背单词为什么不理想，是因为没有建立起重要关联。 如何帮助一个人快速、简单和有效地学习一门语言？ 第一个原则：对你自己有重要关联的单词开始学习。 学任何语言就和学车一样，背单词学语法就和学了半年的发动机原理，而驾驶车只有半个小时而已，你肯定是不会坐这样人的车的。 第二个原则：把新的语言当成重要的沟通工具去用 只要会，就要用 第三个原则：当你先理解沟通的含义，你会下意识获取语言的内容（可明白输入学习） 第四个原则：学外语是训练生理的一个过程 第五个原则：轻松好奇+忍耐歧义（不认识的单词） 行动1:大量的去听 行动2:注意力先放在理解含义 行动3:混合已经会的，创造去用 行动4:从核心高频词汇入手 行动5:找一个语言家长 行动6:模仿母语者的面部发音 行动7:外语身音直接连接画面和感觉 2.阅读英文原版书籍对于绝大多数专业的研究生而言，是无可回避的问题。毕竟很多教材只有英文版，论文也多是英文杂志或者常常追本溯源到某篇英文原典。 阅读原版书籍是大有裨益的。一来原版教材实在是太好读了，二来原版教材真正能铺平高阶英文研修之路，第三，难道你还没有发现这个社会几乎任何文明职业都很难完全离开英文吗？ 为什么原版教材好读？ 相信大家都曾经在英文马马虎虎的时候，被英文小说或者杂志等等这些阅读题常见来源给惊吓到。这种生活中的片段截取英文是最难的，一来是词汇量范围难以琢磨，二来是各种定语倒装等现象层出不穷，三来往往有点俚语夹杂甚至是特定作者的原创词句。 而这恼人的三大英文难点，教材几乎统统没有！！！ 关于词汇量 英文教材的目标是什么？把一个学术知识点说清楚对吧？往往一个单元一个小节内反复出现同样几个核心学术词汇，词汇量范围在十几页的范围内极窄。简直是背单词的神器啊你想想，一个angular momentum（角动量）在一页纸上出现10次，一个单元出现200次，你会记不住？你简直要忘！不！掉！！！没错，英文原版教材就是背单词神器，各种高端单词瞬间就记下来了。如果你要考GRE出国，恭喜你，你已经在开始准备GRE前牢牢掌握一半了。 关于语法 教材就是用来让人无歧义地看懂的文字，所以英文教材选用的语法，都是特别中规中矩的！！！教材涉及到要让很多人阅读，来自不同的地域甚至有不同的语法特点，于是教材只能选用最标准的定式英语。新加坡英语有新加坡语法，但是新加坡的英文教材只会有标准语法。通过原版教材学好标准语法之后，进阶灵活的口语语法就顺风顺水了。 关于俚语 如果某人是第一次听老外说grab a chow 或者drive me banana这种俚语的话，很可能两眼一黑。确实俚语繁多而无规律，但英文教材可不会这样，它为了避免歧义以及保证严肃性，几乎不可能出现俚语。而这就意味着，你可以集中精力在学术内容上，而不是去记那些一年才会碰到一次的俚语（对于这种小概率用到的东西，其实人真的遗忘率很高）。 综上所述，当你开始读一本英文原版教材的时候，体验大致是这样的： ①新单元第一页会觉得有点难，有几个新单词，需要查查字典。 ②唉呀我去，怎么老是这几个单词！？而且反复高频出现，让人再也忘不掉这个单词的意思，甚至在标准定式的语法表达下，已经开始用英文在思维了，中文不再经常跳出来烦你了。 ③开始理解这个知识点的意义了，而且是在英文环境中理解知识点。你不但学术长进了，还锻炼了英文能力。 ④反复按步骤①到③循环，读完了整本教材，发现其实英文教材只是厚，但是挺好读的。于是以后慢慢开始读越来越多的英文原版教材。 ⑤英文教材读够十本的时候，你发现忽然再去看英文的小说啦、报纸啦、美剧啦等等，其实都只是在规范英语下作一点小修正。而此时的你再也不害怕英文了，仅仅需要在一个相对high level的词汇和语法水平下对俚语或特殊用法补缺补漏而已。 这种对英语和专业知识一箭双雕的乐事，只有阅读英文原版教材才能够获得。自从我大二在香港科技大学交换的时候开始阅读原版教材，就颇有相见恨晚之感，以致后来能找到原版教材几乎不会碰中文版，英文水平也随之提升不少。学英语是件循序渐进的事情，阅读英文原版教材可以作为高阶进阶的起点，以此为基础再去攻克之前说到的英文小说或者杂志这样的传统难点，也会觉得已经不再是难点。 所以，其实世界上哪有什么《如何阅读英文原版教材》这种指导文章？你看，或不看，原版教材就在那里，只增不减。相信我，无论你是大一大二还是研究生，只要勇敢开始，就会发现没有那么难，英文和专业水平相得益彰，绝对收获满满。而世界图书出版社为国内引进了大量影印版教材，价格适中，相信找到一本合适的并非难事。 倘若非要回答‌‌“本科生如何阅读英文原版教材‌‌”这种问题的话，那无疑是——只要读起来！ 意识到读原版教材的重要性才是最关键的事，接下来只要开始读，步骤①到⑤就将水到渠成依次发生。不信？不信你试试！！ 3.陈述句型20.当你想陈述自己的情况和观点的时候 I’m(not) +形容词/名词 I’m good at dancing我擅长跳舞 I’m not a big fan of surfing我不喜欢冲浪 21.当你想表达“我正在做…”的时候，可以用： I‘m(not)+动词ing I’m trying to fix my bicycle我正在尝试修理我的自行车 22.我在…（地点） I‘m(not)+介词 I’m in the hospital now我现在在医院里 23.我想要/需要… I want/need… I want to turn off the heater我想要关掉暖气 I need a piece of paper我需要一张纸 24.我将要… I will + 动词I’ll let you know。我会让你知道的 25.我有… I have/had I have acute cat我有一只可爱的猫 26.我（以前）做过… I+动词（过去式）… I went to the grocery store yesterday我昨天去逛超市了 27.让我（们）来… Let me/us … Let me show you the pictures让我给你看看这些图片 28.你看起来… You seem… You seem upset你看起来不太开心啊！ 29.你应该… You should… You should arrive there by 8 o’clock你应该在8点之前到哪里。 30.你其实可以… You could have done… You could have kept that marker你其实可以留下那只马克笔 31.你最好… You’d better… You’d better get up earlier tomorrow.你明天最好早点儿起床 32.你可以… You can … You can take thsi bus to City Hall你可以做这趟车去市政厅 33.这是… This is the best cafe in town 34.当你想形容做某件事怎么样的时候 It’s(not)+形容词+to do … It’s easy to learn how to ride a bicycle学会骑自行车很容易 35.可能会… It’s going to be/gonna be… It’s gonna be rainy tomorrow明天可能会下雨 36.据说… It’s said that… It’s said that Yoga is very good for healt据说练瑜伽对健康很有好处 37….没有用 It’s no use + 动词ing… It’s no use complaining all the time一直抱怨是没有用的。 38.当你想要说“不可能…”的时候 There’s no way… There’s no way he can win the game.他不可能赢得比赛 39.没必要… There’s no need… There’s no need to turn on the light没必要开灯 40….有问题 There’s something wrong with my TV我的电视有点问题 41.这就是…的原因 That’s why… That’s why she chose Social Study as her major这就是她为什么选择社会研究作为她的专业 42.当你想请对方做某事的时候 Please + 动词… Please have a seat请坐 43.不要做… Don’t + 动词… Don’t go out after 10:00pm 44.如果我是你，我会… If I were you, I would… 如果我是你，我就会买那件衬衣 45.如果… What would you do if…? What would you do if the A/C didn’t work如果空调坏了，你会怎么做？ 4.时间管理技巧1.开始。“没错，就是这个单词。我们要做的第一件事情就是开始。“Balancing Life Issues公司的CEO Wendy Kaufman说到（该公司位于纽约州的Ossining）。如果你要写点什么文章，那么请先安心坐下，然后至少写出第一个段落。只要这个事项能够顺利的启动，那后面的事情都是水到渠成的。 2.设定明确的目标。要建立一份工作事项清单，最好是结合日程计划，而且要弄清楚每一天究竟有哪些事情是必须做的。 3.对工作的情况作详细记录“这有助于分析你的时间使用情况，从工作日志中你可以看出哪项工作占用了更多的时间，哪项工作消耗时间最少，你是否达成了工作目标，以及怎样做才能让效率更高。“ Pam O shea建议说 （Pam是Performance Insights公司总裁，同时也是美国管理协会时间管理论坛的成员）。 4.批量处理电子邮件和来电。你是否像大多数人一样，每天都在随机处理来电和电子邮件信息呢？如果你总想在第一时间处理这些事务，那么你的工作时间将变得支离破碎，很难高效率的做好事情。O shea给我们的建议是：“要把电子邮件和来电的检查和回复工作集中在某个时间段一并处理。”为了管理好这些沟通事务，“请用好为你提供的电话工具和电子邮件系统。” 5.化繁为简。“将复杂的工作划分成小的简单的单元进行处理。”Tytel博士解释说，“不能因为事情的复杂而拖沓，因为复杂的工作不可能一下就搞定。”Kaufman用打扫房间的事件做了一个比喻。你也许没有足够的时间打扫整个房间，但是你可以根据自己的可用时间有选择的做一部分清扫。她说：“如果你有20分钟，你可以清理一个抽屉或一个柜子。如果有40分钟，你可以整理衣橱或壁橱。如果有一小时，也许你可以收拾整个房间了。” 6.把工作按照优先程度进行排序。Tytel博士说：“我们要理解紧迫程度和重要性之间的差异。”你也许应该将一天内必须做的事情、应该做的事情、以及想要做的事情统统列出来，然后按照紧迫性和重要性进行排序。 7.留出一部分时间什么都不要做。如果你习惯于将一天的日程排得满满的，那么在做事情之前你可能没有时间思考和准备，而这个过程可能是非常有价值的，Kaufman这样建议道。如果你从始至终都是严格的按照日程时间表做每件工作，那么给自己留20分钟时间放松、反思、提前做个准备计划也许是很有用的。Tytel博士补充道：“处理工作或者做项目要有时间规划，而且要严格遵循这些规划。” 8.工作不要超负荷。“现在的人都是疲劳过度，尤其是美国人。” Kaufman说道。Tytel同意Kaufman的观点，她建议，如果你感到自己的状态下降到正常水平的一半，那么你应该先好好休息。她说：“安排好放松和恢复的时间，如果我们连自己都照顾不好，那我们可能也没有能力做好其他的任何事情。” 9.知道什么时候应该说“不”。Tytel博士说，许多人害怕让他们的主管知道自己有多忙，但很重要的是如果你忙不过来，你要为自己辩解。 10.知道什么时候你需要“时间管理”方面的帮助以及在哪里能获得这些帮助。“我们在图书馆和书店里能找到相关的书籍。“O Shea指出。读其中的任何一本，书能帮助你总结评价自己的时间管理能力，进而发现哪些方面有提高的空间。Kaufman说，如果你发现自己有时间管理问题，并且不擅长与此，通常情况下，说明你是一个右脑相对发达的人，那么你得承认你没有管理时间计划的天赋技能，对你来说外部的帮助可能是必要的。你可以考虑学习相关课程或者通过参加其他一些技能提高培训，把时间管理当作一个技能去学习，并且时不时的重温这些信息。 估算出自己可以安排的时间首先，找出哪些是固定的开销，如吃饭，睡觉，洗漱等等，以后也可以不用再记录了； 其次，整理出规律性事件，有助于形成循环事件的日程表（提示信息为主），如每周一次运动课程，每周二开两个小时例会，每天上午上三个小时课程等等； 接下来，看看哪些是突发支出、临时性活动，如领导临时安排的工作，临时会议，堵车等等，评估一下自己不可控、易被打扰的时间比例； 最后，估算出自己一段时间内（一天、一周、一个月…）大概可以用于计划和使用的时间到底有多少。 能力和效率存在上限每个人的能力、效率都是存在一个上限的。柳比歇夫的最高纪录是一九三七年七月，这个月他工作了316个小时，每日平均纯工作时间是7小时。（约每天可以规划的时间即可以记录时间为10个小时），这基本上已经是一个可规划时间的上限了。 如果一天你可以规划的时间有10个小时，那么，你确定自己是以工作成就为导向的人，你就这样规划吧：大概用6.18个小时去工作学习，而用剩下的大约3.82个小时去享受欢乐——因为你毕竟是正常人。不要要求过高，61.8分刚刚好，已经比大多数人都强了！过高或过低都不如黄金分割好，或者我们可以简单的能做到四六分就已经非常不错了。 5.生活中的一些现象【杯子】 当一只玻璃杯中装满牛奶的时候，人们会说“这是牛奶”；当改装菜油的时候，人们会说“这是菜油”。只有当杯子空置时，人们才看到杯子，说“这是一只杯子”。同样，当我们心中装满成见、财富、权势的时候，就已经不是自己了；人往往热衷拥有很多，却往往难以真正的拥有自己 【碗破的启示】 一个卖瓷碗的老人挑着扁担在路上走着，突然一个瓷碗掉到地上摔碎了，但是老人头也不回地继续向前走。路人看到觉得很奇怪，便问：“为什么你的碗摔碎了你却不看一下呢？”老人答到：“我再怎么回头看，碗还是碎的。”你得到什么启示呢？ 【要害与敏感关键点】 公司在男厕小便池上贴了一纸条：“往前一小步，文明一大步。”结果地上仍有许多尿渍。后来公司认真吸取教训，纸条改成：“尿不到池里说明你短；尿到池外说明你软”，结果地上比以前干净许多。启示：有时扬其长不如揭其短！给客户的提案要具体并准确地切中其要害与敏感关键点才有效。 【个人与团队】 老师问弟子：一滴水如何能不干枯？弟子沉默不语。老师说道：一滴水，风可以将它吹干、土可以把它吸干、太阳可以把它蒸发，要想要不干枯，只有让它融入大海。一个人无力独撑天下，要想获得成功，就得学会与人合作，独木难林，这就是我们常说的：再强大的个人都不如一个团结的组织。 【比耐力】 两只乌龟在田边相对一动不动，老农对一旁的专家说：它们在比耐力，谁先动谁就输了。专家指着一只龟壳上有甲骨文的乌龟说：据我多年研究，这只乌龟已死五千多年了。另一只乌龟伸出头来说：死了也不说一声，害得老子在这里干等。装死的乌龟大笑说：你输了吧，专家的话你也听！ 6.一些法则1:吸引法则 现实是内心的投射，心念总是能吸引和它一致的现实。 控制心念，就能控制命运。 2:利他定律 事事处处为他人着想，为别人造福，最后最受益的人，就是自己。 3:施受定律 宇宙是一个玄妙无比的运算程序，你给予出去的任何东西，最后都会以各种形式回到你的身边。 4:在乎定律 你越在乎的东西越容易失去，越不在乎的东西，越容易自己过来找你。 再来看几个深刻的规律： 5:强弱转化 强者和弱者一直在互相转化，没有永远的强者，也没有永远的弱者。 7.美文美句我们曾如此期盼外界的认可，到最后才知道，世界是自己的，与他人毫无关系。 但见她清秀脱俗，容色照人，实是一个绝丽的美人。 年少时不能遇到太惊艳的人—光是这么一句话就仿佛看到千百个遗憾的故事。 你来的信写的越来越客气，关于爱情你只字不提。 附：胡砚光文言文请假条的情况说明原文 诸位领导，砚光入职八月有余，深知公司情况及制度规章，察公司年前平稳收关之意，员工不宜于此时请假。然时值春运，出疆车票难觅，父母于家待儿多日而不归。及至车票售罄，归期方定。无奈，家父遂定于本月十日驱车返乡。凡哈密至兰州三千里，放任家父天命之年以一己之力驾车，为人子所不能也，此其一。 或有问焉，除夕尚有数日，何不缓缓归矣？非是不想，不能也！家中门祚不兴，叔辈只余男女二人，皆为重利商贾，不至除夕不得休憩矣。祖母孀居在家，难得照拂，若家父不得早归，年货无人置办，事事难谐矣！是故，须阖家早归，不得拖延，此其二也。 早年父母忙碌，吾自幼由外家祖父母抚养长大。外家家境优沃，祖父母无所操劳，日日心头所念，唯吾兄弟三人也。长兄留学美国不得归，老人所盼，只余我一人。子曰：“父母在，不远游，游必有方。”事父母且如此，又何忍于年将耄耋之老人乎？此其三也。 以上所述，尽皆实情。砚光虽不欲早离公司，然人情天伦，实难辞却。此番告假，实乃事出有因，情非得已，望公司领导酌情体察，早日批准为盼。 8.费曼学习法 Feynman Technique第一步：获取知识（某概念），理解你所要学习的材料的内容。 第二步：讲解/复述你所获得的主要内容。 第三步：用你自己的方式以潜意识的形式再次复述你所学到的知识。 第四步：这一步是一个可循环过程：不满意——纠错反馈；满意——尝试运用更简单精炼的语言概括。再用你所学到的知识解决实际问题，加以运用。 第五步：反思。反思你在思考的时候在哪里卡了壳，着重这个地方，再次理解。这个过程至关重要！ 第六步：检验，通过不断的进行实践检验才能巩固你对于该知识点的理解。 9.程序员过剩？美国一个编程培训班的老板，写了一篇文章。他说自己很担忧。现在，那么多人学习编程，他的公司全靠培训赚钱，将来会不会程序员过剩？ 培训班的目的，就是让那些没有受过四年计算机教育的人，经过四个月的培训，找到一份软件开发的工作。某种程度上，这种做法是可行的，大量的程序员就是通过这种模式生产出来。 但是，人工智能正变得越来越强，终有一天，简单代码都会由计算机自已生成，低级程序员的需求将会大量减少。另一方面，云服务的兴起，使得很多任务不需要自己编程，可以购买云服务，这也减少了程序员的需求。 同时，由于不断的抽象和封装，应用层的软件开发正变得越来越简单，如果只是简单地遵循在线教程，就能编写软件，或者将一系列API混合在一起，就能做出一个服务，有必要向开发人员支付高额薪水吗？毕竟开发过程是那么简单。 他认为，学习编程是值得的，它可以帮助你理解世界。但是，梦想仅仅学会软件开发，就能解决你的人生问题是不现实的。”只是能够编写一个安卓程序，不会为你赢得竞争优势，也没法在这个超级饱和的科技世界里，获得自己的一席之地。这个世界里，每个想法都已由十位企业家在你前面完成了。” 由于其他行业不景气，大量年轻人正在转向软件业就业。但是，程序员的淘汰也很厉害，上车的人多，下车的人也多。大家应该对这一点有清醒的认识。 10.言论 “嗑瓜子”理论：在你嗑瓜子的时候，随随便便几个小时就没了。但是换成学习，时间就过得特别慢。因为，一粒瓜子，从嗑到吃只要几秒钟，吃进去就是你得到的反馈，但是工作学习你做了，不一定就能得到反馈，你就会觉得无聊。 世界上有许多努力是不需要被人知道的。在你不知道的地方，在你犹豫绝望的时候，永远有人在默默努力。哪有什么幸运，哪有什么“业余胜职业”，所有光鲜亮丽的成功背后，都有我们看不到的努力和坚持。 如果你独处时感到寂寞，这说明你没有和你自己成为好朋友。","categories":[{"name":"周刊","slug":"周刊","permalink":"http://example.com/categories/%E5%91%A8%E5%88%8A/"}],"tags":[]},{"title":"数字周刊 13","slug":"Weekly/数字周刊13","date":"2021-09-11T16:00:00.000Z","updated":"2021-09-11T12:37:44.000Z","comments":true,"path":"2021/09/12/Weekly/数字周刊13/","link":"","permalink":"http://example.com/2021/09/12/Weekly/%E6%95%B0%E5%AD%97%E5%91%A8%E5%88%8A13/","excerpt":"","text":"一件事只做到20%的时候先不要着急奖励自己。 1.全能程序员 vs 特长程序员我的理解是特长程序员是在某个局部技术有足够的娴熟程度和深度，全能程序员适合于做Leader，更喜欢关注全局。 2.TED演讲：想学会一个语言？就像玩电子游戏般地去说出来很多人在用英语交流的时候带着恐惧感。他们感觉如果说不好会被别人评判。 应该要有一个正确积极的态度，这种态度就像玩游戏一样，专注的是如何玩好，而不是专注如果玩不好会受到审判一样。好的态度就该全神贯注于和你交流的人，他想要得到什么样的结果，没有自我意识，不去考虑自己的错误。 学校对于学生的评判是基于正确性，而不是清晰度。 英语只是一个达成交流的工具，交流时不能想其他有的没的，比如你忙着思考如何正确回应和表达自己，根本听不到别人说什么。第二，你讲话时大脑就想关机了，忘了所有的词汇，话就说不出来。 3.成语野鸟入庙：野鸟飞入太庙。旧指国家败亡的征兆。 4.英语询问的句型用在我们想询问对方有关人、事、地点、时间、原因等等信息的场景中 1.当你想问“谁能…？”的时候 Who can …? Who can help me move this box ? 谁能帮我搬一下这个箱子？ 2.当你想问“…是谁？”的时候，就用： Who is … ? Who is that girl in blue ?那个穿蓝色衣服的女孩是谁？ 3.当你想问“我们什么时候可以…？”的时候，就用： When can we …? When can we go hiking?我们什么时候可以去远足？ 4.当你想问“你是什么时候做了某事…？”可以用： When did you …? When did you come back ?你谁什么时候回来的？ 5.当你想问“…在哪里？” Where is …? Where is the washroom?洗手间在哪里？ 6.当你想问“我能在哪里…”的时候 Where can I … ? Where can I find some bottled water ?我能在哪里找到瓶装水？ 7.当你想问“为什么”的时候 Why do/did … ? Why did you quit your job?你为什么辞职？ 8.你是怎么做到的… How did you …? How did you get to know each other ?你们是怎么互相认识的？ 9.当你想问“去做…怎么样”的时候 How about …? How about having a cup of coffee ?喝杯咖啡怎么样？ 10.我怎样才能… How can I…? How can I fix my cellphone ?我怎样才能修好我的手机 11….是什么？ What’s …? What’s your favorite color ?你最喜欢的颜色是什么？ 12.你是正在做…吗？ What are you + 动词ing …? What are you looking for ?你正在找什么？ 13.某人做了什么事 What do/did …? What do you like to do on weekends?你周末喜欢做什么？What did he say just now?他刚才说了些什么？ 14.我能做…吗？ Can I …? Can I take a look at your notebook ?我能看一下你的笔记本吗？ 15.你能做…吗？ Could you/Would you …? Could you tell me what time the store is open?你能告诉我这家店几点营业吗？ 16.当你想问“你是…吗？” Are you …? Are you making dinner now?你现在说在做晚饭吗？ 17.初次之外，问对方很多其他情况，都可以用： Do you + 动词…? Do you need any help ?你需要帮助吗？ Do you mind if I open the window ? 你介意我打开窗户吗？ 18.你是否（已经）做了某件事？ Have you …? Have you seen th message I sent you ?你（已经）看到我发给你的信息了吗？ 19.当你想问某事物的情况的时候 Is it …? Is it close to your house ？那离你家近吗？ 5.EnglishThis is a photograph of our village[ˈvɪlɪdʒ], our village is in a valley.It is between two hills, the village is on a river. Here is another photograph of the village.My wife and I are walking along the banks of the river.We are on the left, there is a boy in the water, He is swimming across the river. Here is another photograph, this is the school building, it is beside a park, the park is on the right.Some children are coming out of the building, some of them are going into the park. 6.做事方法之前的版本是按照，紧急和重要性来划分工作的，最近有所感悟，划分工作可以用感觉程度和对目标的影响程度来进行四现象划分，这样可以让自己更乐于执行。 根据人类的需求，来安排具体事务： 7.陈安之：过去一年我们犯下的12个错误 1、没有接受足够的风险。 活着是需要冒险的。你做出的每个决定、每次互动、每个步骤、你每天早晨起床的时候，都在冒险。要想真正的生活，就要迎面面对风险。不想起床，紧紧抓住那幻想中的安全，这样会慢慢死去而不会体验到真正的生活。冒点儿险，充分发挥生活的潜力。 2、在恐惧和负面情绪前却步。 现实是我们都会害怕。害怕没关系，重要的是当你害怕时你会做什么。当你觉得怀疑、害怕、愤怒或沮丧时，告诉自己你可以把这些情绪释放掉，就像你可以把手从火焰边抽回一样。多关注生活中美好的事物、机遇以及最珍视的梦想。有所想才会有所得。经常想一下你想变成什么样子，让思想驱动行为，现实会跟上你的想法。 3、不确定性将你击溃。 随着时间的流逝，你会明白：命里有时终须有，命里无时莫强求。时间会解决大部分问题，剩下的时间解决不了，你要学着自己去解决。有时你无法看清生活的方向，但是你灵魂深处的导航会指引你回家。你会发现你就是那个对的人，在正确的时间、正确的地点做正确的事情。相信自己的直觉。放松。你会知道该做什么。 4、你做了别人想让你做的事。 人生苦短，不要把你的时间都用来取悦别人。另外，你也不可能一直让所有人都高兴。做决定时想想自己的思想、身体和灵魂。只有你自己才知道如何做对你来说是最好的。别人不可能知道。无论你和他们分享了多少，他们都不可能触及到你最深处的愿望、直觉、希望和梦想。一定要听从自己的内心，想想自己想要什么。 5、工作忙碌但效率低。 工作并不是平等的。工作时要意识到你的工作类型，以及它是在帮助(还是阻碍)你的进步。关注自己为何工作，在自己身上找到最深切的原因。这种自我意识能够让你集中在正确的活动中，能让你离目标更近。 6、你还练得不够。 如果我要写一本书，取名为如何精通万物，那么书里面会只有一页，这一页上只有一个词：“练习!”只有它才会让你出色。无论你是想通过练习写作来学会写作，或是通过练习生活来学会生活，原则都是一样的。在每种情况下，都是坚持不懈地进行一系列例行活动，身体行动或是心理活动，并把注意力集中在想要的结果上。练习意味着在面对各种各样的困难下，反复进行一些和理想、信仰或愿望相关的行为。练习是一种手段，它能让结果令人惊叹。 7、压力一点点地消耗着你。 不要太过拘泥于一件事上，让它把你的一天都毁掉了。不要把时间浪费在不开心的思想上。如果通往快乐的一扇窗户关闭了，跑到下一扇窗前，或打破一堵墙。面对压力，你应该抬起头来说：我只想经历这一次。我得想出来如何积极快乐的生活。你必须学会放手。 8、让同样的人一次又一次地榨干你。 有的人能激励你，有的人能榨干你;要聪明地进行选择。在想让他人接受、爱或欣赏你时，不要丢掉自己的自尊、自敬，因为有些人无论你怎么做，他们都不会改变对你的态度。如果有些人或有些事对你来说很重要，你仍要去争取，但是不能去乞求。永远也不要牺牲自己的尊严来换取命运。 9、你设立了不现实的期望。 总有两种方法会让你更加开心：改善现实或降低希望。我们天生就希望世界会更明亮、更有意义，比现实更有趣。当我们意识到现实并不像期望的那么好时，我们开始四处寻找真实的世界。但是实际上我们现实的世界是非常美丽的地方。在期待时，我们是自己最大的敌人。如果你能学会停止期望你自己、他人、身边的世界上出现那不可能的完美，你会发现快乐总是环绕在你周围。 10、你忽略了生活中美丽的小瞬间。 无论你在期待什么，平静的心情、满足感、优雅、丰富的内在，这些都会来的，但是只会当你准备好以开放和感激的心情接受时才会到来。所以尽可能的心存感激吧，为生活中的小事，而不仅仅是因为大事……为像呼吸、在一起度过时光、谈话等这样简单的行为而心存感激吧。每个时刻、每一秒都很重要。你所收到的都是礼物。 11、你没有足够关注内心的能量。 即使和他人在一起，你仍然和你自己在一起。当你在早晨起床时，你和自己在一起，当晚上你躺着床上时，你和自己在一起，当你中午在街上走路时，你和自己在一起。当你走在大街上，你想和什么样的人在一起?当你起床时，你想和什么样的人在一起?在你入睡前，你想和什么样的人在一起?成为你想成为的人，是你自己的责任。 12、你希望少犯些错误。 直到你能允许自己犯错时，你才能得到真正的自由。解放自己!尝试新的事物，自由地学习和探索。良好的判断来自于经验，而生活经验来自于过去你所做的错误判断。你需要有足够的勇气去犯错。失望和失败是生活用来磨砺你的工具。 8.腾讯文化上的一篇文章我们奴性几何？谁摧毁了我们的灵魂？ 你知道你在培养孩子的“奴性”吗？ 9.生活中的一些现象【习惯】 乞丐到小王家乞讨，他给十块，第二天乞丐又去，又给十块，持续两年。一天只给五块，乞丐：以前给十块，怎么现在给五块？小王：我结婚了。乞丐一巴掌打过去：妈的，你竟拿我的钱去养你老婆？ 启示：当提供免费服务让客户成为一种习惯，这种服务就不再是优势，而是劣势。 【夫妻】 夫妇逛商场，女的看中一套高档餐具，坚持要买，丈夫嫌贵，不肯掏钱。导购一看，悄悄对丈夫说了句话，他一听马上掏钱。是什么让他立马转变？导购员对丈夫说：“这么贵的餐具，你太太是不会舍得让你洗碗的。” 启示： 人的观念没有什么不可改变，关键是角度，要善于揣摩客户心理。 【班花】 女生公开投票选班花，相貌平平的小梅发表演说：如我当选，再过几年，在座姐妹可以向自己先生骄傲的说，我上大学时候，比班花还漂亮！结果，她全票当选—— 启示：说服别人支持你，不一定要证明比别人都优秀，而是让别人觉得,因为有你，他们变得更优秀更有成就感。 【管理的弊端】 女孩买了条裤子，一试太长，请奶奶帮忙剪短，奶奶说忙；找妈妈，也没空；找姐姐，更没空。女孩失望地入睡了。奶奶忙完家务想起小孙女的裤子，就把裤子剪短了一点；姐姐回来又把裤子剪短了；妈妈回来也把裤子剪短了，最后裤子没法穿了。 ——管理的弊端就在于：要么都不管，要么都来管！ 【经典故事】 老虎抓到一头鹿后要把它吃掉！ 鹿说：“你不能吃我！” 老虎愣了一下，问：“为什么？” 鹿：“因为我是国家二级保护动物！” 老虎大笑道：“总不能为了二级保护动物而让一级保护动物饿死吧？！” 感悟：时刻保持危机感，不要让自己那点优势害死。 10.言论 无所畏惧（fearless）不是没有恐惧；而是你依然心怀恐惧，但无论如何都决定要跳进去。 人活着有三个层次：第一个层次：活着。第二个层次：体面地活着。第三个层次：明白地活着。 一个人如果不读书，那他的三观只能由周围人决定","categories":[{"name":"周刊","slug":"周刊","permalink":"http://example.com/categories/%E5%91%A8%E5%88%8A/"}],"tags":[]},{"title":"数字周刊 12","slug":"Weekly/数字周刊12","date":"2021-09-10T16:00:00.000Z","updated":"2021-09-10T06:24:18.000Z","comments":true,"path":"2021/09/11/Weekly/数字周刊12/","link":"","permalink":"http://example.com/2021/09/11/Weekly/%E6%95%B0%E5%AD%97%E5%91%A8%E5%88%8A12/","excerpt":"","text":"1.培养终身阅读习惯的几种方法1、定时。每天至少抽出5-10分钟雷打不动的读书时间，这是无论每天发生什么事情都不会受到影响的时间。例如，养成在早餐或午餐时间阅读的习惯，如果你每次坐在马桶上时间读书，在睡觉之前读书，那么你就拥有每天四次，每次10分钟也就视每天四十分钟的阅读时间。这是一个良好的开端，它有助于养成良好的每日读书习惯。 2、随身携带书籍。不论到那里，都带上本书，每天出门，都检查一遍，是否带了如下物品，驾照，钥匙，书。最少要携带这些东西，书在车里陪伴你，带到办公室，约会中，以及其他地方。例如看电影时，如果你需要花时间等待，就带上你的书，阅读吧，那是打发你的时间的好方法。 3、找个安静的地方。在你家，找个放着一张舒适的椅子的角落（不要躺下，除非你要睡觉），拿本好书倚在椅子上，不受任何干扰。为避免分心，应该远离电视，音乐，电脑，喧闹的家人，室友。如果没有这样的地方，那就创造一个吧。 4、减少看电视上网时间。如果你真想多读书，就要减少耗在看电视，上网方面的时间，这对很多人来说会比较困难。但是，你在电视网络上所省下的每一分钟，都能用在读书上，这会带来好几小时读书的时间。 5、读给你的孩子听。如果你有孩子，你必须读给他们听，在他们的儿童时代就培养其读书，是确保他们长大后拥有读书习惯的最佳时机，同时也会帮助他们在一生中获得成功。找一些适合儿童的好书，读给他们听，同时，你也在帮助自己养成读书的习惯，而且还跟自己的孩子一起度过了美好的时光。 6、作记录。与读书列表类似，此记录不应该只写下你所读的书的书名和作者，如果可能的话还应该写下读书的起止日期。更好的做法是在其后写下你对此书的感想，几个月之后，再返回来看记录，回顾自己的阅读经历，真是一种绝佳体验。 7、阅读有趣的和耐读的书。找那些能够吸引你并让你持续阅读的书，即使不是文学名著，它们也让你充满阅读欲望——这就是阅读的目标。 8、舒服一点。在最惬意的时间阅读，喝点好茶和好咖啡，或者以其他方式款待自己，找一把舒适的椅子，配上个好垫子。在日出或日落视阅读，或者在海边阅读。 9、设置一个远大的目标。告诉自己今年要读50本(或者类似数量)，然后完成任务。但是请确认，你仍然是在享受读书过程，而不是苦苦挣扎。 3.FIKA READING陈默博客分享的FIKA READING 4.MarkmapMarkmap. 用markdown的方式生产思维导图 5.EnglishToday is the last day of August, the September will follow. The students have started school, I have graduated[ˈɡrædʒueɪtɪd] from school, but I miss my days at school. There are twenty days left for the Mid-Autumn Festival, after this festival, the national day will follow. National day is the last festival in 2021, but it has a seven day holiday. 6.句子如果不曾遇见你，我不会知道这世间有一种爱情，让人铭心刻骨。岁月凝香，时间会留下最深的爱，有一种深情，只能放在心里。岁月静好，时间会留下最深的爱，似水流年，你仍是我最惦记的人。岁月凝香，时间会留下最深的爱，却带走了最初遇见的人。很喜欢一句话：纵然万劫不复，纵然相思入骨，我也待你眉眼如初，岁月如故。闭上双眼，脑海里都是你的样子，岁月静好，时间会留下最深的爱。 7.投资投资的知识、经验、智慧，几乎只能从实战中获得，书上写的，牛人讲的都跟你没关系。那些东西不仅要在你骨子里生根发芽且不被夭折，还要等上很久，才会茁壮甚至茂盛地生长。 8.资源链接 磁力熊磁力下载,高分电影,电影磁力下载,豆瓣高分电影,高清电影,1080P磁力下载,磁力高清下载” 在线表情包制作 三国战纪风云再起专题站–角色连招分析 什么值得读-互联网人的书单库！ | 不知道读什么？就来什么值得读！产品经理/运营/设计/市场/技术成长书单！ waifu2x（图片无损放大降噪） 品葱摘录热点新闻的相关评论，就像它网站说的那样，在自由的阳光下各抒己见 电影天堂电影、电视剧磁力下载 Unsplash壁纸 24K导航 PICK FREE一个汇总免费资源的网站 不求人导航@影视 | 专业影视资源导航在线影视、影视下载、磁力搜索、下载工具、无损音乐下载、电视台、视频解析、动漫、公开课、短视频 高三网高中学习和高考升学平台 韩剧网中文最大的韩剧门户 Yandex是一款非常好用的图片搜索网站 9.停车 10.言论 无论从事什么行业，只要做好两件事就够了，一个是你的专业、一个是你的人品。专业决定了你的存在，人品决定了你的人脉；剩下的就是坚持。 青涩稚气却懂得光芒内敛，从不会过分张扬放肆；经历苦楚却总是只字不提，谈笑之间皆不忘初心；一辈子都学不会的圆滑世故，却有着与生俱来的礼貌风度。 –摘自陈·默Blog 你敬畏婚姻，就不会出轨；敬畏法律，就不会犯法；敬畏报应，就不会做恶。当你没有信仰，毫无敬畏，肆意妄为时，你的人生，已经非常危险。","categories":[{"name":"周刊","slug":"周刊","permalink":"http://example.com/categories/%E5%91%A8%E5%88%8A/"}],"tags":[]},{"title":"数字周刊 11","slug":"Weekly/数字周刊11","date":"2021-09-04T16:00:00.000Z","updated":"2021-09-10T06:19:45.000Z","comments":true,"path":"2021/09/05/Weekly/数字周刊11/","link":"","permalink":"http://example.com/2021/09/05/Weekly/%E6%95%B0%E5%AD%97%E5%91%A8%E5%88%8A11/","excerpt":"","text":"1.努力是没有用的有些人非常勤奋，别人休息和娱乐的时候，都在工作学习。但是努力了一辈子，人生也没有显著的提升，就像报道里经常说的：”某某在平凡的岗位上，勤勤恳恳工作了一辈子”。 另一方面，很多成功者似乎也没有特别努力，就取得了许多成就，过上了好日子。蔡志忠以自己为例，他从小就喜欢画画，然后一直画，不知不觉就成了大漫画家，名利双收，从没有觉得过得很辛苦。 老师或父母老是说，努力就会走到巅峰—-才怪。如果这样，不是所有人都走上巅峰了吗？没有人开始不努力，为什么后来不努力，因为努力没有效果。” 人生不是走斜坡，你持续走就可以走到巅峰；人生像走阶梯，每一阶有每一阶的难点，学物理有物理的难点，学漫画有漫画的难点，你没有克服难点，再怎么努力都是原地跳。所以当你克服难点，你跳上去就不会下来了 蔡志忠的核心观点就是黑体的那句话，成功的人生是台阶式向上，而不是一条水平线。努力只是说明你拼命在走，跟你能不能向上走，关系不大。那些努力却没有结果的人，根本原因就在于，他一直走在平面上，没有走到更高的台阶。 也就是说，垂直方向的努力更有意义，水平方向的努力意义不大。你把同一件事情勤奋地做上十遍，还是只会做这一件事；你做完这件事后，再去挑战更难的事情，就有机会学会做两件事。 初学者经常问我，前端开发应该学习哪一个框架？我的回答就是，你觉得哪一个框架比较容易，就用那个。因为它们都是解决同样的问题，你只要知道怎么解决就可以了，没必要深究哪一个解决得更好。对你更重要的是，要去解决更多的问题，而不是如何最好地解决一个问题。 只有通过解决更多的问题，人生才能摆脱水平运动，进入上升运动。当然，这里还有一个天赋和兴趣的问题，如果找到属于你的领域，不用特别努力就能上台阶；如果找不对领域，再努力也只能做水平运动。 2.软件开发算不算是真正的知识？阮一峰在他的blog中引用了一个开发者对年轻程序员的告诫。 在软件开发中，技术变化如此之快，你花费了大量时间学习技术和工具，一旦这些技术被取代，你的知识将变得毫无价值，因为它们大部分都是实施的细节。 软件开发算不算是真正的知识？ 如果它是一种真正的知识，那么理论上，我们学到的东西大部分应该不会过时，就好像微积分不会过时一样。可是实际上，我们都知道，软件开发技能有时效性，十年前学习的编程知识，十年后几乎肯定不能用于生产。那样的话，软件开发就不能算真正的知识，只是一种实施的细节。 公司旁边有一家税务所，每天都有很多人排队交税。如果你是第一次来交税，肯定搞不清楚怎么交，交税是一门学问，必须有人教你，要带哪些证件，要填哪些表，去哪些窗口排队等等。 我现在认为，学习编程跟学习交税是一样的，都是学习实施的细节。一旦外部环境变了，原来的实施细节就没用了。当代编程由于层层的抽象和封装，我们已经不必接触底层真正具有通用性的知识了。大部分时候，所谓编程就是在写某个抽象层的配置。比如，网页样式就是在写 CSS 配置，你很难说这到底是真正的知识，还是像《办税指南》那样的实施细节。 实施细节并不是知识，而是操作步骤。如果技术栈发生变更，实施细节就会毫无用处。但是，你又不能不学习它，不知道实施细节，就没法做出项目。我觉得，程序员应该要警惕，不要落入实施细节的陷阱，不要把全部精力花在实施细节上面，然后以为自己学到了真正的知识。对待各种语言和工具，正确的态度应该是”进得去，出得来”，既要了解足够的细节，也要能够站在宏观的角度看待它，探寻底层到底是怎么实现的。 3.决策者作为一个决策者，你的职责不是做出很多决定，而是只需做出几个高质量的决定。 如果我每天做出三个不错的决定，就很满意了。巴菲特说，他的一年就是做对三个投资决定。 4.克拉克三定律英国科幻小说家亚瑟.C.克拉克，提出了三个定律。 克拉克的第一定律：”如果一位杰出的老科学家表示，某些事情是可能的，那么他几乎肯定是对的。如果他说某事是不可能的，他很可能是错的。” 克拉克还补充说，上面定律里面”老人”的定义，取决于他所在的学科。”物理学、数学和航天科技中，超过三十岁的人就是老人；其他学科中，老人有时会推迟到四十岁。当然也有一些了不起的例外，但是每个刚刚大学毕业的研究人员都知道，超过五十岁的科学家只能去参加会议，其他什么也干不了，而且他本人也应该有自知之明，绝不要让自己去碰实验室的工作。” 克拉克的第二定律：”发现极限的唯一方法，就是尝试一些不可能的事情。” 克拉克的第三定律：”任何足够先进的技术都像魔术一样。” 5.YesterdayYesterday was 25th, August. I went to the town and bought[bɔːt] a box of water. At that time, I saw a beautiful girl, Her age is about eighteen[ˌeɪˈtiːn]. Today, I get up at 6:00, We had corn[kɔːrn] for breakfast. and和with的区别： and是连词，连接两个对等的成分，表示并列。 with是介词，表示随从，处于偏从地位，可理解为补充的部分。 saw 是动词see 的过去式 right now: 现在，马上 He’s not in the office right now. for的用法有哪些： 1.表示“当作、作为”。 I like some bread and milk for breakfast. 我喜欢把面包和牛奶作为早餐。 2.表示动作的对象或接受者，意为“给……”、“对…… （而言）”。 Watching TV too much is bad for your health. 看电视太多有害于你的健康。 6.Mr.Zhang’s bedroomMr.Zhang’s bedroom is small. There is a table in the bedroom, the table is near the window. There is a chair, it’s on the right side of the table. There is an electric fan on the chair. There is a bed against[əˈɡenst; əˈɡeɪnst] the wall in the north[nɔːrθ]. an: 用在以元音字母（a，e，i，o，u）开头，或以不发音的h字母开头的单词前面。 a: 用在以辅音字母开头，或以读做辅音的元音字母开头的单词前面。 7.A fine dayIt is a fine day today. There are some clouds in the sky, but the sun is shining. Mr.Jones is with his family. They are walking over the bridge[brɪdʒ]. There are some boats on the river. Mr.Jones and his wife are looking at them. Sally is looking at a big ship. The ship is going under the bridge. Tim is looking at an aeroplane[ˈerəpleɪn], the aeroplane is flying over the river. 8.Math is FunShuxuele.com 是 Math is Fun 的中文版 9.经典的win2000桌面 10.言论 常规的自然运动（比如经常步行），就是长寿的最有效方法之一。 善于解决问题的人，基本不会制造问题；善于制造问题的人，基本不会解决问题。所以每个人才会沿着自己的性格，走向自己必然的宿命。 该什么时候去吸收碎片化知识呢？就是你对某个领域的知识架构已经建立好了，这时你可以借助碎片化知识来查漏补缺，丰富自己的认知深度和广度。","categories":[{"name":"周刊","slug":"周刊","permalink":"http://example.com/categories/%E5%91%A8%E5%88%8A/"}],"tags":[]},{"title":"数字周刊 10","slug":"Weekly/数字周刊10","date":"2021-09-03T16:00:00.000Z","updated":"2021-09-14T05:47:46.000Z","comments":true,"path":"2021/09/04/Weekly/数字周刊10/","link":"","permalink":"http://example.com/2021/09/04/Weekly/%E6%95%B0%E5%AD%97%E5%91%A8%E5%88%8A10/","excerpt":"","text":"推行 996 工作制的心态，可以追溯到制造业时代。一家服装厂提高产量的最简单方法是什么？就是让你的工人加班。不幸的是，这不适用于科技公司，程序员在一段代码上花费更多时间，并不意味着写出更好的代码。事实上，处理错误的最佳方法通常是休息一下，然后回来重新阅读代码，你会更容易发现错误。 1.Python的面向对象Python从设计之初就已经是一门面向对象的语言，正因为如此，在Python中创建一个类和对象是很容易的。 一个简单的Python类 class Employee: &#39;所有员工的基类&#39; empCount = 0 def __init__(self, name, salary): self.name = name self.salary = salary Employee.empCount += 1 def displayCount(self): print &quot;Total Employee %d&quot; % Employee.empCount def displayEmployee(self): print &quot;Name : &quot;, self.name, &quot;, Salary: &quot;, self.salary 类的方法与普通的函数只有一个特别的区别——它们必须有一个额外的第一个参数名称, 按照惯例它的名称是 self。 2.HighchartsHighcharts 是一个用纯 JavaScript 编写的一个图表库， 能够很简单便捷的在 Web 网站或是 Web 应用程序添加有交互性的图表，并且免费提供给个人学习、个人网站和非商业用途使用。 Highmaps 是一款基于 HTML5 的优秀地图组件。 图表配置选项 &lt;div id=&quot;container&quot;&gt;&lt;/div&gt; &lt;div id=&quot;container2&quot;&gt;&lt;/div&gt; // 全局配置，针对页面上所有图表有效 &lt;script type=&quot;text/javascript&quot;&gt; // 全局配置，针对页面上所有图表有效 Highcharts.setOptions(&#123; chart: &#123; backgroundColor: &#123; linearGradient: [0, 0, 500, 500], stops: [ [0, &#39;rgb(255, 255, 255)&#39;], [1, &#39;rgb(240, 240, 255)&#39;] ] &#125;, borderWidth: 2, plotBackgroundColor: &#39;rgba(255, 255, 255, .9)&#39;, plotShadow: true, plotBorderWidth: 1 &#125; &#125;); var chart1 = Highcharts.chart(&#39;container&#39;, &#123; xAxis: &#123; type: &#39;datetime&#39; &#125;, series: [&#123; data: [29.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4, 194.1, 95.6, 54.4], pointStart: Date.UTC(2010, 0, 1), pointInterval: 3600 * 1000 // one hour &#125;] &#125;); var chart2 = Highcharts.chart(&#39;container&#39;, &#123; ... &#125;); &lt;/script&gt; 1.图表的主要组成 标题（Title）图表标题，包含标题和副标题（subTitle），其中副标题是非必须的。 坐标轴（Axis）坐标轴包含x轴（xAxis）和y轴（yAxis）。通常情况下，x轴显示在图表的底部，y轴显示在图表的左侧。多个数据列可以共同使用同一个坐标轴，为了对比或区分数据，Highcharts提供了多轴的支持。 数据列（Series）数据列即图表上一个或多个数据系列，比如曲线图中的一条曲线，柱状图中的一个柱形。 数据提示框（Tooltip）当鼠标悬停在某点上时，以框的形式提示该点的数据，比如该点的值、数据单位等。数据提示框内提示的信息完全可以通过格式化函数动态指定。 图例（Legend）图例是图表中用不同形状、颜色、文字等 标示不同数据列，通过点击标示可以显示或隐藏该数据列。 版权标签（Credits）显示在图表右下方的包含链接的文字，默认是Highcharts官网地址。通过指定credits.enabled=false即可不显示该信息。 导出功能（Exporting）通过引入 exporting.js即可增加图表导出为常见文件功能。 标示线（PlotLines）可以在图表上增加一条标示线，比如平均值线，最高值线等。 标示区（PlotBands）可以在图表添加不同颜色的区域带，标示出明显的范围区域。 3.Linux系统常用命令Linux系统常用的命令语句 pwd 显示当前工作路径 ls 查看目录中的文件 ｜｜ 列出目录内容 ls -l 改变输出的格式 ls -lt || ls -lt -reverse ls -a || ls -all 列出所有文件，甚至包括文件名以圆点开头的，默认会被隐藏的隐藏文件。 clear 清楚命令行屏幕 cd快捷键 1.更改当前工作目录 cd Music 2.返回到你的家目录 cd || cd ~user_name 3.返回到你先前工作的目录 cd - 4.返回系统根目录 cd / 目录和文件的操作： mkdir demo创建一个demo目录 mkdir dir1 dir2 dir3 创建3个目录 touch 1.txt 创建一个1.txt的文件 cp 1.txt 2.txt 复制1.txt文件，并改名为2.txt mv 移动和重命名文件，任何一种 情况下，完成操作之后，原来的文件名不再存在。 mv 1.txt 11.txt rm 11.txt 默默地删除文件 ／＊＊＊＊＊＊＊＊＊ 小心 rm! 类 Unix 的操作系统，比如说 Linux，没有复原命令。一旦你用 rm 删除了一些东西， 它就消失了。Linux 假定你很聪明，你知道你在做什么。 尤其要小心通配符。思考一下这个经典的例子。假如说，你只想删除一个目录中的 HTML 文件。输入： rm *.html 这是正确的，如果你不小心在 “*” 和 “.html” 之间多输入了一个空格，就像这样： rm * .html 这个 rm 命令会删除目录中的所有文件，还会抱怨没有文件叫做 “.html”。 小贴士。 无论什么时候，rm 命令用到通配符（除了仔细检查输入的内容外！）， 用 ls 命令来测试通配符。这会让你看到要删除的文件列表。然后按下上箭头按键，重新调用 刚刚执行的命令，用 rm 替换 ls ＊＊＊＊＊＊＊＊＊／ 文件的压缩与解压： tar tar命令可以用来压缩打包单文件、多个文件、单个目录、多个目录。 常用格式： 单个文件压缩打包 tar czvf my.tar file1 多个文件压缩打包 tar czvf my.tar file1 file2,... 单个目录压缩打包 tar czvf my.tar dir1 多个目录压缩打包 tar czvf my.tar dir1 dir2 解包至当前目录：tar xzvf my.tar demo: 在桌面新建一个demo文件夹，在文件中建一个1.txt的文件 cd Desktop mkdir demo touch 1.txt 复制1.txt文件，并把该文件改名为：2.txt 简单的命令： date 显示当前时间和日期 cal 显示当前月份的日历 df 显示磁盘剩余空间的数量 exit 结束一个终端窗口 4.用css实现行内溢出文字省略号需要加三个样式： &#123; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; &#125; 5.CSS3 filter(滤镜) 属性filter: grayscale(100%);将图像转换为灰度图像。值定义转换的比例。 invert(%)反转输入图像。 saturate(%) 转换图像饱和度。值定义转换的比例。 6.jQuery ajax读取本地json文件cdshi.json &#123; &quot;first&quot;:[ &#123;&quot;name&quot;:&quot;张三&quot;,&quot;sex&quot;:&quot;男&quot;&#125;, &#123;&quot;name&quot;:&quot;李四&quot;,&quot;sex&quot;:&quot;男&quot;&#125;, &#123;&quot;name&quot;:&quot;王武&quot;,&quot;sex&quot;:&quot;男&quot;&#125;, &#123;&quot;name&quot;:&quot;李梅&quot;,&quot;sex&quot;:&quot;女&quot;&#125; ] &#125; $.ajax(&#123; url: &quot;ceshi.json&quot;,//json文件位置 type: &quot;GET&quot;,//请求方式为get dataType: &quot;json&quot;, //返回数据格式为json success: function(data) &#123;//请求成功完成后要执行的方法 //each循环 使用$.each方法遍历返回的数据date $.each(data.first, function(i, item) &#123; var str = &#39;&lt;div&gt;姓名:&#39; + item.name + &#39;性别：&#39; + item.sex + &#39;&lt;/div&gt;&#39;; document.write(str); &#125;) &#125; &#125;) 5.mysql的增、删、查、改创建、删除、选择数据库 create database 数据库名; //创建 drop database &lt;数据库名&gt;; //删除 use &lt;数据库名&gt; //选择数据库 以下例子中我们将在 RUNOOB 数据库中创建数据表runoob_tbl： CREATE TABLE IF NOT EXISTS `runoob_tbl`( `runoob_id` INT UNSIGNED AUTO_INCREMENT, `runoob_title` VARCHAR(100) NOT NULL, `runoob_author` VARCHAR(40) NOT NULL, `submission_date` DATE, PRIMARY KEY ( `runoob_id` ) )ENGINE=InnoDB DEFAULT CHARSET=utf8; 查看表结构 desc 表名; show table 表名; //查看建表语句 查询 select * from runoob_tbl; 删除 DROP TABLE runoob_tbl; DELETE FROM tb_name WHERE id=4//删除表中多行数据 通过命令添加多条数据 1.语法： INSERT INTO 表名 (字段1,字段2,...字段n) VALUES (值1,值2,...值n), (值1,值2,...值n), ... (值1,值2,...值n); secure_file_priv 参数说明。这个参数用来限制数据导入和导出操作的效果 show variables like ‘%secure_file_priv%’; secure_file_priv 为 NULL 时，表示限制mysqld不允许导入或导出。secure_file_priv 为 /tmp 时，表示限制mysqld只能在/tmp目录中执行导入导出，其他目录不能执行。secure_file_priv 没有值时，表示不限制mysqld在任意目录的导入导出 mysqld –secure_file_prive=null mysqld –secure_file_priv=/tmp/ See also mysql基础篇 6.CSS3原生的关键帧和动画的使用方法 .div&#123; animation:flash 1s ease 0.3s; &#125; @-webkit-keyframes flash&#123; 0%&#123;css代码&#125; 20%&#123;&#125; 100&#123;&#125; &#125; 7.sublime Text主题color schemeNeon Monocyanide Markdown themeDefault.sublime-theme color schemeBreakers themeayu-light.sublime-theme ayu-dark sublime Text高效率的快捷键 control + k 折叠空行 8.python Mysql表数据转换为json格式python Mysql表数据转换为json格式 9.Web开发相关资源链接Free jQuery Plugins and Tutorials - jQuery Script Free jQuery timeline PluginsAll the Free jQuery Plugins about ‘timeline’ are listed here. NobleUI 网页设计的常见错误英文版 RGB颜色值与十六进制颜色码转换工具 一个基于 Firebase 的内容管理系统 CMS，数据存放在 Firebase，把这个工具架设在前端，就有了一个后台数据的管理系统。 Font Awesome为您提供可缩放的矢量图标，您可以使用CSS所提供的所有特性对它们进行更改，包括：大小、颜色、阴影或者其它任何支持的效果。 Muboard一个 JS 库，在网页上展示一个可以书写数学公式的黑板。 Gradient Magic免费的、奇妙的、独特的CSS渐变色画廊 10.言论 Linux 内核与 Mac 内核虽然都源于 Unix，但是差别较大。Mac 内核继承 BSD Unix，有一些很老的代码，并且做了大量的定制。 “你们的时间有限，所以不要把它浪费在过其他人的生活。最重要的是，你要有勇气跟随你的内心和直觉。某种程度上，它们已经知道你真正想要成为什么样子。其他所有事情都是次要的。” –乔布斯 如果一个人不想做某件事，通常不是由于客观条件不允许，而是他有下面四种心态之一：恐惧（Fear）、排斥（Rejection）、自卑（Low self-esteem）、怠惰（Laziness）。","categories":[{"name":"周刊","slug":"周刊","permalink":"http://example.com/categories/%E5%91%A8%E5%88%8A/"}],"tags":[]},{"title":"数字周刊 09","slug":"Weekly/数字周刊09","date":"2021-08-28T16:00:00.000Z","updated":"2021-08-27T04:14:01.000Z","comments":true,"path":"2021/08/29/Weekly/数字周刊09/","link":"","permalink":"http://example.com/2021/08/29/Weekly/%E6%95%B0%E5%AD%97%E5%91%A8%E5%88%8A09/","excerpt":"","text":"1.什么是“GTD”GTD 是“Getting Things Done”（完成每一件事）的缩写，这是一个被广泛采用的赋予实际行动的时间管理系统。 GTD 的基本理论是把一个人所要要完成的任务和事件全部从大脑中移出来，记录到纸上。这样便会不被多余的事情打搅，使得大脑更集中于现在所需完成的事情上面。 GTD手册： a.收集任务。（把所有你需要做的和需要完成的事情全部记录下来，放在一个“收集箱”里） b.过程。（每次按照顺序，一次只做一件事） c.管理任务。（列出有详细内容的to-do列表） d.复习任务。（复习你所有完成的任务，计划方案和等待完成的事情。确保每一件新进入的任务都有很好的安排） e.开始行动！ 2.一件事”做得好”比较好，还是”做得快”比较好？一件事”做得好”比较好，还是”做得快”比较好？ 鱼和熊掌不能得兼，你怎么选择：做得好，付出的代价可能是耗时长、成本高；做得快，意味着完成度低、不是精品。 我很赞同一篇文章的结论：做得快更好。 做得快不仅可以让你在单位时间内完成更多的工作，而且因为你工作得很快，所以你会觉得成本低，从而倾向于做更多。 写一篇博客，你可能需要两天。这是很高的时间成本，你觉得太贵了，于是你很少写。但是，做好一件事的唯一方法，就是多做这件事。 做得越快，这件事的时间成本就越低，你会愿意做得更多。 人们总是倾向于，多消费时间成本低的东西。网站很快，就会多访问；搜索很快，就会多搜索；文章很容易读懂，就会多读几篇。做得快的核心，就是要让时间成本降下来，从而多做。 3.赢取他人合作，先要分析对方需要有一次我到香港出差，朋友陪我到海洋公园看海豚表演。正当我看得全神贯注拍案叫绝之际，朋友却在我耳边唠唠叨叨：唉！最近在工作上真不顺利，我在要求他人合作时，常常遭到拒绝，就连公司里的伙计，对我的要求都是爱理不理！蔡先生有何指教？ 我头也不回，反问道：他们为什么要理你？朋友一愣，试探地回答我：为了他们能赚到更多的钱。我指着正在池中兴高采烈、高跳低跃的海豚说：你试试捧1000万美元去叫它们大翻筋斗给你看，你猜它们会不会乖乖地合作呢？无疑，金钱是一个很具威力的动力，但当你遇到的客户或伙计不为金钱所动时，便要动动脑筋，了解他们的需要，再藉着满足这些需要来推动他们跟你合作。 朋友若有所思地说：那我请他们上酒楼，唱卡拉OK，这总可以了吧！我摇头道：想要海豚翻筋斗要用鲜鱼，想要小狗捡皮球要用骨头。想要推动别人跟你合作，就要先分析他(她)的动机和需要，才能对症下药。心理学家指出，人类的行为是由5种需要所推动，分别是：基本生存需要，安全感需要，爱或归属感需要，被尊重的需要和自我实现需要。 朋友还是一脸疑惑地看着我，我便用结婚的比喻去帮助他了解这些概念：有些女人结婚，是想获得一张长期饭票或希望有一个固定的居所，故对她们来说，结婚只是满足基本需要的手段；另一些女士害怕年老时会变得无依无靠，便找一个可以付托终身的男人来嫁，在有了依靠后，她们的安全感需要便得到满足；为了爱而结婚的女人最受社会认同；而当她们为了提升社会地位及想受人尊敬而嫁入豪门时，便能满足被尊重的需要；通过结婚来满足自我实现需要的女子，会把结婚生子、养儿育女看作是她的使命，她们会觉得：一定要结过婚、生过孩子，人生才能无憾。 朋友听我说完，瞪着眼问：这些和赢取与他人合作有何关系？我耐着性子解释道：如果你要人家嫁给你，首先要分析她的需要是什么，是要安全感？还是想被尊重？在向她求婚时，便可用“你能满足这些需要”来打动她。你要推动生意伙伴、顾客及伙计跟你合作，就先要了解他们的需要，再投其所好，才能使他们就范。 朋友皱眉头道：理论上是这样说，但实际上行得通吗？我举例说：如果你伙计的需要是被尊重，你就是再加他的工资，也不能保证他会为你卖命；反而你给他足够的面子，使他自觉重要，能在人前挺起胸膛及备受瞩目，他们便会感恩而为你鞠躬尽瘁；假如你的伙伴有自我实现的需要，当你要说服他同意某项主张时，你既不用过分地给他利益，也无需刻意地给他面子，只需告诉他这项主张是何等有意义和伟大，他便会欣然投入，干得比你还起劲哩！ 4.一个关于开发的故事2011年在百度浏览器团队时遇到几件让人影响深刻的事情。 有一次开会，产品拿出 Google 某个产品的 DEMO，里面有一段很酷炫3D效果，要求开发加上，只给2天时间，大家目瞪口呆。后续的开发为了赶节奏，导致非常多的 bug，又为了修改 bug，leader 将所有的 bug 按照人员平均分配，导致不同模块间的同学相互修改……实在难以想象。好比让做花卷的厨子，去修改西湖醋鱼的味道。 最初的现象是：bug下降得慢，延伸bug反而增加，每个人都累的半死，代码风格极其杂乱，为了赶工导致的临时方案层出不穷。 到了中期：人员离职越来也多，代码难以维护，新加的需求与之前的临时方案冲突。 到了后期：想做一些修复，想调整架构，又要保证正常运行，其难度好比在一架飞行的飞机上拆换零件。 然后我也急忙离职了。。。。实在看不到成功的可能性。 5.为什么程序员不喜欢开会？世界上有两种日程表。 一种是管理者的日程表。他们是面向老板的，日程表都是以小时为单位，所以开会对他们来说，只是在日程表上找出一个小时。 另一种是工匠的日程表，也就是程序员的日程表。他们需要做出实际的东西，日程表都是至少以半天为单位。所以，他们不喜欢开会，因为一小时的会议，会将半天分成两半，每个部分都时间太短，导致无法做成任何事情。 6.《外星归来》（Return From The Stars）波兰科幻小说家斯坦尼斯拉夫•莱姆（Stanislaw Lem）1961年的作品《外星归来》（Return From The Stars）。 “那些书籍就像水晶体，里面保存着内容。这些书可以使用一个叫做 Opton 的装置阅读，那个装置很像书，但是封面里只有一页。只要轻轻触摸，后面的页就会出现在上面。” 7.《什么是机器学习》 人：11×11？ 计算机：65 人：胡扯，明明是121。到底等于什么 11x11？ 计算机：121 8.分辨率术语的含义720p: 1280 x 720, 称为 HD（中文译为”高清”）1080p: 1920 x 1080, 称为 FULL HD（中文称为全高清）1440p: 2560 x 1440, 称为 QHD 或 Quad HD，即4倍的HD2160p: 3840 x 2160, 称为 4K4320p: 7680 x 4320, 称为 8K 9.PicularPicular会抓取谷歌的图片搜索结果，提取并显示每张图片的主要颜色。上图是搜索”夏天”的颜色 10.言论 向别人销售东西时，要把它说得很复杂，人们愿意为复杂的东西买单；说服别人时，要把内容说得很简单，越复杂的东西，能说服的听众就越少。 频率错觉（Frequency illusion）是一种认知偏差，指的是第一次注意到某事后，往往会更频繁地注意到它，导致认为此事是高频现象。简单说，频率错觉就是”你刚刚发现一个概念或事物，然后突然发现它似乎无处不在”。 无知的一阶效应包括做出错误的决定，二阶效应包括不了解决定为何错误。","categories":[{"name":"周刊","slug":"周刊","permalink":"http://example.com/categories/%E5%91%A8%E5%88%8A/"}],"tags":[]},{"title":"数字周刊 08","slug":"Weekly/数字周刊08","date":"2021-08-27T16:00:00.000Z","updated":"2021-09-10T06:00:31.000Z","comments":true,"path":"2021/08/28/Weekly/数字周刊08/","link":"","permalink":"http://example.com/2021/08/28/Weekly/%E6%95%B0%E5%AD%97%E5%91%A8%E5%88%8A08/","excerpt":"","text":"1.GTD清理自己的文档：花了几个小时把电脑中的文件，书柜里的书和文档全部都清理了一遍。 时刻记录：总是带着两张小卡片和笔，第一张是一天前记录今天需要完成的事情，另一张记录新添加的需要完成的事情。 2分钟法则：当一件事需要的时间少于2分钟的时候，我总是先完成它。 To-do List + 小卡片：保持一份完整的lists，随时知道下一个步骤是什么，尽量让自己保持进度。 保持收件箱干净：清空了所有的inbox，分别添加tags和filters来加快查阅。 较少查看邮件的时间：设定新邮件通知，即时tags或者删除，不重复阅读邮件。 Someday/maybelist：总是有很多事情想去做，但未必能马上实行，比如说假期旅行。先记录下来，一旦有时间就开始计划。 提高Calender的使用方法：不再是什么事件都放入其中，跟To-do List搭配使用。如果不是某天一定要完成任务，则放入Action List中。把可以确定时间长短的事件放入其中，规定完成。 完成，推迟，委派：合理安排每个任务，马上完成？推迟到什么时候？委派给别人完成？ 从零开始：把Inbox清空，买一个新的文件箱，新的记录本。新的东西总是让人觉得有种无穷的魅力。 2.为什么下一步行动这么重要？“我的下一步行动是什么？”，这个貌似简单的问题，对于不同的人和事，解答绝对不同。但是这个问题对每个学习GTD的人都非常重要。掌握GTD，你就必须了解什么是你的下一步行动。 长期占居你的任务清单但尚未完成得项目。 3.克服拖延每天早上先完成一件你认为最困难的事。在采取实际行动之后，你会发现拖延时间毫无必要，因为你很可能会喜欢自己一再拖延的这项工作。 4.FastAIFastAI是一个深度学习库，这是它的教程书，介绍深度学习的基础知识，以及如何用这个库完成人工智能项目。 5.编程巨星的唯一秘诀只有一条真理决定了一个软件程序员的成功还是失败。 由于坚持这个真理，一个资深的程序员能在一天的时间里学会一门新的编程语言，而由于不坚持这条真理，一个初级的程序员用十年时间也只能挣到一份糊口的钱、永远是来实现别人的设计、永远不够优秀而得不到晋升的机会。 这条真理让你看清了差的程序员和好的程序员的不同之处，好的程序员和伟大的程序员的不同之处，伟大的程序员和能通过自己的技术创造出一个亿万美元价值的程序帝国的超级程序员的不同之处。 不是什么复杂的道理，不是什么难懂的理论。不是具有什么天赋或“编程超能力“才能做到的事情。最终成为的是一个优秀的程序员还是一个很烂的程序员，这跟你的出身一点关系都没有。 而真正的原因只有一个，唯一的一个：对所做的事情的理解越深，你就会做的越好。 超级程序员跟那些平庸的、一般的程序员比起来，对自己要做的事情的理解要深的多的多。这就是原因。 6.电影《失控玩家》、《勇者行动》、《勇往直前》 7.人类简史 8.不要对最熟悉的事物熟视无睹什么是我们最熟悉的事物？可能就是你最容易忽略的－亲人、朋友、爱情、时间、工作、身体、信誉等等，这一切才会成就现在的你，没有了这一切，你只是一具孤家寡人，寸步难行。如果你忽略了与你最有缘的事物，那么就等于将财富从身边推开。只有利用好你身边的一切资源，才可能在生活和事业的道路上顺风顺水，更上一层楼。 9.不要沉迷于过去或未来而让生命从指缝溜走脚踏实地、懂得充分利用现在的人，决不会对将来的未知生活抱太多的幻想，也不会对往日的失败或辉煌过多地追悔留恋，他们清楚同，只有珍视今天的生活，才不会使生命变得空虚，变得了无生趣。不要因为明日的海市蜃楼而践踏今日脚下的玫瑰，使得本可以建功立业的时机，悄悄远去。 10.言论 新手作家追求写得聪明，专业作家追求写得清晰，大师追求引起读者灵魂的共鸣。 一个人的思想就像是一座冰山，自己能意识到的只是很小一部分，其它大部分都埋在脑海深处，只有通过思考和写作，才能把它们发掘出来。 – David Perell 世界并不完美，人生当有不足。留些遗憾，反倒可使人清醒，催人奋进。有句话叫没有皱纹的祖母最可怕，没有遗憾的过去无法继续链接人生。对于每个人来讲，不完美是客观存在的，无须怨天尤人。在羡幕别人的同时，不妨想想，怎样才能走出误区。或善良美化；或用知识充实；或用一技之长发展……生命的可贵之处，就在于看到自己的不足这处之后，能够坦然地“自我接受”。","categories":[{"name":"周刊","slug":"周刊","permalink":"http://example.com/categories/%E5%91%A8%E5%88%8A/"}],"tags":[]},{"title":"数字周刊 07","slug":"Weekly/数字周刊07","date":"2021-08-20T16:00:00.000Z","updated":"2021-09-10T05:56:41.000Z","comments":true,"path":"2021/08/21/Weekly/数字周刊07/","link":"","permalink":"http://example.com/2021/08/21/Weekly/%E6%95%B0%E5%AD%97%E5%91%A8%E5%88%8A07/","excerpt":"","text":"1.视频学习胜过读书吗？现在，网上的课程视频和讲座视频，越来越多。同样的内容，可以读书学习，也可以视频学习，大家喜欢哪一种？ 我比较喜欢读书，实在没耐心视频学习。 书籍只要随手一翻，就知道大概的内容了，哪些章节需要重点阅读。视频行吗？不行，只能从头到尾，看完整个视频。看完才发现，10分钟的视频，只有1分钟是想听的。读书读到精彩之处，可以停下来慢慢琢磨，反复读上几遍。视频行吗？很麻烦，如果要回到10秒前，多拖几次播放轴，保证让你心情烦躁。 奇怪的是，我发现， 很多人宁愿看视频，也不想读书。 举例来说，我遇到过同学跟我说：老师，我想学习 React，你有好的视频教程推荐吗？你可以看文档啊，官方文档写得不错。老师，我觉得视频学起来更快，文档不好懂，看起来太慢了。 我感到很困惑，明明是读书的学习效率比较高，为什么别人不这样想呢？ 最近，我读到一篇文章，里面有一句话，让我恍然大悟，明白了为什么人们喜欢视频学习。 文章说，人类学习效率最高的方式，不是”读书 + 思考”，而是”观察 + 模仿”。前者需要较长时间的注意力投入，后者只需要短时间注意力，更符合人类的天性。 我一下子就想通了，有些知识，读书读半天也不一定明白，但是亲眼看别人做一遍，马上就能懂。即使不完全懂，至少知道怎么模仿。所以才会有”百闻（文）不如一见”，人们更容易接受形象的东西，而不是抽象的文字。 大部分领域的入门方式，都是”观察和模仿”，所以视频学习更有效。 对于深入学习，文字和书籍的效果可能好于视频，因为入门以后再往上走，”理解 + 思考”的作用越来越大，”观察 + 模仿”的作用越来越小。但是，大多数人需要的只是入门，成为专业工作者毕竟是少数。 所以，视频学习才是初学者更好的方式，或者说，视频是大众学习的主流，读书更适用于某个主题的进阶学习。 以前没条件视频学习，现在不一样了。智能手机的普及，使得以前没人拍的知识，现在都有人拍；宽带互联网的普及，又使得人们可以随时随地消费视频。我们已经进了视频学习的时代，视频网站可能是新时代的图书馆和印刷机。 2.当今社会趋向阶级固化，贫穷世袭。很多人都说，当今社会趋向阶级固化，贫穷世袭。这种说法有根据吗？ 纽约大学的社会学家就做了一次调查，企图给出实证数据。最近，他们公布了结果。 社会学家按照收入，把所有美国的职业分成100个等级。收入最高的职业为100分，收入最低的职业为1分。在这个体系里面，医生是93分，空姐是53分，擦鞋工是9分。 一共调查了2万多个人，结果发现，子女的等级与父母的等级，呈现明显的正相关。如果父母的职业在76分以上，子女的职业往往也是这个等级；如果父母的职业在25分以下，子女很可能也是如此。概率在50%以上。 调查报告写道： “人们总说，美国是一块充满机会的大陆。事实并非如此，美国人的职业发展，最大的决定因素可能是父母。” 注意，这是美国的调查结果，那个地方号称有”美国梦”，人们相信奋斗就能改变人生。如果在中国调查，我想正相关肯定更明显，父母因素的决定性将更大。一个表现就是，由于太缺乏改变人生的正常途径，才导致我们这里任何可能暴富的东西，都异乎寻常的流行，比如彩票、传销、互联网金融和加密货币。 3.书单英文版《纳尼亚传奇》路遥的《人生》《麦田守望者》马尔克斯的《百年孤独》。《算法帝国》《自我拯救》《基业长青》《长日将尽》《货币的上升：世界金融史》《卡拉马佐夫兄弟》《麦田守望者》《埃涅阿斯记》《耸肩的阿特拉斯》《房间里最聪明的人: 安然公司是怎样破产的》《在不确定的世界：从华尔街到华盛顿的艰难选择》《正面思考的力量》《拿破仑传》《资本论》《大卫·科波菲尔》《思考，快与慢》。《可预测的非理性》《引爆点》《夏洛特烦恼》 4.如何阻止社交网络上的傻子由于现在上网的门槛实在太低，导致社交网络上的傻子越来越多，据2020年第46次中国互联网络发展状况统计报告显示，受过大学本科以上教育的网民群体仅为8.8%，初中以下文化程度的网民占比高达60%。 那么问题来了，正常用户在使用社交网络的时候，会发现一个问题，用户无法阻止傻子和自己互动，傻子制造的大量信息会破坏用户的网络使用体验，浪费用户的宝贵时间。 我们知道，在日常生活中的社交很少会出现这种情况，那么，网络用户可以参考日常生活中的经验，在社交网络阻止傻子和自己互动。在日常生活中，如果有傻子和你互动，人们的主要应对方法是回避，没人愿意和傻子争论，那是毫无意义的事情。 傻子的关注者通常也是傻子，判断出一个傻子，他的关注者可以一起屏蔽拉黑。 5.写技术文档的技巧用户阅读网页内容的热力图是下面这样: 用户以 F 状的方式阅读网页，先看前三行，然后垂直向下阅读，只看每一行的前几个字。 所以，写作的时候，应该注意下面几点。 第一段和第二段必须给出最重要的信息，而且第一句话最重要。 标题、段落、列表的开头，都应该立即给出信息。 通过字型的变化（大小、黑体、链接），把用户的注意力吸引到重点句子。 技术文档（documents）分成四种：教程（tutorial）、指导（guide）、解释（explanation）和参考（reference）。本文解释了每一种文档的特点，并给出了写作建议。 6.感知概率平时在交谈中，我们会使用”可能”、”很可能”、”极有可能”、”大概”、”不肯定”、”不太可能”等等词语来描述一个事件的可能性。但是，这些词语到底表示多大的概率？每个人都有不一样的理解。 比如，有的人心目中，”可能”就意味着50%的概率，”很可能”就意味着70%的概率，而”不太可能”就是30%的概率。另一些人可能会认为，”很可能”应该是75%的概率。 7.十大最佳电脑单机游戏2020年选出的十大最佳电脑单机游戏 8.DataeaseDataease一个开源的数据可视化分析工具，支持丰富的数据源连接，能够通过拖拉拽方式，快速制作图表和仪表盘。 9.不要将别人认为重要的东西当做自己的人生目标生活中有一种人，很在乎别人对他的看法，完全以别人的评价为行事准则。别人说好，他就按人家的想法和意思去做；别人说不好，他就会后悔、恐慌、自责、情绪低落、偃旗息鼓。他时时为别人的看法担心、害怕、烦恼、痛苦，经常掩饰自己，迎合他人，不知道自己是谁。挪威大剧作家易卜生有句名言说：“人的第一天职是什么？答案很简单：做自己。”是的，做人首先要做自己。要认清自己，把握自己的命运，实现自己的人生价值，只有这样，才真正算是自己的主人。 10.言论 软件业有一句名言，感叹文档是多么重要，又是多么难写。 一个人的思想就像是一座冰山，自己能意识到的只是很小一部分，其它大部分都埋在脑海深处，只有通过思考和写作，才能把它们发掘出来。 位先生说梁漱溟讲过人一生要处理三种关系，最低的是人与物的关系，中级的是人与人的关系，最高级的是人与自己的关系。确实，人与自己的关系决定了我们一生的走向。所以当我们因为某个事情受到伤害，在不甘心的同时，一定要及时止损，与自己和解，不要让不甘心左右了自己。一生为不甘心买单是蠢货。","categories":[{"name":"周刊","slug":"周刊","permalink":"http://example.com/categories/%E5%91%A8%E5%88%8A/"}],"tags":[]},{"title":"数字周刊 06","slug":"Weekly/数字周刊06","date":"2021-08-14T16:00:00.000Z","updated":"2021-09-10T05:49:46.000Z","comments":true,"path":"2021/08/15/Weekly/数字周刊06/","link":"","permalink":"http://example.com/2021/08/15/Weekly/%E6%95%B0%E5%AD%97%E5%91%A8%E5%88%8A06/","excerpt":"","text":"1.做完你的项目如果要为 UNIX 哲学添加一个原则，我认为应该是： “做完你的项目。” 这是我能想到的最简单、但最被忽视的软件工程准则。 大多数软件其实都没有真正完成，作者只是做出了基本功能，然后就发布了。很多软件后来不做了，也不是因为做完了，而是作者放弃了。 让我们把程序员比作木匠。你买了一把椅子，因为觉得它能满足你的需求。可是买来以后，每隔几天，木匠就会出现在你的家里，对椅子进行修改。有些变动是你想要的，有些你无所谓，还有一些变动只会让你心生反感。甚至有时候，木匠还会出错，比如木头上伸出了一些尖刺，使椅子不再可用。 你买的是椅子，而不是某种千变万化的家具，没人喜欢每天会变的椅子。 程序员也是如此，应该对软件有一个总体规划，让它有一个完整的基本功能。虽然以后可以进行维护、错误修复和安全补丁，但基本功能应该从始至终都是完整清晰的。 你不能说，因为出现了新情况，所以需要不断改变或完善它的功能。 如果一个软件一直在加功能，它就太大了，超出了你应该做的东西。你试图制造一个超出合理范围的东西，你需要画一下功能图，将过大的软件拆分成几个功能完整且合理的小软件。 总之，做完你的项目再发布。用户拿到的，应该是一个基本上做完的项目。 2.不要拿自己去跟别人比较而贬低自己每个人都有自己的特点，每个人都是独一无二的奇迹。尺有所短，寸有所长，不必拿自己的优点与别人的缺点作比较，也不必经常自叹某某处总不如人，因为没有谁可以号称完美。人生的缺憾，最大的就是拿自己和别人相比。和高人相比使我们自卑；和俗人相比使我们下流；和庸人相比使我们骄满。外来的比较是我们动荡不能自在的来源，也使得大部分的人都迷失了自我，障蔽了自己心灵原有的氤氲馨香。 3.自证预言美国社会学家罗伯特·金·莫顿提出“自证预言”之后（人会不自觉的按自我的预言来行事，最终令预言发生），这个心理学理论不断地在各个领域重现。 4.Hexo-even主题Hexo-even主题 5.3D 封面生成器3D 封面生成器 6.基于文件和文档的知识管理技巧基于文件和文档的知识管理技巧 7.知识混子 8.好听的8首歌《星辰大海》、《千千万万》、《错位时空》、《四季予你》、《清空》、《白月光与朱砂痣》、《夜太孤单》、《可可托海与牧羊人》 9.推荐小说《大奉大更人》、《天启预报》、《从姑获鸟开始》 搞笑幽默的小说：《开局地摊卖大力》、《亏成首付从游戏开始》、《最强反套路系统》 10.言论 有人慌张见面、有人简单告别、有人预谋离开、有人计划重逢 年轻时，我犯的最大错误，就是没有及时离职。我以为我必须向公司证明自己，然后再离开，但这其实没有任何意义。你不欠雇主任何东西，不必向雇主证明任何事情。他们对你丝毫没有忠诚度，对你做对或做错、是聪明还是愚蠢，毫不在意。把时间用在你最终不会引以为豪的东西上面，是一件可怕的事情，浪费了你在地球上的短暂旅程。 优先考虑那些优先考虑你的人","categories":[{"name":"周刊","slug":"周刊","permalink":"http://example.com/categories/%E5%91%A8%E5%88%8A/"}],"tags":[]},{"title":"数字周刊 05","slug":"Weekly/数字周刊05","date":"2021-08-07T16:00:00.000Z","updated":"2022-02-27T12:02:19.815Z","comments":true,"path":"2021/08/08/Weekly/数字周刊05/","link":"","permalink":"http://example.com/2021/08/08/Weekly/%E6%95%B0%E5%AD%97%E5%91%A8%E5%88%8A05/","excerpt":"","text":"1.vi/vim的简单实用 vim runoob.txt #打开文件 在一般模式之中，只要按下 i 字符就可以进入输入模式了 按下 ESC 按钮回到一般模式 输入 :wq 即可保存离开！ 2.NobleUI模版NobleUI Responsive Bootstrap 4 Dashboard Template 如何copy使用？ main-wrapper是最顶层的div page-wrapper是页面内容容器div、其次是page-content row更相当于一个功能组件的集合，也相当于一行，一个row下面可以有两个col-6。row下面一层的col-12是定义卡片显示多大的。 再下面的class=”card”是真正的功能组件。 一个标准的页面容器： &lt;div class=&quot;main-wrapper&quot;&gt; &lt;div class=&quot;page-wrapper&quot;&gt; &lt;div class=&quot;page-content&quot;&gt; &lt;div class=&quot;d-flexflex-wrap grid-margin&quot;&gt; &lt;div&gt; &lt;h4 class=&quot;mb-3 mb-md-0&quot;&gt;欢迎标语&lt;/h4&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- 某个功能组件 --&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-12 col-xl-12 grid-margin stretch-card&quot;&gt; &lt;div class=&quot;card overflow-hidden&quot;&gt; &lt;div class=&quot;card-body&quot;&gt; ... &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; 2-1.card &lt;div class=&quot;main-wrapper&quot;&gt; &lt;div class=&quot;page-wrapper&quot;&gt; &lt;div class=&quot;page-content&quot;&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-12 col-xl-12 grid-margin stretch-card&quot;&gt; &lt;div class=&quot;card overflow-hidden&quot;&gt; &lt;div class=&quot;card-body&quot;&gt; ... &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; 2-2.在页面中插入apexcharts &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-xl-6 grid-margin stretch-card&quot;&gt; &lt;div class=&quot;card&quot;&gt; &lt;div class=&quot;card-body&quot;&gt; &lt;h6 class=&quot;card-title&quot;&gt;Pie chart&lt;/h6&gt; &lt;div id=&quot;apexPie&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;col-xl-6 grid-margin stretch-card&quot;&gt; &lt;div class=&quot;card&quot;&gt; &lt;div class=&quot;card-body&quot;&gt; &lt;h6 class=&quot;card-title&quot;&gt;Line chart&lt;/h6&gt; &lt;div id=&quot;apexLine&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; 在script标签中写入参数 // Apex Pie chart end var options = &#123; chart: &#123; height: 300, type: &quot;pie&quot; &#125;, colors: [&quot;#f77eb9&quot;, &quot;#7ee5e5&quot;,&quot;#4d8af0&quot;,&quot;#fbbc06&quot;], legend: &#123; position: &#39;top&#39;, horizontalAlign: &#39;center&#39; &#125;, stroke: &#123; colors: [&#39;rgba(0,0,0,0)&#39;] &#125;, dataLabels: &#123; enabled: false &#125;, series: [44, 55, 13, 33] &#125;; var chart = new ApexCharts(document.querySelector(&quot;#apexPie&quot;), options); chart.render(); // Apex Pie chart end 3.Python学习路线图Python学习路线图 4.Python基本语法Py五种数据类型：Numbers（数字）、String（字符串）、List（列表）、Tuple（元组）、Dictionary（字典） # 注释 counter = 100 # 赋值整型变量 miles = 1000.0 # 浮点型 name = &quot;John&quot; # 字符串 a=[1,2,3] # List tuple = ( &#39;runoob&#39;, 786 , 2.23, &#39;john&#39;, 70.2 ) # 元组 # 元组是不允许更新的。而列表是允许更新的 dict = &#123;&#125; dict[&#39;one&#39;] = &quot;This is one&quot; dict[2] = &quot;This is two&quot; tinydict = &#123;&#39;name&#39;: &#39;runoob&#39;,&#39;code&#39;:6734, &#39;dept&#39;: &#39;sales&#39;&#125; #字典 # 定义函数 def printme( str ): &quot;打印任何传入的字符串&quot; print str return # 调用函数 printme(&quot;我要调用用户自定义函数!&quot;) # 函数参数 def sum(num1,num2): result = num1 + num2 print(&quot;%d +%d = %d&quot; % (num1,num2,result)) sum(10,20) 条件语句 if 判断条件1: 执行语句1…… elif 判断条件2: 执行语句2…… elif 判断条件3: 执行语句3…… else: 执行语句4…… for letter in &#39;Python&#39;: # 第一个实例 print(&quot;当前字母: %s&quot; % letter) # 循环Python字符串 面向对象 class Test: def prt(runoob): print(runoob) print(runoob.__class__) t = Test() t.prt() 5.Django—模型—数据查询all() # 获取所有数据，对应SQL：select * from User User.objects.all() filter(**kwargs) 返回QuerySet包含与给定查找参数匹配的新查询集。 #等价sql：select * from User User.objects.filter() #等价sql：select * from User where uname = &#39;admin&#39; User.objects.filter(uname=&#39;admin&#39;) #等级sql：select * from User where uid &gt; 1 and type = 2 User.objects.filter(uid__gt=1,type=2) #链式调⽤，等价于User.objects.filter(uid__gt=1,type=2) User.objects.filter(uid__gt=1).filter(type=2) exclude(**kwargs) # 不匹配，对应SQL：select * from User where name != &#39;admin&#39; User.objects.exclude(name=&#39;admin&#39;) order_by(*fields) 参数是字段名，可以有多个字段名，默认是升序。 如果要按某个字段降序，在字段名前加&#39;-&#39;： &quot;-uid&quot;表示按uid降序排列 #按uid升序排列 等价于 order by uid User.objects().order_by(&#39;uid&#39;) #按uid降序排列 等价于 order by uid desc User.objects.order_by(&#39;-uid&#39;) #多列排序 等价于 order by password,uid desc User.objects.order_by(&#39;password&#39;,&#39;-uid&#39;) values() #返回所有字段 User.objects.values() #返回数据： [&#123;&#39;uid&#39;: 2, &#39;uname&#39;: &#39;⼩甜甜&#39;, &#39;password&#39;: &#39;59f2443a4317918ce29ad28a14e1bdb7&#39;type&#39;: &#39;普通⽤户&#39;, &#39;regtime None, &#39;ip&#39;: None, &#39;allowed&#39;: &#39;允许登录&#39;, &#39;email&#39;: None, None&#125;,...] #返回指定字段 User.objects.values(&#39;uname&#39;,&#39;password&#39;) [&#123;&#39;uname&#39;: &#39;⼩甜甜&#39;, &#39;password&#39;: &#39;59f2443a4317918ce29ad28a14e1bdb7&#39;&#125;,...] reverse() User.objects.order_by(&#39;id&#39;).reverse() 降序 User.objects.order_by(&#39;-id&#39;).reverse() 升序 distinct()去重 User.objects.values(&#39;password&#39;).distinct() 6.offsetWidth、clientWidth和scrollWidthoffsetWidth、clientWidth和scrollWidth clientWidth和offsetWidth的区别 7.Linux合并多个文件 cat 1.txt 2.txt 3.tex &gt; all.txt cat *.txt &gt; merge.txt rm *.ts 8.Python的文件操作 f = open(&#39;test.txt&#39;, &#39;w&#39;) f.write(&#39;hello world, i am here!&#39;) # 文件的操作 f.close() #关闭这个文件管道。 # 访问模式有很多种 参见更多Python文件操作 10.言论 不要透支你和任何人的关系。对父母，倾听而不唯命是从、对爱人，紧密而不混淆、对孩子，慈爱而不包办、对朋友，相知而不逾界。愿你我都能收获这样舒服的相处关系。既能保持分寸感，又不会疏离、既能守住底线，又不至于淡薄。可以各自忙碌，又彼此牵挂，简单又纯粹。 一般情况下，你感到被冒犯了，别急着反省自己玻璃心，不如直接表达自己生气了，对方如果道歉就算了，下不为例。对方如果辩解只是个玩笑，还指责你玻璃心，那说明对方说故意冒犯你的。 了解一个问题很简单，但是真正做起来才知道难。无论什么想法都要遵循一个原则：可操作性。再好的想法，无法落实，也是白搭。站得高固然可以看得远，但是只有站得低，才能看得清。凡事从实际出发，多考虑一下方案是否切合实际，符合现状。大处着眼，小处着手。为人做事，切忌眼高手低，好高骛远。","categories":[{"name":"周刊","slug":"周刊","permalink":"http://example.com/categories/%E5%91%A8%E5%88%8A/"}],"tags":[]},{"title":"数字周刊 04","slug":"Weekly/数字周刊04","date":"2021-07-31T16:00:00.000Z","updated":"2021-09-10T05:46:29.000Z","comments":true,"path":"2021/08/01/Weekly/数字周刊04/","link":"","permalink":"http://example.com/2021/08/01/Weekly/%E6%95%B0%E5%AD%97%E5%91%A8%E5%88%8A04/","excerpt":"","text":"1.The first 20 hours – how to learn anything1.首先将你想学习的技能分解，想好你想要达成什么样的效果。你把技能分解的越细，你就能觉得这项技能里的哪些部分能帮助我达成目标。你就先练习这些 2.要有一定的理论学习。能帮助你纠错，要找到3～5种资源 3.排出干扰 4.练习至少20小时最初的障碍，不是智力，也不是资源，而是情绪障碍 2.内在动机与刻意练习天才怎么来的？很多研究都显示，天才是后天因素造成的，而不是先天决定的。 2014年，爱沙尼亚的研究人员调查了163名优秀运动员。研究发现，优秀人才首先存在强烈的内在动机。他有很强的意愿和兴趣，投入所从事的事业。然后，他会自发地在这方面进行刻意练习。 研究还发现，内在动机与刻意练习有互相增强的作用。较高的初始内在动机，会带来更多的刻意练习；而较多的初始刻意练习，会使得内在动机增强。最终，内在动机和刻意练习两者都呈现螺旋式上升。如果你走在一条这样的道路上，往往就预示着这是一条正确道路，通向成功。 结合一万小时理论，如果刻意练习达到一万小时，就很可能使得自己变成一个优秀人才。你在所做的事情里面感受到明确的动机，动机成为你不断刻意练习的中心目标。练习之中，你通过反馈，逐步消除错误取得进步，结果进一步加强了动机。 3.两分钟规则助力你养成好习惯，告别拖延！《掌控习惯》人们很容易在最开始把目标设的更高。 《掌控习惯》中说，让行动最开始变得简单。比如每晚睡前阅读，变成每天读一句话。一旦你养成2分钟的好习惯，它就引导你进入下一阶段，让自己更容易达到最终的目标。 4.三部值得刷N遍的电影1.《美丽心灵》 2.《当幸福来敲门》 3.《驭风少年》 5.搜图导航 6.五年前后思想的转变 7.女人买东西的思路 8.地震云 9.关于饭局 10.言论 人一生最大的幸运，就是在年富力强时发现了自己的人生使命。（茨威格《人类群星闪耀时》） 事实上，稳健经营更能帮助一家小公司生存下来。 成功是一种习惯。习惯决定结果，成功者会有哪些习惯﹖而我们自己的习惯是什么? 成功者习惯全力以赴、全力冲刺、凡事物超所值十倍以上。研究成功者的习惯，复制成功者的习惯，你就会得到跟成功者类似的结果。","categories":[{"name":"周刊","slug":"周刊","permalink":"http://example.com/categories/%E5%91%A8%E5%88%8A/"}],"tags":[]},{"title":"数字周刊 03","slug":"Weekly/数字周刊03","date":"2021-07-24T16:00:00.000Z","updated":"2021-08-27T01:39:11.000Z","comments":true,"path":"2021/07/25/Weekly/数字周刊03/","link":"","permalink":"http://example.com/2021/07/25/Weekly/%E6%95%B0%E5%AD%97%E5%91%A8%E5%88%8A03/","excerpt":"","text":"1.什么是“内卷化”？网上找到的解释： “内卷化，指一种社会或文化模式在某一发展阶段达到一种确定的形式后，便停滞不前或无法转化为另一种高级模式的现象。”（百度百科） 我现在对”内卷化”的理解是， 当一个组织不能或不愿向外发展时，成员的精力就只好用到组织内部，这时就会出现”内卷化”，也就是内部的过度发展。 举例来说，海上的一艘船，外卷化就是大家齐心协力划向对岸，内卷化就是大家心思不在划船，而放在内部的互相牵扯（组织建设、规章制度、人事安排等等）。 2.如何培养领导力俗话说：“一个人走的快，一群人走的远。” 一个创业者总结的，如何培养领导力。 第一阶段：熟悉自己的业务，知道问题在哪里，怎样可以解决。 领导者是给大家指方向的，你必须先知道要走哪个方向，才能带领导人，这是领导力的基础。 第二阶段：培养说服能力，能说服别人，问题可以按照你说的方式解决。 领导力的表现是，他人愿意服从你。这不能都靠制度压服，而要让他人真心觉得你是对的。如果你可以让他人相信你，你就可以领导。 第三阶段：激发他人的热情，让他们产生解决问题的热情。 说服他人的更高境界，是让他们真正投身进来，自觉发挥自己的潜力，全力以赴解决需要解决的问题。好的领导和差的领导，区别就在于能否激励下级，让每个人都知道自己的职责，努力工作。 第四阶段：你培养其他人的领导能力。 如果你离开，团队也能正常运作下去，说明一切已经制度化了，你的领导已经成功了。这时，你可以让其他人接管团队，自己去实现下一个目标。 3.挺有智慧的几个故事 4.什么才是朋友 5.SpaceX 星链计划的分析SpaceX 星链计划的分析 6.回音室效应传媒学有一个“回音室效应”理论，就是说同一个看法，在小圈子里面，不断地重复，不断地相互传播，相互肯定，并且排除异见，最终导致这个圈子里的人，视野越来越狭窄，思想越来越偏激，偏见越来越严重。 7.群晖的终端连接群晖并没有提供可视化的连接终端，所以我们只能通过其它设备上的连接终端进行连接，比如PUTTY，但在这之前我们需要先开启SSH，否则无法使用终端连接。 终端连接：1.首先打开终端，然后输入sudo su - 回车进入根目录 2.然后输入：ssh -p 22 服务器用户名@ip（例如ssh -p 22 &#x75;&#x73;&#x65;&#114;&#x6b;&#117;&#110;&#x79;&#x75;&#64;&#x31;&#49;&#x39;&#x2e;&#x32;&#x39;&#x2e;&#51;&#x37;&#x2e;&#x36;&#x33;）回车，到这会让你输入yes或者no来确认是否连接，输入yes回车 3.然后输入在服务器上的用户密码回车 4.到此进入的是你在服务器上的账户的目录，即为连接成功 pip3安装 wget -O /tmp/get-pip.py &#39;https://bootstrap.pypa.io/get-pip.py&#39; python3 /tmp/get-pip.py # 权限不够的话，加上 --user # python3 /tmp/get-pip.py --user rm /tmp/get-pip.py 安装之后提示 pip3 的安装目录（一般是 /homes/USERNAME/.local/bin）不在系统的环境变量里。每次要先跳到安装目录里。 cd .local/bin ./pip3 -V ./pip3 list 手动配置环境变量 vim ~/.bash_profile # 写入以下内容 export PATH=$PATH: /var/services/homes/Administrator/.local/bin # 保存、退出 # 运行以下命令使生效 source ~/.bash_profile # 最后可以检查一下 echo $PATH 8.身份复印件的备注 9.零宽度短网址生成器零宽度短网址生成器 10.言论 杠精最大的梦想，就是向陌生人证明他是正确的，而聪明人最不屑的事情，就是花时间去证明杠精是错误的。 人生下来时只是无知，并不愚蠢。愚蠢是由教育造成的。 两个人要聊得来，靠的不是相同的话题，而是相同的逻辑。但两个人要聊的深，靠的是相同水平的认知能力。","categories":[{"name":"周刊","slug":"周刊","permalink":"http://example.com/categories/%E5%91%A8%E5%88%8A/"}],"tags":[]},{"title":"Hexo部署和插件","slug":"Github/Hexo部署和插件","date":"2021-07-17T16:00:00.000Z","updated":"2022-03-22T04:28:04.108Z","comments":true,"path":"2021/07/18/Github/Hexo部署和插件/","link":"","permalink":"http://example.com/2021/07/18/Github/Hexo%E9%83%A8%E7%BD%B2%E5%92%8C%E6%8F%92%E4%BB%B6/","excerpt":"","text":"1.hexohexo静态博客网站生成器 Run server $ hexo server More info: Server 生成静态文件 Generate static files $ hexo generate More info: Generating 部署到远程站点 Deploy to remote sites $ hexo deploy More info: Deployment 2.Hexo插件郁明敏收藏归纳的Hexo插件 思维导图插件 hexo-simple-mindmap 流程图插件 hexo-filter-flowchart This plugin is based on flowchart.js, so you can defined the chart as follow","categories":[{"name":"周刊","slug":"周刊","permalink":"http://example.com/categories/%E5%91%A8%E5%88%8A/"}],"tags":[]},{"title":"数字周刊 02","slug":"Weekly/数字周刊02","date":"2021-07-17T16:00:00.000Z","updated":"2022-03-24T04:45:41.943Z","comments":true,"path":"2021/07/18/Weekly/数字周刊02/","link":"","permalink":"http://example.com/2021/07/18/Weekly/%E6%95%B0%E5%AD%97%E5%91%A8%E5%88%8A02/","excerpt":"","text":"3.怎样学习？ 1、一个真正善于学习的人是可怕的，而且绝不会没有未来。 2、只要你愿意学习，就不愁找不到老师，比我们优秀的人都是资源，包括竞争对手。 3、学习不是简单模仿，而是为结合我们自身实际提升成长的半径，赢得更大空间。 4、必须强调，比学习方法更重要的是心态，我们必须学会谦卑、聆听、吸收！ 4.Belle一个React组件库：Belle 7.今日热榜今日热榜提供各站热榜聚合：微信、今日头条、百度、知乎、V2EX、微博、贴吧、豆瓣、天涯、虎扑、Github、抖音…追踪全网热点、简单高效阅读。 8.图灵社区9.闺蜜逛街快乐加倍 10.言论 以绝大多数人努力程度之低，根本没有到拼天赋的地步。真实情况就是，以绝大多数人的天赋之低，根本得不到努力的机会。 个人水平不高没关系，要知道什么是“高”，心中要有标准。比如写作，你受水平局限，写不出好文章，但你要知道什么是好文章。你不能拿垃圾当经典，这就没有救了。没有水平，可以通过努力来弥补，没有眼界，你根本不知道努力的方向。 成人学习，最重要的已经不是信息了，而是看世界的不同角度。有见识的人写的东西，天然会把这个世界的不同角度展示给我们看。","categories":[{"name":"周刊","slug":"周刊","permalink":"http://example.com/categories/%E5%91%A8%E5%88%8A/"}],"tags":[]},{"title":"随机显示的图片接口","slug":"Github/随机显示的图片接口","date":"2021-07-10T16:00:00.000Z","updated":"2022-03-22T04:24:49.980Z","comments":true,"path":"2021/07/11/Github/随机显示的图片接口/","link":"","permalink":"http://example.com/2021/07/11/Github/%E9%9A%8F%E6%9C%BA%E6%98%BE%E7%A4%BA%E7%9A%84%E5%9B%BE%E7%89%87%E6%8E%A5%E5%8F%A3/","excerpt":"","text":"随机显示的图片接口 ![](https://api.btstu.cn/sjbz/zsy.php) # 随机图片 随机显示美女图片 https://api88.net/api/img/rand/ 随机显示 bing 壁纸 https://api88.net/api/bing/rand 电脑手机自适应随机图片 https://api.btstu.cn/sjbz/zsy.php 横版动漫图片 https://api.btstu.cn/sjbz/?lx=dongman 横版美女图片 http://api.btstu.cn/sjbz/?lx=meizi 横版动漫妹子 http://api.btstu.cn/sjbz/?lx=suiji 竖版动漫图片 http://api.btstu.cn/sjbz/?lx=m_dongman 竖版美女图片 http://api.btstu.cn/sjbz/?lx=m_meizi 竖版随机动漫妹子 http://api.btstu.cn/sjbz/?m_lx=suiji","categories":[{"name":"周刊","slug":"周刊","permalink":"http://example.com/categories/%E5%91%A8%E5%88%8A/"}],"tags":[]},{"title":"Blog范文（一级标题）","slug":"Blog/Blog范文","date":"2021-04-06T16:00:00.000Z","updated":"2021-04-25T02:10:07.000Z","comments":true,"path":"2021/04/07/Blog/Blog范文/","link":"","permalink":"http://example.com/2021/04/07/Blog/Blog%E8%8C%83%E6%96%87/","excerpt":"","text":"二级标题每天早上先完成一件你认为最困难的事。 每天早上先完成一件你认为最困难的事。在采取实际行动之后，你会发现拖延时间毫无必要，因为你很可能会喜欢自己一再拖延的这项工作。 每天早上先完成一件你认为最困难的事。粗体在采取实际行动之后，你会发现拖延时间毫无必要，因为你很可能会喜欢自己一再拖延的这项工作。每天早上先完成一件你认为最困难的事。在采取实际行动之后，你会发现拖延时间毫无必要，因为你很可能会喜欢自己一再拖延的这项工作。 这是引用的文字。 有序列表 有序列表 有序列表 有序列表 无序列表(三级标题) 无序列表 无序列表 无序列表 这是第二种引用的文字 Do not just seek happiness for yourself. Seek happiness for all. Through kindness. David Levithan-- Wide Awake 这是链接 褪墨・时间管理 每天早上先完成一件你认为最困难的事。 代码JavaScript 示例： /** * nth element in the fibonacci series. * @param n &gt;= 0 * @return the nth element, &gt;= 0. */ function fib(n) &#123; var a = 1, b = 1; var tmp; while (--n &gt;= 0) &#123; tmp = a; a += b; b = tmp; &#125; return a; &#125; document.write(fib(10)); 表格 项目 价格 数量 计算机 $1600 5 手机 $12 12 管线 $1 234","categories":[{"name":"Blog","slug":"Blog","permalink":"http://example.com/categories/Blog/"}],"tags":[]},{"title":"年度周刊2021","slug":"Weekly/年度周刊2021","date":"2021-01-27T16:00:00.000Z","updated":"2022-03-24T04:38:38.895Z","comments":true,"path":"2021/01/28/Weekly/年度周刊2021/","link":"","permalink":"http://example.com/2021/01/28/Weekly/%E5%B9%B4%E5%BA%A6%E5%91%A8%E5%88%8A2021/","excerpt":"","text":"学习不是为了记忆，是为了运用。没有被加工和重新储存的信息和知识，和电脑没什么区别。新的时代，一定要学习两点。一、什么样的只是不用储存，到用时直接借助网络。二、自己记忆的知识，一定要系统化的存在，且可灵活运用。 07月 1.理财使财务从健康到安全，从安全到自主，从自主到自由的过程，并在此过程中实现现金流的顺畅、创造财富能力的提升。 理财的层次： 第一层是有效的、合理的处理和运用钱财，让自己的钱花费发挥最大的效果，以达到最大限度的满足日常生活需要的目的。 第二层是用余钱投资，使之产生最佳的财务收益，也就是钱生钱的层次。 第三层是从财务的角度进行人生规划，利用现有的经济财务条件，最大限度地提高自己的人力资源价值，为以后发展做准备。 投资之门的四把钥匙：分散投资、价值投资、自身投资、长期投资 要有花钱的计划 要致富就要节约口袋里的每一块钱 一定要降低你的消费（没有预算的概念，随性消费也是贫穷的主要原因） 明确要达成的存款目标、要有年度存款目标 拥有详细的赚钱计划 自我管理 要不断地学习和发现新事物，不断修正改进自己的理财计划，使其日益完善。 你永远赚不到超出你认知范围外的钱，除非你靠运气，最后往往又会靠实力亏掉，这是一种必然。你所赚的每一分钱，都是你对这个世界认知的变现，你所亏的每一分钱，都是因为对这个世界的认知缺陷。这个世界最大的公平在于，当一个人的财富大于自己认知的时候，这个社会有100种方法收割你，直到你的认知和财富相匹配为止。 2.每日自省我现在可以着手做哪三件事对我的目标和个人成长有益？ 今天的一天当中，我学到了什么？有哪些事可以再进步？ 我要准备什么时候起下决定改变并开始行动呢？ 达成目标的最大障碍是什么？ 为了要达成目标，我必须停止做哪些事情呢？ 如何让自己快乐地解决问题，并达到希望的结果？ 我有没有在我可以做到的情况下，最大限度地采取行动呢？ 对于现在的问题，我要做哪些事情来改变他呢？ 3.近视眼的福利 4.iphone 6 5.向爱因斯坦学习桌面管理之道向爱因斯坦学习桌面管理之道","categories":[{"name":"Weekly","slug":"Weekly","permalink":"http://example.com/categories/Weekly/"}],"tags":[]},{"title":"Knowledge points","slug":"English/Knowledge","date":"2020-05-20T16:00:00.000Z","updated":"2021-03-09T07:47:43.000Z","comments":true,"path":"2020/05/21/English/Knowledge/","link":"","permalink":"http://example.com/2020/05/21/English/Knowledge/","excerpt":"","text":"Knowledge pointshim和he的区别he是主格人称代词，him是宾格人称代词，它们可以运用在一个句子的不同地方。 he在一个句子中作主语，也就是一件事情的发出者；him在一个句子中作宾语，是一个动作的接受者。 him和he的区别是：he是主格人称代词，him是宾格人称代词，它们可以运用在一个句子的不同地方。 1、he在一个句子中作主语，也就是一件事情的发出者。 例句： In fact ，he doesn&#39;t like me。实际上，他并不喜欢我。 He said he will send me a book。 他说他会给我寄一本书。 2、him在一个句子中作宾语，是一个动作的接受者。 例句： I send a book to him。 我寄了一本书给他。 His girlfriend broke up with him。 他女朋友跟他分手了。 除了he和him容易搞混外，还有一个his，它是he和him的形容词性的物主代词，意思是“他的”，后面一般加名词，表示“他的······”。例句：His mother loves him very much。 他妈妈非常爱他。 he、she、his、herhis 是he 的所有格 her是she的所有格 are和is的区别are可以用于第一人称、第二人称、第三人称；is只用于第三人称。are可以用于单数、复数；is只用于单数。 两者的具体用法为：are用在第二人称单数（you）和所有的复数（we，you，they）后面；is用在第三人称单数（he，she，it）后面。are的过去式是were，is的过去式是was。 a 和 anan和a用在都表示一个时的区别：用在以元音字母（a，e，i，o，u）开头，或以不发音的h字母开头的单词前面。a用在以辅音字母开头，或以读做辅音的元音字母开头的单词前面。 this these 和 that thosethis: 这 these: 这些 。 these是this的复数形式 that: 那 those: 那些 those是that的复数形式 they them theirthey与them都表示“他们”，而they做主语，放在句子开头，能够引起整个句子；而them只能作宾语，跟在谓语之后，常放在句子末尾。 their：adj 他们的；她们的；它们的 复数第三人称的所有格形式 some和any的区别some和any既可以修饰可数名词又可以修饰不可数名词， some常用在肯定句中，而any则常用在否定和疑问句中。因此some和any 的用法主要是考虑用在肯定句、疑问句还是否定句中，与名词的可数与否无关。 of和for的区别1、for：(表示对象、用途等)给，对，供，以帮助，为了，关于。 2、of：属于(某人)，关于(某人)，属于(某物)，(某事)部分的，关于(某物)。 一张图读懂on, above, under, below的区别 along和across、through的区别along表示“沿着”，通常用于狭长的东西 across和through都可表示“横过”或“穿过”，前者主要表示从某物的表面“横过”，涉及“面”的概念；而后者则表示从某个空间“穿过”，涉及“体”的概念。 big和large的区别两者都表示物体的尺寸大小。 表示数量或量的大小时，多用large 表示面积大、人口多，用large big有重要性的意义，large没有 on beside nearnear作形容词，表示临近的，接近的。beside表示在什么旁边 当这三个单词表示“在…旁边，附近”的意思时，主要区别在于距离的远近。具体如下： on 距离最近，表示毗邻,。例如：London is on the river. 伦敦在那条河边。（两个物体接触有一条线或一个面。） beside 距离比on远，比near近一点。例如：He is sitting beside me.他正坐在我旁边。（坐在一个人旁边，距离不会太远。） near 距离比beside远一点。例如：The city is near the sea.那个城市在大海附近。（具体多远没规定，就是附近。）","categories":[{"name":"English","slug":"English","permalink":"http://example.com/categories/English/"}],"tags":[]},{"title":"新概念英语","slug":"English/Edition","date":"2020-04-21T16:00:00.000Z","updated":"2020-05-11T02:16:17.000Z","comments":true,"path":"2020/04/22/English/Edition/","link":"","permalink":"http://example.com/2020/04/22/English/Edition/","excerpt":"","text":"Lesson 1～101.课文： Excuse me,Is this your handbag? Yes,It is. [爆破音：han(d)bag] 句型： Is this your … ? This is my … This isn’t my … pen ; pencil ; book ; watch ; coat ; dress ; skirt ; shirt ; car ; house ; 2.课文： My coat and my umbrella ,please. Tickets,please. Here is my ticket. Here’s your umbrella and your coat. Is this your umbrella ? No,it isn’t. A cup of coffee,please. Class Two 2班 suit ;school ; teacher ;son ; daughter 3.课文： Good morning,Mr.Blake Good afternoon Good evening Good night This is Miss Sophie Dupont This is Li Ming Sophie is a new student , She is French . German Japanese Korean Chinese American Is it Japanese or German ? 4.课文 I am a new student My name is Robert. Nice to meet you My name’s Sophie. What nationality are you? (is he) I’m Italian What’s your job ? I’m a keyboard operator. 5.课文 How are you today ? I’m very well , thank you How are you doing ? How is Tony ? He’s fine ,thank you Nice to see you . Look at that woman! Is she fat ? No,she isn’t / Yes , she is. 6.课文 Whose shirt is that ? Whose is that shirt ? It’s my shirt . Is this shirt Tim’s? Perhaps it is ,sir . Tim’s shirt’s white Is this book Stella’s ? Whose is this …? It’s… This is my / your / his / her … 7.课文 What color’s your new dress ? It’s green Come upstairs and see it. Come and help me . That’s a nice dress . 8.课文 Are your friends Danish,too? No,they aren’t .They are Norwegian Are these your cases ? Are these your …? What color are your … ? 9.课文 10.课文","categories":[{"name":"English","slug":"English","permalink":"http://example.com/categories/English/"}],"tags":[]},{"title":"英语学习的技巧总结","slug":"English/学习英语","date":"2020-04-06T16:00:00.000Z","updated":"2021-02-05T11:58:26.000Z","comments":true,"path":"2020/04/07/English/学习英语/","link":"","permalink":"http://example.com/2020/04/07/English/%E5%AD%A6%E4%B9%A0%E8%8B%B1%E8%AF%AD/","excerpt":"","text":"TED演讲：想学会一个语言？就像玩电子游戏般地去说出来很多人在用英语交流的时候带着恐惧感。他们感觉如果说不好会被别人评判。 应该要有一个正确积极的态度，这种态度就像玩游戏一样，专注的是如何玩好，而不是专注如果玩不好会受到审判一样。好的态度就该全神贯注于和你交流的人，他想要得到什么样的结果，没有自我意识，不去考虑自己的错误。 学校对于学生的评判是基于正确性，而不是清晰度。 英语只是一个达成交流的工具，交流时不能想其他有的没的，比如你忙着思考如何正确回应和表达自己，根本听不到别人说什么。第二，你讲话时大脑就想关机了，忘了所有的词汇，话就说不出来。 TED演讲：如何在六个月内掌握一门外语人类会记住和自己重要关联的事物。背单词为什么不理想，是因为没有建立起重要关联。 如何帮助一个人快速、简单和有效地学习一门语言？ 第一个原则：对你自己有重要关联的单词开始学习。 学任何语言就和学车一样，背单词学语法就和学了半年的发动机原理，而驾驶车只有半个小时而已，你肯定是不会坐这样人的车的。 第二个原则：把新的语言当成重要的沟通工具去用 只要会，就要用 第三个原则：当你先理解沟通的含义，你会下意识获取语言的内容（可明白输入学习） 第四个原则：学外语是训练生理的一个过程 第五个原则：轻松好奇+忍耐歧义（不认识的单词） 行动1:大量的去听 行动2:注意力先放在理解含义 行动3:混合已经会的，创造去用 行动4:从核心高频词汇入手 行动5:找一个语言家长 行动6:模仿母语者的面部发音 行动7:外语身音直接连接画面和感觉 阅读英文原版书籍对于绝大多数专业的研究生而言，是无可回避的问题。毕竟很多教材只有英文版，论文也多是英文杂志或者常常追本溯源到某篇英文原典。 阅读原版书籍是大有裨益的。一来原版教材实在是太好读了，二来原版教材真正能铺平高阶英文研修之路，第三，难道你还没有发现这个社会几乎任何文明职业都很难完全离开英文吗？ 为什么原版教材好读？ 相信大家都曾经在英文马马虎虎的时候，被英文小说或者杂志等等这些阅读题常见来源给惊吓到。这种生活中的片段截取英文是最难的，一来是词汇量范围难以琢磨，二来是各种定语倒装等现象层出不穷，三来往往有点俚语夹杂甚至是特定作者的原创词句。 而这恼人的三大英文难点，教材几乎统统没有！！！ 关于词汇量 英文教材的目标是什么？把一个学术知识点说清楚对吧？往往一个单元一个小节内反复出现同样几个核心学术词汇，词汇量范围在十几页的范围内极窄。简直是背单词的神器啊你想想，一个angular momentum（角动量）在一页纸上出现10次，一个单元出现200次，你会记不住？你简直要忘！不！掉！！！没错，英文原版教材就是背单词神器，各种高端单词瞬间就记下来了。如果你要考GRE出国，恭喜你，你已经在开始准备GRE前牢牢掌握一半了。 关于语法 教材就是用来让人无歧义地看懂的文字，所以英文教材选用的语法，都是特别中规中矩的！！！教材涉及到要让很多人阅读，来自不同的地域甚至有不同的语法特点，于是教材只能选用最标准的定式英语。新加坡英语有新加坡语法，但是新加坡的英文教材只会有标准语法。通过原版教材学好标准语法之后，进阶灵活的口语语法就顺风顺水了。 关于俚语 如果某人是第一次听老外说grab a chow 或者drive me banana这种俚语的话，很可能两眼一黑。确实俚语繁多而无规律，但英文教材可不会这样，它为了避免歧义以及保证严肃性，几乎不可能出现俚语。而这就意味着，你可以集中精力在学术内容上，而不是去记那些一年才会碰到一次的俚语（对于这种小概率用到的东西，其实人真的遗忘率很高）。 综上所述，当你开始读一本英文原版教材的时候，体验大致是这样的： ①新单元第一页会觉得有点难，有几个新单词，需要查查字典。 ②唉呀我去，怎么老是这几个单词！？而且反复高频出现，让人再也忘不掉这个单词的意思，甚至在标准定式的语法表达下，已经开始用英文在思维了，中文不再经常跳出来烦你了。 ③开始理解这个知识点的意义了，而且是在英文环境中理解知识点。你不但学术长进了，还锻炼了英文能力。 ④反复按步骤①到③循环，读完了整本教材，发现其实英文教材只是厚，但是挺好读的。于是以后慢慢开始读越来越多的英文原版教材。 ⑤英文教材读够十本的时候，你发现忽然再去看英文的小说啦、报纸啦、美剧啦等等，其实都只是在规范英语下作一点小修正。而此时的你再也不害怕英文了，仅仅需要在一个相对high level的词汇和语法水平下对俚语或特殊用法补缺补漏而已。 这种对英语和专业知识一箭双雕的乐事，只有阅读英文原版教材才能够获得。自从我大二在香港科技大学交换的时候开始阅读原版教材，就颇有相见恨晚之感，以致后来能找到原版教材几乎不会碰中文版，英文水平也随之提升不少。学英语是件循序渐进的事情，阅读英文原版教材可以作为高阶进阶的起点，以此为基础再去攻克之前说到的英文小说或者杂志这样的传统难点，也会觉得已经不再是难点。 所以，其实世界上哪有什么《如何阅读英文原版教材》这种指导文章？你看，或不看，原版教材就在那里，只增不减。相信我，无论你是大一大二还是研究生，只要勇敢开始，就会发现没有那么难，英文和专业水平相得益彰，绝对收获满满。而世界图书出版社为国内引进了大量影印版教材，价格适中，相信找到一本合适的并非难事。 倘若非要回答‌‌“本科生如何阅读英文原版教材‌‌”这种问题的话，那无疑是——只要读起来！ 意识到读原版教材的重要性才是最关键的事，接下来只要开始读，步骤①到⑤就将水到渠成依次发生。不信？不信你试试！！","categories":[{"name":"English","slug":"English","permalink":"http://example.com/categories/English/"}],"tags":[]},{"title":"英语词汇","slug":"English/Word","date":"2020-02-29T16:00:00.000Z","updated":"2021-02-20T02:47:19.000Z","comments":true,"path":"2020/03/01/English/Word/","link":"","permalink":"http://example.com/2020/03/01/English/Word/","excerpt":"","text":"高频词汇1st part 名词 释义 动词 释义 形容词或词组 释义 1 January 一月 go 去 outside the window 在窗外 2 home 家 went go的过去式 at home 在家（固定用法） 3 town 小镇 buy 买 white 白色的 4 Monday 星期一 bought buy的过去式 empty 空的 5 Sunday 星期日 cost 花费（消耗金钱） electric 电子的，带电的 6 Friday 星期五 raining 下雨（正在进行） in front of 在什么前面 7 Rainy day 雨天 wirte 写 a loaf of 一个 8 Fubruary 二月 wirting 正在进行时 a bar of 一条 9 refrigerator 冰箱 give 给 a bottle of 一瓶 10 bottle 瓶子 send 送（信） a pound of 一磅 11 coat 外套;外衣;大衣; show 展示 half a pound of 半磅 12 dress 连衣裙 take 拿 a tin of 一听 13 dressing table 梳妆台 a quarter of 四分之一 14 skirt 裙子 a piece of 一张；一片；一块 15 shirt 衬衣 高频句型和短语Is this your …? Nice to meet you What make is it ? What is your job ? How are you today ? Look at … Whose is this / that …? This is my / your / his / her What color is your … How do you do What are their jobs ? 11 Give me/her/him/us some … Which ones ? on the left (right) on the wall near the window (door) in the middle of … Where is it ? Where are they ? Where is Jon? What must I do ? What’s he doing? What are they doing? Word List 单词 释义 单词 释义 单词 释义 stand 起立 standard 标准的 start 开始；出发 state 状态 station 站；所；车站；局 begin 出发；开始 speed 加速 spend 度过；花费（时间、金钱等） spirit 精神 spread 展开 square 广场 terrible 极坏的，糟糕的 thank 感谢 then 那时；那么；然后 thing 事情；东西，物 think 思考；认为 talk 讨论；谈话 taste 有…味道；品尝 teach 教导；讲授 tell 告诉；讲诉 term 学期；任期，期限 world 世界 word 单词 worry 担忧 worse 更糟糕的，更坏的 worst 最坏的；最糟糕的 worth 值…钱的；有…价值的 wish 希望，想要 without 没有，无 wonder 想知道；对…感到疑惑 work 工作 government 政府 grade 分数 great 伟大的；重大的；大量的 gift 赠品；礼物；天资 give 给 glad 高兴的 glass 玻璃；玻璃杯 pronounce 发音；宣布 proper 恰当的；正确的 protect 保护 proud 自豪的；骄傲的 prove 证明；证实；显示 satisfy vt.使满足；使满意 |01|核心目标|5|￥50w|| Sentence ID 高频语句 001 We shall have to start at 5:30 am 我们得在早晨5:30出发 002 The girl speaks standard English 那女孩讲着一口流利的英语 003 Everybody goes to this vast square in the evening 在傍晚的时候，每个人都到这个宽阔的广场来 004 The bird spread its wings and flew away 鸟儿展开了翅膀飞翔 005 He took his hat and then left 他拿起帽子然后离开了 006 They’re talking to their teacher 他们正在同老师谈话 007 The cookies taste good 这些饼干的味道尝起来不错 008 My father began teaching in that school in 1999 我的父亲从1999年开始就在那所学校教学了 009 He told the news to everybody he saw 他逢人便讲这个消息 010 I think his idea is worth considering 我认为他的想法是值得考虑的 011 I wish you a happy New Year 祝你新年快乐 012 Tell me what happened in you own word. 用你自己的话把发生的事情告诉我 013 Tell me something about your daily work 告诉我你每天的工作内容。 014 She got a grade of 80 in English 她英语得来80分。 015 He made a great many mistakes 他犯了大量的错误。 016 These glasses are all made of glass 这些杯子是用玻璃做的 017 She was very glad to see them 她见到他们很高兴 018 Give the porter your bag 把你的行李交给搬运工 019 It’s proper that she refuse 她拒绝是恰当的 020 She is proud of herself for not giving up easily 她对自己没有轻易放弃感到自豪","categories":[{"name":"English","slug":"English","permalink":"http://example.com/categories/English/"}],"tags":[]},{"title":"技术文档","slug":"Blog/技术文档","date":"2020-02-27T16:00:00.000Z","updated":"2022-03-24T04:08:33.263Z","comments":true,"path":"2020/02/28/Blog/技术文档/","link":"","permalink":"http://example.com/2020/02/28/Blog/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/","excerpt":"","text":"究竟要怎样的终点，才配得上这一路的颠沛流离 2016【10月】强迫症的 Mac 设置指南【10月】Mac终端命令大全 2017【1月】关于Sublime Text 3优秀插件介绍【1月】Iterm主题 - 配色方案和主题Iterm2【1月】Mac优雅使用指南【1月】12个不可不知的Sublime Text应用技巧和诀窍【1月】Mac OS X 配置 Apache+Mysql+PHP 详细教程【2月】如何买股票【2月】如何计算股息【2月】如何计算毛利率【2月】如何理财有道【5月】Mac设置环境变量 2021【7月】Hexo部署和插件【7月】随机显示的图片接口【8月】安装Python【8月】用Python 3爬取微博照片、视频、视频封面【8月】用Python 3遍历目录文件名 2022【2月】Hexo一键部署Github【2月】Github搜索指南【3月】Final Cut Pro 视频剪辑使用手册【3月】Hexo-theme-aomori颜色配色、配置文件【3月】Mac系统自带的批量重命名功能【3月】一个简单的网页版思维脑图实现【3月】《写给大家看的设计书》【3月】如何注册美区苹果账号【3月】股票基本面【3月】看完这3个方法，你会感觉之前的书都白读了【3月】在线画思维导图【3月】Awesome Mac收集各种类别非常好用的 Mac 应用程序【3月】iPad配置系统邮箱 利用Fatkun插件下载风之漫画，打开多个页面，然后下载所以页面。","categories":[{"name":"Blog","slug":"Blog","permalink":"http://example.com/categories/Blog/"}],"tags":[]},{"title":"影视资源、磁力搜索、VIP解析","slug":"Blog/影视资源、磁力搜索、VIP解析","date":"2018-10-16T16:00:00.000Z","updated":"2022-03-20T04:49:14.065Z","comments":true,"path":"2018/10/17/Blog/影视资源、磁力搜索、VIP解析/","link":"","permalink":"http://example.com/2018/10/17/Blog/%E5%BD%B1%E8%A7%86%E8%B5%84%E6%BA%90%E3%80%81%E7%A3%81%E5%8A%9B%E6%90%9C%E7%B4%A2%E3%80%81VIP%E8%A7%A3%E6%9E%90/","excerpt":"","text":"磁力搜索全网最全BT 磁力搜索引擎索引-持续更新中 磁力多磁力多 - 最好用的磁力搜索 磁力岛磁力岛 - 最好用的磁力搜索 种子吧专业的种子搜索引擎 - 种子吧 磁力湾磁力巴士磁力链接种子搜索 - torrent,magnet,bt下载,迅雷下载-BT索马里,磁力湾 Btdad最好的BT搜索,种子搜索网站 - Btdad 种子搜种子搜(www.zhongziso.com)种子帝(www.zhongzidi.com)磁力搜索是一个专业提供磁力链接搜索和下载的网站 SouCi.Li搜磁力 - 搜一搜，发现精彩世界 BTSOSO是一个DHT磁力链接搜索引擎，专注于提供磁力链接和BT种子文件搜索服务,你可以在这里搜索电影、美剧、综艺、软件、动漫、教程、游戏等BT资源和磁力链接。 磁力大全 - 资源最多的磁力链接和BT种子搜索下载引擎 BitTorrent社区一个BitTorrent社区专注于东亚媒体，包括动漫，漫画，音乐等 BT之家BT之家是个提供BT下载,bt种子的bt电影下载论坛. JABHD 磁力天堂 A电影天堂电影天堂成人卡通 磁力蚂蚁 老王磁力磁力狗 影视剧站555 电影网 555dy.com，优质奈飞超清片源站 ck 电影部落 CK电影部落免费分享高清电影BT种子,BT电影下载,迅雷电影下载。提供最新的电影、电视剧、720P和1080P下载，最新最全的高清大片资源尽在CK 听风影视 片吧影院 备用域名 kk看剧 kk看剧，一个可在线观看美剧，韩剧，电影的视频网站，看剧爱好者的在线天堂。 新奇遇电影 免费无广告高清影视站 爱剧网免费提供高清电影,热播电视剧等观看视频服务,80s手机电影网支持在线观看影视大全,手机视频免费在线秒播放追更剧集,电影,综艺,动漫等不卡的私人高清手机电影网 sck电影网sck电影网-itsck最新电影电视剧动漫综艺在线观看 片库(pianku.tv)片库(pianku.tv)是一个可在线观看、下载视频的网站，每日收集全网最新的电影、电视剧、动漫高清资源供网友免费下载备用域名 电影狗通过影视资源搜索引擎快速找到自己需要的电影资源，本站致力打造成为一站式的电影服务站 蚂蚁影视专注最新最全的电影电视剧综艺动漫分享，提供最便利的观影体验，你想要的影视资源这里都有！ 全民影视 爱韩剧网是中文最大的韩剧视频网站，提供最新韩剧,推荐好看的韩剧在线观看、韩剧排行榜，欢迎韩剧爱好者观看2020最新韩剧，韩国电视剧排行榜让你及时掌握最新韩剧动态 韩剧网 动漫 卡通战一个不错的动漫网站，可以观看翻译国语动漫 怡萱动漫致力于为所有动漫迷们免费提供最新最快的高清动画下载及在线观看资源，它是专业日本动漫下载视听领域的综合网站。备用域名 扶她动漫下载站(futaacg.com)为网友提供最全最新日本动画、漫画、RAW片源、电子书、日剧、特摄、动漫音乐、新番、Galgame游戏的无修资源BT下载服务。 AGE动漫专注于资源收集整理 海量的有效的高质量的动漫资源下载 动漫百度网盘下载备用域名1 备用域名2 云盘搜索VIP解析imyshare VIP视频解析 BTNULL VIP视频解析 小昭来啦- 搜网盘 -好用的网盘搜索工具 微友搜索网微友搜索网|微友百度网盘搜索,你懂的专业、强大、快速的百度云网盘资源搜索与下载引擎！ 搜搜一jiexiVIP视频解析备用域名 去转盘照片_下载_百度网盘_去转盘-我嚓哩-(Q站)-让人惊叹不已 云盘狗 VIP视频解析免费优酷/爱奇艺/腾讯视频/哔哩哔哩/芒果TV/PP视频/乐视视频/搜狐视频高清播放，无需开通会员，即可观看所有会员视频 其他一个免翻墙浏览Youtube精选资源的站点，汇集了Youtube上一些比较热门的频道资源","categories":[{"name":"Blog","slug":"Blog","permalink":"http://example.com/categories/Blog/"}],"tags":[]},{"title":"生产力工具【编程、编辑、设计、软件下载】","slug":"Blog/生产力工具","date":"2018-10-16T16:00:00.000Z","updated":"2022-03-20T02:18:09.733Z","comments":true,"path":"2018/10/17/Blog/生产力工具/","link":"","permalink":"http://example.com/2018/10/17/Blog/%E7%94%9F%E4%BA%A7%E5%8A%9B%E5%B7%A5%E5%85%B7/","excerpt":"","text":"生产力工具TopbookTopbook是一本持续更新的视频书，致力于让现代人摆脱资讯的控制，在避无可避的科技生活中，让工具回归工具，让每个人成为自己。 ingzhunyun.com工具,在线工具,工具大全,导航工具,实用工具,工具查询,查询工具,小工具 imyshare分享各种令人惊艳的软件工具神器，学习资源，网站导航，效率软件，帮助你提高学习、工作和生活效率。 软件下载macwk 精品 mac 软件下载 快猴网快猴网为广大用户收集了绿色无毒官方版的软件,最热门的单机游戏,街机游戏，致力为用户们提供一个绿色的下载平台！ Macbl 提供最全面的Mac软件免费下载，分享最新的Mac游戏、图形设计软件、行业软件、开发工具、媒体工具、网络工具、系统工具等，为你搭建最专业的苹果软件免费下载平台。 编程在线工具 - 程序员的工具箱 在线工具开源中国在线工具,ostools为开发设计人员提供在线工具，提供jsbin在线 CSS、JS 调试，在线 Java API文档,在线 PHP API文档,在线 Node.js API文档,Less CSS编译器，MarkDown编译器等其他在线工具 UZMER.MEUZER.ME – 您的云端超级应用空间 创客贴创客贴,极简好用的平面设计作图软件,在线图片编辑器,免费使用.提供免费设计模板，有海报、名片、公众号图片、PPT、邀请函等65个场景模板,一键稿定设计印刷. 在线格式转换Online Converter [ Office Converter ] Free Online Convert Video, Audio, Image, Documents and Archives for free 在线表格转换工具可以把markdown转换成json GitChatGitChat 是一款基于微信平台的知识分享产品。通过这款产品我们希望改变IT知识的学习方式 设计炫酷配色 FLAT UI COLORS配色网站 配色表网页设计常用色彩搭配表 yeelogologo在线设计 unDraw一个惊为天人的插图网站，可以直接根据自己的需求调整配色，各种插图应有尽有，并且一直保持更新。最重要的是免费、开放版权。图片下载有png和svg两种格式。 设计导航设计师网址导航专注分享优秀设计网站、免费无版权限制可商用的高品质素材，设计教程、尺寸规范、配色方案、设计素材和灵感 ico制作 ico图标转换工具 Color Hunt - Color Palettes for Designers and Artists配色网站 图床Tikoulu","categories":[{"name":"Blog","slug":"Blog","permalink":"http://example.com/categories/Blog/"}],"tags":[]},{"title":"音乐、壁纸、奇酷网站","slug":"Blog/音乐、壁纸","date":"2018-10-16T16:00:00.000Z","updated":"2022-03-02T02:10:11.967Z","comments":true,"path":"2018/10/17/Blog/音乐、壁纸/","link":"","permalink":"http://example.com/2018/10/17/Blog/%E9%9F%B3%E4%B9%90%E3%80%81%E5%A3%81%E7%BA%B8/","excerpt":"","text":"音乐在线听音乐不用刷新会一直随机播放音乐 1、超级无损音乐名字听起来就是不一样，在这里可以下载无损音乐。如果你比较喜欢听和收藏无损音乐的话，那么这个网站最合适你了，复制网盘的下载链接即可下载，还可以直接保存到自己网盘。 2、886音乐社区这是一个专门为无损音乐而生的音乐网站，歌曲下载都可以通过网盘的方式进行打包下载。网站拥有许多网友分享的无损歌曲，大部分都是独家珍藏。 3、51ape这也是一个无损音乐网站，拥有大量的无损音乐歌曲，数量高达数10万。而且大部分格式的无损音乐几乎可以搜索到。此外，网站还根据本周、本月和专辑等分类。 4、果汁音乐一个在线音乐播放网站。当前主流和热门的音乐都可以随便下载。此外，它还可以定义私人的专属歌单。 5、墨灵音乐这个网站相当于一个在线音乐播放器，与上面的音乐有着本质性的不同。在这网站上我们不仅可以试听，下载歌曲，还可以看它的歌词和歌单，就仿佛是在使用一个非常精美的播放器一般。 壁纸极简壁纸 乌云高清壁纸站乌云高清壁纸站 SooHub 高清壁纸素材网站 wallls.com wallls.com codeimg 代码图片 9宫格壁纸 天空之城无人机, 航拍, 航拍攻略,高清图片 美图集-高质量图片免费下载 渐变色背景 壁纸网 奇酷网站warcraft3 爱达杂货铺收集精品网络免费资源、包括免费视频、BT种子磁力搜索、网盘搜索、软件、网站和各类资源，欢迎前来探索。 一个在线拧魔方的网站，支持自动打乱和还原，还有多角度的透视视图让你看清魔方的内部。 一个360°看世界的网站，收录了各个国家或地区的风光，以图片或视频的形式展现。 PanDownload：百度网盘高速下载器，支持离线下载，下载速度可达几十M每秒！ 小霸王-其乐无穷魂斗罗，超级玛丽，热血足球，三国志，合金弹头，拳皇。这些小时候的回忆，黑白电视机前玩着小霸王游戏机的那种感觉令人怀念，希望大家可以找回童年的快乐 Funletu - 发现好物，分享资源，推荐精品 只读 本站致力于发现优秀的网站，实用的软件，分享来自互联网最好用，最有趣的产品 趣导航 有深度的网址导航_趣导航 不死鸟不死鸟 - 分享为王 不死鸟不死鸟 - 分享为王2 资源帝 资源帝电子书导航_在这里发现更多好书… 千亿像素看中国 果汁导航","categories":[{"name":"Blog","slug":"Blog","permalink":"http://example.com/categories/Blog/"}],"tags":[]},{"title":"web知识点整理","slug":"Github/web开发知识点整理","date":"2018-07-18T16:00:00.000Z","updated":"2018-07-19T02:43:40.000Z","comments":true,"path":"2018/07/19/Github/web开发知识点整理/","link":"","permalink":"http://example.com/2018/07/19/Github/web%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/","excerpt":"","text":"map()map() 是 JavaScript Array 下的一个方法 map() 不会对空数组进行检测，不会改变原始数组。 语法：array.map(function(currentValue,[index],[arr]), thisValue) function(currentValue, index,arr) 必须。函数，数组中的每个元素都会执行这个函数 currentValue 必须。当前元素的值 thisValue 可选。对象作为该执行回调时使用，传递给函数，用作 “this” 的值。如果省略了 thisValue ，”this” 的值为 “undefined” 实例数组中的每个元素乘于输入框指定的值，并返回新数组: var numbers = [65, 44, 12, 4]; function multiplyArrayElement(num) &#123; return num * document.getElementById(&quot;multiplyWith&quot;).value; &#125; function myFunction() &#123; document.getElementById(&quot;demo&quot;).innerHTML = numbers.map(multiplyArrayElement); &#125; jQuery中的ajax() $.ajax(&#123; url: this.props.url,//url 发送请求的地址。 默认值: 当前页地址。 dataType: &#39;json&#39;, // 预期服务器返回的数据类型。 success: function(data) &#123; // 请求成功后的回调函数。 this.setState(&#123;data: data&#125;); &#125;.bind(this), // 一般在ajax回调函数中，如果使用了this，那么就在函数后加bind(this) error: function(xhr, status, err) &#123; // 错误信息 console.error(this.props.url, status, err.toString()); &#125;.bind(this) &#125;); bind()","categories":[],"tags":[{"name":"web","slug":"web","permalink":"http://example.com/tags/web/"}]},{"title":"React 使用手册","slug":"Github/React使用手册","date":"2018-07-18T13:31:20.000Z","updated":"2018-07-18T13:31:20.000Z","comments":true,"path":"2018/07/18/Github/React使用手册/","link":"","permalink":"http://example.com/2018/07/18/Github/React%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/","excerpt":"","text":"React使用手册 1.Webpack 什么是React?React 是 Facebook 推出的一个用来构建用户界面的 JavaScript 库。 React 为了更高超的性能而使用虚拟 DOM 作为其不同的实现。 它同时也可以由服务端 Node.js 渲染 － 而不需要过重的浏览器 DOM 支持 React有三个关键词： just the ui virtual DOM data flow Just the uiReact 负责UI层面的展现，它把UI拆分成组件，而不是通过模板引擎和展示逻辑，使得它可以易于拓展和维护。因此它引入了JSX这种语法规则，可以让我们使用类似HTML的语法去写js的函数调用。 virtual DOMReact的virtual dom是怎么做的呢？生成virtual dom-&gt;diff-&gt;必要的DOM更新 data flowReact中的数据流是沿着组件树从上到下单向流动的。 如何使用React?不适用npm 的快速开始&lt;script src=&quot;build/react.js&quot;&gt;&lt;/script&gt; //react引入文件 &lt;script src=&quot;build/react-with-addons.js&quot;&gt;&lt;/script&gt; //带插件功能的react引入文件 &lt;script src=&quot;build/JSXTransformer.js&quot;&gt;&lt;/script&gt; &lt;!--负责解析JSX代码的--&gt; &lt;!--type=&quot;text/jsx&quot;是来告诉浏览器这是jsx代码--&gt; &lt;script type=&quot;text/jsx&quot;&gt; /*创建一个组件*/ var SubComp = React.createClass(&#123; render:function()&#123; return( &lt;div&gt; &lt;h3&gt;这是一个子组件&lt;/h3&gt; &lt;SubSubComp &#123;...this.props &#125; /&gt; &lt;/div&gt; ) &#125; &#125;); /*react渲染这个个组件*/ React.render( &lt;SubComp /&gt;, document.getElementById(&#39;app&#39;) ); &lt;/script&gt; 案例教程构建一个简单却真实的评论框。 我们将提供以下内容： 1.一个展示所有评论的视图 2.一个提交评论的表单 3.用于构建自定制后台的接口链接（hooks） 你的第一个组件React 中全是模块化、可组装的组件。以我们的评论框为例，我们将有如下的组件结构： - CommentBox - CommentList - Comment - CommentForm 让我们构造 CommentBox 组件，它只是一个简单的&lt;div&gt;而已： // tutorial1.js var CommentBox = React.createClass(&#123; render: function() &#123; return ( &lt;div className=&quot;commentBox&quot;&gt; Hello, world! I am a CommentBox. &lt;/div&gt; ); &#125; &#125;); React.render( &lt;CommentBox /&gt;, document.getElementById(&#39;content&#39;) ); 我们通过 JavaScript 对象传递一些方法到 React.createClass() 来创建一个新的React组件。其中最重要的方法是render，该方法返回一颗 React 组件树，这棵树最终将会渲染成 HTML。 制作组件让我们为 CommentList 和 CommentForm 构建骨架，这也会是一些简单的 &lt;div&gt; ： // tutorial2.js var CommentList = React.createClass(&#123; render: function() &#123; return ( &lt;div className=&quot;commentList&quot;&gt; Hello, world! I am a CommentList. &lt;/div&gt; ); &#125; &#125;); var CommentForm = React.createClass(&#123; render: function() &#123; return ( &lt;div className=&quot;commentForm&quot;&gt; Hello, world! I am a CommentForm. &lt;/div&gt; ); &#125; &#125;); 下一步，更新 CommentBox 组件，使用这些新的组件： // tutorial3.js var CommentBox = React.createClass(&#123; render: function() &#123; return ( &lt;div className=&quot;commentBox&quot;&gt; &lt;h1&gt;Comments&lt;/h1&gt; &lt;CommentList /&gt; &lt;CommentForm /&gt; &lt;/div&gt; ); &#125; &#125;); 组件的属性// tutorial4.js var CommentList = React.createClass(&#123; render: function() &#123; return ( &lt;div className=&quot;commentList&quot;&gt; &lt;Comment author=&quot;Pete Hunt&quot;&gt;This is one comment&lt;/Comment&gt; &lt;Comment author=&quot;Jordan Walke&quot;&gt;This is *another* comment&lt;/Comment&gt; &lt;/div&gt; ); &#125; &#125;); 从父节点传递到子节点的数据称为 props，是属性（properties）的缩写。通过 props，就能够从中读取到从 CommentList 传递过来的数据，然后渲染一些标记： // tutorial5.js var Comment = React.createClass(&#123; render: function() &#123; return ( &lt;div className=&quot;comment&quot;&gt; &lt;h2 className=&quot;commentAuthor&quot;&gt; &#123;this.props.author&#125; &lt;/h2&gt; &#123;this.props.children&#125; &lt;/div&gt; ); &#125; &#125;); 我们访问传递给组件的命名属性作为 this.props 的键，任何内嵌的元素作为 this.props.children。 添加Markdown首先，添加第三方的 Showdown 库到你的应用。这是一个JavaScript库，处理 Markdown 文本并且转换为原始的 HTML。这需要在你的头部添加一个 script 标签 &lt;script src=&quot;http://cdnjs.cloudflare.com/ajax/libs/showdown/0.3.1/showdown.min.js&quot;&gt; 下一步，让我们转换评论文本为 Markdown 格式，然后输出它： // tutorial6.js var converter = new Showdown.converter();var Comment = React.createClass(&#123; render: function() &#123; return ( &lt;div className=&quot;comment&quot;&gt; &lt;h2 className=&quot;commentAuthor&quot;&gt; &#123;this.props.author&#125; &lt;/h2&gt; &#123;converter.makeHtml(this.props.children.toString())&#125; &lt;/div&gt; ); &#125; &#125;); 我们在这里唯一需要做的就是调用 Showdown 库。我们需要把this.props.children从 React 的包裹文本转换成 Showdown 能处理的原始的字符串，所以我们显示地调用了toString()。 接入数据模型让我们渲染一小块JSON数据到评论列表。最终，数据将会来自服务器，但是现在，写在你的源代码中： // tutorial8.js var data = [ &#123;author: &quot;Pete Hunt&quot;, text: &quot;This is one comment&quot;&#125;, &#123;author: &quot;Jordan Walke&quot;, text: &quot;This is *another* comment&quot;&#125; ]; 我们需要用一种模块化的方式将数据传入到 CommentList。修改 CommentBox 和 React.render() 方法，通过 props 传递数据到 CommentList： // tutorial9.js var CommentBox = React.createClass(&#123; render: function() &#123; return ( &lt;div className=&quot;commentBox&quot;&gt; &lt;h1&gt;Comments&lt;/h1&gt; &lt;CommentList data=&#123;this.props.data&#125; /&gt; &lt;CommentForm /&gt; &lt;/div&gt; ); &#125; &#125;); React.render( &lt;CommentBox data=&#123;data&#125; /&gt;, document.getElementById(&#39;content&#39;) ); 现在数据在 CommentList 中可用了，让我们动态地渲染评论： // tutorial10.js var CommentList = React.createClass(&#123; render: function() &#123; var commentNodes = this.props.data.map(function (comment) &#123; return ( &lt;Comment author=&#123;comment.author&#125;&gt; &#123;comment.text&#125; &lt;/Comment&gt; ); &#125;); return ( &lt;div className=&quot;commentList&quot;&gt; &#123;commentNodes&#125; &lt;/div&gt; ); &#125; &#125;); 通过AJAX动态添加动态的数据制作表单组件进行组件模板拆分 待整理：太冗长了 Webpack+Babel+React开发环境的搭建1. Babel 是一个javascript编辑器，用它可以把 jsx和es6语法进行编译安装babelnpm install babel-cli -g 把依赖写入package.json中npm install --save-dev babel-cli 把ES6文件转换成ES5npm install --save-dev babel-preset-es2015 再在根目录下创建.babelrc文件，设置为： &#123;&quot;presets&quot;:[&quot;es2015&quot;]&#125; babel转换命令babel app.js --out-file build.js 2. Webpack 能够把各种文件作为模块进行打包，Webpack出自facebook的Instagram团队。 同时支持CommonJS和AMD模块（对于新项目，推荐直接使用CommonJS）； 串联式模块加载器以及插件机制，让其具有更好的灵活性和扩展性，例如提供对CoffeeScript、ES6的支持； 可以基于配置或者智能分析打包成多个文件，实现公共模块或者按需加载； 支持对CSS，图片等资源进行打包，从而无需借助Grunt或Gulp； 开发时在内存中完成打包，性能更快，完全可以支持开发过程的实时打包需求； 对sourcemap有很好的支持，易于调试。 webpack安装npm install webpack -g 创建package.json文件npm init name: 项目名称 version: 项目版本 description: 描述 main: 入口文件 dependencies: 依赖 devDependencies 开发依赖 **scripts: **简化命令行中的命令，执行 npm run build 相当于执行scripts对象下的build里面的命令。 &#123; &quot;name&quot;: &quot;webpack-react&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;description&quot;: &quot;&quot;, &quot;main&quot;: &quot;server.js&quot;, &quot;dependencies&quot;: &#123; &quot;babel-preset-react&quot;: &quot;^6.5.0&quot;, &quot;react&quot;: &quot;^0.14.7&quot;, &quot;react-dom&quot;: &quot;^0.14.7&quot;, &quot;webpack&quot;: &quot;^1.12.15&quot; &#125;, &quot;devDependencies&quot;: &#123; &quot;babel-core&quot;: &quot;^6.7.2&quot;, &quot;babel-loader&quot;: &quot;^6.2.4&quot;, &quot;babel-preset-es2015&quot;: &quot;^6.6.0&quot;, &quot;babel-preset-stage-1&quot;: &quot;^6.5.0&quot;, &quot;css-loader&quot;: &quot;^0.23.1&quot;, &quot;file-loader&quot;: &quot;^0.8.5&quot;, &quot;html-webpack-plugin&quot;: &quot;^2.14.0&quot;, &quot;less-loader&quot;: &quot;^2.2.3&quot;, &quot;react-hot-loader&quot;: &quot;^1.3.0&quot;, &quot;style-loader&quot;: &quot;^0.13.0&quot;, &quot;webpack-dev-server&quot;: &quot;^1.14.1&quot; &#125;, &quot;scripts&quot;: &#123; &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;, &quot;start_html&quot;:&quot;webpack --config webpack.html.config.js&quot;, &quot;start_es6&quot;:&quot;webpack --config webpack.es6.config.js&quot;, &quot;start_react&quot;:&quot;webpack --config webpack.react.config.js&quot;, &quot;start_todo&quot;:&quot;webpack --config webpack.todo.config.js&quot;, &quot;build&quot;:&quot;webpack-dev-server --port 3000 --hot --inline&quot;, &quot;build_es6&quot;:&quot;webpack-dev-server --port 4000 --hot --inline --config webpack.es6.config.js&quot;, &quot;build_todo&quot;:&quot;webpack-dev-server --port 4000 --hot --inline --config webpack.todo.config.js&quot; &#125;, &quot;author&quot;: &quot;&quot;, &quot;license&quot;: &quot;ISC&quot; &#125; 把依赖写入package.jsonnpm install webpack@1.12.15 --save-dev webpack 1 和 2 有点不一样。 安装模块加载器各种不同文件类型的资源，webpack有对应的模块loader安装加载器： npm install xxx-loader --save-dev 例如： npm install css-loader style-loader #处理css文件和样式 安装package.json文件中的所有依赖 npm install npm update xxx 更新模块npm uninstall xxx 卸载模块 更多参考：http://webpack.github.io/docs/using-loaders.html webpack.config.js配置文件用这个配置文件，规定webpack进行怎样的打包。 在配置文件中，一个字母也会影响打包成功 entry:它定义了打包的入口文件，数组中的文件会按顺序进行，并且会自行解决依赖问题。 output:它定义了输出文件的的位置，包括路径，文件名，还可能有运行时的访问路径 path : 定义输出的文件路径 filename : 指定打包的文件名称。 module:webpack将所有的资源都看做是模块，而模块就需要加载器。对于不同的文件，我们可以自行配置使用不同的加载器。也可以自行实现合心意的加载器。在这里我们配置了babel-loader，可以让我们在js文件中随心所欲的开始写ES6规范的代码。 test : 正则，匹配到的文件后缀名 loader/loaders : string || array 处理匹配到的文件 include : string || array 包含的文件夹 exclude : string || array 排除的文件夹 resolve：webpack 是使用类似 Browserify 的方式在本地按目录对依赖进行查找。指定可以被 import 的文件后缀。比如 Hello.jsx 这样的文件就可以直接用 import Hello from ‘Hello’ 引用。 **plugin: **我们可以在plugin参数中配置我们需要用到的各种各样的插件。比如我们想将多个文件分开打包，可能会用到: &#123; entry: &#123; a: &quot;./a&quot;, b: &quot;./b&quot; &#125;, output: &#123; filename: &quot;[name].js&quot; &#125;, plugins: [ new webpack.CommonsChunkPlugin(&quot;init.js&quot;) ] &#125; var webpack = require(&#39;webpack&#39;); module.exports = &#123; entry: [ &#39;webpack/hot/only-dev-server&#39;, &quot;./js/app.js&quot; ], output: &#123; path: &#39;./build&#39;, filename: &quot;bundle.js&quot; &#125;, module: &#123; loaders: [ &#123; test: /\\.js?$/, loaders: [&#39;react-hot&#39;, &#39;babel&#39;], exclude: /node_modules/ &#125;, &#123; test: /\\.js$/, exclude: /node_modules/, loader: &#39;babel-loader&#39;&#125;, &#123; test: /\\.css$/, loader: &quot;style!css&quot; &#125;, &#123;test: /\\.less/,loader: &#39;style-loader!css-loader!less-loader&#39;&#125; ] &#125;, resolve:&#123; extensions:[&#39;&#39;,&#39;.js&#39;,&#39;.json&#39;] &#125;, plugins: [ new webpack.NoErrorsPlugin() ] &#125;; webpack-dev-server轻量级的服务器修改文件源码后，自动刷新页面就能把修改同步到页面上。 安装webpack-dev-servernpm install webpack-dev-server -g # 安装后再命令行中使用webpack-dev-server命令 # 把依赖写入package.json npm install webpack-dev-server --save-dev 开启服务器webpack-dev-server --port 3000 使用命令，做的自动刷新(热加载)。webpack-dev-server --hot --inline index.html文件，要这样引入build.js &lt;script src=&quot;http://127.0.0.1:3000/build.js&quot;&gt;&lt;/script&gt; 执行简化的命令： npm run build 3.安装React模块npm install react react-dom babel-preset-react --save-dev 配置： &#123;&quot;presets&quot;:[&quot;es2015&quot;,&quot;react&quot;]&#125; 热加载npm install react-hot-loader --save-dev React如何实现数据绑定？React如何操作json数据，以及用ajax操作json文件？如何开启React服务器什么是redux?","categories":[],"tags":[{"name":"Web开发","slug":"Web开发","permalink":"http://example.com/tags/Web%E5%BC%80%E5%8F%91/"}]},{"title":"webpack","slug":"Github/webpack","date":"2018-07-16T16:00:00.000Z","updated":"2018-07-17T15:58:27.000Z","comments":true,"path":"2018/07/17/Github/webpack/","link":"","permalink":"http://example.com/2018/07/17/Github/webpack/","excerpt":"","text":"什么是webpack?webpack是近期最火的一款模块加载器兼打包工具，它能够把各种资源，例如JS（含JSX）、样式（含less/sass）、图片等都作为模块来使用和处理。 出自facebook的Instagram团队。 当今越来越多的网站已经从网页模式进化到了 Webapp 模式。它们运行在现代的高级浏览器里，使用 HTML5、 CSS3、 ES6 等更新的技术来开发丰富的功能，网页已经不仅仅是完成浏览的基本需求，并且webapp通常是一个单页面应用，每一个视图通过异步的方式加载，这导致页面初始化和使用过程中会加载越来越多的 JavaScript 代码，这给前端开发的流程和资源组织带来了巨大的挑战。 前端开发和其他开发工作的主要区别，首先是前端是基于多语言、多层次的编码和组织工作，其次前端产品的交付是基于浏览器，这些资源是通过增量加载的方式运行到浏览器端，如何在开发环境组织好这些碎片化的代码和资源，并且保证他们在浏览器端快速、优雅的加载和更新，就需要一个模块化系统，这个理想中的模块化系统是前端工程师多年来一直探索的难题。 前端模块加载 前端模块要在客户端中执行，所以他们需要增量加载到浏览器中。 模块的加载和传输，我们首先能想到两种极端的方式，一种是每个模块文件都单独请求，另一种是把所有模块打包成一个文件然后只请求一次。显而易见，每个模块都发起单独的请求造成了请求次数过多，导致应用启动速度慢；一次请求加载所有模块导致流量浪费、初始化过程慢。这两种方式都不是好的解决方案，它们过于简单粗暴。 分块传输，按需进行懒加载，在实际用到某些模块的时候再增量更新，才是较为合理的模块加载方案。 要实现模块的按需加载，就需要一个对整个代码库中的模块进行静态分析、编译打包的过程。 在webpack眼中所有的资源都是模块 webpack的特定Webpack 和其他模块化工具有什么区别呢？ 代码拆分Webpack 有两种组织模块依赖的方式，同步和异步。异步依赖作为分割点，形成一个新的块。在优化了依赖树后，每一个异步区块都作为一个文件被打包。 LoaderWebpack 本身只能处理原生的 JavaScript 模块，但是 loader 转换器可以将各种类型的资源转换成 JavaScript 模块。这样，任何资源都可以成为 Webpack 可以处理的模块。 智能解析Webpack 有一个智能解析器，几乎可以处理任何第三方库，无论它们的模块形式是 CommonJS、 AMD 还是普通的 JS 文件。甚至在加载依赖的时候，允许使用动态表达式 require(&quot;./templates/&quot; + name + &quot;.jade&quot;)。 插件系统Webpack 还有一个功能丰富的插件系统。大多数内容功能都是基于这个插件系统运行的，还可以开发和使用开源的 Webpack 插件，来满足各式各样的需求。 快速运行Webpack 使用异步 I/O 和多级缓存提高运行效率，这使得 Webpack 能够以令人难以置信的速度快速增量编译。 webpack安装全局安装 npm install webpack -g 通常我们会将 Webpack 安装到项目的依赖中，这样就可以使用项目本地版本的 Webpack。 # 进入项目目录 # 确定已经有 package.json，没有就通过 npm init 创建 # 安装 webpack 依赖 $ npm install webpack --save-dev webpack安装开发服务器工具。 $ npm install webpack-dev-server --save-dev 启动一个 express 静态资源 web 服务器，并且会以监听模式自动运行 webpack webpack使用首先创建一个静态页面 index.html 和一个 JS 入口文件 entry.js： &lt;!-- index.html --&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;/head&gt; &lt;body&gt; &lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt; // entry.js document.write(&#39;It works.&#39;) 然后编译 entry.js 并打包到 bundle.js： $ webpack entry.js bundle.js 打包过程会显示日志： Hash: e964f90ec65eb2c29bb9 Version: webpack 1.12.2 Time: 54ms Asset Size Chunks Chunk Names bundle.js 1.42 kB 0 [emitted] main [0] ./entry.js 27 bytes &#123;0&#125; [built] 用浏览器打开 index.html 将会看到 It works. 。 接下来添加一个模块 module.js 并修改入口 entry.js： // module.js module.exports = &#39;It works from module.js.&#39; // entry.js document.write(&#39;It works.&#39;) document.write(require(&#39;./module.js&#39;)) // 添加模块 重新打包 webpack entry.js bundle.js 后刷新页面看到变化 It works.It works from module.js. Hash: 279c7601d5d08396e751 Version: webpack 1.12.2 Time: 63ms Asset Size Chunks Chunk Names bundle.js 1.57 kB 0 [emitted] main [0] ./entry.js 66 bytes &#123;0&#125; [built] [1] ./module.js 43 bytes &#123;0&#125; [built] Webpack 会分析入口文件，解析包含依赖关系的各个文件。这些文件（模块）都打包到 bundle.js 。Webpack 会给每个模块分配一个唯一的 id 并通过这个 id 索引和访问模块。在页面启动时，会先执行 entry.js 中的代码，其它模块会在运行 require 的时候再执行。 Webpack LoaderWebpack 本身只能处理 JavaScript 模块，如果要处理其他类型的文件，就需要使用 loader 进行转换。可以理解为是模块和资源的转换器,它本身是一个函数，接受源文件作为参数，返回转换的结果。 Loader 本身也是运行在 node.js 环境中的 JavaScript 模块，它通常会返回一个函数。大多数情况下，我们通过 npm 来管理 loader，但是你也可以在项目中自己写 loader 模块。 按照惯例，而非必须，loader 一般以 xxx-loader 的方式命名，xxx 代表了这个 loader 要做的转换功能，比如 json-loader。 Loader 可以在 require() 引用模块的时候添加，也可以在 webpack 全局配置中进行绑定，还可以通过命令行的方式使用。 接上一节的例子，我们要在页面中引入一个 CSS 文件 style.css，首页将 style.css 也看成是一个模块，然后用 css-loader 来读取它，再用 style-loader 把它插入到页面中。 修改 entry.js： require(&quot;!style-loader!css-loader!./style.css&quot;) // 载入 style.css document.write(&#39;It works.&#39;) document.write(require(&#39;./module.js&#39;)) 安装 loader： npm install css-loader style-loader 如果每次 require CSS 文件的时候都要写 loader 前缀，是一件很繁琐的事情。我们可以根据模块类型（扩展名）来自动绑定需要的 loader。 将 entry.js 中的 require(“!style!css!./style.css”) 修改为 require(“./style.css”) ，然后执行： $ webpack entry.js bundle.js --module-bind &#39;css=style-loader!css-loader&#39; # 有些环境下可能需要使用双引号 $ webpack entry.js bundle.js --module-bind &quot;css=style-loader!css-loader&quot; 显然，这两种使用 loader 的方式，效果是一样的。 webpack配置文件Webpack 在执行的时候，除了在命令行传入参数，还可以通过指定的配置文件来执行。默认情况下，会搜索当前目录的 webpack.config.js 文件，这个文件是一个 node.js 模块，返回一个 json 格式的配置信息对象，或者通过 –config 选项来指定配置文件。 package.json 将sytle-loader引入依赖 &quot;devDependencies&quot;: &#123; &quot;css-loader&quot;: &quot;^0.21.0&quot;, &quot;style-loader&quot;: &quot;^0.13.0&quot;, &quot;webpack&quot;: &quot;^1.12.2&quot; &#125; 然后创建一个配置文件 webpack.config.js： var webpack = require(&#39;webpack&#39;) module.exports = &#123; entry: &#39;./entry.js&#39;, output: &#123; path: __dirname, filename: &#39;bundle.js&#39; &#125;, module: &#123; loaders: [ &#123;test: /\\.css$/, loader: &#39;style-loader!css-loader&#39;&#125; ] &#125; &#125; 同时简化 entry.js 中的 style.css 加载方式： require(&#39;./style.css&#39;) 最后运行 webpack，可以看到 webpack 通过配置文件执行的结果和上一章节通过命令行 webpack entry.js bundle.js –module-bind ‘css=style-loader!css-loader’ 执行的结果是一样的。 webpack插件插件可以完成更多 loader 不能完成的功能。 插件的使用一般是在 webpack 的配置信息 plugins 选项中指定。 Webpack 本身内置了一些常用的插件，还可以通过 npm 安装第三方插件。 接下来，我们利用一个最简单的 BannerPlugin 内置插件来实践插件的配置和运行，这个插件的作用是给输出的文件头部添加注释信息。 修改 webpack.config.js，添加 plugins： var webpack = require(&#39;webpack&#39;) module.exports = &#123; entry: &#39;./entry.js&#39;, output: &#123; path: __dirname, filename: &#39;bundle.js&#39; &#125;, module: &#123; loaders: [ &#123;test: /\\.css$/, loader: &#39;style-loader!css-loader&#39;&#125; ] &#125;, plugins: [ new webpack.BannerPlugin(&#39;This file is created by zhaoda&#39;) ] &#125; 然后运行 webpack，打开 bundle.js，可以看到文件头部出现了我们指定的注释信息： /*! This file is created by zhaoda */ /******/ (function(modules) &#123; // webpackBootstrap /******/ // The module cache /******/ var installedModules = &#123;&#125;; // 后面代码省略","categories":[],"tags":[{"name":"web开发","slug":"web开发","permalink":"http://example.com/tags/web%E5%BC%80%E5%8F%91/"}]},{"title":"MongoDB + 小小留言板","slug":"Github/MongDB","date":"2018-06-26T16:32:50.000Z","updated":"2018-06-26T16:32:50.000Z","comments":true,"path":"2018/06/27/Github/MongDB/","link":"","permalink":"http://example.com/2018/06/27/Github/MongDB/","excerpt":"","text":"1.MongoDB安装请参阅菜鸟教程 启动MongoDB sudo mongod # 如果没有创建全局路径 PATH，需要进入以下目录 cd /usr/local/mongodb/bin sudo ./mongod 2.MongoDB图形界面管理… 3.语法MongoDB 创建数据库MongoDB 创建数据库的语法格式如下： use DATABASE_NAME use.runoob 查看所有数据库，可以使用 show dbs // 插入数据 &gt; db.runoob.insert(&#123;&quot;name&quot;:&quot;菜鸟教程&quot;&#125;) WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;) MongoDB 删除数据库db.dropDatabase() 切换到数据库 runoob,然后再删除 &gt; use runoob switched to db runoob &gt; &gt; db.dropDatabase() &#123; &quot;dropped&quot; : &quot;runoob&quot;, &quot;ok&quot; : 1 &#125; 删除集合： &gt; use runoob switched to db runoob &gt; show tables site &gt; db.site.drop() true &gt; show tables 留言本案例编程思路： 启动一个简单的服务器 把页面提交的留言信息【Ajax提交信息】输入到数据库中 从数据库中读取留言信息，显示在页面上 留言数据足够多的时候，要分页显示【局部刷新】 1. 简单的服务器app.js var express = require(&quot;express&quot;); var app = express(); //db.js 是封装好一个模型，用来操作MongoDB数据库的 var db = require(&quot;./model/db.js&quot;); app.set(&quot;view engine&quot;,&quot;ejs&quot;); app.use(express.static(&quot;./public&quot;)); app.get(&quot;/&quot;,function(req,res,next)&#123; res.render(&quot;index&quot;); &#125;); index.ejs &lt;h1&gt;简单的服务器&lt;/h1&gt; 2. Ajax提交信息，输入数据库中index.ejs $(&quot;#tijiao&quot;).click(function () &#123; $(&quot;#shibai&quot;).hide(); $(&quot;#chenggong&quot;).hide(); $.post(&quot;/tijiao&quot;, &#123; &quot;xingming&quot;: $(&quot;#xingming&quot;).val(), &quot;liuyan&quot;: $(&quot;#liuyan&quot;).val() &#125;, function (result) &#123; if (result.result == -1) &#123; $(&quot;#shibai&quot;).fadeIn(); &#125; else if (result.result == 1) &#123; //提交成功 $(&quot;#chenggong&quot;).fadeIn(); //数据库真的存储了，但是当前页面无法显示。这是因为需要刷新 //才能用ajax从/du中得到新的。所以我们先用一个假盒子凑出来。 &#125; &#125;); &#125;); app.js var formidable = require(&#39;formidable&#39;); //处理留言 //Express中post请求需要一个formidable插件 app.post(&quot;/tijiao&quot;, function (req, res, next) &#123; var form = new formidable.IncomingForm(); form.parse(req, function (err, fields) &#123; //写入数据库 db.insertOne(&quot;liuyanben&quot;, &#123; &quot;xingming&quot; : fields.xingming, &quot;liuyan&quot; : fields.liuyan, &quot;shijian&quot; : new Date() &#125;, function (err, result) &#123; if(err)&#123; res.send(&#123;&quot;result&quot;:-1&#125;); //-1是给Ajax看的 return; &#125; res.json(&#123;&quot;result&quot;:1&#125;); &#125;); &#125;); &#125;); 3.读取留言信息数据库，在前端页面上呈现text/template模板 在js里面，经常需要使用js往页面中插入html内容。比如这样： var number = 123; $(&#39;#d&#39;).append(&#39;&lt;div class=&quot;t&quot;&gt;&#39;+number+&#39;&lt;/div&gt;&#39;) 如果html很短还好说，但是遇到描述里面的这么大段，直接用字符串存储会很困难，因为不光要处理单引号，还需要很多「+」号把字符串一个个连接起来，十分的不方便。 设置type=”text/template” ，标签里面的内容不会被执行，也不会显示在页面上，但是可以在另一个script里面通过获取插入到页面中。这样就把大段的HTML操作从js里面分离开了。 Underscore.js template模板需要配合underscore.js使用 &lt;div id=&quot;quanbuliuyan&quot;&gt;&lt;/div&gt; &lt;script type=&quot;text/template&quot; id=&quot;moban&quot;&gt; &lt;div class=&quot;liuyankuai&quot;&gt; &lt;p&gt;【姓名】&#123;&#123;= xingming &#125;&#125;&lt;/p&gt; &lt;p&gt;【留言】&#123;&#123;= liuyan &#125;&#125;&lt;/p&gt; &lt;p&gt;【时间】&#123;&#123;= shijian &#125;&#125;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;/shanchu?id=&#123;&#123;=id&#125;&#125;&quot; class=&quot;shanchu&quot;&gt;删除&lt;/a&gt;&lt;/p&gt; &lt;/div&gt; &lt;/script&gt; 在ejs模板中，使用underscore模板会有冲突，这时候需要把underscore源码改动一下，改成&quot; &#123;&#123; \" 和 \" &#125;&#125; &quot; index.ejs通过Ajax请求数据 $.get(&quot;/du&quot;,function(result)&#123; var json = JSON.parse(result); var compiled = _.template($(&quot;#moban&quot;).html()); //清空全部留言中的所有节点 $(&quot;#quanbuliuyan&quot;).html(&quot;&quot;); for (var i = 0; i &lt; result.result.length; i++) &#123; //数据绑定 var html = compiled(&#123; liuyan: result.result[i].liuyan, xingming: result.result[i].xingming, shijian: result.result[i].shijian &#125;); //DOM操作，添加节点 $(&quot;#quanbuliuyan&quot;).append($(html)); &#125; &#125;); app.js //读取所有留言，这个页面是供Ajax使用的 app.get(&quot;/du&quot;, function (req, res, next) &#123; //可以接受一个参数 var page = parseInt(req.query.page); db.find(&quot;liuyanben&quot;,&#123;&#125;,&#123;&quot;sort&quot;:&#123;&quot;shijian&quot;:-1&#125;&#125;,function(err,result)&#123; res.json(&#123;&quot;result&quot;:result&#125;); &#125;); &#125;);","categories":[],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"http://example.com/tags/Node-js/"}]},{"title":"帮助：前端资源库","slug":"Github/模板中的插件","date":"2018-06-26T05:24:07.000Z","updated":"2018-06-26T05:24:07.000Z","comments":true,"path":"2018/06/26/Github/模板中的插件/","link":"","permalink":"http://example.com/2018/06/26/Github/%E6%A8%A1%E6%9D%BF%E4%B8%AD%E7%9A%84%E6%8F%92%E4%BB%B6/","excerpt":"","text":"前端资源库前端里专注Web开发技术和资源分享的网站 MathJaxMathJax是一款运行在浏览器中的开源的数学符号渲染引擎，使用MathJax可以方便的在浏览器中显示数学公式，不需要使用图片。 码农网码农网-程序员编程资料和编程经验分享平台 SwiperSwiper(Swiper master)是目前应用较广泛的移动端网页触摸内容滑动js插件。 草料二维码草料二维码是国内专业的二维码服务提供商，提供二维码生成，美化，印制，管理，统计等服务，帮助企业通过二维码展示信息并采集线下数据，提升营销和管理效率。 虫部落虫部落 — 让搜索更简单 大前端大前端-关注前端开发 BootstrapBootstrap是Twitter推出的一个用于前端开发的开源工具包。它由Twitter的设计师Mark Otto和Jacob Thornton合作开发，是一个CSS/HTML框架。目前，Bootstrap最新版本为3.0 。Bootstrap中文网致力于为广大国内开发者提供详尽的中文文档、代码实例等，助力开发者掌握并使用这一框架。” www.sioe.cn RGB颜色值与十六进制颜色码转换工具，以及对颜色的描述 ECMAScriptECMAScript 6 入门 vendor目录用于存放第三方库的目录 bootstrap 响应式的前端框架 animate.css 一款强大的css3预设的动画库 pace.preloader.css 加载时的动画效果 pace.js 页面自动加载进度条插件 jquery jquery.js jquery-2.1.1.min.js Skycons 是用canvas标签实现的气象图标。 plugins目录用于存放插件的目录。 autosize 用于处理移动端自适应的插件目录【下同】 bootkit bootstrap-colorpicker 一款可定制颜色的插件 bootstrap-datepicker Bootstrap日期和时间表单组件。 bootstrap-markdown 类似于markdown的文本编辑器 bootstrap-tagsinput 显示关键字的标签插件 bootstrap-timepicker 日期时间插件 canvas-particle 制作光线粒子背景 chart-master 是一个简单、面向对象、为设计者和开发者准备的图表绘制工具库。 chosen Jquery的chosen一款选择插件，支持检索，多选，但不支持输入效果 d3 是操纵基于数据的JavaScript库文件 dropzone 提供了拖放文件上传图片预览 easypiechart 此插件主要是用来统计新的访问、跳出率、服务器负载、使用的RAM等，功能很强大，带有HTML5的动画效果，效果非常炫 editable 是一个jquery插件，它的优点是可以就地编辑，并且提交到服务器处理，是一个不可多得的就地编辑插件。(注： 就地编辑，也有称即时编辑？一般的流程是这样的，当用户点击网页上的文字时，该文字就会出现在一个编辑框中，用户对文字进行修改完成后点击提交按钮，新的文本将发送到服务器上，然后表单消失，显示最新编辑的文本。) flot Flot采用Canvas绘制图形 flot-tooltip fullcalendar 可以根据FullCalendar提供的API快速完成一个日历日程的开发 gauge 是一种轻量级的跨平台测试自动化工具，具有编写业务语言中测试用例的能力。 gmaps 谷歌地图调用插件 isotope Isotope是一款效果非常神奇的元素分类过滤和排序布局jQuery插件 jquery jquery-datatables jquery-datatables-bs3 jquery-ui jquery-ui-touch-punch jquery-validation jqvmap justgage JustGage 是一个 JavaScript 插件来生成很漂亮的仪表盘，基于 Raphaël 库做向量图绘制。 magnific-popup 是一款免费的响应式 jQuery Lightbox 插件 maskedinput 输入框input输入内容格式限制插件 mockjax 生成随机数据，拦截 Ajax 请求 modernizr 是一个 JavaScript 库，用于检测用户浏览器的 HTML5 与 CSS3 特性。 moment JavaScript 日期处理类库 morris 不过Morris.js是基于Raphael.js来的，也就是其使用SVG和VML来绘制图形 nanoscroller jQuery滚动条插件nanoscroller owl-carousel jQuery幻灯片插件Owl Carousel placeholder jQ中的输入框插件 pnotify PNotify 是一个 JavaScript 通知插件 raphael 网页中使用矢量图形 scrollbar select2 sparkline jQuery线状图插件Sparkline store-js store.js 是一个兼容所有浏览器的 LocalStorage 包装器，不需要借助 Cookie 或者 Flash。store.js 会根据浏览器自动选择使用 localStorage、globalStorage 或者 userData 来实现本地存储功能。 summernote 使用summernote生成一个简单的富文本编辑器 touchpunch 实现移动端的拖放效果 wizard xcharts 图表制作js库","categories":[],"tags":[{"name":"web开发","slug":"web开发","permalink":"http://example.com/tags/web%E5%BC%80%E5%8F%91/"}]},{"title":"Node.js","slug":"Github/Node.js","date":"2018-06-25T14:55:33.000Z","updated":"2018-06-25T14:55:33.000Z","comments":true,"path":"2018/06/25/Github/Node.js/","link":"","permalink":"http://example.com/2018/06/25/Github/Node.js/","excerpt":"","text":"[toc] Node.js 如果你是一个前端程序员，你不懂得像PHP、Python或Ruby等动态编程语言，然后你想创建自己的服务，那么Node.js是一个非常好的选择。 一、Node.js简介1.1 特点 单线程 单线程的好处，减少了内存开销，操作系统的内存换页。 非阻塞 I/O 不会傻等I/O[输入|输出]语句结束，而会执行后面的语句。 事件驱动 不管是新用户的请求，还是老用户的I/O完成，都将以事件方式加入事件环，等待调度 首先，Node不为每个用户开辟一个线程，所以非常极端的选择了单线程。单线程，要照顾所有的用户，那么就必须有非阻塞I/O，否则一个人的I/O就把别人、自己都阻塞了。一旦有非阻塞I/O，一个人如果I/O去了，就会放弃CPU的使用权，换成另一个人使用CPU（或者执行此人后面的语句）。所以CPU的利用率100%。第一个人I/O结束了，就要用事件来通知线程，执行回调函数。此时必须有事件环，就有一个排队调度机制。Node中有超过半数的C++代码，在搭建事件环。 1.2 适合开发什么善于I/O，不善于计算。因为Node.js最擅长的就是任务调度，如果你的业务有很多的CPU计算，实际上也相当于这个计算阻塞了这个单线程，就不适合Node开发。 用户表单收集 考试系统 聊天室 图文直播 提供JSON的API 1.3 简单的node服务器const http = require(&#39;http&#39;); //使用 require 指令来载入 http 模块，并将实例化的 HTTP 赋值给变量 http var server = http.createServer(function (request, response) &#123; // 发送 HTTP 头部 // HTTP 状态值: 200 : OK // 内容类型: text/plain response.writeHead(200, &#123;&#39;Content-Type&#39;: &#39;text/plain&#39;&#125;); // 发送响应数据 &quot;Hello World&quot; response.end(&#39;Hello World\\n&#39;); &#125;) server.listen(3000,&quot;127.0.0.1&quot;); 二、模块系统为了让Node.js的文件可以相互调用，Node.js提供了一个简单的模块系统。 不可能用一个js文件去写全部的业务。肯定要有MVC。 狭义的说，每一个JavaScript文件都是一个模块；而多个JavaScript文件之间可以相互require，他们共同实现了一个功能，他们整体对外，又称为一个广义上的模块。 Node.js中，一个JavaScript文件中定义的变量、函数，都只在这个文件内部有效。当需要从此JS文件外部引用这些变量、函数时，必须使用exports对象进行暴露。使用者要用require()命令引用这个JS文件。 foo.js文件中的代码： var msg = &quot;你好&quot;; exports.msg = msg; msg这个变量，是一个js文件内部才有作用域的变量。 如果别人想用这个变量，那么就要用exports进行暴露。 使用者： var foo = require(&quot;./test/foo.js&quot;); console.log(foo.msg); 使用者用foo来接收exports对象，也就是说，这里的foo变量，就是文件中的exports变量。 一个JavaScript文件，可以向外exports无数个变量、函数。但是require的时候，仅仅需要require这个JS文件一次。使用的它的变量、函数的时候，用点语法即可。所以，无形之中，增加了一个顶层命名空间。 var msg = &quot;你好&quot;; var info = &quot;呵呵&quot;; function showInfo()&#123; console.log(info); &#125; exports.msg = msg; exports.info = info; exports.showInfo = showInfo; Node中，js文件和js文件，就是被一个个exports和require构建成为网状的。 可以将一个JavaScript文件中，描述一个类。用 module.export = 构造函数名; 的方式向外暴露一个类(使用的时候需要一个new)。 也就是说，js文件和js文件之间有两种合作的模式： 1） 某一个js文件中，提供了函数，供别人使用。 只需要暴露函数就行了； exports.msg=msg; 2） 某一个js文件，描述了一个类。 module.exports = People; npm &amp;&amp; package.jsonnpm模块就是一些功能的封装，所以一些成熟的、经常使用的功能，都有人封装成为了模块。并且放到了社区中，供人免费下载。这个伟大的社区，叫做npm。 也是一个工具名字 node package management https://www.npmjs.com/ 用package.json来管理依赖。在cmd中，使用npm init可以初始化一个package.json文件，用回答问题的方式生成一个新的package.json文件。使用 npm install 将能安装package.json中的所有依赖。 1.http模块res里面使用的方法//引用http模块 var http = require(&quot;http&quot;); http.createServer(function(req,res)&#123; //设置头部 res.writeHead(200,&#123;&#39;Content-Type&#39;:&#39;text/html;charset=UTF8&#39;&#125;); res.write(&quot;&lt;h1&gt;写页面内容&lt;/h1&gt;&quot;); //res.write()不能写在end之后。 res.end(); &#125;) 2.url模块var http = require(&quot;http&quot;); var url = require(&quot;url&quot;); var server = http.createServer(function(req,res)&#123; //url.parse()可以将一个完整的URL地址，分为很多部分： //host、port、pathname、path、query var pathname = url.parse(req.url).pathname; //url.parse()如果第二个参数是true，那么就可以将所有的查询变为对象 //就可以直接打点得到这个参数 var query = url.parse(req.url,true).query; //直接打点得到这个参数 var age = query.age; console.log(&quot;pathname:&quot; + pathname); console.log(&quot;query:&quot; + query); console.log(&quot;age:&quot; + age); res.end(); &#125;); server.listen(3000,&quot;127.0.0.1&quot;); 3.文件系统fs模块 文件系统（fs 模块）模块中的方法均有异步和同步版本，例如读取文件内容的函数有异步的 fs.readFile() 和同步的 fs.readFileSync()。 fs.mkdir(path[, mode], callback)异步创建文件夹 fs.rmdir(path, callback)删除文件夹 fs.readFile(path[, options], callback)读取文件 var fs = require(&quot;fs&quot;); // 异步读取 fs.readFile(&#39;input.txt&#39;, function (err, data) &#123; if (err) &#123; return console.error(err); &#125; console.log(&quot;异步读取: &quot; + data.toString()); &#125;); // 同步读取 var data = fs.readFileSync(&#39;input.txt&#39;); console.log(&quot;同步读取: &quot; + data.toString()); console.log(&quot;程序执行完毕。&quot;); require()中的路径，是从当前这个js文件出发，找到别人。而fs是从命令提示符找到别人。所以，桌面上有一个a.js， test文件夹中有b.js、c.js、1.txt a要引用b： var b = require(“./test/b.js”); b要引用c： var b = require(“./c.js”); 但是，fs等其他的模块用到路径的时候，都是相对于cmd命令光标所在位置。所以，在b.js中想读1.txt文件，推荐用绝对路径： fs.readFile(__dirname + &quot;/1.txt&quot;,function(err,data)&#123; if(err) &#123; throw err; &#125; console.log(data.toString()); &#125;); 4.path模块具体使用请查看文档，这里不深入说明了。","categories":[],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"http://example.com/tags/Node-js/"}]},{"title":"小小相册","slug":"Github/xiaoxiao","date":"2018-06-24T12:21:10.000Z","updated":"2018-06-24T12:21:10.000Z","comments":true,"path":"2018/06/24/Github/xiaoxiao/","link":"","permalink":"http://example.com/2018/06/24/Github/xiaoxiao/","excerpt":"","text":"小小相册MVCcontroller ：控制器、路由 —package.json 是controller下的入口文件，方便引包 —router.js models : 功能模型 —file.js 操作文件模型的文件node_modules ：node资源 public ：存放前端资源 views ：前端模板页面 uploads ：后端资源：存放上传的内容 app.js ：启动文件 思路： 实现路由功能 编写获取所有目录和文件的方法，并封装成模型。 文件的上传 第一阶段：router.js exports.showIndex = function(req,res)&#123; res.send(&quot;我是首页&quot;); &#125; exports.showAlbum = function(req,res)&#123; res.send(&quot;我是相册&quot;); &#125; app.js var express = require(&quot;express&quot;); var app = express(); var router = require(&quot;./controller&quot;); app.set(&quot;view engine&quot;,&quot;ejs&quot;);//设置模板引擎 //路由中间件 app.use(express.static(&quot;./public&quot;)); app.get(&quot;/&quot;,router.showIndex); app.get(&quot;/:albumName&quot;,router.showAlbum); app.listen(3000); 第二阶段file.js var fs = require(&quot;fs&quot;);//引入fs模块，文件系统是专门处理文件读取写的 // 获取所有的相册文件 exports.getAllAlbums = function(callback)&#123; fs.readdir(&quot;./uploads&quot;,function(err,files)&#123; if(err)&#123; callback(&quot;没有找到uploads文件&quot;,null); &#125; var allAlbums = []; (function iterator(i)&#123; if(i = files.length)&#123; //变量结束 callback(null,allAlbums); return; &#125; fs.stat(&quot;./uploads/&quot;+files[i],function(err,stats)&#123; if(err)&#123; callback(&quot;找不到文件&quot;+files[i],null); &#125; if(stats.isDirectory())&#123; allAlbums.push(files[i]); &#125; iterator(i+1); &#125;); &#125;)(0); &#125;); &#125; //通过文件名，找到图片 exports.getAllImagesByAlbumName = function(albumName,callback)&#123; fs.readdir(&quot;./uploads/&quot; + albumName,function(err,files)&#123; if(err)&#123; callback(&quot;没有找到uploads文件&quot;,null); return; &#125; var allImages = []; (function iterator(i)&#123; if(i == files.length)&#123; //遍历结束 console.log(allImages); callback(null,allImages); return; &#125; fs.stat(&quot;./uploads/&quot; + albumName + &quot;/&quot; + files[i],function(err,stats)&#123; if(err)&#123; callback(&quot;找不到文件&quot; + files[i] , null); return; &#125; if(stats.isFile())&#123; allImages.push(files[i]); &#125; iterator(i + 1); &#125;); &#125;)(0); &#125;); &#125; 读取目录的语法格式：fs.readdir(path[, options], callback) callback - 回调函数，回调函数带有两个参数err, files，err 为错误信息，files 为 目录下的文件数组列表。 通过异步模式获取文件信息的语法格式：fs.stat(path, callback) callback - 回调函数，带有两个参数如：(err, stats), stats 是 fs.Stats 对象。 stats.isDirectory() 如果是目录返回 true，否则返回 false。 stats.isFile() 如果是文件返回 true，否则返回 false。 router.js var file = require(&quot;../models/file.js&quot;); //首页 exports.showIndex = function(req,res)&#123; file.getAllAlbums(function(err,allAlbums)&#123; if(err)&#123; next(); return; &#125; res.render(&quot;index&quot;,&#123; &quot;albums&quot; : allAlbums &#125;); &#125;) &#125; //相册页 exports.showAlbum = function(req,res)&#123; //遍历相册中的所有图片 var albumName = req.params.albumName; //具体业务交给model file.getAllImagesByAlbumName(albumName,function(err,imagesArray)&#123; if(err)&#123; next(); //交给下面的中间件 return; &#125; res.render(&quot;album&quot;,&#123; &quot;albumname&quot; : albumName, &quot;images&quot; : imagesArray &#125;); &#125;); &#125; // GET /user/tj req.params.name // =&gt; &quot;tj&quot; // example.com/users?sort=desc req.path // =&gt; &quot;/users&quot; res.render(view [, locals] [, callback]) 渲染一个视图，然后将渲染得到的HTML文档发送给客户端。 –locals，定义了视图本地参数属性的一个对象。 // 将呈现的视图发送到客户端 res.render(&#39;index&#39;); // 如果指定回调，则必须显式发送所呈现的HTML res.render(&#39;index&#39;, function(err, html) &#123; res.send(html); &#125;); // 将局部变量传给视图 res.render(&#39;user&#39;, &#123; name: &#39;Tobi&#39; &#125;, function(err, html) &#123; // ... &#125;); index.ejs模板引擎的部分内容 &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;row&quot;&gt; &lt;% for(var i = 0 ; i &lt; albums.length ; i++)&#123; %&gt; &lt;div class=&quot;col-xs-6 col-md-3&quot;&gt; &lt;a href=&quot;&lt;%= albums[i] %&gt;&quot; class=&quot;thumbnail&quot;&gt; &lt;img src=&quot;images/wjj.jpg&quot; alt=&quot;...&quot;&gt; &lt;/a&gt; &lt;h4&gt;&lt;%= albums[i] %&gt;&lt;/h4&gt; &lt;/div&gt; &lt;% &#125; %&gt; &lt;/div&gt; &lt;/div&gt;","categories":[],"tags":[{"name":"web开发","slug":"web开发","permalink":"http://example.com/tags/web%E5%BC%80%E5%8F%91/"}]},{"title":"Python 基本语法(一)","slug":"Github/python基本语法","date":"2018-06-10T16:00:00.000Z","updated":"2018-06-11T08:46:54.000Z","comments":true,"path":"2018/06/11/Github/python基本语法/","link":"","permalink":"http://example.com/2018/06/11/Github/python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/","excerpt":"","text":"1.注释单行注释和多行注释 # 我是注释 # 多行注释是三个单引号或者双引号 &quot;&quot;&quot; 我是多行注释，可以写很多很多行的功能说明 这就是我牛X指出 哈哈哈。。。 &quot;&quot;&quot; python 中文支持 #coding=utf-8 # 或者 # -*- coding:utf-8 -*- 2.基本数据类型Python 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。 在 Python 中，变量就是变量，它没有类型，我们所说的”类型”是变量所指的内存中对象的类型。 num1 = 100 #num1就是一个变量，就好一个小菜篮子 num2 = 87 #num2也是一个变量 result = num1 + num2 #把num1和num2这两个&quot;菜篮子&quot;中的数据进行累加，然后放到 result变量中 print(result) 3.标识符和关键字什么是标示符？开发人员在程序中自定义的一些符号和名称 标示符是自己定义的,如变量名 、函数名等 标示符由字母、下划线和数字组成，且数字不能开头 python中的标识符是区分大小写的 命名规则：见名知意 关键字 python一些具有特殊功能的标示符，这就是所谓的关键字 关键字，是python已经使用的了，所以不允许开发者自己定义和关键字相同的名字的标示符 例如： and as assert break class continue def del elif else except exec finally for from global if in import is lambda not or pass print raise return try while with yield 查看关键字 #导入模块 import keyword //打印关键字列表 print(keyword.kwlist) 4.输出和输入1.基本输出 # 打印提示 print(&#39;hello world&#39;) print(&#39;给我的卡---印度语，你好的意思&#39;) 2.格式化输出在程序中，看到了%这样的操作符，这就是Python中格式化输出。 age = 18 name = &quot;xiaohua&quot; print(&quot;我的姓名是%s,年龄是%d&quot;%(name,age)) Name Academy %c 字符 %s 通过str() 字符串转换来格式化 %i 有符号十进制整数 %d 有符号十进制整数 %u 无符号十进制整数 %o 八进制整数 %x 十六进制整数（小写字母） %X 十六进制整数（大写字母） %e 索引符号（小写’e’） %E 索引符号（大写“E”） %f 浮点实数 %g ％f和％e 的简写 %G ％f和％E的简写 3.换行输出在输出的时候，如果有\\n那么，此时\\n后的内容会在另外一行显示 print(&quot;1234567890\\n-------&quot;) # 一行显示1234567890，另外一行显示------- 4.raw_input() 和 input()python3 没有raw_input()函数，只有input() 并且 python3中的input与python2中的raw_input()功能一样 5.运算符算术运算符 “ + - * / // % ** “ 赋值运算符 = 复合赋值运算符 += -= /= … 6.数据类型的转换 函数 说明 int(x [,base ]) 将x转换为一个整数 long(x [,base ]) 将x转换为一个长整数 float(x ) 将x转换到一个浮点数 complex(real [,imag ]) 创建一个复数 str(x ) 将对象 x 转换为字符串 repr(x ) 将对象 x 转换为表达式字符串 eval(str ) 用来计算在字符串中的有效Python表达式,并返回一个对象 tuple(s ) 将序列 s 转换为一个元组 list(s ) 将序列 s 转换为一个列表 chr(x ) 将一个整数转换为一个字符 unichr(x ) 将一个整数转换为Unicode字符 ord(x ) 将一个字符转换为它的整数值 hex(x ) 将一个整数转换为一个十六进制字符串 oct(x ) 将一个整数转换为一个八进制字符串 7.判断语句1. if判断语句 age = 30 print &quot;------if判断开始------&quot; if age&gt;=18: print &quot;我已经成年了&quot; print &quot;------if判断结束------&quot; # if嵌套的应用 chePiao = 1 # 用1代表有车票，0代表没有车票 daoLenght = 9 # 刀子的长度，单位为cm if chePiao == 1: print(&quot;有车票，可以进站&quot;) if daoLenght &lt; 10: print(&quot;通过安检&quot;) print(&quot;终于可以见到Ta了，美滋滋~~~&quot;) else: print(&quot;没有通过安检&quot;) print(&quot;刀子的长度超过规定，等待警察处理...&quot;) else: print(&quot;没有车票，不能进站&quot;) print(&quot;亲爱的，那就下次见了，一票难求啊~~~~(&gt;_&lt;)~~~~&quot;) 2. if-else chePiao = 1 # 用1代表有车票，0代表没有车票 if chePiao == 1: print(&quot;有车票，可以上火车&quot;) print(&quot;终于可以见到Ta了，美滋滋~~~&quot;) else: print(&quot;没有车票，不能上车&quot;) print(&quot;亲爱的，那就下次见了，一票难求啊~~~~(&gt;_&lt;)~~~~&quot;) 3. elif当xxx1时做事情1，当xxx2时做事情2，当xxx3时做事情3，那该怎么实现呢？ score = 77 if score&gt;=90 and score&lt;=100: print(&#39;本次考试，等级为A&#39;) elif score&gt;=80 and score&lt;90: print(&#39;本次考试，等级为B&#39;) elif score&gt;=70 and score&lt;80: print(&#39;本次考试，等级为C&#39;) elif score&gt;=60 and score&lt;70: print(&#39;本次考试，等级为D&#39;) elif score&gt;=0 and score&lt;60: print(&#39;本次考试，等级为E&#39;) 可以和else一起使用 if 性别为男性: 输出男性的特征 ... elif 性别为女性: 输出女性的特征 ... else: 第三种性别的特征 ... 8.循环语句1. while i = 0 while i&lt;5: print(&quot;当前是第%d次执行循环&quot;%(i+1)) print(&quot;i=%d&quot;%i) i+=1 实例2 #encoding=utf-8 i = 1 sum = 0 while i&lt;=100: sum = sum + i i += 1 print(&quot;1~100的累积和为:%d&quot;%sum) while嵌套 i = 1 while i&lt;=9: j=1 while j&lt;=i: print(&quot;%d*%d=%-2d &quot;%(j,i,i*j),end=&#39;&#39;) j+=1 print(&#39;\\n&#39;) i+=1 2. for循环在Python中 for循环可以遍历任何序列的项目，如一个列表或者一个字符串等。 name = &#39;dongGe&#39; for x in name: print(x) 3.break 和 continuebreak的作用：用来结束整个循环 continue的作用：用来结束本次循环，紧接着执行下一次的循环 break/continue只能用在循环中，除此以外不能单独使用 break/continue在嵌套循环中，只对最近的一层循环起作用 9.字符串、列表、元组、字典1. 字符串双引号或者单引号中的数据，就是字符串 name = &#39;xiaoming&#39; position = &#39;讲师&#39; address = &#39;北京市昌平区建材城西路金燕龙办公楼1层&#39; print(&#39;--------------------------------------------------&#39;) print(&quot;姓名：%s&quot;%name) print(&quot;职位：%s&quot;%position) print(&quot;公司地址：%s&quot;%address) print(&#39;--------------------------------------------------&#39;) 结果： -------------------------------------------------- 姓名： xiaoming 职位： 讲师 公司地址： 北京市昌平区建材城西路金燕龙办公楼1层 -------------------------------------------------- 2.下标和切片1. 下标索引所谓“下标”，就是编号，就好比超市中的存储柜的编号，通过这个编号就能找到相应的存储空间【也就是索引】 2. 切片切片的语法：[起始:结束:步长] name = &#39;abcdef&#39; print(name[0:3]) # 取 下标0~2 的字符 # 结果为abc print(name[3:5]) # 取 下标为3、4 的字符 # 结果为de print(name[2:]) # 取 下标为2开始到最后的字符 字符串中的常见操作这部分，单独一片文章介绍","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"}]},{"title":"Mysql-数据查询语言DQL","slug":"Github/数据查询语言","date":"2017-10-06T05:38:25.000Z","updated":"2017-10-06T05:38:25.000Z","comments":true,"path":"2017/10/06/Github/数据查询语言/","link":"","permalink":"http://example.com/2017/10/06/Github/%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80/","excerpt":"","text":"基本查询select [all | distinct] 字段或表达式列表 [from子句] [where子句] [group by子句] [having子句] [order by子句] [limit子句]； [all | distinct] 用于设定所select出来的数据是否允许出现重复行（完全相同的数据行） all：允许出现——默认不写就是All（允许的）。distinct：不允许出现——就是所谓的“消除重复行”。 from子句 就是指定数据的来源，其实就是“表”，可以是一个表名，也可以是多个表——多表查询了。 where子句 一个概念：where子句，相当于php或js中的if条件语句：其最终结果就是布尔值（true/false） where子句前面必须有from子句。虽然他们2者都可以省略，但有from可以没有where，而有where必须有from。 between语法： XX between 值1 and 值2；含义：字段XX的值在值1和值2之间（含），相当于：XX &gt;=值1 and XX&lt;=值2； in语法： XX in (值1，值2，…….)；含义：XX等于其中所列出的任何一个值都算成立，相当于：XX = 值1 or XX = 值2 or XX = 值2注意：其中的值1通常是“直接值”，但也可以是后面要学习的“查询结果值” like语法（模糊查找）： 语法形式： ＸＸ like ‘要查找字符’;说明：1，like语法（模糊查找）用于对字符类型的字段进行字符匹配查找2，要查找的字符中，有2个特殊含义的字符：2.1: % 其含义是：代表任意个数的任意字符2.2: _ 其含义是：代表1个的任意字符2.3：这里的字符，都是指现实中可见的一个“符号”，而不是字节。3，实际应用中的模糊查找，通常都是这样：like ‘%关键字%’； [group by子句] 形式：group by 字段1 排序方式1，字段2 排序方式2， …..通常都只进行一个字段的分组。含义：什么叫分组？就是将数据以某个字段的值为“依据”，分到不同的“组别”里。分组的结果通常：1，数据结果只能是“组”——没有数据本身的个体2，数据结果就可能“丢失”很多特性，比如没有性别，身高，姓名，等等。3，实际上，结果中通常只剩下“组”作为整体的信息：首先是该组的本身依据值，另外，这几个可能的值：组内成员的个数，组内某些字段的最大值，最小值，平均值，总和值。其他字段，通常就不能用了。4，如果是2个字段或以上分组，则其实是相当于对前一分组的组内，再进行后一依据的分组。上述说明的结果，其实是反映在ｓｅｌｅｃｔ语句中，就是select的“取出项”（输出项）就基本只剩下以上信息了， select pinpai,count(*) as 数量,max(price) as 最大值, avg(price) as 平均值 from product group by pinpai; 可见，在分组查询中，基本都依赖于一下几个函数（聚合函数，统计函数）：count(): 统计一组中的数量，通常用“”做参数max(字段名)：获取该字段中在该组中的最大值。min(字段名)：获取该字段中在该组中的最小值。sum(字段名)：获取该字段中在该组中的总和。avg(字段名)：获取该字段中在该组中的平均值。 [having子句] having子句其实概念跟where子句完全一样：where是针对表的字段的值进行“条件判断”having是只针对groupby之后的“组”数据进行条件判断，即其不能使用：字段名&gt;10但可以使用：count(字段名)&gt;10， 或 max(price) &gt; 2000, 但如果字段是分组依据，也可以。当然，通常也可以使用select中的有效的字段别名，比如： select count(*) as f1 , max(f1) as f2 from tab1 group by f3 having f1 &gt; 5 and f2 &lt; 1000; [order by子句] 形式：order by 排序字段1 [排序方式]， 排序字段2 [排序方式]， …..说明：对前面取得的数据（含from子句，where子句，group子句，having子句的所有结果）来指定按某个字段的大小进行排列（排序），排序只有2种方式：正序： ASC（默认值），可以省略倒序： DESC [limit子句] 形式：limit [起始行号start]， 要取出的行数num说明：表示将前面取得的数据并前面排好之后（如果有），对之指定取得“局部连续的若干条”数据。起始行号ｓｔａｒｔ：第一行的行号为０， 可以省略，则为默认行号（０）。要取得的行数：如果结果集中从指定的行号开始到最后没有这么多行，则就只取到最后。 此子句非常有用——主要用于网页上最常见的一个需求（现象）：分页。分页原理：分页的前提：人为指定每页显示的条数，$pageSize = 3;显示（取得）第1页数据：select * from 表名 limit 0, $pageSize;显示（取得）第2页数据：select * from 表名 limit 3, $pageSize;显示（取得）第3页数据：select * from 表名 limit 6, $pageSize; 连接查询连接就是指两个或2个以上的表（数据源）“连接起来成为一个数据源”。 基本形式 from 表1 [连接方式] join 表2 [on 连接条件]； 连接的结果可以当作一个“表”来使用。常用有以下几种连接方式： 交叉连接 实际上，交叉连接是将两个表不设定任何条件的连接结果。交叉连接通常也被叫做“笛卡尔积”——数学上可能比较多。语法：from 表1 [cross] join 表2 ; //可见交叉连接只是没有on条件而已。cross这个词也可以省略，还可以使用inner这个词代替 内连接 语法：from 表1 [inner] join 表2 on 表1.字段1=表2.字段2；含义：找出（过滤）在交叉连接的结果表中的表1的字段1的值等于表2的字段2的值的那些行。 左［外］连接 形式：from 表1 left [outer] join 表2 on 连接条件。说明：1，这里，left是关键字。2，连接条件跟内连接一样。3，含义是：内连接的结果基础上，加上左边表中所有不符合连接条件的数据，相应本应放右边表的字段的位置就自动补为“null”值。 右［外］连接右连接跟左连接恰恰相反：形式：from 表1 right [outer] join 表2 on 连接条件。说明：1，这里，right是关键字。2，连接条件跟内连接一样。3，含义是：在内连接的结果基础上，加上右边表中所有不符合连接条件的数据，相应本应放左边表的字段的位置就自动补为“null”值。 全［外］连接形式：from 表1 full [outer] join 表2 on 连接条件；说明：1，含义：其实是左右连接的“并集”（消除重复项），即内连接的结果，加上左表中不满足条件的所有行（右边对应补null），再加上，右表中不满足条件的所有行（左边对应补null）。2，mysql中其实不认识全[外]连接语法，即mysql这个软件本身不支持全连接的语法。3，此概念在其他数据库有的存在，了解就可以。 子查询一个查询，通常就是一个select语句（即出现一次select关键字）但，如果在一个select查询语句中，又出现了select查询语句，此时就称后者为“子查询”，前者就是“主查询” 形式： selelct 字段或表达式或(子查询1) [as 别名] from 表名或(子查询2) where 字段或表达式或(子查询3) 的条件判断 注意：每个位置所放置的子查询结果，应该符合该位置的数据需求。通常：子查询1应该是一个“数据结果”。子查询2可以是“任意结果”，此位置的查询结果，通常作为数据源，可以给一个别名子查询3可以是一个数据或一列数据甚至是一行数据 使用in子查询 in的基本语法形式为：where 操作数 in (值1，值2， ….）则in子查询就是：where 操作数 in ( 列子查询 ）；含义：表示该操作数（字段值） 等于 该子查询的其中任意一个只，就算满足条件。 更多资料，请查阅笔记11","categories":[],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/tags/mysql/"}]},{"title":"Mysql-数据操作语言","slug":"Github/数据操作语言","date":"2017-10-06T05:26:40.000Z","updated":"2017-10-06T05:26:40.000Z","comments":true,"path":"2017/10/06/Github/数据操作语言/","link":"","permalink":"http://example.com/2017/10/06/Github/%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%E8%AF%AD%E8%A8%80/","excerpt":"","text":"数据插入3中形式形式1：insert into 表名（字段名1，字段名2，….）values (值a1，值a2， …..)， (值b1，值b2， …..)，….. ； 形式2：insert into 表名1（字段名1，字段名2，….）select 字段名1，字段名2，…. from 表名2； 形式3：insert into 表名 set 字段名1=值1，字段名2=值2， ….. ； 解释： 1，形式1和形式2，可以一次插入多条数据；2，不管哪种形式，在“字段”和“值”之间，都有“一一对应”关系。3，值的形式，通常是这样：数字直接写，字符串和时间加单引号，但如果是函数值，则不能加引号4，观念问题：不管那种形式，都要理解为：插入数据的单位是“行”；5，有的字段通常无需插入数据，此时不应该出现该字段名：auto_increment， timestamp， 删除数据delete from 表名 [where条件] [order排序] [limit限定]； 解释： 1，观念问题：删除也是应该以理解为“以行为单位”进行的。2，删除语句中，where条件通常都要写上，因为如果不写，则就删除了所有数据，应用中极少如此。3，order排序子句和limit限定子句，应用中通常不需要。 3.1 order排序子句用于设定删除数据的先后顺序。 3.2 limit限定子句用于限定在设定的顺序情况下删除指定的某些行。 类似删除语句truncate：truncate [table] 表名；用于直接删除整个表（结构）并重新创建该表。1，删除整个表（数据和结构都没有了）2，重新创建该表（全新表）。3，跟delete 语句不带where条件，有什么区别？主要影响的是类似：auto_increment这种类型的字段值：truncate结果会重新计算，delete还能继续增长。 修改数据解释： 1， 观念问题：仍然要理解为更新是以“行”为单位进行的，虽然可以指定只更新其中的部分字段。2， where条件子句，在应用中，同样几乎都必须有，否则很可能就失去意义，类似delete3，order排序子句通常不需要，用于将要更新的数据指定更新的顺序。4，limit限定子句通常不需要，用于将要更新的数据的指定顺序去更新部分（局部）数据，比如：前500行。5，字段的值可以是表达式，或直接值，或函数，如果是直接值，同样遵循insert语句中的值的写法。 案例：复制表： #复制表方法1： create table tab2 like tab1; //复制结构了 insert into tab2 select * from tab1; //复制数据 ##这种方法可以比较完整。 #复制表方法2： create table tab2 select * from tab1; //同时复制结构和数据 ##这种方法可能会丢一些结构信息，比如：索引，约束，自增长属性","categories":[],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/tags/mysql/"}]},{"title":"Mysql","slug":"Github/mysql 复习笔记","date":"2017-10-06T03:44:20.000Z","updated":"2017-10-06T03:44:20.000Z","comments":true,"path":"2017/10/06/Github/mysql 复习笔记/","link":"","permalink":"http://example.com/2017/10/06/Github/mysql%20%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/","excerpt":"","text":"mysql 复习笔记[toc] 基础知识1.数据库的连接$ mysql&gt; mysql -u -p -h -u 用户名-p 密码-h host主机 2:库级知识2.1 显示数据库: show databases;2.2 选择数据库: use dbname;2.3 创建数据库: create database dbname charset utf8;2.3 删除数据库: drop database dbname; 3: 表级操作:3.1 显示库下面的表 show tables; 3.2 查看表的结构: desc tableName; 3.3 查看表的创建过程: show create table tableName; 3.4 创建表: create table tbName ( 列名称1 列类型 [列参数] [not null default ], ....列2... .... 列名称N 列类型 [列参数] [not null default ] )engine myisam/innodb charset utf8/gbk 3.4的例子: create table user ( id int auto_increment, name varchar(20) not null default &#39;&#39;, age tinyint unsigned not null default 0, index id (id) )engine=innodb charset=utf8; 注:innodb是表引擎,也可以是myisam或其他,但最常用的是myisam和innodb,charset 常用的有utf8,gbk; 3.5 修改表 #增改字段： alter table 表名 add [column] 字段名 字段类型 字段属性; #删： alter table 表名 drop 字段名; #改： alter table 表名 change 原字段名 新字段名 新字段类型 新字段属性; 3.6 删除表： drop table 表名 4.视图视图可以看作是一个“临时存储的数据所构成的表”（非真实表），其实本质上只是一个select语句。 视图创建 create view 视图名 [（列名1，列名2，…）] as 一条复杂select语句；","categories":[],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/tags/mysql/"}]},{"title":"php基础知识——数组","slug":"Github/数组","date":"2017-10-06T03:22:59.000Z","updated":"2017-10-06T03:22:59.000Z","comments":true,"path":"2017/10/06/Github/数组/","link":"","permalink":"http://example.com/2017/10/06/Github/%E6%95%B0%E7%BB%84/","excerpt":"","text":"数组基础php 中，数组的下标可以是整数，或字符串 php中，数组的元素顺序不是由下标决定，而是由其“加入”的顺序决定。 $arr1 = array(元素1，元素2，。。。。。 ); array(1, 5, 1.1, “abc”, true, false); //可以存储任何数据，此时为“默认下标”， array(2=&gt;1, 5=&gt;5, 3=&gt;1.1, 7=&gt;“abc”, 0=&gt;true);//下标可以任意设定（无需顺序，无需连续） array(2=&gt;1, 5, 1=&gt;1.1, “abc”, 0=&gt;true)//可以加下标，也可以不加（默认下标）, //下标分别是：2,3,1,4,0 //默认下标规则：前面已经用过的最大数字下标+1 array(2=&gt;1, ‘dd’=&gt;5, 1=&gt;1.1, “abc”, 0=&gt;true)//混合下标，同样遵循默认下标规则 array(-2=&gt;1, ‘dd’=&gt;5, 1.1, “abc”, true); //负数下标不算在整数下标中，而只当作字符下标 //则最好3项的下标是：0, 1, 2 array(2.7=&gt;1, ‘dd’=&gt;5, 1=&gt;1.1, “abc”, 0=&gt;true)；//浮点数下标为自动转换为整数，且直接抹掉小数 array(“2.7” =&gt;1, ‘dd’=&gt;5, “11”=&gt;1.1, “abc”, true)//纯数字字符串下标，当作数字看待， //则此时下标为：2, ‘dd’, 11, 12, 13 array(2=&gt;1, ‘dd’=&gt;5, true=&gt;1.1, “abc”, false=&gt;true)//布尔值当下标，则true为1，false为0； array(2=&gt;1, ‘dd’=&gt;5, 2=&gt;1.1, “abc”, true)//如果下标跟前面的重复，则单纯覆盖前面同名下标的值 //此时相当于为：array(2=&gt;1.1, ‘dd’=&gt;5, “abc”, true) 其他形式； $arr1[] = 1; $arr1[] = 5; $arr1[] = 1.1; //直接在变量后面使用[]，就成为数组，并依次赋值。 。。。。 $arr2[‘aa’] = 1; $arr2[‘bbbcc’] = 5; 数组遍历foreach( $arr as [ $key =&gt; ] $value ) //$key可以称为键变量，$value可以称为值变量。{//这里就可以对$key 和 $value 进行所有可能的操作——因为他们就是一个变量//$key 代表每次取得元素的下标，可能是数字，也可以能是字符串//$value 代表每次取得元素的值，可能是各种类型。//此循环结构会从数组的第一项一直遍历循环到最后一项，然后结束。} for+next+reset遍历数组 $max = reset($arr1);///重置数组，即：数组指针初始化，这里，返回的数据被“丢弃”了。 $len = count($arr1); for($i = 0;$i &lt; $len; ++$i)&#123; $k = key($arr1); //下标 $v = current($arr1); //取值 if($v &gt;$max)&#123; $max = $v; &#125; next($arr1); //移动指针到下一个 &#125; echo &quot;最大值为：$max&quot;;","categories":[],"tags":[{"name":"php","slug":"php","permalink":"http://example.com/tags/php/"}]},{"title":"php基础知识——函数","slug":"Github/函数","date":"2017-10-06T03:05:34.000Z","updated":"2017-10-06T03:05:34.000Z","comments":true,"path":"2017/10/06/Github/函数/","link":"","permalink":"http://example.com/2017/10/06/Github/%E5%87%BD%E6%95%B0/","excerpt":"","text":"函数函数定义形式： function getName (形参1, 形参2 , ...) &#123; //函数体 &#125; 函数的调用： getName() 函数的默认值 在定义一个函数的时候，在形式参数的位置，可以给形式参数设定“默认值” function getArea($r,$PI = 3.14)&#123; $result = $PI * $r *$r; return $result; &#125; $a1 = getArea(3,3.1416); $a2 = getArea(5); //没有给第二参数的时候，就触发默认值 我们还有一种特殊的处理函数参数的用法：自由参数数量 定义时可以不给定形参，但调用时，却又可以给定任何个数的实参。 函数的返回值 通常来说，一个函数中，使用return语句，并其后带一个数据（直接数据，变量数据，表达式结果数据）则该函数就会返回该数据到“调用的位置” 局部访问全局变量的特定语法 在局部范围内，使用global关键字对全局变量进行一次“声明”,就可以使用了。 语法：global $变量名 也可以用$GLOBALS来操作全局变量 $GLOBALS[$变量名] 有关函数的系统函数function_exists():判断某个函数是否被定义过，返回布尔值 func_get_arg(n):获得一个函数的第n个实参值（n从0开始） 有关函数的编程思想递归思想递归思想的一个基本形式：在一个函数中，有至少一条语句，又回去调用该函数自身。 递归思想的总结： 为了解决一个“大”问题，根据现实逻辑，该问题可以通过比它小一级的同类问题的答案而“轻松得到”。小一级的问题又可以通过更小一级的问题而轻松得到，依次类推——直到“最小问题”，通常就是一个已知数（答案）。 递推思想（迭代思想）从最小一级问题出发，逐级往大方向找出大一级的问题的答案，直到最大问题（最终问题）的答案。","categories":[],"tags":[{"name":"php","slug":"php","permalink":"http://example.com/tags/php/"}]},{"title":"php基础知识——文件加载和错误处理","slug":"Github/文件加载","date":"2017-10-01T00:26:54.000Z","updated":"2017-10-01T00:26:54.000Z","comments":true,"path":"2017/10/01/Github/文件加载/","link":"","permalink":"http://example.com/2017/10/01/Github/%E6%96%87%E4%BB%B6%E5%8A%A0%E8%BD%BD/","excerpt":"","text":"文件加载include include_once require require_once 他们的本质是一样的，都是用于加载/引入/包含/载入一个外部文件到当前php代码中来。 include ‘文件路径’; include (‘文件路径’); 如果加载文件时，只给出文件名，而没有给出路径，则此时有其内部找到文件的规则。 首先会在php.ini配置文件中的include_path设定中找。 include_path = &#39;c:\\php\\includes;c:\\itcast\\class;&#39; 可设定多个目录，可用分号分开，系统会按顺序依次找要载入的文件 也可以在脚本中设定： set_include_path(&#39;c:/itcast/class/bj-php-34/day2&#39;); include &#39;4get_1.php&#39;; 也可以用get_include_path()来获取系统的include_path值 如果找不到，接着会在当前执行的网页文件所在目录查找。 区别 include_once 和 include 区别require_once 和 require 区别 都是前者能够保证不会被重复加载如果包含文件不存在，引用失败时，include发出警告，并执行后续代码，require直接终止 return关键字以前，我们只在函数中出现return关键字，其作用是：结束函数，并可以返回数据； 被载入的文件中的return关键字也具有同样的作用。 错误处理错误分类 语法错误：程序没法运行，直接提示语法错误 运行时错误：只有程序运行到某行，或某些特定情形下运行才会发生的错误 逻辑错误：程序从头到尾运行都没有发生（提示）错误，但运行计算的结果是错误的。 我们主要处理的是运行时错误。 系统错误： E_ERROR：系统严重错误一发生，程序立即停止执行。该错误一般希望马上。 E_WARNING：系统警告一发生，提示错误，并继续执行。通常该错误希望能够在“下一工作日”去处理掉（解决）。 E_PARSE：语法错误一发生，提示错误，而且代码完全不会运行——在运行之前先检查语法。 E_NOTICE：系统提示一发生，提示错误，并继续执行。发个邮件通知一下，自己安排时间有空去解决。","categories":[],"tags":[{"name":"php","slug":"php","permalink":"http://example.com/tags/php/"}]},{"title":"php基础知识——流程控制","slug":"Github/php流程控制","date":"2017-09-29T09:12:28.000Z","updated":"2017-09-29T09:12:28.000Z","comments":true,"path":"2017/09/29/Github/php流程控制/","link":"","permalink":"http://example.com/2017/09/29/Github/php%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/","excerpt":"","text":"流程控制分支结构if语句，if else语句，if else if 语句 switch语句 switch($v1)&#123; case 状态值1: //进程1 [brear;] case 状态值2: //进程2 [brear;] [default : //默认进程 ] &#125; 应用中，break通常都会用上；只有一些特殊数据或需求的时候，可能不用。 循环结构while循环 $v1 = 10; //初始化循环变量 while（ $v1〉4 )&#123; //判断循环变量的条件 //语句快 echo “abc”; $v1--； &#125; do while循环先执行一次循环体，然后判断条件，如果条件满足，则继续回去执行循环体，然后再判断，依次类推。 do&#123; //循环体 &#125;while(条件判断); for循环 循环的中断这里指的中断，适用于所有循环。 循环的中断有两种情况：break中断： 终止整个循环语句，而跳出循环进入到循环结构之后的语句 continue中断：终止当前正在执行的循环体中的语句，而进入到循环的下一次过程里（改变，判断） 中断语句的语法如下：break $n; //$n是一个大于等于1的整数，表示要中断的循环层数；continew $n;所谓循环层数，是指一个循环中又嵌套了循环的情况。以当前循环为“起点”，表示第一层，往上（外）数，就是2，3，4层。。。。 控制脚本执行进度die（“输出内容”）含义：终止php脚本的运行（后续代码不再执行），并输出其中的内容也可以：die(); die;exit是die的同义词。die是一种“语言结构”，并非函数，可以不写括号。ｅｃｈｏ也是一种语言结构，而非函数： echo (“abc”); echo “abc”; echo “abc”, “def”, 123; sleep($n);含义：让php脚本停止$n秒，然后继续执行。","categories":[],"tags":[{"name":"php","slug":"php","permalink":"http://example.com/tags/php/"}]},{"title":"php基础知识——数据类型与运算符","slug":"Github/php数据类型","date":"2017-09-29T08:59:29.000Z","updated":"2017-09-29T08:59:29.000Z","comments":true,"path":"2017/09/29/Github/php数据类型/","link":"","permalink":"http://example.com/2017/09/29/Github/php%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/","excerpt":"","text":"数据类型整体划分 标量类型：int,float,string 复合类型：array,object 特殊类型：null,resouce 整型 int进制转换： decbin() 10-&gt;2 decoct() 10-&gt;8 dechex() 10-&gt;16 bindec() 2-&gt;10 octdec() 8-&gt;10 hexdec() 16-&gt;10 浮点类型 float, double , real字符串类型 string布尔类型 bool数组类型 array标识一系列数据的“有序排列”的集合体。 php中，数组的下标可以使用整数或字符串。 数组中还可以存储数组，就可以构成“多维数组”的形式。 数组遍历在ｐｈｐ中有专门语法： foreach( 数组名 as 下标变量$k =&gt; 值变量$v1 ）&#123; //这里就是循环体，就可以使用两个变量$k, $v1 &#125; 对象类型 objectphp中的对象，通常都是指自己定义的对象，纯语法的。 &lt;?php //定义一个”人“类 class Person&#123; public $name = &quot;小孩&quot;; public $age = 18; public function introMe()&#123; echo &quot;我叫&quot;.$this-&gt;name,&quot;今年&quot;.$this-&gt;age; &#125; &#125; ?&gt; 资源类型 resource含义：基本上都是指对外部数据的引用。(数据非php代码生成的） 不是PHP语言通过某种语法形式“创造”的数据，而是外部本来就有该数据（比如数据库，文件，图片），PHP只是通过某种语法（或方式）来对其进行某些操作。 类型转换is_XXX类型()系列函数：判断某个数据是否是某种类型，例如： is_int(), is_float(), is_numeric()，is_bool(), is_array(), is_scalar() 运算符算术运算符 有以下几个：+ - * / % ++ – 前加加和后加加的区别： • 前++：先完成变量的递增运算，再取得该变量的值参与别的运算。• 后++：先将原来变量的值临时存储，再将变量值递增，最后再将临时存储的值参与别的运算。• 推论1：如果独立语句中进行自加运算，前自加后自加没有区别 。• 推论2：如果前自加后自加是放在别的语句中，则会有所区别。• 推论3： 前加加比后加加效率略高（在循环中建议使用前加加）。 比较运算符 包括：&gt; &gt;= &lt; &lt;= ==松散相等 != ===严格相等 !== 逻辑运算符 &amp;&amp; || ！ 字符串运算符 “.”会将运算符两边的数据转换为字符串。 三目运算符 $result 1= $score &gt;= 60 ? “及格” ： “不及格”; //结果是“及格”","categories":[],"tags":[{"name":"php","slug":"php","permalink":"http://example.com/tags/php/"}]},{"title":"php基础知识——变量和常量","slug":"Github/php基础知识","date":"2017-09-29T08:34:31.000Z","updated":"2017-09-29T08:34:31.000Z","comments":true,"path":"2017/09/29/Github/php基础知识/","link":"","permalink":"http://example.com/2017/09/29/Github/php%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/","excerpt":"","text":"php基础知识基本语法语法环境 &lt;?php ...这里是php代码 语句结束符，用分号 ?&gt; 区分大小写 变量名区分大小写 常量通常使用大写【区分大小写，可设置不区分】 函数名不区分大小写 系统中的关键字不区分大小写，比如if,else,for 变量变量是包含了一个名称和一个值得“标识符” 变量必须以$开头，后面紧跟变量名。 命名规则 只能使用数字、下划线、大小写字母，且数字不能开头，不能喝关键字重名。 变量的使用 定义：直接给变量赋值，就是定义；不支持js那种‘定义但不赋值’的语法。【第一次给一个变量赋值，就算定义变量】 判断变量是否存在 isset() ,存在返回true; 修改：第二次及以后给一个变量赋值，就是修改变量值。 删除：unset(),就是断开变量名和数据之间的“引用关系” 变量间的两种传值方式 值传递：默认 引用传值：变量2拷贝了变量1的数据，当数据发生变化，两个变量都发生变化。 可变变量 &lt;?php $v1 = &quot;abc&quot;; $abc = 10; echo $$v1; //可变变量，即等于10 ?&gt; 预定义变量预定义变量又叫超全局变量，超全局变量都是数组，包括： $_GET, $_POST, $_SERVER, $_REQUEST, $GLOBALS, $_COOKIE, $_SESSION, ……….（大约10个） $_GET 其作用是：用户填写表单数据，以get方式提交数据给页面abc.php，并以name属性来标识数据。 var_dump($_GET)用于输出一个变量的“最完整信息”，这里是在试图输出$_GET这个‘数组’ $_POST 其作用是：用户填写表单数据，以post方式提交数据给页面abc.php，并以name属性来标识数据。 $_REQUEST 其作用是：$_GET 和 $_POST 综合，都可以取数据。 $_SERVER 该变量存储了服务器端或客户端的一些请求信息或设置信息，比较多，而且不同的服务器和不同的请求页面，其数据项都可能不同。 REMOTE_ADDR 用户的IP地址 SERVER_ADDR 服务器端的IP地址 SERVER_NAME 服务器名 DOCUMENT_ROOT 站点绝对路径 PHP_SELF 当前网页的文件路径 QUERY_STRING 表示一个get请求的整体字符串,如 http://www.abc.com/abc.php?a=5&amp;b=10连接地址中的“a=5&amp;b=10” $GLOBALS 似乎是一个多余的变量：它只是把我们自己定义的所有全局变量存储到该数组中：变量名就是该数组的下标（键名），变量值就是对应的值。 常量使用形式：define(“常量名”,”常量值”) 或者：const 常量名 = 常量值 ; 使用constant(“常量名”)函数获取常量值。 常量值是不可以改变，不可以销毁，具有超全局作用域，常量只能存储标量类型：int,float,string,bool defined()判读常量是否存在 预定义常量php语言中，预定了大量的常量，可以直接使用。如，M_PI(圆周率) 魔术常量魔术常量其实是一种值会随着一定的条件（环境）而变化的常量，形式和使用上是常量，但实际上，其值会改变。 例如： &lt;?php __DIR__（当前网页文件的所在目录），__FILE__（当前网页文件） ?&gt;","categories":[],"tags":[{"name":"php","slug":"php","permalink":"http://example.com/tags/php/"}]},{"title":"Web开发中常用到的单词","slug":"Github/web_word","date":"2017-09-28T11:08:59.000Z","updated":"2017-09-28T11:08:59.000Z","comments":true,"path":"2017/09/28/Github/web_word/","link":"","permalink":"http://example.com/2017/09/28/Github/web_word/","excerpt":"","text":"对于一些不常用的单词，需要熟悉熟悉。 NodecreateServer(function(req,res){})原生Node中，用于创建服务器的。req表示发送请求,res表示响应 res.writeHead(200,{“Content-type”:”text/html;charset=UTF8”})设置HTTP头部，状态码200，文件类型html，字符集utf8 listen用于监听 require和exports模块系统中用于加载和暴露的单词。 ExpressmongoDB","categories":[],"tags":[{"name":"web开发","slug":"web开发","permalink":"http://example.com/tags/web%E5%BC%80%E5%8F%91/"}]},{"title":"Express 框架","slug":"Github/Express 框架","date":"2017-08-29T13:42:14.000Z","updated":"2017-08-29T13:42:14.000Z","comments":true,"path":"2017/08/29/Github/Express 框架/","link":"","permalink":"http://example.com/2017/08/29/Github/Express%20%E6%A1%86%E6%9E%B6/","excerpt":"","text":"Express 框架[toc] Express框架是后台的Node框架，所以和jQuery、zepto、yui、bootstrap都不一个东西。 Express在后台的受欢迎的程度，和jQuery一样，就是企业的事实上的标准。 原生Node开发，会发现有很多问题。比如： 呈递静态页面很不方便，需要处理每个HTTP请求，还要考虑304问题 路由处理代码不直观清晰，需要写很多正则表达式和字符串函数 不能集中精力写业务，要考虑很多其他的东西 EXPRESS的哲学是在你的想法和服务器之间充当薄薄的一层。这并不意味着他不够健壮，或者没有足够的有用特性，而是尽量少干预你，让你充分表达自己的思想，同时提供一些有用的东西。 安装Express框架，就是使用npm的命令。 npm install --save express –save参数，表示自动修改package.json文件，自动添加依赖项。 npm init 生成package.json文件 服务器一个简单的路由 //在node_moudules里引入express模块 var express = require(&quot;express&quot;); var app = express(); app.get(&quot;/&quot;,function(req,res)&#123; res.send(&quot;你好！&quot;); &#125;); app.get(&quot;/haha&quot;,function(req,res)&#123; res.send(&quot;这是haha页面&quot;); &#125;); app.listen(3000); 当用get请求访问一个网址的时候，做什么事情： app.get(&quot;网址&quot;,function(req,res)&#123; &#125;); 当用post访问一个网址的时候，做什么事情： app.post(&quot;网址&quot;,function(req,res)&#123; &#125;); 如果想处理这个网址的任何method的请求，那么写all app.all(&quot;/&quot;,function()&#123; &#125;); 这里的网址，不分大小写，也就是说，你路由是 app.get(&quot;/AAb&quot;,function(req,res)&#123; res.send(&quot;你好&quot;); &#125;); 实际上小写的访问也行。 所有的GET参数，? 后面的都已经被忽略。 锚点#也被忽略你路由到/a ， 实际/a?id=2&amp;sex=nan 也能被处理。 正则表达式可以被使用。正则表达式中，未知部分用圆括号分组，然后可以用req.params[0]、[1]得到。req.params类数组对象。 app.get(/^\\/student\\/([\\d]&#123;10&#125;)$/,function(req,res)&#123; res.send(&quot;学生信息，学号&quot; + req.params[0]); &#125;); 冒号是更推荐的写法。 app.get(&quot;/student/:id&quot;,function(req,res)&#123; var id = req.params[&quot;id&quot;]; var reg= /^[\\d]&#123;6&#125;$/; //正则验证 if(reg.test(id))&#123; res.send(id); &#125;else&#123; res.send(&quot;请检查格式&quot;); &#125; &#125;); 静态文件伺服能力var express = require(&quot;express&quot;); var app = express(); app.use(express.static(&quot;./public&quot;)); app.listen(3000); 模板引擎js部分 var express = require(&quot;express&quot;); var app = express(); //设置模板引擎 app.set(&quot;view engine&quot;,&quot;ejs&quot;); app.get(&quot;/&quot;,function(req,res)&#123; res.render(&quot;haha&quot;,&#123; &quot;news&quot;:[&quot;新闻1&quot;,&quot;新闻2&quot;,&quot;新闻3&quot;] &#125;); &#125;); app.listen(3000); haha.ejs模板 &lt;ul&gt; &lt;% for(var i=0 ; i&lt; news.length ; i++)&#123; %&gt; &lt;li&gt;&lt;% news[i] %&gt;&lt;/li&gt; &lt;% &#125; %&gt; &lt;/ul&gt; 中间件如果我的的get、post回调函数中，没有next参数，那么就匹配上第一个路由，就不会往下匹配了。如果想往下匹配的话，那么需要写next() app.get(&quot;/&quot;,function(req,res,next)&#123; console.log(&quot;1&quot;); next(); &#125;); app.get(&quot;/&quot;,function(req,res)&#123; console.log(&quot;2&quot;); &#125;); 下面两个路由，感觉没有关系： app.get(&quot;/:username/:id&quot;,function(req,res)&#123; console.log(&quot;1&quot;); res.send(&quot;用户信息&quot; + req.params.username); &#125;); app.get(&quot;/admin/login&quot;,function(req,res)&#123; console.log(&quot;2&quot;); res.send(&quot;管理员登录&quot;); &#125;); 但是实际上冲突了，因为admin可以当做用户名 login可以当做id。 解决方法1：交换位置。 也就是说，express中所有的路由（中间件）的顺序至关重要。匹配上第一个，就不会往下匹配了。 具体的往上写，抽象的往下写。 解决方法2： app.get(&quot;/:username/:id&quot;,function(req,res,next)&#123; var username = req.params.username; //检索数据库，如果username不存在，那么next() if(检索数据库)&#123; console.log(&quot;1&quot;); res.send(&quot;用户信息&quot;); &#125;else&#123; next(); &#125; &#125;); app.get(&quot;/admin/login&quot;,function(req,res)&#123; console.log(&quot;2&quot;); res.send(&quot;管理员登录&quot;); &#125;); 路由get、post这些东西，就是中间件，中间件讲究顺序，匹配上第一个之后，就不会往后匹配了。next函数才能够继续往后匹配。 app.use()也是一个中间件。与get、post不同的是，他的网址不是精确匹配的。而是能够有小文件夹拓展的。比如网址： http://127.0.0.1:3000/admin/aa/bb/cc/dd app.use(&quot;/admin&quot;,function(req,res)&#123; res.write(req.originalUrl + &quot;\\n&quot;); // /admin/aa/bb/cc/dd res.write(req.baseUrl + &quot;\\n&quot;); // /admin res.write(req.path + &quot;\\n&quot;); // /aa/bb/cc/dd res.end(&quot;你好&quot;); &#125;); 如果写一个///当你不写路径的时候，实际上就相当于”/“，就是所有网址 app.use(function(req,res,next)&#123; console.log(new Date()); next(); &#125;); app.use()就给了我们增加一些特定功能的便利场所。实际上app.use()的东西，基本上都从第三方能得到。 GET请求和POST请求的参数GET请求的参数在URL中，在原生Node中，需要使用url模块来识别参数字符串。在Express中，不需要使用url模块了。可以直接使用req.query对象。 POST请求在express中不能直接获得，必须使用body-parser模块。使用后，将可以用req.body得到参数。但是如果表单中含有文件上传，那么还是需要使用formidable模块。 Node中全是回调函数，所以我们自己封装的函数，里面如果有异步的方法，比如I/O，那么就要用回调函数的方法封装。 错误： res.reder(&quot;index&quot;,&#123; &quot;name&quot; : student.getDetailById(234234).name &#125;); 正确: student.getDetailByXueHao(234234,function(detail)&#123; res.render(&quot;index&quot;,&#123; &quot;name&quot; : detail.name &#125;) &#125;);","categories":[],"tags":[{"name":"Web开发","slug":"Web开发","permalink":"http://example.com/tags/Web%E5%BC%80%E5%8F%91/"}]},{"title":"移动端布局","slug":"Github/移动端布局","date":"2017-07-14T13:20:36.000Z","updated":"2017-07-14T13:20:36.000Z","comments":true,"path":"2017/07/14/Github/移动端布局/","link":"","permalink":"http://example.com/2017/07/14/Github/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B8%83%E5%B1%80/","excerpt":"","text":"移动端布局1.拉勾网的做法如果html5要适应各种分辨率的移动设备，应该使用rem这样的尺寸单位，同时给出了一段针对各个分辨率范围在html上设置font-size的代码： html&#123;font-size:10px&#125; @media screen and (min-width:321px) and (max-width:375px)&#123;html&#123;font-size:11px&#125;&#125; @media screen and (min-width:376px) and (max-width:414px)&#123;html&#123;font-size:12px&#125;&#125; @media screen and (min-width:415px) and (max-width:639px)&#123;html&#123;font-size:15px&#125;&#125; @media screen and (min-width:640px) and (max-width:719px)&#123;html&#123;font-size:20px&#125;&#125; @media screen and (min-width:720px) and (max-width:749px)&#123;html&#123;font-size:22.5px&#125;&#125; @media screen and (min-width:750px) and (max-width:799px)&#123;html&#123;font-size:23.5px&#125;&#125; @media screen and (min-width:800px)&#123;html&#123;font-size:25px&#125;&#125; 在实际项目中，把与元素尺寸有关的css，如width,height,line-height,margin,padding等都以rem作为单位，这样页面在不同设备下就能保持一致的网页布局。举例来说，网页有一个.item类，设置了width为3.4rem，该类在不同分辨率下对应的实际宽度如下： 321px &lt;= device-width &lt;= 375px，font-size:11px ---&gt; .item的width：34px 376px &lt;= device-width &lt;= 414px，font-size:12px ---&gt; .item的width：37.4px 415px &lt;= device-width &lt;= 639px，font-size:15px ---&gt; .item的width：40.8px 640px &lt;= device-width &lt;= 719px，font-size:20px ---&gt; .item的width：51px 720px &lt;= device-width &lt;= 749px，font-size:22.5px ---&gt; .item的width：76.5px 750px &lt;= device-width &lt;= 799px，font-size:23.5px ---&gt; .item的width：79.8999999px 800px &lt;= device-width ，font-size:25px ---&gt; .item的width：85px 以上代码乍看没啥问题，响应式设计不就应该是这么干的吗？但是从工作量和复杂度方面来考虑，它有以下几个不足： （1）.item类在所有设备下的width都是3.4rem，但在不同分辨率下的实际像素是不一样的，所以在有些分辨率下，width的界面效果不一定合适，有可能太宽，有可能太窄，这时候就要对width进行调整，那么就需要针对.item写媒介查询的代码，为该分辨率重新设计一个rem值。然而，这里有7种媒介查询的情况，css又有很多跟尺寸相关的属性，哪个属性在哪个分辨率范围不合适都是不定的，最后会导致要写很多的媒介查询才能适配所有设备，而且在写的时候rem都得根据某个分辨率html的font-size去算，这个计算可不见得每次都那么容易，比如40px / 23.5px，这个rem值口算不出来吧！由此可见这其中的麻烦有多少。 （2）以上代码中给出的7个范围下的font-size不一定是合适的，这7个范围也不一定合适，实际有可能不需要这么多，所以找出这些个范围，以及每个范围最合适的font-size也很麻烦 （3）设计稿都是以分辨率来标明尺寸的，前端在根据设计稿里各个元素的像素尺寸转换为rem时，该以哪个font-size为准呢？这需要去写才能知道。 弹性布局关键元素高宽和位置都不变，只有容器元素在做伸缩变换。对于这类app，记住一个开发原则就好：文字流式，控件弹性，图片等比缩放。以图描述： 这个规则是一套基本的适配规则，对于这种简单app来说已经足够，同时它也是后面要说的rem布局的基础。 2.网易的做法网易页面上html的font-size不是预先通过媒介查询在css里定义好的，而是通过js计算出来的，所以当分辨率发生变化时，html的font-size就会变。 这个deviceWidth通过document.documentElement.clientWidth就能取到了，所以当页面的dom ready后，做的第一件事情就是： var deviceWidth = document.documentElement.clientWidth; //当deviceWidth大于设计稿的横向分辨率时，html的font-size始终等于横向分辨率/body元素宽： if(deviceWidth &gt; 640) deviceWidth = 640; document.documentElement.style.fontSize = deviceWidth / 6.4 + &#39;px&#39;; 视口要如下设置: &lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1,maximum-scale=1, minimum-scale=1&quot;&gt; 更多参考 http://www.cnblogs.com/HCJJ/p/6347242.htmlhttp://blog.csdn.net/aiolos1111/article/details/51967744http://www.cnblogs.com/2050/p/3877280.html","categories":[],"tags":[{"name":"web开发","slug":"web开发","permalink":"http://example.com/tags/web%E5%BC%80%E5%8F%91/"}]},{"title":"CSS + CSS3","slug":"Github/css + css3","date":"2017-04-19T10:07:55.000Z","updated":"2017-04-19T10:07:55.000Z","comments":true,"path":"2017/04/19/Github/css + css3/","link":"","permalink":"http://example.com/2017/04/19/Github/css%20+%20css3/","excerpt":"","text":"[toc] css + css3动画 CSS 指层叠样式表 (Cascading Style Sheets),样式定义如何显示 HTML 元素 插入图片 rem - 以 元素中的 font-size 为基准， rem 将比例化页面中的标题和段落变得很容易。保持 中默认的 font-size 并且为其它的元素设置 rem 是一种非常棒的方法。 1.reset.css/* KISSY CSS Reset 理念：清除和重置是紧密不可分的 特色：1.适应中文 2.基于最新主流浏览器 维护：玉伯(lifesinger@gmail.com), 正淳(ragecarrier@gmail.com) */ /* 清除内外边距 */ body, h1, h2, h3, h4, h5, h6, hr, p, blockquote, /* structural elements 结构元素 */ dl, dt, dd, ul, ol, li, /* list elements 列表元素 */ pre, /* text formatting elements 文本格式元素 */ fieldset, lengend, button, input, textarea, /* form elements 表单元素 */ th, td &#123; /* table elements 表格元素 */ margin: 0; padding: 0; &#125; /* 设置默认字体 */ body, button, input, select, textarea &#123; /* for ie */ /*font: 12px/1 Tahoma, Helvetica, Arial, &quot;宋体&quot;, sans-serif;*/ font: 12px/1 Tahoma, Helvetica, Arial, &quot;\\5b8b\\4f53&quot;, sans-serif; /* 用 ascii 字符表示，使得在任何编码下都无问题 */ &#125; h1 &#123; font-size: 18px; /* 18px / 12px = 1.5 */ &#125; h2 &#123; font-size: 16px; &#125; h3 &#123; font-size: 14px; &#125; h4, h5, h6 &#123; font-size: 100%; &#125; address, cite, dfn, em, var &#123; font-style: normal; &#125; /* 将斜体扶正 */ code, kbd, pre, samp, tt &#123; font-family: &quot;Courier New&quot;, Courier, monospace; &#125; /* 统一等宽字体 */ small &#123; font-size: 12px; &#125; /* 小于 12px 的中文很难阅读，让 small 正常化 */ /* 重置列表元素 */ ul, ol &#123; list-style: none; &#125; /* 重置文本格式元素 */ a &#123; text-decoration: none; &#125; a:hover &#123; text-decoration: underline; &#125; abbr[title], acronym[title] &#123; /* 注：1.ie6 不支持 abbr; 2.这里用了属性选择符，ie6 下无效果 */ border-bottom: 1px dotted; cursor: help; &#125; q:before, q:after &#123; content: &#39;&#39;; &#125; /* 重置表单元素 */ legend &#123; color: #000; &#125; /* for ie6 */ fieldset, img &#123; border: none; &#125; /* img 搭车：让链接里的 img 无边框 */ /* 注：optgroup 无法扶正 */ button, input, select, textarea &#123; font-size: 100%; /* 使得表单元素在 ie 下能继承字体大小 */ &#125; /* 重置表格元素 */ table &#123; border-collapse: collapse; border-spacing: 0; &#125; /* 重置 hr */ hr &#123; border: none; height: 1px; &#125; /* 让非ie浏览器默认也显示垂直滚动条，防止因滚动条引起的闪烁 */ html &#123; overflow-y: scroll; &#125; CSScss尺寸width,min-width,max-heightheight,min-height,max-heightline-height css背景/*背景色*/ body &#123;background-color:#b0c4de;&#125; /*背景图像*/ body &#123;background-image:url(&#39;bgdesert.jpg&#39;);&#125; /*水平平铺*/ body &#123; background-image:url(&#39;gradient2.png&#39;); background-repeat:repeat-x; &#125; /*不平铺*/ background-repeat:no-repeat; /*简写属性*/ body &#123;background:#ffffff url(&#39;img_tree.png&#39;) no-repeat right top;&#125; 字体样式normal正常， italtic斜体 p.normal &#123;font-style:normal;&#125; p.italic &#123;font-style:italic;&#125; /*指定字体的粗细。*/ font-weight /*简写*/ p.ex2 &#123; font:italic bold 12px/30px Georgia,serif; &#125; 列表样式ul.a &#123;list-style-type: circle;&#125;/*空心圆*/ ul.b &#123;list-style-type: square;&#125;/*实心方块*/ ol.c &#123;list-style-type: upper-roman;&#125;/*罗马字符*/ ol.d &#123;list-style-type: lower-alpha;&#125;/*小写字母*/ /*将图象设置为列表项标志。*/ ul &#123; list-style-image: url(&#39;sqpurple.gif&#39;); &#125; css表格border-collapse 属性设置表格的边框是否被折叠成一个单一的边框或隔开： table &#123; /*一个非常快速且简单的去除双边框的方法*/ border-collapse:collapse; &#125; table,th, td &#123; border: 1px solid black; &#125; css盒子模型插入图片 边框 dotted:定义一个点线边框 dashed: 定义一个虚线边框 solid: 定义实线边框border:5px solid red; 隐藏元素display:none或visibility:hidden display:block;块元素 display:inline;内联元素 定位position: relative || fixed || absolute CSS3圆角div &#123;border-radius:25px;&#125; 盒阴影div &#123;box-shadow: 10px 10px 5px #888888;&#125; 文本阴影h1 &#123; text-shadow: 5px 5px 5px #FF0000; &#125; CSS3边界图片div &#123; border-image:url(border.png) 30 30 round; -webkit-border-image:url(border.png) 30 30 round; /* Safari 5 and older */ -o-border-image:url(border.png) 30 30 round; /* Opera */ &#125; CSS3 线性渐变/*从上到下*/ #grad &#123; background: -webkit-linear-gradient(red, blue); /* Safari 5.1 - 6.0 */ background: -o-linear-gradient(red, blue); /* Opera 11.1 - 12.0 */ background: -moz-linear-gradient(red, blue); /* Firefox 3.6 - 15 */ background: linear-gradient(red, blue); /* 标准的语法 */ &#125; /*从左到右*/ #grad &#123; background: -webkit-linear-gradient(left, red , blue); /* Safari 5.1 - 6.0 */ background: -o-linear-gradient(right, red, blue); /* Opera 11.1 - 12.0 */ background: -moz-linear-gradient(right, red, blue); /* Firefox 3.6 - 15 */ background: linear-gradient(to right, red , blue); /* 标准的语法 */ &#125; /*从左到右的线性渐变，带有透明度*/ #grad &#123; background: -webkit-linear-gradient(left,rgba(255,0,0,0),rgba(255,0,0,1)); /* Safari 5.1 - 6 */ background: -o-linear-gradient(right,rgba(255,0,0,0),rgba(255,0,0,1)); /* Opera 11.1 - 12*/ background: -moz-linear-gradient(right,rgba(255,0,0,0),rgba(255,0,0,1)); /* Firefox 3.6 - 15*/ background: linear-gradient(to right, rgba(255,0,0,0), rgba(255,0,0,1)); /* 标准的语法 */ &#125; CSS3 径向渐变#grad &#123; background: -webkit-radial-gradient(red 5%, green 15%, blue 60%); /* Safari 5.1 - 6.0 */ background: -o-radial-gradient(red 5%, green 15%, blue 60%); /* Opera 11.6 - 12.0 */ background: -moz-radial-gradient(red 5%, green 15%, blue 60%); /* Firefox 3.6 - 15 */ background: radial-gradient(red 5%, green 15%, blue 60%); /* 标准的语法 */ &#125; /*形状为圆形的径向渐变：*/ #grad &#123; background: -webkit-radial-gradient(circle, red, yellow, green); /* Safari 5.1 - 6.0 */ background: -o-radial-gradient(circle, red, yellow, green); /* Opera 11.6 - 12.0 */ background: -moz-radial-gradient(circle, red, yellow, green); /* Firefox 3.6 - 15 */ background: radial-gradient(circle, red, yellow, green); /* 标准的语法 */ &#125; CSS3 2D转换 rotate()方法，在一个给定度数顺时针旋转的元素。负值是允许的，这样是元素逆时针旋转。 translate()方法，根据左(X轴)和顶部(Y轴)位置给定的参数，从当前元素位置移动。 scale()方法，该元素增加或减少的大小，取决于宽度（X轴）和高度（Y轴）的参数： transform: rotate(30deg); transform: translate(50px,100px); transform: scale(2,3); CSS3 3D转换 rotateX()方法，围绕其在一个给定度数X轴旋转的元素。 rotateY()方法，围绕其在一个给定度数Y轴旋转的元素。 transform: rotateX(120deg); transform: rotateY(130deg); 过渡div &#123; transition: width 2s; -webkit-transition: width 2s; /* Safari */ &#125; div:hover &#123; width:300px; &#125; div2&#123; -webkit-transition: transition:all 5s ease 1s;//所以属性，5秒过渡，匀速，延迟1秒 transition-property://过渡属性，如width transition-timing-function: //过渡类型： linear:线性过渡。等同于贝塞尔曲线（0.0,0.0,1.0,1.0） ease:平滑过渡。（0.25,0.1,0.25,1.0） ease-in:由慢到快(0.42,0,1.0,1.0) ease-out:由快到慢(0,0,0.58,1.0) ease-in-out:由慢到快再到慢。(0.42,0,0.58,1.0) transition-delay: /*一个贝塞尔曲线例子：*/ -webkit-transition:all 1s cublic-bezier(.27,-0.49,0,0.94);//这个写在过渡开始的位置。 &#125; 贝塞尔曲线生成器：http://cubic-bezier.com/#.27,-0.49,0,.94 animation/* animation */ /* 淡入 */ .a-fadein&#123; -webkit-animation-name:fadein; -moz-animation-name:fadein; -ms-animation-name:fadein; animation-name:fadein; &#125; /* define */ /* 淡入 */ @-webkit-keyframes fadein&#123; 0%&#123;opacity:0;&#125; 100%&#123;opacity:1;&#125; &#125; @-moz-keyframes fadein&#123; 0%&#123;opacity:0;&#125; 100%&#123;opacity:1;&#125; &#125; @-ms-keyframes fadein&#123; 0%&#123;opacity:0;&#125; 100%&#123;opacity:1;&#125; &#125; @keyframes fadein&#123; 0%&#123;opacity:0;&#125; 100%&#123;opacity:1;&#125; &#125; 原生的关键帧和动画的使用方法： .div&#123; animation:flash 1s ease 0.3s; &#125; @-webkit-keyframes flash&#123; 0%&#123;css代码&#125; 20%&#123;&#125; 100&#123;&#125; &#125; animate.css的使用 引入animate.css文件 在HTML文档中使用 &lt;div class=&quot;animated flipOutX&quot;&gt;example&lt;/div&gt; 在原生js中的使用 var divDom = document.getElementById(&#39;div&#39;); addClass(divDom,&#39;fadeInRightBig&#39;); function addClass(obj, cls)&#123; var obj_class = obj.className,//获取 class 内容. blank = (obj_class != &#39;&#39;) ? &#39; &#39; : &#39;&#39;;//判断获取到的 class 是否为空, 如果不为空在前面加个&#39;空格&#39;. added = obj_class + blank + cls;//组合原来的 class 和需要添加的 class. obj.className = added;//替换原来的 class. &#125; function removeClass(obj, cls)&#123; var obj_class = &#39; &#39;+obj.className+&#39; &#39;;//获取 class 内容, 并在首尾各加一个空格. ex) &#39;abc bcd&#39; -&gt; &#39; abc bcd &#39; obj_class = obj_class.replace(/(\\s+)/gi, &#39; &#39;),//将多余的空字符替换成一个空格. ex) &#39; abc bcd &#39; -&gt; &#39; abc bcd &#39; removed = obj_class.replace(&#39; &#39;+cls+&#39; &#39;, &#39; &#39;);//在原来的 class 替换掉首尾加了空格的 class. ex) &#39; abc bcd &#39; -&gt; &#39;bcd &#39; removed = removed.replace(/(^\\s+)|(\\s+$)/g, &#39;&#39;);//去掉首尾空格. ex) &#39;bcd &#39; -&gt; &#39;bcd&#39; obj.className = removed;//替换原来的 class. &#125; function hasClass(obj, cls)&#123; var obj_class = obj.className,//获取 class 内容. obj_class_lst = obj_class.split(/\\s+/);//通过split空字符将cls转换成数组. x = 0; for(x in obj_class_lst) &#123; if(obj_class_lst[x] == cls) &#123;//循环数组, 判断是否包含cls return true; &#125; &#125; return false; &#125; 在jQuery中的使用 $(&quot;#container&quot;).addClass(&quot;animated pulse&quot;); $(&quot;#container&quot;).addClass(&quot;animated bounce&quot;); $(&quot;#container&quot;).addClass(&quot;animated tada&quot;); $(&quot;#container&quot;).addClass(&quot;animated swing&quot;); $(&quot;#container&quot;).addClass(&quot;animated wobble&quot;); $(&quot;#container&quot;).addClass(&quot;animated flip&quot;); $(&quot;#container&quot;).addClass(&quot;animated flipInX&quot;); $(&quot;#container&quot;).addClass(&quot;animated flipOutX&quot;); $(&quot;#container&quot;).addClass(&quot;animated flipInY&quot;); $(&quot;#container&quot;).addClass(&quot;animated flipOutY&quot;); $(&quot;#container&quot;).addClass(&quot;animated fadeIn&quot;); $(&quot;#container&quot;).addClass(&quot;animated fadeInUp&quot;); $(&quot;#container&quot;).addClass(&quot;animated fadeInDown&quot;); $(&quot;#container&quot;).addClass(&quot;animated fadeInLeft&quot;); $(&quot;#container&quot;).addClass(&quot;animated fadeInRight&quot;); $(&quot;#container&quot;).addClass(&quot;animated fadeInUpBig&quot;); $(&quot;#container&quot;).addClass(&quot;animated fadeInDownBig&quot;); $(&quot;#container&quot;).addClass(&quot;animated fadeInLeftBig&quot;); $(&quot;#container&quot;).addClass(&quot;animated fadeInRightBig&quot;); $(&quot;#container&quot;).addClass(&quot;animated fadeOut&quot;); $(&quot;#container&quot;).addClass(&quot;animated fadeOutUp&quot;); $(&quot;#container&quot;).addClass(&quot;animated fadeOutDown&quot;); $(&quot;#container&quot;).addClass(&quot;animated fadeOutLeft&quot;); $(&quot;#container&quot;).addClass(&quot;animated fadeOutRight&quot;); $(&quot;#container&quot;).addClass(&quot;animated fadeOutUpBig&quot;); $(&quot;#container&quot;).addClass(&quot;animated fadeOutDownBig&quot;); $(&quot;#container&quot;).addClass(&quot;animated fadeOutLeftBig&quot;); $(&quot;#container&quot;).addClass(&quot;animated fadeOutRightBig&quot;); $(&quot;#container&quot;).addClass(&quot;animated bounceIn&quot;); $(&quot;#container&quot;).addClass(&quot;animated bounceInUp&quot;); $(&quot;#container&quot;).addClass(&quot;animated bounceInDown&quot;); $(&quot;#container&quot;).addClass(&quot;animated bounceInLeft&quot;); $(&quot;#container&quot;).addClass(&quot;animated bounceInRight&quot;); $(&quot;#container&quot;).addClass(&quot;animated bounceOut&quot;); $(&quot;#container&quot;).addClass(&quot;animated bounceOutUp&quot;); $(&quot;#container&quot;).addClass(&quot;animated bounceOutDown&quot;); $(&quot;#container&quot;).addClass(&quot;animated bounceOutLeft&quot;); $(&quot;#container&quot;).addClass(&quot;animated bounceOutRight&quot;); $(&quot;#container&quot;).addClass(&quot;animated rotateIn&quot;); $(&quot;#container&quot;).addClass(&quot;animated rotateInUpLeft&quot;); $(&quot;#container&quot;).addClass(&quot;animated rotateInDownLeft&quot;); $(&quot;#container&quot;).addClass(&quot;animated rotateInUpRight&quot;); $(&quot;#container&quot;).addClass(&quot;animated rotateInDownRight&quot;); $(&quot;#container&quot;).addClass(&quot;animated rotateOut&quot;); $(&quot;#container&quot;).addClass(&quot;animated rotateOutUpLeft&quot;); $(&quot;#container&quot;).addClass(&quot;animated rotateOutDownLeft&quot;); $(&quot;#container&quot;).addClass(&quot;animated rotateOutDownRight&quot;); $(&quot;#container&quot;).addClass(&quot;animated hinge&quot;); $(&quot;#container&quot;).addClass(&quot;animated rollIn&quot;); $(&quot;#container&quot;).addClass(&quot;animated rollOut&quot;); 参见更多的css3动画 media/* media */ /* 横屏 */ @media screen and (orientation:landscape)&#123; &#125; /* 竖屏 */ @media screen and (orientation:portrait)&#123; &#125; /* 窗口宽度&lt;960,设计宽度=768 */ @media screen and (max-width:959px)&#123; &#125; /* 窗口宽度&lt;768,设计宽度=640 */ @media screen and (max-width:767px)&#123; &#125; /* 窗口宽度&lt;640,设计宽度=480 */ @media screen and (max-width:639px)&#123; &#125; /* 窗口宽度&lt;480,设计宽度=320 */ @media screen and (max-width:479px)&#123; &#125; /* windows UI 贴靠 */ @media screen and (-ms-view-state:snapped)&#123; &#125; /* 打印 */ @media print&#123; &#125; CSS常用选择器选择符：1.元素选择符 通配选择符 *所有元素对象 类型选择符以文档语言对象类型作为选择符 id选择符以唯一标识符id属性作为选择符 class选择符以class名作为选择符 2.关系选择符 包含选择符 E F 子选择符 E&gt;F 相邻选择符 E+F 选择紧贴在E元素之后F元素。 兄弟选择符 E~F选择E元素所有兄弟元素F。 3.属性选择符div[class]&#123;height:100px;&#125;//E[att]选择具有att属性的E元素。 div[class=&#39;div&#39;]&#123;height:100px;&#125;//E[att=&quot;val&quot;]选择具有att属性,且属性值等于val的E元素。 E[att~=&quot;val&quot;]选择具有att属性且属性值为，用空格分隔的字词列表，其中一个等于val的E元素。 E[att^=&quot;val&quot;]属性值以val开头的字符串 E[att*=&quot;val&quot;]属性值以包含val的字符串 E[att$=&quot;val&quot;]属性值以val结尾的字符串 &lt;div class=&#39;div div2&#39;&gt; &lt;/div&gt; 4.伪类选择符 匹配父元素的第一个子元素E E:first-child{height:10px;} 匹配父元素的最后一个子元素E E:last-child 匹配父元素的第n个子元素E E:nth-child(n){xxx} ```E:nth-child(2n)//选取偶数标签,也可以是evenE:nth-child(2n-1)//选取奇数，2n-1可以是oddE:nth-child(3n+1)//自定义选取标签，3n+1表示“隔二取一” ``` 常用的命名：(1)页面结构容器: container页头：header内容：content/container页面主体：main页尾：footer导航：nav侧栏：sidebar栏目：column页面外围控制整体布局宽度：wrapper左右中：left right center (2)导航导航：nav主导航：mainbav子导航：subnav顶导航：topnav边导航：sidebar左导航：leftsidebar右导航：rightsidebar菜单：menu子菜单：submenu标题: title摘要: summary (3)功能标志：logo广告：banner登陆：login登录条：loginbar注册：regsiter搜索：search功能区：shop标题：title加入：joinus状态：status按钮：btn滚动：scroll标签页：tab文章列表：list提示信息：msg当前的: current小技巧：tips图标: icon注释：note指南：guild服务：service热点：hot新闻：news下载：download投票：vote合作伙伴：partner友情链接：link版权：copyright 常用class的命名：(1)颜色:使用颜色的名称或者16进制代码,如.red { color: red; }.f60 { color: #f60; }.ff8600 { color: #ff8600; } (2)字体大小,直接使用”font+字体大小”作为名称,如.font12px { font-size: 12px; }.font9pt {font-size: 9pt; } (3)对齐样式,使用对齐目标的英文名称,如.left { float:left; }.bottom { float:bottom; } (4)标题栏样式,使用”类别+功能”的方式命名,如.barnews { }.barproduct { }","categories":[],"tags":[{"name":"Web开发","slug":"Web开发","permalink":"http://example.com/tags/Web%E5%BC%80%E5%8F%91/"}]},{"title":"ECMAScript 6","slug":"Github/ECMAScript 6新功能","date":"2017-04-19T09:51:18.000Z","updated":"2017-04-19T09:51:18.000Z","comments":true,"path":"2017/04/19/Github/ECMAScript 6新功能/","link":"","permalink":"http://example.com/2017/04/19/Github/ECMAScript%206%E6%96%B0%E5%8A%9F%E8%83%BD/","excerpt":"","text":"let命令 块级作用域 const 命令 变量的解构赋值 字符串的扩展 数组的扩展 函数的扩展 对象表达式 class ECMAScript 6新功能1. let 命令 let不允许在相同作用域内，重复声明同一个变量。 声明一个块级变量{}，即大括号里的变量。外面是访问不到的。 for循环的计数器，就很合适使用let命令。 &lt;p&gt;&lt;/p&gt; &#123; let a = 10; var b = 1; &#125; a // ReferenceError: a is not defined. b // 1 /*2*/ for (let i = 0; i &lt; 10; i++) &#123;&#125; console.log(i); //ReferenceError: i is not defined 2. 块级作用域ES5 只有全局作用域和函数作用域，没有块级作用域，这带来很多不合理的场景。 ES6 允许块级作用域的任意嵌套。 内层作用域可以定义外层作用域的同名变量。 &#123;&#123;&#123;&#123;&#123;let insane = 'Hello World'&#125;&#125;&#125;&#125;&#125;; &#123;&#123;&#123;&#123; let insane = 'Hello World'; &#123;let insane = 'Hello World'&#125; &#125;&#125;&#125;&#125;; 在块级作用域能不能定义函数？考虑到环境导致的行为差异太大，应该避免在块级作用域内声明函数。如果确实需要，也应该写成函数表达式，而不是函数声明语句。 // 函数声明语句 &#123; let a = &#39;secret&#39;; function f() &#123; return a; &#125; &#125; // 函数表达式 &#123; let a = &#39;secret&#39;; let f = function () &#123; return a; &#125;; &#125; do 表达式本质上，块级作用域是一个语句，将多个操作封装在一起，没有返回值。 &#123; let t = f(); t = t * t + 1; &#125; 上面代码中，块级作用域将两个语句封装在一起。但是，在块级作用域以外，没有办法得到t的值，因为块级作用域不返回值，除非t是全局变量。 现在有一个提案，使得块级作用域可以变为表达式，也就是说可以返回值，办法就是在块级作用域之前加上do，使它变为do表达式。 let x = do &#123; let t = f(); t * t + 1; &#125;; 上面代码中，变量x会得到整个块级作用域的返回值。 3. const 命令const声明一个只读的常量。一旦声明，常量的值就不能改变。 const PI = 3.1415; PI // 3.1415 PI = 3; // TypeError: Assignment to constant variable. const实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址不得改动。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指针，const只能保证这个指针是固定的，至于它指向的数据结构是不是可变的，就完全不能控制了。因此，将一个对象声明为常量必须非常小心。 ES5 只有两种声明变量的方法：var命令和function命令。ES6除了添加let和const命令，后面章节还会提到，另外两种声明变量的方法：import命令和class命令。所以，ES6 一共有6种声明变量的方法。 顶层对象的属性顶层对象，在浏览器环境指的是window对象，在Node指的是global对象。ES5之中，顶层对象的属性与全局变量是等价的。 var a = 1; // 如果在Node的REPL环境，可以写成global.a // 或者采用通用方法，写成this.a window.a // 1 let b = 1; window.b // undefined 垫片库system.global模拟了这个提案，可以在所有环境拿到global。 // CommonJS的写法 var global = require(&#39;system.global&#39;)(); // ES6模块的写法 import getGlobal from &#39;system.global&#39;; const global = getGlobal(); 4. 变量的解构赋值4-1.数组的解构赋值ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。 以前，为变量赋值，只能直接指定值。 let a = 1; let b = 2; let c = 3; ES6允许写成下面这样。 let [a, b, c] = [1, 2, 3]; let [foo, [[bar], baz]] = [1, [[2], 3]]; foo // 1 bar // 2 baz // 3 let [ , , third] = [&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;]; third // &quot;baz&quot; let [x, , y] = [1, 2, 3]; x // 1 y // 3 //属于不完全解构，但是可以成功。 let [head, ...tail] = [1, 2, 3, 4]; head // 1 tail // [2, 3, 4] let [x, y, ...z] = [&#39;a&#39;]; x // &quot;a&quot; y // undefined z // [] 如果解构不成功，变量的值就等于undefined。解构赋值允许指定默认值 let [foo = true] = []; foo // true let [x, y = &#39;b&#39;] = [&#39;a&#39;]; // x=&#39;a&#39;, y=&#39;b&#39; let [x, y = &#39;b&#39;] = [&#39;a&#39;, undefined]; // x=&#39;a&#39;, y=&#39;b&#39; 注意，ES6 内部使用严格相等运算符（===），判断一个位置是否有值。所以，如果一个数组成员不严格等于undefined，默认值是不会生效的。 let [x = 1] = [undefined]; x // 1 let [x = 1] = [null]; x // null 上面代码中，如果一个数组成员是null，默认值就不会生效，因为null不严格等于undefined。 4-2.对象的解构赋值对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。 let &#123; foo, bar &#125; = &#123; foo: &quot;aaa&quot;, bar: &quot;bbb&quot; &#125;; foo // &quot;aaa&quot; bar // &quot;bbb&quot; let &#123; baz &#125; = &#123; foo: &quot;aaa&quot;, bar: &quot;bbb&quot; &#125;; baz // undefined 对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。 var &#123; foo: baz &#125; = &#123; foo: &#39;aaa&#39;, bar: &#39;bbb&#39; &#125;; baz // &quot;aaa&quot; let obj = &#123; first: &#39;hello&#39;, last: &#39;world&#39; &#125;; let &#123; first: f, last: l &#125; = obj; f // &#39;hello&#39; l // &#39;world&#39; first是匹配的模式，f才是变量。真正被赋值的是变量f，而不是模式first。 注意，采用这种写法时，变量的声明和赋值是一体的。对于let和const来说，变量不能重新声明，所以一旦赋值的变量以前声明过，就会报错。 let foo; let &#123;foo&#125; = &#123;foo: 1&#125;; // SyntaxError: Duplicate declaration &quot;foo&quot; let baz; let &#123;bar: baz&#125; = &#123;bar: 1&#125;; // SyntaxError: Duplicate declaration &quot;baz&quot; 和数组一样，解构也可以用于嵌套结构的对象。 let obj = &#123; p: [ &#39;Hello&#39;, &#123; y: &#39;World&#39; &#125; ] &#125;; let &#123; p: [x, &#123; y &#125;] &#125; = obj; x // &quot;Hello&quot; y // &quot;World&quot; 注意，这时p是模式，不是变量，因此不会被赋值。 对象的解构也可以指定默认值。 var &#123;x = 3&#125; = &#123;&#125;; x // 3 var &#123;x, y = 5&#125; = &#123;x: 1&#125;; x // 1 y // 5 var &#123;x:y = 3&#125; = &#123;&#125;; y // 3 var &#123;x:y = 3&#125; = &#123;x: 5&#125;; y // 5 var &#123; message: msg = &#39;Something went wrong&#39; &#125; = &#123;&#125;; msg // &quot;Something went wrong&quot; 默认值生效的条件是，对象的属性值严格等于undefined。 var &#123;x = 3&#125; = &#123;x: undefined&#125;; x // 3 var &#123;x = 3&#125; = &#123;x: null&#125;; x // null 上面代码中，如果x属性等于null，就不严格相等于undefined，导致默认值不会生效。 4-3.字符串的解构赋值字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象。 const [a, b, c, d, e] = &#39;hello&#39;; a // &quot;h&quot; b // &quot;e&quot; c // &quot;l&quot; d // &quot;l&quot; e // &quot;o&quot; //类似数组的对象都有一个length属性，因此还可以对这个属性解构赋值。 let &#123;length : len&#125; = &#39;hello&#39;; len // 5 4-4.数值和布尔值的解构赋值解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。 let &#123;toString: s&#125; = 123; s === Number.prototype.toString // true let &#123;toString: s&#125; = true; s === Boolean.prototype.toString // true 上面代码中，数值和布尔值的包装对象都有toString属性，因此变量s都能取到值。 解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象。由于undefined和null无法转为对象，所以对它们进行解构赋值，都会报错。 4-5.函数参数的解构赋值函数的参数也可以使用解构赋值。 function add([x, y])&#123; return x + y; &#125; add([1, 2]); // 3 上面代码中，函数add的参数表面上是一个数组，但在传入参数的那一刻，数组参数就被解构成变量x和y。对于函数内部的代码来说，它们能感受到的参数就是x和y。 函数参数的解构也可以使用默认值。 function move(&#123;x = 0, y = 0&#125; = &#123;&#125;) &#123; return [x, y]; &#125; move(&#123;x: 3, y: 8&#125;); // [3, 8] move(&#123;x: 3&#125;); // [3, 0] move(&#123;&#125;); // [0, 0] move(); // [0, 0] 上面代码中，函数move的参数是一个对象，通过对这个对象进行解构，得到变量x和y的值。如果解构失败，x和y等于默认值。 注意，下面的写法会得到不一样的结果。 function move(&#123;x, y&#125; = &#123; x: 0, y: 0 &#125;) &#123; return [x, y]; &#125; move(&#123;x: 3, y: 8&#125;); // [3, 8] move(&#123;x: 3&#125;); // [3, undefined] move(&#123;&#125;); // [undefined, undefined] move(); // [0, 0] 上面代码是为函数move的参数指定默认值，而不是为变量x和y指定默认值，所以会得到与前一种写法不同的结果。 undefined就会触发函数参数的默认值。 [1, undefined, 3].map((x = &#39;yes&#39;) =&gt; x); // [ 1, &#39;yes&#39;, 3 ] 因此，建议只要有可能，就不要在模式中放置圆括号。 4-7.用途 //（1）交换变量的值 let x = 1; let y = 2; [x, y] = [y, x]; //（2）从函数返回多个值 //函数只能返回一个值，如果要返回多个值，只能将它们放在数组或对象里返回。有了解构赋值，取出这些值就非常方便。 // 返回一个数组 function example() &#123; return [1, 2, 3]; &#125; let [a, b, c] = example(); // 返回一个对象 function example() &#123; return &#123; foo: 1, bar: 2 &#125;; &#125; let &#123; foo, bar &#125; = example(); //（3）函数参数的定义 // 参数是一组有次序的值 function f([x, y, z]) &#123; ... &#125; f([1, 2, 3]); // 参数是一组无次序的值 function f(&#123;x, y, z&#125;) &#123; ... &#125; f(&#123;z: 3, y: 2, x: 1&#125;); //（4）提取JSON数据 let jsonData = &#123; id: 42, status: &quot;OK&quot;, data: [867, 5309] &#125;; let &#123; id, status, data: number &#125; = jsonData; console.log(id, status, number); // 42, &quot;OK&quot;, [867, 5309] //（5）函数参数的默认值 jQuery.ajax = function (url, &#123; async = true, beforeSend = function () &#123;&#125;, cache = true, complete = function () &#123;&#125;, crossDomain = false, global = true, // ... more config &#125;) &#123; // ... do stuff &#125;; //（6）遍历Map结构 var map = new Map(); map.set(&#39;first&#39;, &#39;hello&#39;); map.set(&#39;second&#39;, &#39;world&#39;); for (let [key, value] of map) &#123; console.log(key + &quot; is &quot; + value); &#125; // first is hello // second is world // 获取键名 for (let [key] of map) &#123; // ... &#125; // 获取键值 for (let [,value] of map) &#123; // ... &#125; //7）输入模块的指定方法 //加载模块时，往往需要指定输入哪些方法。解构赋值使得输入语句非常清晰。 const &#123; SourceMapConsumer, SourceNode &#125; = require(&quot;source-map&quot;); 5. 字符串的扩展5.1字符串的Unicode 表示法Javascript六种方法表示一个字符 &#39;\\z&#39; === &#39;z&#39; // true &#39;\\172&#39; === &#39;z&#39; // true &#39;\\x7A&#39; === &#39;z&#39; // true &#39;\\u007A&#39; === &#39;z&#39; // true &#39;\\u&#123;7A&#125;&#39; === &#39;z&#39; // true 5.2 repeat()repeat方法返回一个新字符串，表示将原字符串重复n次。 &#39;x&#39;.repeat(3) // &quot;xxx&quot; &#39;hello&#39;.repeat(2) // &quot;hellohello&quot; &#39;na&#39;.repeat(0) // &quot;&quot; &#39;na&#39;.repeat(2.9) // &quot;nana&quot; //如果repeat的参数是负数或者Infinity，会报错。 &#39;na&#39;.repeat(Infinity) // RangeError &#39;na&#39;.repeat(-1) // RangeError 5.3 padStart() , padEnd()ES2017 引入了字符串补全长度的功能。如果某个字符串不够指定长度，会在头部或尾部补全。padStart()用于头部补全，padEnd()用于尾部补全。 &#39;x&#39;.padStart(5, &#39;ab&#39;) // &#39;ababx&#39; &#39;x&#39;.padStart(4, &#39;ab&#39;) // &#39;abax&#39; &#39;x&#39;.padEnd(5, &#39;ab&#39;) // &#39;xabab&#39; &#39;x&#39;.padEnd(4, &#39;ab&#39;) // &#39;xaba&#39; 上面代码中，padStart和padEnd一共接受两个参数，第一个参数用来指定字符串的最小长度，第二个参数是用来补全的字符串。 如果原字符串的长度，等于或大于指定的最小长度，则返回原字符串。 如果用来补全的字符串与原字符串，两者的长度之和超过了指定的最小长度，则会截去超出位数的补全字符串。 &#39;abc&#39;.padStart(10, &#39;0123456789&#39;) // &#39;0123456abc&#39; //如果省略第二个参数，默认使用空格补全长度。 &#39;x&#39;.padStart(4) // &#39; x&#39; &#39;x&#39;.padEnd(4) // &#39;x &#39; padStart的常见用途是为数值补全指定位数。下面代码生成10位的数值字符串。 &#39;1&#39;.padStart(10, &#39;0&#39;) // &quot;0000000001&quot; &#39;12&#39;.padStart(10, &#39;0&#39;) // &quot;0000000012&quot; &#39;123456&#39;.padStart(10, &#39;0&#39;) // &quot;0000123456&quot; //另一个用途是提示字符串格式。 &#39;12&#39;.padStart(10, &#39;YYYY-MM-DD&#39;) // &quot;YYYY-MM-12&quot; &#39;09-12&#39;.padStart(10, &#39;YYYY-MM-DD&#39;) // &quot;YYYY-09-12&quot; 5.4 模板字符串模板字符串（template string）是增强版的字符串，用反引号（`）标识。它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量 // 普通字符串 `In JavaScript &#39;\\n&#39; is a line-feed.` // 多行字符串 `In JavaScript this is not legal.` console.log(`string text line 1 string text line 2`); // 字符串中嵌入变量 var name = &quot;Bob&quot;, time = &quot;today&quot;; `Hello $&#123;name&#125;, how are you $&#123;time&#125;?` //如果在模板字符串中需要使用反引号，则前面要用反斜杠转义。 var greeting = `\\`Yo\\` World!`; 模板字符串中嵌入变量，需要将变量名写在${}之中。大括号内部可以放入任意的JavaScript表达式，可以进行运算，以及引用对象属性。 let name = &#39;xixi&#39;, age = 19; let summary = `他的名字是$&#123;name&#125;，年龄是$&#123;age&#125;`; cosole.lgo(summary); 模板字符串之中还能调用函数。 function fn() &#123; return &quot;Hello World&quot;; &#125; `foo $&#123;fn()&#125; bar` // foo Hello World bar 如果大括号中的值不是字符串，将按照一般的规则转为字符串。比如，大括号中是一个对象，将默认调用对象的toString方法。 如果模板字符串中的变量没有声明，将报错。 由于模板字符串的大括号内部，就是执行JavaScript代码，因此如果大括号内部是一个字符串，将会原样输出。 模板字符串甚至还能嵌套。 const data = [ &#123; first: &#39;&lt;Jane&gt;&#39;, last: &#39;Bond&#39; &#125;, &#123; first: &#39;Lars&#39;, last: &#39;&lt;Croft&gt;&#39; &#125;, ]; console.log(tmpl(data)); 字符串的相关操作startsWith() 判断一个字符是不是以某字符串开头。endsWith() 判断一个字符是不是以某字符串结尾。includes() 判断一个字符串是不是包含某个字符串 5.5 实例： 模板编译var template = ` &lt;ul&gt; &lt;% for(var i=0; i &lt; data.supplies.length; i++) &#123; %&gt; &lt;li&gt;&lt;%= data.supplies[i] %&gt;&lt;/li&gt; &lt;% &#125; %&gt; &lt;/ul&gt; `; 上面代码在模板字符串之中，放置了一个常规模板。该模板使用&lt;%…%&gt;放置JavaScript代码，使用&lt;%= … %&gt;输出JavaScript表达式。 怎么编译这个模板字符串呢？ 一种思路是将其转换为JavaScript表达式字符串。 echo(&#39;&lt;ul&gt;&#39;); for(var i=0; i &lt; data.supplies.length; i++) &#123; echo(&#39;&lt;li&gt;&#39;); echo(data.supplies[i]); echo(&#39;&lt;/li&gt;&#39;); &#125;; echo(&#39;&lt;/ul&gt;&#39;); 这个转换使用正则表达式就行了。 var evalExpr = /&lt;%=(.+?)%&gt;/g; var expr = /&lt;%([\\s\\S]+?)%&gt;/g; template = template .replace(evalExpr, &#39;`); \\n echo( $1 ); \\n echo(`&#39;) .replace(expr, &#39;`); \\n $1 \\n echo(`&#39;); template = &#39;echo(`&#39; + template + &#39;`);&#39;; 然后，将template封装在一个函数里面返回，就可以了。 var script = `(function parse(data)&#123; var output = &quot;&quot;; function echo(html)&#123; output += html; &#125; $&#123; template &#125; return output; &#125;)`; return script; 将上面的内容拼装成一个模板编译函数compile。 function compile(template)&#123; var evalExpr = /&lt;%=(.+?)%&gt;/g; var expr = /&lt;%([\\s\\S]+?)%&gt;/g; template = template .replace(evalExpr, &#39;`); \\n echo( $1 ); \\n echo(`&#39;) .replace(expr, &#39;`); \\n $1 \\n echo(`&#39;); template = &#39;echo(`&#39; + template + &#39;`);&#39;; var script = `(function parse(data)&#123; var output = &quot;&quot;; function echo(html)&#123; output += html; &#125; $&#123; template &#125; return output; &#125;)`; return script; &#125; compile函数的用法如下。 var parse = eval(compile(template)); div.innerHTML = parse(&#123; supplies: [ &quot;broom&quot;, &quot;mop&quot;, &quot;cleaner&quot; ] &#125;); // &lt;ul&gt; // &lt;li&gt;broom&lt;/li&gt; // &lt;li&gt;mop&lt;/li&gt; // &lt;li&gt;cleaner&lt;/li&gt; // &lt;/ul&gt; 5.6 标签模板标签模板其实不是模板，而是函数调用的一种特殊形式。“标签”指的就是函数，紧跟在后面的模板字符串就是它的参数。 alert`123` // 等同于 alert(123) 但是，如果模板字符里面有变量，就不是简单的调用了，而是会将模板字符串先处理成多个参数，再调用函数。 var a = 5; var b = 10; tag`Hello $&#123; a + b &#125; world $&#123; a * b &#125;`; // 等同于 tag([&#39;Hello &#39;, &#39; world &#39;, &#39;&#39;], 15, 50); function tag(stringArr, value1, value2)&#123; // ... &#125; // 等同于 function tag(stringArr, ...values)&#123; // ... &#125; 上面代码中，模板字符串前面有一个标识名tag，它是一个函数。整个表达式的返回值，就是tag函数处理模板字符串后的返回值。 函数tag依次会接收到多个参数。 tag函数的第一个参数是一个数组，该数组的成员是模板字符串中那些没有变量替换的部分，也就是说，变量替换只发生在数组的第一个成员与第二个成员之间、第二个成员与第三个成员之间，以此类推。 tag函数的其他参数，都是模板字符串各个变量被替换后的值。由于本例中，模板字符串含有两个变量，因此tag会接受到value1和value2两个参数。 tag函数所有参数的实际值如下。 第一个参数：[‘Hello ‘, ‘ world ‘, ‘’]第二个参数: 15第三个参数：50也就是说，tag函数实际上以下面的形式调用。 tag([&#39;Hello &#39;, &#39; world &#39;, &#39;&#39;], 15, 50) 我们可以按照需要编写tag函数的代码。下面是tag函数的一种写法，以及运行结果。 var a = 5; var b = 10; function tag(s, v1, v2) &#123; console.log(s[0]); console.log(s[1]); console.log(s[2]); console.log(v1); console.log(v2); return &quot;OK&quot;; &#125; tag`Hello $&#123; a + b &#125; world $&#123; a * b&#125;`; // &quot;Hello &quot; // &quot; world &quot; // &quot;&quot; // 15 // 50 // &quot;OK&quot; 下面是一个更复杂的例子。 var total = 30; var msg = passthru`The total is $&#123;total&#125; ($&#123;total*1.05&#125; with tax)`; function passthru(literals) &#123; var result = &#39;&#39;; var i = 0; while (i &lt; literals.length) &#123; result += literals[i++]; if (i &lt; arguments.length) &#123; result += arguments[i]; &#125; &#125; return result; &#125; msg // &quot;The total is 30 (31.5 with tax)&quot; “标签模板”的一个重要应用，就是过滤HTML字符串，防止用户输入恶意内容。 var message = SaferHTML`&lt;p&gt;$&#123;sender&#125; has sent you a message.&lt;/p&gt;`; function SaferHTML(templateData) &#123; var s = templateData[0]; for (var i = 1; i &lt; arguments.length; i++) &#123; var arg = String(arguments[i]); // Escape special characters in the substitution. s += arg.replace(/&amp;/g, &quot;&amp;amp;&quot;) .replace(/&lt;/g, &quot;&amp;lt;&quot;) .replace(/&gt;/g, &quot;&amp;gt;&quot;); // Don&#39;t escape special characters in the template. s += templateData[i]; &#125; return s; &#125; 上面代码中，sender变量往往是用户提供的，经过SaferHTML函数处理，里面的特殊字符都会被转义。 var sender = &#39;&lt;script&gt;alert(&quot;abc&quot;)&lt;/script&gt;&#39;; // 恶意代码 var message = SaferHTML`&lt;p&gt;$&#123;sender&#125; has sent you a message.&lt;/p&gt;`; message // &lt;p&gt;&amp;lt;script&amp;gt;alert(&quot;abc&quot;)&amp;lt;/script&amp;gt; has sent you a message.&lt;/p&gt; 标签模板的另一个应用，就是多语言转换（国际化处理）。 i18n`Welcome to $&#123;siteName&#125;, you are visitor number $&#123;visitorNumber&#125;!` // &quot;欢迎访问xxx，您是第xxxx位访问者！&quot; 6. 数组的扩展6.1 Array.from()Array.from方法用于将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括ES6新增的数据结构Set和Map）。 let arrayLike = &#123; &#39;0&#39;: &#39;a&#39;, &#39;1&#39;: &#39;b&#39;, &#39;2&#39;: &#39;c&#39;, length: 3 &#125;; // ES5的写法 var arr1 = [].slice.call(arrayLike); // [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;] // ES6的写法 let arr2 = Array.from(arrayLike); // [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;] 实际应用中，常见的类似数组的对象是DOM操作返回的NodeList集合，以及函数内部的arguments对象。Array.from都可以将它们转为真正的数组。 // NodeList对象 let ps = document.querySelectorAll(&#39;p&#39;); Array.from(ps).forEach(function (p) &#123; console.log(p); &#125;); // arguments对象 function foo() &#123; var args = Array.from(arguments); // ... &#125; 值得提醒的是，扩展运算符（…）也可以将某些数据结构转为数组。 // arguments对象 function foo() &#123; var args = [...arguments]; &#125; // NodeList对象 [...document.querySelectorAll(&#39;div&#39;)] 对于还没有部署该方法的浏览器，可以用Array.prototype.slice方法替代。 const toArray = (() =&gt; Array.from ? Array.from : obj =&gt; [].slice.call(obj) )(); Array.from还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组。 Array.from(arrayLike, x =&gt; x * x); // 等同于 Array.from(arrayLike).map(x =&gt; x * x); Array.from([1, 2, 3], (x) =&gt; x * x) // [1, 4, 9] let spans = document.querySelectorAll(&#39;span.name&#39;); // map() let names1 = Array.prototype.map.call(spans, s =&gt; s.textContent); // Array.from() let names2 = Array.from(spans, s =&gt; s.textContent) Array.from([1, , 2, , 3], (n) =&gt; n || 0) // [1, 0, 2, 0, 3] 6.2 Array.of()Array.of方法用于将一组值，转换为数组。 Array.of(3, 11, 8) // [3,11,8] Array.of(3) // [3] Array.of(3).length // 1 //Array.of方法可以用下面的代码模拟实现。 function ArrayOf()&#123; return [].slice.call(arguments); &#125; 6.3 copyWidth()数组实例的copyWithin方法，在当前数组内部，将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组。也就是说，使用这个方法，会修改当前数组。 Array.prototype.copyWithin(target, start = 0, end = this.length)它接受三个参数。 target（必需）：从该位置开始替换数据。start（可选）：从该位置开始读取数据，默认为0。如果为负值，表示倒数。end（可选）：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示倒数。这三个参数都应该是数值，如果不是，会自动转为数值。 [1, 2, 3, 4, 5].copyWithin(0, 3) // [4, 5, 3, 4, 5] 上面代码表示将从3号位直到数组结束的成员（4和5），复制到从0号位开始的位置，结果覆盖了原来的1和2。 下面是更多例子。 // 将3号位复制到0号位 [1, 2, 3, 4, 5].copyWithin(0, 3, 4) // [4, 2, 3, 4, 5] // -2相当于3号位，-1相当于4号位 [1, 2, 3, 4, 5].copyWithin(0, -2, -1) // [4, 2, 3, 4, 5] // 将3号位复制到0号位 [].copyWithin.call(&#123;length: 5, 3: 1&#125;, 0, 3) // &#123;0: 1, 3: 1, length: 5&#125; // 将2号位到数组结束，复制到0号位 var i32a = new Int32Array([1, 2, 3, 4, 5]); i32a.copyWithin(0, 2); // Int32Array [3, 4, 5, 4, 5] // 对于没有部署TypedArray的copyWithin方法的平台 // 需要采用下面的写法 [].copyWithin.call(new Int32Array([1, 2, 3, 4, 5]), 0, 3, 4); // Int32Array [4, 2, 3, 4, 5] 6.4 find() 和 findIndex()数组实例的find方法，用于找出第一个符合条件的数组成员。它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为true的成员，然后返回该成员。如果没有符合条件的成员，则返回undefined。 [1, 4, -5, 10].find((n) =&gt; n &lt; 0) // -5 上面代码找出数组中第一个小于0的成员。 [1, 5, 10, 15].find(function(value, index, arr) &#123; return value &gt; 9; &#125;) // 10 上面代码中，find方法的回调函数可以接受三个参数，依次为当前的值、当前的位置和原数组。 数组实例的findIndex方法的用法与find方法非常类似，返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1。 [1, 5, 10, 15].findIndex(function(value, index, arr) &#123; return value &gt; 9; &#125;) // 2 这两个方法都可以接受第二个参数，用来绑定回调函数的this对象。 另外，这两个方法都可以发现NaN，弥补了数组的IndexOf方法的不足。 [NaN].indexOf(NaN) // -1 [NaN].findIndex(y =&gt; Object.is(NaN, y)) // 0 上面代码中，indexOf方法无法识别数组的NaN成员，但是findIndex方法可以借助Object.is方法做到。 Array.fill()fill方法使用给定值，填充一个数组。 [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;].fill(7) // [7, 7, 7] new Array(3).fill(7) // [7, 7, 7] 上面代码表明，fill方法用于空数组的初始化非常方便。数组中已有的元素，会被全部抹去。 fill方法还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置。 [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;].fill(7, 1, 2) // [&#39;a&#39;, 7, &#39;c&#39;] 上面代码表示，fill方法从1号位开始，向原数组填充7，到2号位之前结束。 7. 函数的扩展7.1 函数参数的默认值给函数形参设置默认值 function sum(x=1,y=2)&#123; return `$&#123;x&#125;+$&#123;y&#125;`; &#125; 另外，一个容易忽略的地方是，如果参数默认值是变量，那么参数就不是传值的，而是每次都重新计算默认值表达式的值。也就是说，参数默认值是惰性求值的。 let x = 99; function foo(p = x + 1) &#123; console.log(p); &#125; foo() // 100 x = 100; foo() // 101 上面代码中，参数p的默认值是x + 1。这时，每次调用函数foo，都会重新计算x + 1，而不是默认p等于 100。 7.2 与解构赋值默认值结合使用参数默认值可以与解构赋值的默认值，结合起来使用。 function foo(&#123;x, y = 5&#125;) &#123; console.log(x, y); &#125; foo(&#123;&#125;) // undefined, 5 foo(&#123;x: 1&#125;) // 1, 5 foo(&#123;x: 1, y: 2&#125;) // 1, 2 foo() // TypeError: Cannot read property &#39;x&#39; of undefined 上面代码使用了对象的解构赋值默认值，而没有使用函数参数的默认值。只有当函数foo的参数是一个对象时，变量x和y才会通过解构赋值而生成。如果函数foo调用时参数不是对象，变量x和y就不会生成，从而报错。如果参数对象没有y属性，y的默认值5才会生效。 下面是另一个对象的解构赋值默认值的例子。 function fetch(url, &#123; body = &#39;&#39;, method = &#39;GET&#39;, headers = &#123;&#125; &#125;) &#123; console.log(method); &#125; fetch(&#39;http://example.com&#39;, &#123;&#125;) // &quot;GET&quot; fetch(&#39;http://example.com&#39;) // 报错 例子： // 写法一 function m1(&#123;x = 0, y = 0&#125; = &#123;&#125;) &#123; return [x, y]; &#125; // 写法二 function m2(&#123;x, y&#125; = &#123; x: 0, y: 0 &#125;) &#123; return [x, y]; &#125; // 函数没有参数的情况 m1() // [0, 0] m2() // [0, 0] // x和y都有值的情况 m1(&#123;x: 3, y: 8&#125;) // [3, 8] m2(&#123;x: 3, y: 8&#125;) // [3, 8] // x有值，y无值的情况 m1(&#123;x: 3&#125;) // [3, 0] m2(&#123;x: 3&#125;) // [3, undefined] // x和y都无值的情况 m1(&#123;&#125;) // [0, 0]; m2(&#123;&#125;) // [undefined, undefined] m1(&#123;z: 3&#125;) // [0, 0] m2(&#123;z: 3&#125;) // [undefined, undefined] 7.3参数的默认值位置通常情况下，定义了默认值的参数，应该是函数的尾参数。因为这样比较容易看出来，到底省略了哪些参数。如果非尾部的参数设置默认值，实际上这个参数是没法省略的。 // 例一 function f(x = 1, y) &#123; return [x, y]; &#125; f() // [1, undefined] f(2) // [2, undefined]) f(, 1) // 报错 f(undefined, 1) // [1, 1] // 例二 function f(x, y = 5, z) &#123; return [x, y, z]; &#125; f() // [undefined, 5, undefined] f(1) // [1, 5, undefined] f(1, ,2) // 报错 f(1, undefined, 2) // [1, 5, 2] 上面代码中，有默认值的参数都不是尾参数。这时，无法只省略该参数，而不省略它后面的参数，除非显式输入undefined。 如果传入undefined，将触发该参数等于默认值，null则没有这个效果。 function foo(x = 5, y = 6) &#123; console.log(x, y); &#125; foo(undefined, null) // 5 null 上面代码中，x参数对应undefined，结果触发了默认值，y参数等于null，就没有触发默认值。 7.4 作用域一旦设置了参数的默认值，函数进行声明初始化时，参数会形成一个单独的作用域（context）。等到初始化结束，这个作用域就会消失。这种语法行为，在不设置参数默认值时，是不会出现的。 var x = 1; function f(x, y = x) &#123; console.log(y); &#125; f(2) // 2 上面代码中，参数y的默认值等于变量x。调用函数f时，参数形成一个单独的作用域。在这个作用域里面，默认值变量x指向第一个参数x，而不是全局变量x，所以输出是2。 再看下面的例子。 let x = 1; function f(y = x) &#123; let x = 2; console.log(y); &#125; f() // 1 上面代码中，函数f调用时，参数y = x形成一个单独的作用域。这个作用域里面，变量x本身没有定义，所以指向外层的全局变量x。函数调用时，函数体内部的局部变量x影响不到默认值变量x。 如果此时，全局变量x不存在，就会报错。 function f(y = x) &#123; let x = 2; console.log(y); &#125; f() // ReferenceError: x is not defined //下面这样写，也会报错。 var x = 1; function foo(x = x) &#123; // ... &#125; foo() // ReferenceError: x is not defined 上面代码中，参数x = x形成一个单独作用域。实际执行的是let x = x，由于暂时性死区的原因，这行代码会报错”x 未定义“。 如果参数的默认值是一个函数，该函数的作用域也遵守这个规则。请看下面的例子。 let foo = &#39;outer&#39;; function bar(func = x =&gt; foo) &#123; let foo = &#39;inner&#39;; console.log(func()); &#125; bar(); // outer 上面代码中，函数bar的参数func的默认值是一个匿名函数，返回值为变量foo。函数参数形成的单独作用域里面，并没有定义变量foo，所以foo指向外层的全局变量foo，因此输出outer。 如果写成下面这样，就会报错。 function bar(func = () =&gt; foo) &#123; let foo = &#39;inner&#39;; console.log(func()); &#125; bar() // ReferenceError: foo is not defined 上面代码中，匿名函数里面的foo指向函数外层，但是函数外层并没有声明变量foo，所以就报错了。 下面是一个更复杂的例子。 var x = 1; function foo(x, y = function() &#123; x = 2; &#125;) &#123; var x = 3; y(); console.log(x); &#125; foo() // 3 x // 1 上面代码中，函数foo的参数形成一个单独作用域。这个作用域里面，首先声明了变量x，然后声明了变量y，y的默认值是一个匿名函数。这个匿名函数内部的变量x，指向同一个作用域的第一个参数x。函数foo内部又声明了一个内部变量x，该变量与第一个参数x由于不是同一个作用域，所以不是同一个变量，因此执行y后，内部变量x和外部全局变量x的值都没变。 如果将var x = 3的var去除，函数foo的内部变量x就指向第一个参数x，与匿名函数内部的x是一致的，所以最后输出的就是2，而外层的全局变量x依然不受影响。 var x = 1; function foo(x, y = function() &#123; x = 2; &#125;) &#123; x = 3; y(); console.log(x); &#125; foo() // 2 x // 1 7.5 rest参数ES6 引入 rest 参数（形式为“…变量名”），用于获取函数的多余参数，这样就不需要使用arguments对象了。rest 参数搭配的变量是一个数组，该变量将多余的参数放入数组中。 function add(...values) &#123; let sum = 0; for (var val of values) &#123; sum += val; &#125; return sum; &#125; add(2, 5, 3) // 10 上面代码的add函数是一个求和函数，利用 rest 参数，可以向该函数传入任意数目的参数。 下面是一个 rest 参数代替arguments变量的例子。 // arguments变量的写法 function sortNumbers() &#123; return Array.prototype.slice.call(arguments).sort(); &#125; // rest参数的写法 const sortNumbers = (...numbers) =&gt; numbers.sort(); 上面代码的两种写法，比较后可以发现，rest 参数的写法更自然也更简洁。 rest 参数中的变量代表一个数组，所以数组特有的方法都可以用于这个变量。下面是一个利用 rest 参数改写数组push方法的例子。 function push(array, ...items) &#123; items.forEach(function(item) &#123; array.push(item); console.log(item); &#125;); &#125; var a = []; push(a, 1, 2, 3) 注意，rest 参数之后不能再有其他参数（即只能是最后一个参数），否则会报错。 // 报错 function f(a, ...b, c) &#123; // ... &#125; 函数的length属性，不包括 rest 参数。 (function(a) &#123;&#125;).length // 1 (function(...a) &#123;&#125;).length // 0 (function(a, ...b) &#123;&#125;).length // 1 7.6 扩展运算符扩展运算符（spread）是三个点（…）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列。 console.log(...[1, 2, 3]) // 1 2 3 console.log(1, ...[2, 3, 4], 5) // 1 2 3 4 5 [...document.querySelectorAll(&#39;div&#39;)] // [&lt;div&gt;, &lt;div&gt;, &lt;div&gt;] 该运算符主要用于函数调用。 function push(array, ...items) &#123; array.push(...items); &#125; function add(x, y) &#123; return x + y; &#125; var numbers = [4, 38]; add(...numbers) // 42 上面代码中，array.push(…items)和add(…numbers)这两行，都是函数的调用，它们的都使用了扩展运算符。该运算符将一个数组，变为参数序列。 扩展运算符与正常的函数参数可以结合使用，非常灵活。 function f(v, w, x, y, z) &#123; &#125; var args = [0, 1]; f(-1, ...args, 2, ...[3]); 替代数组的apply方法由于扩展运算符可以展开数组，所以不再需要apply方法，将数组转为函数的参数了。 // ES5的写法 function f(x, y, z) &#123; // ... &#125; var args = [0, 1, 2]; f.apply(null, args); // ES6的写法 function f(x, y, z) &#123; // ... &#125; var args = [0, 1, 2]; f(...args); 下面是扩展运算符取代apply方法的一个实际的例子，应用Math.max方法，简化求出一个数组最大元素的写法。 // ES5的写法 Math.max.apply(null, [14, 3, 77]) // ES6的写法 Math.max(...[14, 3, 77]) // 等同于 Math.max(14, 3, 77); 上面代码表示，由于JavaScript不提供求数组最大元素的函数，所以只能套用Math.max函数，将数组转为一个参数序列，然后求最大值。有了扩展运算符以后，就可以直接用Math.max了。 另一个例子是通过push函数，将一个数组添加到另一个数组的尾部。 // ES5的写法 var arr1 = [0, 1, 2]; var arr2 = [3, 4, 5]; Array.prototype.push.apply(arr1, arr2); // ES6的写法 var arr1 = [0, 1, 2]; var arr2 = [3, 4, 5]; arr1.push(...arr2); 上面代码的ES5写法中，push方法的参数不能是数组，所以只好通过apply方法变通使用push方法。有了扩展运算符，就可以直接将数组传入push方法。 下面是另外一个例子。 // ES5 new (Date.bind.apply(Date, [null, 2015, 1, 1])) // ES6 new Date(...[2015, 1, 1]); 扩展运算符的应用（1）合并数组 扩展运算符提供了数组合并的新写法。 // ES5 [1, 2].concat(more) // ES6 [1, 2, ...more] var arr1 = [&#39;a&#39;, &#39;b&#39;]; var arr2 = [&#39;c&#39;]; var arr3 = [&#39;d&#39;, &#39;e&#39;]; // ES5的合并数组 arr1.concat(arr2, arr3); // [ &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39; ] // ES6的合并数组 [...arr1, ...arr2, ...arr3] // [ &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39; ] （2）与解构赋值结合 扩展运算符可以与解构赋值结合起来，用于生成数组。 // ES5 a = list[0], rest = list.slice(1) // ES6 [a, ...rest] = list 下面是另外一些例子。 const [first, ...rest] = [1, 2, 3, 4, 5]; first // 1 rest // [2, 3, 4, 5] const [first, ...rest] = []; first // undefined rest // []: const [first, ...rest] = [&quot;foo&quot;]; first // &quot;foo&quot; rest // [] //如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。 const [...butLast, last] = [1, 2, 3, 4, 5]; // 报错 const [first, ...middle, last] = [1, 2, 3, 4, 5]; // 报错 （3）函数的返回值 JavaScript的函数只能返回一个值，如果需要返回多个值，只能返回数组或对象。扩展运算符提供了解决这个问题的一种变通方法。 var dateFields = readDateFields(database); var d = new Date(...dateFields); 上面代码从数据库取出一行数据，通过扩展运算符，直接将其传入构造函数Date。 （4）字符串 扩展运算符还可以将字符串转为真正的数组。 [...&#39;hello&#39;] // [ &quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot; ] 上面的写法，有一个重要的好处，那就是能够正确识别32位的Unicode字符。 &#39;x\\uD83D\\uDE80y&#39;.length // 4 [...&#39;x\\uD83D\\uDE80y&#39;].length // 3 上面代码的第一种写法，JavaScript会将32位Unicode字符，识别为2个字符，采用扩展运算符就没有这个问题。因此，正确返回字符串长度的函数，可以像下面这样写。 function length(str) &#123; return [...str].length; &#125; length(&#39;x\\uD83D\\uDE80y&#39;) // 3 凡是涉及到操作32位Unicode字符的函数，都有这个问题。因此，最好都用扩展运算符改写。 let str = &#39;x\\uD83D\\uDE80y&#39;; str.split(&#39;&#39;).reverse().join(&#39;&#39;) // &#39;y\\uDE80\\uD83Dx&#39; [...str].reverse().join(&#39;&#39;) // &#39;y\\uD83D\\uDE80x&#39; 上面代码中，如果不用扩展运算符，字符串的reverse操作就不正确。 （5）实现了Iterator接口的对象 任何Iterator接口的对象，都可以用扩展运算符转为真正的数组。 var nodeList = document.querySelectorAll(&#39;div&#39;); var array = [...nodeList]; 上面代码中，querySelectorAll方法返回的是一个nodeList对象。它不是数组，而是一个类似数组的对象。这时，扩展运算符可以将其转为真正的数组，原因就在于NodeList对象实现了Iterator接口。 对于那些没有部署Iterator接口的类似数组的对象，扩展运算符就无法将其转为真正的数组。 let arrayLike = &#123; &#39;0&#39;: &#39;a&#39;, &#39;1&#39;: &#39;b&#39;, &#39;2&#39;: &#39;c&#39;, length: 3 &#125;; // TypeError: Cannot spread non-iterable object. let arr = [...arrayLike]; 上面代码中，arrayLike是一个类似数组的对象，但是没有部署Iterator接口，扩展运算符就会报错。这时，可以改为使用Array.from方法将arrayLike转为真正的数组。 （6）Map和Set结构，Generator函数 扩展运算符内部调用的是数据结构的Iterator接口，因此只要具有Iterator接口的对象，都可以使用扩展运算符，比如Map结构。 let map = new Map([ [1, &#39;one&#39;], [2, &#39;two&#39;], [3, &#39;three&#39;], ]); let arr = [...map.keys()]; // [1, 2, 3] Generator函数运行后，返回一个遍历器对象，因此也可以使用扩展运算符。 var go = function*()&#123; yield 1; yield 2; yield 3; &#125;; [...go()] // [1, 2, 3] 上面代码中，变量go是一个Generator函数，执行后返回的是一个遍历器对象，对这个遍历器对象执行扩展运算符，就会将内部遍历得到的值，转为一个数组。 如果对没有iterator接口的对象，使用扩展运算符，将会报错。 var obj = &#123;a: 1, b: 2&#125;; let arr = [...obj]; // TypeError: Cannot spread non-iterable object 7.7 严格模式从ES5开始，函数内部可以设定为严格模式。 function doSomething(a, b) &#123; &#39;use strict&#39;; // code &#125; 《ECMAScript 2016标准》做了一点修改，规定只要函数参数使用了默认值、解构赋值、或者扩展运算符，那么函数内部就不能显式设定为严格模式，否则会报错。 // 报错 function doSomething(a, b = a) &#123; &#39;use strict&#39;; // code &#125; // 报错 const doSomething = function (&#123;a, b&#125;) &#123; &#39;use strict&#39;; // code &#125;; // 报错 const doSomething = (...a) =&gt; &#123; &#39;use strict&#39;; // code &#125;; const obj = &#123; // 报错 doSomething(&#123;a, b&#125;) &#123; &#39;use strict&#39;; // code &#125; &#125;; 这样规定的原因是，函数内部的严格模式，同时适用于函数体代码和函数参数代码。但是，函数执行的时候，先执行函数参数代码，然后再执行函数体代码。这样就有一个不合理的地方，只有从函数体代码之中，才能知道参数代码是否应该以严格模式执行，但是参数代码却应该先于函数体代码执行。 // 报错 function doSomething(value = 070) &#123; &#39;use strict&#39;; return value; &#125; 上面代码中，参数value的默认值是八进制数070，但是严格模式下不能用前缀0表示八进制，所以应该报错。但是实际上，JavaScript引擎会先成功执行value = 070，然后进入函数体内部，发现需要用严格模式执行，这时才会报错。 虽然可以先解析函数体代码，再执行参数代码，但是这样无疑就增加了复杂性。因此，标准索性禁止了这种用法，只要参数使用了默认值、解构赋值、或者扩展运算符，就不能显式指定严格模式。 两种方法可以规避这种限制。第一种是设定全局性的严格模式，这是合法的。 &#39;use strict&#39;; function doSomething(a, b = a) &#123; // code &#125; 第二种是把函数包在一个无参数的立即执行函数里面。 const doSomething = (function () &#123; &#39;use strict&#39;; return function(value = 42) &#123; return value; &#125;; &#125;()); 7.8 name属性function foo() &#123;&#125; foo.name // &quot;foo&quot; //Function构造函数返回的函数实例，name属性的值为anonymous。 (new Function).name // &quot;anonymous&quot; //bind返回的函数，name属性值会加上bound前缀。 function foo() &#123;&#125;; foo.bind(&#123;&#125;).name // &quot;bound foo&quot; (function()&#123;&#125;).bind(&#123;&#125;).name // &quot;bound &quot; 7.9 箭头函数var f = v =&gt; v; //等同于： var f = function(v) &#123; return v; &#125;; //如果箭头函数不需要参数或需要多个参数，就使用一个圆括号代表参数部分。 var f = () =&gt; 5; // 等同于 var f = function () &#123; return 5 &#125;; var sum = (num1, num2) =&gt; num1 + num2; // 等同于 var sum = function(num1, num2) &#123; return num1 + num2; &#125;; 箭头函数使得表达更加简洁。 箭头函数的一个用处是简化回调函数。 let breakfast = (dessert,drink) =&gt; dessert + drink; 普通函数 var breakfast = function breakfast(dessert,drink)&#123; return dessert + drink; &#125; 如果不返回结果,执行代码 let breakfast = (dessert,drink) =&gt; &#123; //执行代码 &#125;; 下面是rest参数与箭头函数结合的例子。 const numbers = (...nums) =&gt; nums; numbers(1, 2, 3, 4, 5) // [1,2,3,4,5] const headAndTail = (head, ...tail) =&gt; [head, tail]; headAndTail(1, 2, 3, 4, 5) // [1,[2,3,4,5]] 使用注意点：箭头函数有几个使用注意点。 （1）函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。 （2）不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。 （3）不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用Rest参数代替。 （4）不可以使用yield命令，因此箭头函数不能用作Generator函数。 上面四点中，第一点尤其值得注意。this对象的指向是可变的，但是在箭头函数中，它是固定的。 function foo() &#123; setTimeout(() =&gt; &#123; console.log(&#39;id:&#39;, this.id); &#125;, 100); &#125; var id = 21; foo.call(&#123; id: 42 &#125;); // id: 42 上面代码中，setTimeout的参数是一个箭头函数，这个箭头函数的定义生效是在foo函数生成时，而它的真正执行要等到100毫秒后。如果是普通函数，执行时this应该指向全局对象window，这时应该输出21。但是，箭头函数导致this总是指向函数定义生效时所在的对象（本例是{id: 42}），所以输出的是42。 箭头函数可以让setTimeout里面的this，绑定定义时所在的作用域，而不是指向运行时所在的作用域。下面是另一个例子。 function Timer() &#123; this.s1 = 0; this.s2 = 0; // 箭头函数 setInterval(() =&gt; this.s1++, 1000); // 普通函数 setInterval(function () &#123; this.s2++; &#125;, 1000); &#125; var timer = new Timer(); setTimeout(() =&gt; console.log(&#39;s1: &#39;, timer.s1), 3100); setTimeout(() =&gt; console.log(&#39;s2: &#39;, timer.s2), 3100); // s1: 3 // s2: 0 上面代码中，Timer函数内部设置了两个定时器，分别使用了箭头函数和普通函数。前者的this绑定定义时所在的作用域（即Timer函数），后者的this指向运行时所在的作用域（即全局对象）。所以，3100毫秒之后，timer.s1被更新了3次，而timer.s2一次都没更新。 箭头函数可以让this指向固定化，这种特性很有利于封装回调函数。下面是一个例子，DOM事件的回调函数封装在一个对象里面。 var handler = &#123; id: &#39;123456&#39;, init: function() &#123; document.addEventListener(&#39;click&#39;, event =&gt; this.doSomething(event.type), false); &#125;, doSomething: function(type) &#123; console.log(&#39;Handling &#39; + type + &#39; for &#39; + this.id); &#125; &#125;; 上面代码的init方法中，使用了箭头函数，这导致这个箭头函数里面的this，总是指向handler对象。否则，回调函数运行时，this.doSomething这一行会报错，因为此时this指向document对象。 this指向的固定化，并不是因为箭头函数内部有绑定this的机制，实际原因是箭头函数根本没有自己的this，导致内部的this就是外层代码块的this。正是因为它没有this，所以也就不能用作构造函数。 所以，箭头函数转成ES5的代码如下。 // ES6 function foo() &#123; setTimeout(() =&gt; &#123; console.log(&#39;id:&#39;, this.id); &#125;, 100); &#125; // ES5 function foo() &#123; var _this = this; setTimeout(function () &#123; console.log(&#39;id:&#39;, _this.id); &#125;, 100); &#125; 上面代码中，转换后的ES5版本清楚地说明了，箭头函数里面根本没有自己的this，而是引用外层的this。 请问下面的代码之中有几个this？ function foo() &#123; return () =&gt; &#123; return () =&gt; &#123; return () =&gt; &#123; console.log(&#39;id:&#39;, this.id); &#125;; &#125;; &#125;; &#125; var f = foo.call(&#123;id: 1&#125;); var t1 = f.call(&#123;id: 2&#125;)()(); // id: 1 var t2 = f().call(&#123;id: 3&#125;)(); // id: 1 var t3 = f()().call(&#123;id: 4&#125;); // id: 1 上面代码之中，只有一个this，就是函数foo的this，所以t1、t2、t3都输出同样的结果。因为所有的内层函数都是箭头函数，都没有自己的this，它们的this其实都是最外层foo函数的this。 除了this，以下三个变量在箭头函数之中也是不存在的，指向外层函数的对应变量： arguments、super、new.target。 function foo() &#123; setTimeout(() =&gt; &#123; console.log(&#39;args:&#39;, arguments); &#125;, 100); &#125; foo(2, 4, 6, 8) // args: [2, 4, 6, 8] 上面代码中，箭头函数内部的变量arguments，其实是函数foo的arguments变量。 另外，由于箭头函数没有自己的this，所以当然也就不能用call()、apply()、bind()这些方法去改变this的指向。 (function() &#123; return [ (() =&gt; this.x).bind(&#123; x: &#39;inner&#39; &#125;)() ]; &#125;).call(&#123; x: &#39;outer&#39; &#125;); // [&#39;outer&#39;] 上面代码中，箭头函数没有自己的this，所以bind方法无效，内部的this指向外部的this。 长期以来，JavaScript语言的this对象一直是一个令人头痛的问题，在对象方法中使用this，必须非常小心。箭头函数”绑定”this，很大程度上解决了这个困扰。 嵌套的箭头函数：箭头函数内部，还可以再使用箭头函数。下面是一个ES5语法的多重嵌套函数。 function insert(value) &#123; return &#123;into: function (array) &#123; return &#123;after: function (afterValue) &#123; array.splice(array.indexOf(afterValue) + 1, 0, value); return array; &#125;&#125;; &#125;&#125;; &#125; insert(2).into([1, 3]).after(1); //[1, 2, 3] 上面这个函数，可以使用箭头函数改写。 let insert = (value) =&gt; (&#123;into: (array) =&gt; (&#123;after: (afterValue) =&gt; &#123; array.splice(array.indexOf(afterValue) + 1, 0, value); return array; &#125;&#125;)&#125;); insert(2).into([1, 3]).after(1); //[1, 2, 3] 下面是一个部署管道机制（pipeline）的例子，即前一个函数的输出是后一个函数的输入。 const pipeline = (...funcs) =&gt; val =&gt; funcs.reduce((a, b) =&gt; b(a), val); const plus1 = a =&gt; a + 1; const mult2 = a =&gt; a * 2; const addThenMult = pipeline(plus1, mult2); addThenMult(5) // 12 如果觉得上面的写法可读性比较差，也可以采用下面的写法。 const plus1 = a =&gt; a + 1; const mult2 = a =&gt; a * 2; mult2(plus1(5)) // 12 箭头函数还有一个功能，就是可以很方便地改写λ演算。 // λ演算的写法 fix = λf.(λx.f(λv.x(x)(v)))(λx.f(λv.x(x)(v))) // ES6的写法 var fix = f =&gt; (x =&gt; f(v =&gt; x(x)(v))) (x =&gt; f(v =&gt; x(x)(v))); 上面两种写法，几乎是一一对应的。由于λ演算对于计算机科学非常重要，这使得我们可以用ES6作为替代工具，探索计算机科学。 7.10 绑定 this箭头函数可以绑定this对象，大大减少了显式绑定this对象的写法（call、apply、bind）。但是，箭头函数并不适用于所有场合，所以ES7提出了“函数绑定”（function bind）运算符，用来取代call、apply、bind调用。虽然该语法还是ES7的一个提案，但是Babel转码器已经支持。 函数绑定运算符是并排的两个双冒号（::），双冒号左边是一个对象，右边是一个函数。该运算符会自动将左边的对象，作为上下文环境（即this对象），绑定到右边的函数上面。 foo::bar; // 等同于 bar.bind(foo); foo::bar(...arguments); // 等同于 bar.apply(foo, arguments); const hasOwnProperty = Object.prototype.hasOwnProperty; function hasOwn(obj, key) &#123; return obj::hasOwnProperty(key); &#125; 如果双冒号左边为空，右边是一个对象的方法，则等于将该方法绑定在该对象上面。 var method = obj::obj.foo; // 等同于 var method = ::obj.foo; let log = ::console.log; // 等同于 var log = console.log.bind(console); 由于双冒号运算符返回的还是原对象，因此可以采用链式写法。 // 例一 import &#123; map, takeWhile, forEach &#125; from &quot;iterlib&quot;; getPlayers() ::map(x =&gt; x.character()) ::takeWhile(x =&gt; x.strength &gt; 100) ::forEach(x =&gt; console.log(x)); // 例二 let &#123; find, html &#125; = jake; document.querySelectorAll(&quot;div.myClass&quot;) ::find(&quot;p&quot;) ::html(&quot;hahaha&quot;); 8. 对象表达式原来的 let student = &#123; play : function()&#123;&#125; &#125; 改进的 let student = &#123; play()&#123;&#125; &#125; var drink = &#39;hot name&#39;; student[&#39;hot name&#39;] = &#39;wang&#39;; student[drink] = &#39;wang&#39;; //给对象添加带空格的属性。 //属性也可以用变量来表示 9. class概述JavaScript语言的传统方法是通过构造函数，定义并生成新对象。下面是一个例子。 function Point(x, y) &#123; this.x = x; this.y = y; &#125; Point.prototype.toString = function () &#123; return &#39;(&#39; + this.x + &#39;, &#39; + this.y + &#39;)&#39;; &#125;; var p = new Point(1, 2); 上面这种写法跟传统的面向对象语言（比如C++和Java）差异很大，很容易让新学习这门语言的程序员感到困惑。 ES6提供了更接近传统语言的写法，引入了Class（类）这个概念，作为对象的模板。通过class关键字，可以定义类。基本上，ES6的class可以看作只是一个语法糖，它的绝大部分功能，ES5都可以做到，新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。上面的代码用ES6的“类”改写，就是下面这样。 //定义类 class Point &#123; constructor(x, y) &#123; this.x = x; this.y = y; &#125; toString() &#123; return &#39;(&#39; + this.x + &#39;, &#39; + this.y + &#39;)&#39;; &#125; &#125; 上面代码定义了一个“类”，可以看到里面有一个constructor方法，这就是构造方法，而this关键字则代表实例对象。也就是说，ES5的构造函数Point，对应ES6的Point类的构造方法。 Point类除了构造方法，还定义了一个toString方法。注意，定义“类”的方法的时候，前面不需要加上function这个关键字，直接把函数定义放进去了就可以了。另外，方法之间不需要逗号分隔，加了会报错。 ES6的类，完全可以看作构造函数的另一种写法。 class Point &#123; // ... &#125; typeof Point // &quot;function&quot; Point === Point.prototype.constructor // true 上面代码表明，类的数据类型就是函数，类本身就指向构造函数。 使用的时候，也是直接对类使用new命令，跟构造函数的用法完全一致。 class Bar &#123; doStuff() &#123; console.log(&#39;stuff&#39;); &#125; &#125; var b = new Bar(); b.doStuff() // &quot;stuff&quot; 构造函数的prototype属性，在ES6的“类”上面继续存在。事实上，类的所有方法都定义在类的prototype属性上面。 class Point &#123; constructor()&#123; // ... &#125; toString()&#123; // ... &#125; toValue()&#123; // ... &#125; &#125; // 等同于 Point.prototype = &#123; toString()&#123;&#125;, toValue()&#123;&#125; &#125;; 在类的实例上面调用方法，其实就是调用原型上的方法。 class B &#123;&#125; let b = new B(); b.constructor === B.prototype.constructor // true 上面代码中，b是B类的实例，它的constructor方法就是B类原型的constructor方法。 由于类的方法都定义在prototype对象上面，所以类的新方法可以添加在prototype对象上面。Object.assign方法可以很方便地一次向类添加多个方法。 class Point &#123; constructor()&#123; // ... &#125; &#125; Object.assign(Point.prototype, &#123; toString()&#123;&#125;, toValue()&#123;&#125; &#125;); prototype对象的constructor属性，直接指向“类”的本身，这与ES5的行为是一致的。 Point.prototype.constructor === Point // true 另外，类的内部所有定义的方法，都是不可枚举的（non-enumerable）。 class Point &#123; constructor(x, y) &#123; // ... &#125; toString() &#123; // ... &#125; &#125; Object.keys(Point.prototype) // [] Object.getOwnPropertyNames(Point.prototype) // [&quot;constructor&quot;,&quot;toString&quot;] 上面代码中，toString方法是Point类内部定义的方法，它是不可枚举的。这一点与ES5的行为不一致。 var Point = function (x, y) &#123; // ... &#125;; Point.prototype.toString = function() &#123; // ... &#125;; Object.keys(Point.prototype) // [&quot;toString&quot;] Object.getOwnPropertyNames(Point.prototype) // [&quot;constructor&quot;,&quot;toString&quot;] 上面代码采用ES5的写法，toString方法就是可枚举的。 类的属性名，可以采用表达式。 let methodName = &quot;getArea&quot;; class Square&#123; constructor(length) &#123; // ... &#125; [methodName]() &#123; // ... &#125; &#125; 上面代码中，Square类的方法名getArea，是从表达式得到的。 constructor方法constructor方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。一个类必须有constructor方法，如果没有显式定义，一个空的constructor方法会被默认添加。 constructor() {}constructor方法默认返回实例对象（即this），完全可以指定返回另外一个对象。 class Foo &#123; constructor() &#123; return Object.create(null); &#125; &#125; new Foo() instanceof Foo // false 上面代码中，constructor函数返回一个全新的对象，结果导致实例对象不是Foo类的实例。 类的构造函数，不使用new是没法调用的，会报错。这是它跟普通构造函数的一个主要区别，后者不用new也可以执行。 class Foo &#123; constructor() &#123; return Object.create(null); &#125; &#125; Foo() // TypeError: Class constructor Foo cannot be invoked without &#39;new&#39; 类的实例对象生成类的实例对象的写法，与ES5完全一样，也是使用new命令。如果忘记加上new，像函数那样调用Class，将会报错。 // 报错 var point = Point(2, 3); // 正确 var point = new Point(2, 3); 与ES5一样，实例的属性除非显式定义在其本身（即定义在this对象上），否则都是定义在原型上（即定义在class上）。 //定义类 class Point &#123; constructor(x, y) &#123; this.x = x; this.y = y; &#125; toString() &#123; return &#39;(&#39; + this.x + &#39;, &#39; + this.y + &#39;)&#39;; &#125; &#125; var point = new Point(2, 3); point.toString() // (2, 3) point.hasOwnProperty(&#39;x&#39;) // true point.hasOwnProperty(&#39;y&#39;) // true point.hasOwnProperty(&#39;toString&#39;) // false point.__proto__.hasOwnProperty(&#39;toString&#39;) // true 上面代码中，x和y都是实例对象point自身的属性（因为定义在this变量上），所以hasOwnProperty方法返回true，而toString是原型对象的属性（因为定义在Point类上），所以hasOwnProperty方法返回false。这些都与ES5的行为保持一致。 与ES5一样，类的所有实例共享一个原型对象。 var p1 = new Point(2,3); var p2 = new Point(3,2); p1.__proto__ === p2.__proto__ //true 上面代码中，p1和p2都是Point的实例，它们的原型都是Point.prototype，所以__proto__属性是相等的。 这也意味着，可以通过实例的__proto__属性为Class添加方法。 var p1 = new Point(2,3); var p2 = new Point(3,2); p1.__proto__.printName = function () &#123; return &#39;Oops&#39; &#125;; p1.printName() // &quot;Oops&quot; p2.printName() // &quot;Oops&quot; var p3 = new Point(4,2); p3.printName() // &quot;Oops&quot; 上面代码在p1的原型上添加了一个printName方法，由于p1的原型就是p2的原型，因此p2也可以调用这个方法。而且，此后新建的实例p3也可以调用这个方法。这意味着，使用实例的__proto__属性改写原型，必须相当谨慎，不推荐使用，因为这会改变Class的原始定义，影响到所有实例。 不存在变量提升Class不存在变量提升（hoist），这一点与ES5完全不同。 new Foo(); // ReferenceError class Foo &#123;&#125; 上面代码中，Foo类使用在前，定义在后，这样会报错，因为ES6不会把类的声明提升到代码头部。这种规定的原因与下文要提到的继承有关，必须保证子类在父类之后定义。 &#123; let Foo = class &#123;&#125;; class Bar extends Foo &#123; &#125; &#125; 上面的代码不会报错，因为Bar继承Foo的时候，Foo已经有定义了。但是，如果存在class的提升，上面代码就会报错，因为class会被提升到代码头部，而let命令是不提升的，所以导致Bar继承Foo的时候，Foo还没有定义。 Class表达式与函数一样，类也可以使用表达式的形式定义。 const MyClass = class Me &#123; getClassName() &#123; return Me.name; &#125; &#125;; 上面代码使用表达式定义了一个类。需要注意的是，这个类的名字是MyClass而不是Me，Me只在Class的内部代码可用，指代当前类。 let inst = new MyClass(); inst.getClassName() // Me Me.name // ReferenceError: Me is not defined 上面代码表示，Me只在Class内部有定义。 如果类的内部没用到的话，可以省略Me，也就是可以写成下面的形式。 const MyClass = class &#123; /* ... */ &#125;; 采用Class表达式，可以写出立即执行的Class。 let person = new class &#123; constructor(name) &#123; this.name = name; &#125; sayName() &#123; console.log(this.name); &#125; &#125;(&#39;张三&#39;); person.sayName(); // &quot;张三&quot; 上面代码中，person是一个立即执行的类的实例。 私有方法私有方法是常见需求，但 ES6 不提供，只能通过变通方法模拟实现。 一种做法是在命名上加以区别。 class Widget &#123; // 公有方法 foo (baz) &#123; this._bar(baz); &#125; // 私有方法 _bar(baz) &#123; return this.snaf = baz; &#125; // ... &#125; 上面代码中，_bar方法前面的下划线，表示这是一个只限于内部使用的私有方法。但是，这种命名是不保险的，在类的外部，还是可以调用到这个方法。 另一种方法就是索性将私有方法移出模块，因为模块内部的所有方法都是对外可见的。 class Widget &#123; foo (baz) &#123; bar.call(this, baz); &#125; // ... &#125; function bar(baz) &#123; return this.snaf = baz; &#125; 上面代码中，foo是公有方法，内部调用了bar.call(this, baz)。这使得bar实际上成为了当前模块的私有方法。 还有一种方法是利用Symbol值的唯一性，将私有方法的名字命名为一个Symbol值。 const bar = Symbol(&#39;bar&#39;); const snaf = Symbol(&#39;snaf&#39;); export default class myClass&#123; // 公有方法 foo(baz) &#123; this[bar](baz); &#125; // 私有方法 [bar](baz) &#123; return this[snaf] = baz; &#125; // ... &#125;; 上面代码中，bar和snaf都是Symbol值，导致第三方无法获取到它们，因此达到了私有方法和私有属性的效果。 this的指向类的方法内部如果含有this，它默认指向类的实例。但是，必须非常小心，一旦单独使用该方法，很可能报错。 class Logger &#123; printName(name = &#39;there&#39;) &#123; this.print(`Hello $&#123;name&#125;`); &#125; print(text) &#123; console.log(text); &#125; &#125; const logger = new Logger(); const &#123; printName &#125; = logger; printName(); // TypeError: Cannot read property &#39;print&#39; of undefined 上面代码中，printName方法中的this，默认指向Logger类的实例。但是，如果将这个方法提取出来单独使用，this会指向该方法运行时所在的环境，因为找不到print方法而导致报错。 一个比较简单的解决方法是，在构造方法中绑定this，这样就不会找不到print方法了。 class Logger &#123; constructor() &#123; this.printName = this.printName.bind(this); &#125; // ... &#125; 另一种解决方法是使用箭头函数。 class Logger &#123; constructor() &#123; this.printName = (name = &#39;there&#39;) =&gt; &#123; this.print(`Hello $&#123;name&#125;`); &#125;; &#125; // ... &#125; 还有一种解决方法是使用Proxy，获取方法的时候，自动绑定this。 function selfish (target) &#123; const cache = new WeakMap(); const handler = &#123; get (target, key) &#123; const value = Reflect.get(target, key); if (typeof value !== &#39;function&#39;) &#123; return value; &#125; if (!cache.has(value)) &#123; cache.set(value, value.bind(target)); &#125; return cache.get(value); &#125; &#125;; const proxy = new Proxy(target, handler); return proxy; &#125; const logger = selfish(new Logger()); 严格模式类和模块的内部，默认就是严格模式，所以不需要使用use strict指定运行模式。只要你的代码写在类或模块之中，就只有严格模式可用。 考虑到未来所有的代码，其实都是运行在模块之中，所以ES6实际上把整个语言升级到了严格模式。 name属性由于本质上，ES6的类只是ES5的构造函数的一层包装，所以函数的许多特性都被Class继承，包括name属性。 class Point &#123;&#125; Point.name // &quot;Point&quot; name属性总是返回紧跟在class关键字后面的类名。 Class的继承基本用法Class之间可以通过extends关键字实现继承，这比ES5的通过修改原型链实现继承，要清晰和方便很多。 class ColorPoint extends Point &#123;&#125; 上面代码定义了一个ColorPoint类，该类通过extends关键字，继承了Point类的所有属性和方法。但是由于没有部署任何代码，所以这两个类完全一样，等于复制了一个Point类。下面，我们在ColorPoint内部加上代码。 class ColorPoint extends Point &#123; constructor(x, y, color) &#123; super(x, y); // 调用父类的constructor(x, y) this.color = color; &#125; toString() &#123; return this.color + &#39; &#39; + super.toString(); // 调用父类的toString() &#125; &#125; 上面代码中，constructor方法和toString方法之中，都出现了super关键字，它在这里表示父类的构造函数，用来新建父类的this对象。 子类必须在constructor方法中调用super方法，否则新建实例时会报错。这是因为子类没有自己的this对象，而是继承父类的this对象，然后对其进行加工。如果不调用super方法，子类就得不到this对象。 class Point &#123; /* ... */ &#125; class ColorPoint extends Point &#123; constructor() &#123; &#125; &#125; let cp = new ColorPoint(); // ReferenceError 上面代码中，ColorPoint继承了父类Point，但是它的构造函数没有调用super方法，导致新建实例时报错。 ES5的继承，实质是先创造子类的实例对象this，然后再将父类的方法添加到this上面（Parent.apply(this)）。ES6的继承机制完全不同，实质是先创造父类的实例对象this（所以必须先调用super方法），然后再用子类的构造函数修改this。 如果子类没有定义constructor方法，这个方法会被默认添加，代码如下。也就是说，不管有没有显式定义，任何一个子类都有constructor方法。 constructor(...args) &#123; super(...args); &#125; 另一个需要注意的地方是，在子类的构造函数中，只有调用super之后，才可以使用this关键字，否则会报错。这是因为子类实例的构建，是基于对父类实例加工，只有super方法才能返回父类实例。 class Point &#123; constructor(x, y) &#123; this.x = x; this.y = y; &#125; &#125; class ColorPoint extends Point &#123; constructor(x, y, color) &#123; this.color = color; // ReferenceError super(x, y); this.color = color; // 正确 &#125; &#125; 上面代码中，子类的constructor方法没有调用super之前，就使用this关键字，结果报错，而放在super方法之后就是正确的。 下面是生成子类实例的代码。 let cp = new ColorPoint(25, 8, &#39;green&#39;); cp instanceof ColorPoint // true cp instanceof Point // true 上面代码中，实例对象cp同时是ColorPoint和Point两个类的实例，这与ES5的行为完全一致。 类的prototype属性和__proto__属性大多数浏览器的ES5实现之中，每一个对象都有__proto__属性，指向对应的构造函数的prototype属性。Class作为构造函数的语法糖，同时有prototype属性和__proto__属性，因此同时存在两条继承链。 （1）子类的__proto__属性，表示构造函数的继承，总是指向父类。 （2）子类prototype属性的__proto__属性，表示方法的继承，总是指向父类的prototype属性。 class A &#123; &#125; class B extends A &#123; &#125; B.__proto__ === A // true B.prototype.__proto__ === A.prototype // true 上面代码中，子类B的__proto__属性指向父类A，子类B的prototype属性的__proto__属性指向父类A的prototype属性。 这样的结果是因为，类的继承是按照下面的模式实现的。 class A &#123; &#125; class B &#123; &#125; // B的实例继承A的实例 Object.setPrototypeOf(B.prototype, A.prototype); const b = new B(); // B的实例继承A的静态属性 Object.setPrototypeOf(B, A); const b = new B(); 《对象的扩展》一章给出过Object.setPrototypeOf方法的实现。 Object.setPrototypeOf = function (obj, proto) &#123; obj.__proto__ = proto; return obj; &#125; 因此，就得到了上面的结果。 Object.setPrototypeOf(B.prototype, A.prototype); // 等同于 B.prototype.__proto__ = A.prototype; Object.setPrototypeOf(B, A); // 等同于 B.__proto__ = A; 这两条继承链，可以这样理解：作为一个对象，子类（B）的原型（__proto__属性）是父类（A）；作为一个构造函数，子类（B）的原型（prototype属性）是父类的实例。 Object.create(A.prototype); // 等同于 B.prototype.__proto__ = A.prototype; Extends 的继承目标extends关键字后面可以跟多种类型的值。 class B extends A &#123; &#125; 上面代码的A，只要是一个有prototype属性的函数，就能被B继承。由于函数都有prototype属性（除了Function.prototype函数），因此A可以是任意函数。 下面，讨论三种特殊情况。 第一种特殊情况，子类继承Object类。 class A extends Object &#123; &#125; A.__proto__ === Object // true A.prototype.__proto__ === Object.prototype // true 这种情况下，A其实就是构造函数Object的复制，A的实例就是Object的实例。 第二种特殊情况，不存在任何继承。 class A &#123; &#125; A.__proto__ === Function.prototype // true A.prototype.__proto__ === Object.prototype // true 这种情况下，A作为一个基类（即不存在任何继承），就是一个普通函数，所以直接继承Funciton.prototype。但是，A调用后返回一个空对象（即Object实例），所以A.prototype.__proto__指向构造函数（Object）的prototype属性。 第三种特殊情况，子类继承null。 class A extends null &#123; &#125; A.__proto__ === Function.prototype // true A.prototype.__proto__ === undefined // true 这种情况与第二种情况非常像。A也是一个普通函数，所以直接继承Funciton.prototype。但是，A调用后返回的对象不继承任何方法，所以它的__proto__指向Function.prototype，即实质上执行了下面的代码。 class C extends null &#123; constructor() &#123; return Object.create(null); &#125; &#125; Object.getPrototypeOf() Object.getPrototypeOf方法可以用来从子类上获取父类。 Object.getPrototypeOf(ColorPoint) === Point // true 因此，可以使用这个方法判断，一个类是否继承了另一个类。 super 关键字super这个关键字，既可以当作函数使用，也可以当作对象使用。在这两种情况下，它的用法完全不同。 第一种情况，super作为函数调用时，代表父类的构造函数。ES6 要求，子类的构造函数必须执行一次super函数。 class A &#123;&#125; class B extends A &#123; constructor() &#123; super(); &#125; &#125; 上面代码中，子类B的构造函数之中的super()，代表调用父类的构造函数。这是必须的，否则 JavaScript 引擎会报错。 注意，super虽然代表了父类A的构造函数，但是返回的是子类B的实例，即super内部的this指的是B，因此super()在这里相当于A.prototype.constructor.call(this)。 class A &#123; constructor() &#123; console.log(new.target.name); &#125; &#125; class B extends A &#123; constructor() &#123; super(); &#125; &#125; new A() // A new B() // B 上面代码中，new.target指向当前正在执行的函数。可以看到，在super()执行时，它指向的是子类B的构造函数，而不是父类A的构造函数。也就是说，super()内部的this指向的是B。 作为函数时，super()只能用在子类的构造函数之中，用在其他地方就会报错。 class A &#123;&#125; class B extends A &#123; m() &#123; super(); // 报错 &#125; &#125; 上面代码中，super()用在B类的m方法之中，就会造成句法错误。 第二种情况，super作为对象时，在普通方法中，指向父类的原型对象；在静态方法中，指向父类。 class A &#123; p() &#123; return 2; &#125; &#125; class B extends A &#123; constructor() &#123; super(); console.log(super.p()); // 2 &#125; &#125; let b = new B(); 上面代码中，子类B当中的super.p()，就是将super当作一个对象使用。这时，super在普通方法之中，指向A.prototype，所以super.p()就相当于A.prototype.p()。 这里需要注意，由于super指向父类的原型对象，所以定义在父类实例上的方法或属性，是无法通过super调用的。 class A &#123; constructor() &#123; this.p = 2; &#125; &#125; class B extends A &#123; get m() &#123; return super.p; &#125; &#125; let b = new B(); b.m // undefined 上面代码中，p是父类A实例的属性，super.p就引用不到它。 如果属性定义在父类的原型对象上，super就可以取到。 class A &#123;&#125; A.prototype.x = 2; class B extends A &#123; constructor() &#123; super(); console.log(super.x) // 2 &#125; &#125; let b = new B(); 上面代码中，属性x是定义在A.prototype上面的，所以super.x可以取到它的值。 ES6 规定，通过super调用父类的方法时，super会绑定子类的this。 class A &#123; constructor() &#123; this.x = 1; &#125; print() &#123; console.log(this.x); &#125; &#125; class B extends A &#123; constructor() &#123; super(); this.x = 2; &#125; m() &#123; super.print(); &#125; &#125; let b = new B(); b.m() // 2 上面代码中，super.print()虽然调用的是A.prototype.print()，但是A.prototype.print()会绑定子类B的this，导致输出的是2，而不是1。也就是说，实际上执行的是super.print.call(this)。 由于绑定子类的this，所以如果通过super对某个属性赋值，这时super就是this，赋值的属性会变成子类实例的属性。 class A &#123; constructor() &#123; this.x = 1; &#125; &#125; class B extends A &#123; constructor() &#123; super(); this.x = 2; super.x = 3; console.log(super.x); // undefined console.log(this.x); // 3 &#125; &#125; let b = new B(); 上面代码中，super.x赋值为3，这时等同于对this.x赋值为3。而当读取super.x的时候，读的是A.prototype.x，所以返回undefined。 如果super作为对象，用在静态方法之中，这时super将指向父类，而不是父类的原型对象。 class Parent &#123; static myMethod(msg) &#123; console.log(&#39;static&#39;, msg); &#125; myMethod(msg) &#123; console.log(&#39;instance&#39;, msg); &#125; &#125; class Child extends Parent &#123; static myMethod(msg) &#123; super.myMethod(msg); &#125; myMethod(msg) &#123; super.myMethod(msg); &#125; &#125; Child.myMethod(1); // static 1 var child = new Child(); child.myMethod(2); // instance 2 上面代码中，super在静态方法之中指向父类，在普通方法之中指向父类的原型对象。 注意，使用super的时候，必须显式指定是作为函数、还是作为对象使用，否则会报错。 class A &#123;&#125; class B extends A &#123; constructor() &#123; super(); console.log(super); // 报错 &#125; &#125; 上面代码中，console.log(super)当中的super，无法看出是作为函数使用，还是作为对象使用，所以 JavaScript 引擎解析代码的时候就会报错。这时，如果能清晰地表明super的数据类型，就不会报错。 class A &#123;&#125; class B extends A &#123; constructor() &#123; super(); console.log(super.valueOf() instanceof B); // true &#125; &#125; let b = new B(); 上面代码中，super.valueOf()表明super是一个对象，因此就不会报错。同时，由于super绑定B的this，所以super.valueOf()返回的是一个B的实例。 最后，由于对象总是继承其他对象的，所以可以在任意一个对象中，使用super关键字。 var obj = &#123; toString() &#123; return &quot;MyObject: &quot; + super.toString(); &#125; &#125;; obj.toString(); // MyObject: [object Object] 实例的__proto__属性子类实例的__proto__属性的__proto__属性，指向父类实例的__proto__属性。也就是说，子类的原型的原型，是父类的原型。 var p1 = new Point(2, 3); var p2 = new ColorPoint(2, 3, &#39;red&#39;); p2.__proto__ === p1.__proto__ // false p2.__proto__.__proto__ === p1.__proto__ // true 上面代码中，ColorPoint继承了Point，导致前者原型的原型是后者的原型。 因此，通过子类实例的__proto__.__proto__属性，可以修改父类实例的行为。 p2.__proto__.__proto__.printName = function () &#123; console.log(&#39;Ha&#39;); &#125;; p1.printName() // &quot;Ha&quot; 上面代码在ColorPoint的实例p2上向Point类添加方法，结果影响到了Point的实例p1。 原生构造函数的继承原生构造函数是指语言内置的构造函数，通常用来生成数据结构。ECMAScript的原生构造函数大致有下面这些。 Boolean()Number()String()Array()Date()Function()RegExp()Error()Object()以前，这些原生构造函数是无法继承的，比如，不能自己定义一个Array的子类。 function MyArray() &#123; Array.apply(this, arguments); &#125; MyArray.prototype = Object.create(Array.prototype, &#123; constructor: &#123; value: MyArray, writable: true, configurable: true, enumerable: true &#125; &#125;); 上面代码定义了一个继承Array的MyArray类。但是，这个类的行为与Array完全不一致。 var colors = new MyArray(); colors[0] = &quot;red&quot;; colors.length // 0 colors.length = 0; colors[0] // &quot;red&quot; 之所以会发生这种情况，是因为子类无法获得原生构造函数的内部属性，通过Array.apply()或者分配给原型对象都不行。原生构造函数会忽略apply方法传入的this，也就是说，原生构造函数的this无法绑定，导致拿不到内部属性。 ES5是先新建子类的实例对象this，再将父类的属性添加到子类上，由于父类的内部属性无法获取，导致无法继承原生的构造函数。比如，Array构造函数有一个内部属性[[DefineOwnProperty]]，用来定义新属性时，更新length属性，这个内部属性无法在子类获取，导致子类的length属性行为不正常。 下面的例子中，我们想让一个普通对象继承Error对象。 var e = &#123;&#125;; Object.getOwnPropertyNames(Error.call(e)) // [ &#39;stack&#39; ] Object.getOwnPropertyNames(e) // [] 上面代码中，我们想通过Error.call(e)这种写法，让普通对象e具有Error对象的实例属性。但是，Error.call()完全忽略传入的第一个参数，而是返回一个新对象，e本身没有任何变化。这证明了Error.call(e)这种写法，无法继承原生构造函数。 ES6允许继承原生构造函数定义子类，因为ES6是先新建父类的实例对象this，然后再用子类的构造函数修饰this，使得父类的所有行为都可以继承。下面是一个继承Array的例子。 class MyArray extends Array &#123; constructor(...args) &#123; super(...args); &#125; &#125; var arr = new MyArray(); arr[0] = 12; arr.length // 1 arr.length = 0; arr[0] // undefined 上面代码定义了一个MyArray类，继承了Array构造函数，因此就可以从MyArray生成数组的实例。这意味着，ES6可以自定义原生数据结构（比如Array、String等）的子类，这是ES5无法做到的。 上面这个例子也说明，extends关键字不仅可以用来继承类，还可以用来继承原生的构造函数。因此可以在原生数据结构的基础上，定义自己的数据结构。下面就是定义了一个带版本功能的数组。 class VersionedArray extends Array &#123; constructor() &#123; super(); this.history = [[]]; &#125; commit() &#123; this.history.push(this.slice()); &#125; revert() &#123; this.splice(0, this.length, ...this.history[this.history.length - 1]); &#125; &#125; var x = new VersionedArray(); x.push(1); x.push(2); x // [1, 2] x.history // [[]] x.commit(); x.history // [[], [1, 2]] x.push(3); x // [1, 2, 3] x.revert(); x // [1, 2] 上面代码中，VersionedArray结构会通过commit方法，将自己的当前状态存入history属性，然后通过revert方法，可以撤销当前版本，回到上一个版本。除此之外，VersionedArray依然是一个数组，所有原生的数组方法都可以在它上面调用。 下面是一个自定义Error子类的例子。 class ExtendableError extends Error &#123; constructor(message) &#123; super(); this.message = message; this.stack = (new Error()).stack; this.name = this.constructor.name; &#125; &#125; class MyError extends ExtendableError &#123; constructor(m) &#123; super(m); &#125; &#125; var myerror = new MyError(&#39;ll&#39;); myerror.message // &quot;ll&quot; myerror instanceof Error // true myerror.name // &quot;MyError&quot; myerror.stack // Error // at MyError.ExtendableError // ... 注意，继承Object的子类，有一个行为差异。 class NewObj extends Object&#123; constructor()&#123; super(...arguments); &#125; &#125; var o = new NewObj(&#123;attr: true&#125;); console.log(o.attr === true); // false 上面代码中，NewObj继承了Object，但是无法通过super方法向父类Object传参。这是因为ES6改变了Object构造函数的行为，一旦发现Object方法不是通过new Object()这种形式调用，ES6规定Object构造函数会忽略参数。 Class的取值函数（getter）和存值函数（setter）与ES5一样，在Class内部可以使用get和set关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为。 class MyClass &#123; constructor() &#123; // ... &#125; get prop() &#123; return &#39;getter&#39;; &#125; set prop(value) &#123; console.log(&#39;setter: &#39;+value); &#125; &#125; let inst = new MyClass(); inst.prop = 123; // setter: 123 inst.prop // &#39;getter&#39; 上面代码中，prop属性有对应的存值函数和取值函数，因此赋值和读取行为都被自定义了。 存值函数和取值函数是设置在属性的descriptor对象上的。 class CustomHTMLElement &#123; constructor(element) &#123; this.element = element; &#125; get html() &#123; return this.element.innerHTML; &#125; set html(value) &#123; this.element.innerHTML = value; &#125; &#125; var descriptor = Object.getOwnPropertyDescriptor( CustomHTMLElement.prototype, &quot;html&quot;); &quot;get&quot; in descriptor // true &quot;set&quot; in descriptor // true 上面代码中，存值函数和取值函数是定义在html属性的描述对象上面，这与ES5完全一致。 Class 的 Generator 方法如果某个方法之前加上星号（*），就表示该方法是一个 Generator 函数。 class Foo &#123; constructor(...args) &#123; this.args = args; &#125; * [Symbol.iterator]() &#123; for (let arg of this.args) &#123; yield arg; &#125; &#125; &#125; for (let x of new Foo(&#39;hello&#39;, &#39;world&#39;)) &#123; console.log(x); &#125; // hello // world 上面代码中，Foo类的Symbol.iterator方法前有一个星号，表示该方法是一个 Generator 函数。Symbol.iterator方法返回一个Foo类的默认遍历器，for…of循环会自动调用这个遍历器。 Class 的静态方法类相当于实例的原型，所有在类中定义的方法，都会被实例继承。如果在一个方法前，加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用，这就称为“静态方法”。 class Foo &#123; static classMethod() &#123; return &#39;hello&#39;; &#125; &#125; Foo.classMethod() // &#39;hello&#39; var foo = new Foo(); foo.classMethod() // TypeError: foo.classMethod is not a function 上面代码中，Foo类的classMethod方法前有static关键字，表明该方法是一个静态方法，可以直接在Foo类上调用（Foo.classMethod()），而不是在Foo类的实例上调用。如果在实例上调用静态方法，会抛出一个错误，表示不存在该方法。 父类的静态方法，可以被子类继承。 class Foo &#123; static classMethod() &#123; return &#39;hello&#39;; &#125; &#125; class Bar extends Foo &#123; &#125; Bar.classMethod(); // &#39;hello&#39; 上面代码中，父类Foo有一个静态方法，子类Bar可以调用这个方法。 静态方法也是可以从super对象上调用的。 class Foo &#123; static classMethod() &#123; return &#39;hello&#39;; &#125; &#125; class Bar extends Foo &#123; static classMethod() &#123; return super.classMethod() + &#39;, too&#39;; &#125; &#125; Bar.classMethod(); Class的静态属性和实例属性静态属性指的是Class本身的属性，即Class.propname，而不是定义在实例对象（this）上的属性。 class Foo &#123; &#125; Foo.prop = 1; Foo.prop // 1 上面的写法为Foo类定义了一个静态属性prop。 目前，只有这种写法可行，因为ES6明确规定，Class内部只有静态方法，没有静态属性。 // 以下两种写法都无效 class Foo &#123; // 写法一 prop: 2 // 写法二 static prop: 2 &#125; Foo.prop // undefined ES7有一个静态属性的提案，目前Babel转码器支持。 这个提案对实例属性和静态属性，都规定了新的写法。 （1）类的实例属性 类的实例属性可以用等式，写入类的定义之中。 class MyClass &#123; myProp = 42; constructor() &#123; console.log(this.myProp); // 42 &#125; &#125; 上面代码中，myProp就是MyClass的实例属性。在MyClass的实例上，可以读取这个属性。 以前，我们定义实例属性，只能写在类的constructor方法里面。 class ReactCounter extends React.Component &#123; constructor(props) &#123; super(props); this.state = &#123; count: 0 &#125;; &#125; &#125; 上面代码中，构造方法constructor里面，定义了this.state属性。 有了新的写法以后，可以不在constructor方法里面定义。 class ReactCounter extends React.Component &#123; state = &#123; count: 0 &#125;; &#125; 这种写法比以前更清晰。 为了可读性的目的，对于那些在constructor里面已经定义的实例属性，新写法允许直接列出。 class ReactCounter extends React.Component &#123; constructor(props) &#123; super(props); this.state = &#123; count: 0 &#125;; &#125; state; &#125; （2）类的静态属性 类的静态属性只要在上面的实例属性写法前面，加上static关键字就可以了。 class MyClass &#123; static myStaticProp = 42; constructor() &#123; console.log(MyClass.myStaticProp); // 42 &#125; &#125; 同样的，这个新写法大大方便了静态属性的表达。 // 老写法 class Foo &#123; &#125; Foo.prop = 1; // 新写法 class Foo &#123; static prop = 1; &#125; 上面代码中，老写法的静态属性定义在类的外部。整个类生成以后，再生成静态属性。这样让人很容易忽略这个静态属性，也不符合相关代码应该放在一起的代码组织原则。另外，新写法是显式声明（declarative），而不是赋值处理，语义更好。 类的私有属性目前，有一个提案，为class加了私有属性。方法是在属性名之前，使用#表示。 class Point &#123; #x; constructor(x = 0) &#123; #x = +x; &#125; get x() &#123; return #x &#125; set x(value) &#123; #x = +value &#125; &#125; 上面代码中，#x就表示私有属性x，在Point类之外是读取不到这个属性的。还可以看到，私有属性与实例的属性是可以同名的（比如，#x与get x()）。 私有属性可以指定初始值，在构造函数执行时进行初始化。 class Point &#123; #x = 0; constructor() &#123; #x; // 0 &#125; &#125; 之所以要引入一个新的前缀#表示私有属性，而没有采用private关键字，是因为 JavaScript 是一门动态语言，使用独立的符号似乎是唯一的可靠方法，能够准确地区分一种属性是私有属性。另外，Ruby 语言使用@表示私有属性，ES6 没有用这个符号而使用#，是因为@已经被留给了 Decorator。 该提案只规定了私有属性的写法。但是，很自然地，它也可以用来写私有方法。 class Foo &#123; #a; #b; #sum() &#123; return #a + #b; &#125; printSum() &#123; console.log(#sum()); &#125; constructor(a, b) &#123; #a = a; #b = b; &#125; &#125; new.target属性new是从构造函数生成实例的命令。ES6为new命令引入了一个new.target属性，（在构造函数中）返回new命令作用于的那个构造函数。如果构造函数不是通过new命令调用的，new.target会返回undefined，因此这个属性可以用来确定构造函数是怎么调用的。 function Person(name) &#123; if (new.target !== undefined) &#123; this.name = name; &#125; else &#123; throw new Error(&#39;必须使用new生成实例&#39;); &#125; &#125; // 另一种写法 function Person(name) &#123; if (new.target === Person) &#123; this.name = name; &#125; else &#123; throw new Error(&#39;必须使用new生成实例&#39;); &#125; &#125; var person = new Person(&#39;张三&#39;); // 正确 var notAPerson = Person.call(person, &#39;张三&#39;); // 报错 上面代码确保构造函数只能通过new命令调用。 Class内部调用new.target，返回当前Class。 class Rectangle &#123; constructor(length, width) &#123; console.log(new.target === Rectangle); this.length = length; this.width = width; &#125; &#125; var obj = new Rectangle(3, 4); // 输出 true 需要注意的是，子类继承父类时，new.target会返回子类。 class Rectangle &#123; constructor(length, width) &#123; console.log(new.target === Rectangle); // ... &#125; &#125; class Square extends Rectangle &#123; constructor(length) &#123; super(length, length); &#125; &#125; var obj = new Square(3); // 输出 false 上面代码中，new.target会返回子类。 利用这个特点，可以写出不能独立使用、必须继承后才能使用的类。 class Shape &#123; constructor() &#123; if (new.target === Shape) &#123; throw new Error(&#39;本类不能实例化&#39;); &#125; &#125; &#125; class Rectangle extends Shape &#123; constructor(length, width) &#123; super(); // ... &#125; &#125; var x = new Shape(); // 报错 var y = new Rectangle(3, 4); // 正确 上面代码中，Shape类不能被实例化，只能用于继承。 注意，在函数外部，使用new.target会报错。 Mixin模式的实现Mixin模式指的是，将多个类的接口“混入”（mix in）另一个类。它在ES6的实现如下。 function mix(...mixins) &#123; class Mix &#123;&#125; for (let mixin of mixins) &#123; copyProperties(Mix, mixin); copyProperties(Mix.prototype, mixin.prototype); &#125; return Mix; &#125; function copyProperties(target, source) &#123; for (let key of Reflect.ownKeys(source)) &#123; if ( key !== &quot;constructor&quot; &amp;&amp; key !== &quot;prototype&quot; &amp;&amp; key !== &quot;name&quot; ) &#123; let desc = Object.getOwnPropertyDescriptor(source, key); Object.defineProperty(target, key, desc); &#125; &#125; &#125; 上面代码的mix函数，可以将多个对象合成为一个类。使用的时候，只要继承这个类即可。 class DistributedEdit extends mix(Loggable, Serializable) &#123; // ... &#125; ##chrome调制工具 alt+cmd+j 快速开启控制台 see also 阮一峰ECMAScript 6","categories":[],"tags":[{"name":"Web开发","slug":"Web开发","permalink":"http://example.com/tags/Web%E5%BC%80%E5%8F%91/"}]},{"title":"基础概念","slug":"Github/javascript复习笔记","date":"2017-04-12T16:19:13.000Z","updated":"2017-04-12T16:19:13.000Z","comments":true,"path":"2017/04/13/Github/javascript复习笔记/","link":"","permalink":"http://example.com/2017/04/13/Github/javascript%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/","excerpt":"变量定义变量：var a = 10;var(数据类型) a(变量) = 10(字面值); 变量命名规则：以字母，美元符号，下划线开头的其他任意组合一些特殊字符关键字是不允许定义变量的，如：js关键字 开发过程中尽量是使用英文定义变量名，并且还要见名知意。","text":"变量定义变量：var a = 10;var(数据类型) a(变量) = 10(字面值); 变量命名规则：以字母，美元符号，下划线开头的其他任意组合一些特殊字符关键字是不允许定义变量的，如：js关键字 开发过程中尽量是使用英文定义变量名，并且还要见名知意。 数据类型数字类型（number）var num = 10;var pi = 3.1415926; 字符串（string）var c = “A”; 数组 var primes = [1,3,5]; var misc = [1.1,true,”a”]; primes[3] = 11; //在索引3上添加一个值 primes.push(14) //在数组末尾追加一个值14 primes.pop() //删除数组最后一个值 primes.shift() //删除数组第一个值 delete primes[3] //删除索引上的值，索引还在 primes.splice(3) //值和索引一起删除 var arr = primes.concat(misc); //合并两个数组成一个数组 ,相同的值并不合并。 Math对象 Math.abs()：返回参数的绝对值 Math.ceil()：向上取整，接受一个参数，返回大于该参数的最小整数。 Math.floor()：向下取整 Math.max(n,n1,...)：可接受多个参数，返回最大值 Math.min(n,n1,..)：可接受多个参数，返回最小值 Math.round()：四舍五入 Math.random()：返回0到1之间的一个伪随机数，可能等于0，但是一定小于1。 console对象 console.log(text,text2,...) //用于在console窗口输出信息。它可以接受多个参数，将它们的结果连接起来输出。如果第一个参数是格式字符串（使用了格式占位符），console.log方法将依次用后面的参数替换占位符，然后再进行输出。 console.info() //在console窗口输出信息，同时，会在输出信息的前面，加上一个蓝色图标。 console.debug() //在console窗口输出信息，同时，会在输出信息的前面，加上一个蓝色图标。 console.warn() //输出信息时，在最前面加一个黄色三角，表示警告； console.error() //输出信息时，在最前面加一个红色的叉，表示出错，同时会显示错误发生的堆栈 console.table() //可以将复合类型的数据转为表格显示。 console.count() //用于计数，输出它被调用了多少次。 console.dir() //用来对一个对象进行检查（inspect），并以易于阅读和打印的格式显示。 console.dirxml() //用于以目录树的形式，显示DOM节点。 console.assert() //接受两个参数，第一个参数是表达式，第二个参数是字符串。只有当第一个参数为false，才会输出第二个参数，否则不会有任何结果。 //这两个方法用于计时，可以算出一个操作所花费的准确时间。 console.time() console.timeEnd() //time方法表示计时开始，timeEnd方法表示计时结束。它们的参数是计时器的名称。调用timeEnd方法之后，console窗口会显示“计时器名称: 所耗费的时间”。 console.profile() //用来新建一个性能测试器（profile），它的参数是性能测试器的名字。 console.profileEnd() //用来结束正在运行的性能测试器。 console.group() console.groupend() //上面这两个方法用于将显示的信息分组。它只在输出大量信息时有用，分在一组的信息，可以用鼠标折叠/展开。 console.groupCollapsed() //用于将显示的信息分组，该组的内容，在第一次显示时是收起的（collapsed），而不是展开的。 console.trace() //显示当前执行的代码在堆栈中的调用路径。 console.clear() //用于清除当前控制台的所有输出，将光标回置到第一行。 boolean类型 ，只有两个值true/false日期[Date] undefined函数类型 function类型对象【object】 object类型 : date/数组/object/null检测数据类型的方法： typeof() 控制语句if…else switch…case语句 var weather = &#39;1&#39;; switch (weather) &#123; case &#39;1&#39;: alert(&#39;这是1&#39;); break; case &#39;2&#39;: alert(&#39;这是2&#39;); break; default: alert(&#39;这什么都不是&#39;); break; &#125; //case 后面的值匹配，则执行下面的这条语句，执行完break返回 //case 匹配不到，则执行default语句 while循环 var i = 0; while (i&lt;10) &#123; i++; if (i%2 ===0) &#123; continue;//跳出while循环 &#125; console.log(i); &#125; for循环 对象给对象添加属性和方法 var beyond = &#123; name : &#39;黄家驹&#39;, artist : [&#39;1&#39;,&#39;2&#39;] &#125; beyond.showArtist = function()&#123; document.writeln(this.name);//在浏览器中书写 &#125; **循环输出对象里属性** var property; for (property in beyond)&#123; console.log(beyond[property]); &#125; DOMDOM中获取元素的方法：document.getElementById(&#39;div&#39;);//获取DOM树上ID document.getElementsByTagName(&#39;p&#39;);//获取DOM树上标签元素 document.querySelector() //可以获取标签，class,id元素，第一个，下面的是所有的。 document.querySelectorAll(&#39;.div&#39;); DOM中一些元素的属性**nodeName:**元素的标签名称**innerText:**元素的文本内容**parentNode:**元素的父节点previousElementSibling上一个兄弟节点nextElementSibling下一个兄弟节点 **childNodes:**获取元素的子节点（包含元素节点，和文本节点）**childElementCount:**获取元素类型子节点的个数**firstElementChild:**获取第一个元素类型的子节点**lastElementChild:**获取最后一个元素类型的子节点 DOM节点的增删改var newLi = document.createElement(&#39;li&#39;); var newText = document.createTextNode(&#39;张三&#39;); newLi.innerText = newText; document.querySelector(&#39;ul&#39;).appendChild(newLi); document.querySelector(&#39;ul&#39;).removeChild(newLi); //在ul标签下，添加一个新创建的子标签，位于最后一个。 .insertBefore() //添加到在什么之前。 ##事件Event**onclick:**鼠标单击事件**onmouseover:**鼠标移动到DIV区域**onmouseot:**鼠标离开DIV区域 事件绑定：addEventListener &#39;use strict&#39; //如果给JavaScript代码标志为“严格模式”，则其中运行的所有代码都必然是严格模式下的。 其一：如果在语法检测时发现语法问题，则整个代码块失效，并导致一个语法异常。 其二：如果在运行期出现了违反严格模式的代码，则抛出执行异常。 //注：经过测试IE6,7,8,9均不支持严格模式。 window.onload = function () &#123; var btn = document.querySelector(&#39;.btn&#39;); function showMessage(event)&#123; console.log(event); event.stopPropagation();//停止事件传播 &#125; btn.addEventListener(&#39;click&#39;,showMessage,false); &#125; ##ECMAScript 6新功能let声明一个块级变量{}，即大括号里的变量。外面是访问不到的。const声明一个恒量，不可以重新声明一个值，但可以追加值。解构数组 function break()&#123; return [&#39;a&#39;,&#39;b&#39;,&#39;b&#39;]; &#125; let [A,B,C] = breakfast(); console.log(A,B,C);//a,b,c 模板字符串： let name = &#39;xixi&#39;, age = 19; let summary = `他的名字是$&#123;name&#125;，年龄是$&#123;age&#125;`; cosole.lgo(summary); 字符串的相关操作startsWith() 判断一个字符是不是以某字符串开头。endsWith() 判断一个字符是不是以某字符串结尾。includes() 判断一个字符串是不是包含某个字符串 给函数形参设置默认值 function sum(x=1,y=2)&#123; return `$&#123;x&#125;+$&#123;y&#125;`; &#125; 数组的… 1. let name = [&#39;zhangsan&#39;,&#39;lisi&#39;], name2 = [&#39;wang&#39;,...name]; console.log(name2);//wang,zhangsan,lisi 2. function sum(x,y,...arr)&#123; //函数剩余的参数，都放在arr数组中。 &#125; 箭头函数let breakfast = (dessert,drink) =&gt; dessert + drink; 普通函数 var breakfast = function breakfast(dessert,drink)&#123; return dessert + drink; &#125; 如果不返回结果,执行代码 let breakfast = (dessert,drink) =&gt; &#123; //执行代码 &#125;; 对象表达式原来的 let student = &#123; play : function()&#123;&#125; &#125; 改进的 let student = &#123; play()&#123;&#125; &#125; var drink = &#39;hot name&#39;; student[&#39;hot name&#39;] = &#39;wang&#39;; student[drink] = &#39;wang&#39;; //给对象添加带空格的属性。 //属性也可以用变量来表示 ##chrome调制工具 alt+cmd+j 快速开启控制台","categories":[{"name":"Web开发","slug":"Web开发","permalink":"http://example.com/categories/Web%E5%BC%80%E5%8F%91/"}],"tags":[]},{"title":"HTML5+CSS3笔记","slug":"Github/HTML5+CSS3","date":"2017-04-11T16:30:52.000Z","updated":"2017-04-11T16:30:52.000Z","comments":true,"path":"2017/04/12/Github/HTML5+CSS3/","link":"","permalink":"http://example.com/2017/04/12/Github/HTML5+CSS3/","excerpt":"","text":"HTML5+CSS3HTML51.HTML5网页结构&lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head lang=&quot;en&quot;&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;header&gt;网页头部&lt;/header&gt; &lt;nav&gt;导航&lt;/nav&gt; &lt;section&gt;一段内容&lt;/section&gt; &lt;article&gt;与上下文不相关的内容&lt;/article&gt; &lt;footer&gt;页脚&lt;/footer&gt; &lt;/body&gt; &lt;/html&gt; 2.HTML5新增标记header 一个页面并没有限制header的出现次数，也就是说我们可以在同一页面内，不同的内容区块上分别加上一个header标记mark 高亮显示，吸引当前用户注意。默认背景色是黄色，可以设置颜色。 details 和 summary 组合使用，目前只是chrome支持 &lt;details&gt; &lt;summary&gt; 点击我，就展示或隐藏P内容 &lt;/summary&gt; &lt;P&gt; 我是内容 &lt;/P&gt; &lt;/details&gt; progress显示进度条，可设置长度 &lt;progress max=&quot;100&quot; value=&quot;85&quot;&gt;&lt;/progress&gt; meter显示进度条，可设置长度，高度。 &lt;meter value=&quot;43&quot; max=&quot;120&quot; min=&quot;0&quot;&gt;43/120&lt;/meter&gt; 加强版的ol &lt;ol START=&quot;5&quot; TYPE=&quot;1&quot; REVERSED=&quot;reversed&quot;&gt; &lt;li&gt;...&lt;li&gt; &lt;li&gt;...&lt;li&gt; &lt;li&gt;reversed是倒序&lt;li&gt; &lt;/ol&gt; 3.web storage临时储存： //储存 sessionStorage.setItme(&#39;key&#39;,&#39;value&#39;); //读取 sessionStorage.getItem(&#39;key&#39;); 永久储存 //储存 localStorage.setItme(&#39;key&#39;,&#39;value&#39;); //读取 localStorage.getItem(&#39;key&#39;); //清空数据 localStorage.clear(); 4.audio 和 video使用方法： &lt;audio src=&quot;MP3.mp3&quot; controls=&quot;controls&quot;&gt;对于不支持的浏览器，这里的你内容会显示&lt;/audio&gt; source，可以为同一个媒体数据指定多个播放格式月编码方式，以确保浏览器可以从中选择一种自己支持的播放器进行播放。 &lt;video width=&quot;750&quot; height=&quot;400&quot; src=&quot;time.mp4&quot;&gt; &lt;source src=&quot;video.m4v&quot; type=&quot;video/mp4&quot;&gt; &lt;source src=&quot;video.webm&quot; type=&quot;video/webm&quot;&gt; &lt;source src=&quot;video.ogv&quot; type=&quot;video/ogg&quot;&gt; &lt;source src=&quot;video.mp4&quot;&gt; &lt;/video&gt; &lt;!-- autoplay=&quot;autoplay&quot; 网页加载完成之后就开始自动播放。 指定是否对数据进行预加载。 preload=&quot;none | metadata | auto (默认值)&quot; --&gt; 5.HTML5拖放HTML5拖放 CSS31.选择器*ID选择器class选择器标签选择器a &#123; color: red; &#125; ul &#123; margin-left: 0; &#125; X Y 后代选择器li a &#123; text-decoration: none; &#125; X &gt; YX Y和X &gt; Y的区别是后者只会选中直接后代。 X+Y 临近元素选择器这是邻近元素选择器，只会选中紧接在另一个元素后的元素。这上面的示例中，只有每个ul后面的第一个段落是红色的。 ul + p &#123; color: red; &#125; X:visited and X:link我们使用:link伪类来定义所有还没点击的链接。另外还有:visited伪类可以让我们给曾经点击过或者访问过的链接添加样式。 a:link &#123; color: red; &#125; a:visted &#123; color: purple; &#125; X[title]a[title] &#123; color: green; &#125; X:checkedinput[type=radio]:checked &#123; border: 1px solid black; &#125; X:hover给鼠标划过的元素添加样式 div:hover &#123; background: #e3e3e3; &#125; X:nth-child(n)要注意的是nth-child指序列里的第n个元素，从1数起。如果你想匹配列表里的第二个元素，可以使用li:nth-child(2)。 li:nth-child(3) &#123; color: red; &#125; X:first-child用于选中母元素的第一个子元素，常常用于去掉第一个或最后一个元素的边框。 ul li:first-child &#123; border-top: none; &#125; X:last-childp.class 类选择器 CSS 分组 和 嵌套 选择器 h1,h2,p &#123; color:green; &#125; 2.伪元素选择器使用方法：选择器：伪元素{属性：值}选择器：伪元素{属性：值} 1.first-line用于向某个元素中的第一行文字使用样式。 2.first-letter用于向某个元素中的文字的首字母（欧美文字）或是第一个字（中文）使用样式 3.before用于某个元素之前插入一些内容 4.after用于在某个元素之后插入内容 &lt;style&gt; p:first-line&#123;colro:red;&#125; p:first-letter&#123;font-size:30px;&#125; li:before&#123; content:&quot;...追加的文字&quot;; color:red; &#125; li:after&#123; content:&quot;...追加的文字&quot;; color:green; &#125; &lt;/style&gt; &lt;p&gt; 会被改的第一行&lt;br/&gt; 不会被改变的一行文字 &lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a&gt;一些文字&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; 3.结构性伪类选择器root将样式绑定到页面的根元素中 not相对某个结构元素使用样式，但是想排除这个结构元素下面的子结构元素。 empty当指定元素中内容为空白的时候使用的样式，多用于表格 target对页面中某个target元素指定样式，该样式只在用户点击了页面中的超链接，并跳转到target元素后起作用。 see also结构性伪类2 案例CSS3卡牌旋转滑动效果 手机移动端WEB资源整合 前端博客Wenzi前端开发-朱宝详 http://www.haorooms.com/ 前端网址导航","categories":[],"tags":[{"name":"web开发","slug":"web开发","permalink":"http://example.com/tags/web%E5%BC%80%E5%8F%91/"}]},{"title":"HTML + CSS 笔记","slug":"Github/HTML + CSS","date":"2017-04-06T11:34:07.000Z","updated":"2017-04-06T11:34:07.000Z","comments":true,"path":"2017/04/06/Github/HTML + CSS/","link":"","permalink":"http://example.com/2017/04/06/Github/HTML%20+%20CSS/","excerpt":"","text":"[toc] HTML + CSSHTML语言一、HTML的语法1.什么是HTML标记语言?HTML标记语言是表示网页信息的符号标记语言. 可以设置文本的格式，比如标题、字号、文本颜色、段落等等 可以创建列表 可以插入图像和媒体 可以建立表格 超链接，可以使用鼠标点击超链接来实现页面之间的跳转 2.HTML的标记和它的属性 文档的保存格式：.html .htm .xhtml 格式：&lt;标记&gt;内容&lt;/标记&gt; 标记的属性，就是用来控制我们的内容如何显示，格式：&lt;标记 属性1=属性值 …&gt;内容 &lt;/标记&gt; 3.语法不区分字母大小写在编写网页的时候尽量使用小写 4.文档注释注释一段内容时， &lt;!--这里是注释的内容--&gt; 5.字符实体 显示结果 描述 实体名称 实体编号 空格 &amp;nbsp; &amp;#160; … … … … 二、HTML的基本结构&lt;html&gt; &lt;head&gt; &lt;meta name=&quot;keywords&quot; content=&quot;web开发&quot;/&gt; //name的常用值：author,keywords,description,others &lt;title&gt;网页的标题，显示在浏览器窗口的内容&lt;/title&gt; &lt;style&gt;&lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt; &lt;/html&gt; 三、文档设置标记1.格式标记： p 段落标记 br 强制换行 center 居中对齐 pre 预格式化 ul 无序列表 ol 有序列表 li 列表项目 hr 水平分隔线 div 层 2.文本标记 h1~h6 标题 font 字体 b 粗字体 i 斜字体 sub 下标字体 sup 上标 em 强调，斜 strong 强调，粗 small 小型字体 big 大型字体 u 下划线字体 3.图像标记使用方法： &lt;img src=&quot;路径/文件名.图片格式&quot; width=&quot;属性值&quot; height=&quot;属性值&quot; border=&quot;属性值&quot; alt=&quot;属性值&quot;&gt; img标记的属性 src 指定要加载的图片路径、名称和格式 width 指定宽度 height 高度 border 边框 alt 1.当网页上的图片加载完成后，鼠标移动到上面，会显示指定的属性文字。2、如果图像加载失败，会用文字来替代图像。3.搜索引擎可以通过这个属性的文字来抓取图片 4.超链接的使用&lt;a href=&quot;链接的地址，可以是网页，视音频，图片&quot; target=&quot;打开方式&quot; name=&quot;页面锚点名称&quot;&gt;链接文字或者图片&lt;/a&gt; &lt;a name=&quot;页面中的锚点&quot;&gt;&lt;/a&gt; target属性 _blank 在一个新的窗口中打开链接 _seif (默认) 在当前窗口中打开链接 _parent 在父窗口中打开页面（框架中使用较多） _top 在顶层窗口中打开文件（框架中使用较多） name属性 四、表格table标记基本格式： &lt;table 属性1=&quot;属性值1&quot; 属性2=&quot;属性值2&quot; ...&gt;表格内容&lt;/table&gt; table标记的属性 width 表示表格的宽度，px , % height 表示表格的高度，px , % border 表示表格的外边框 align 表格里的文字（默认）居左显示：left | center | right cellspacing 单元格之间的间距，默认2px cellpadding 单元格内容与单元格边框的显示距离 frame 控制表格边框最外层的四条线框void | above | below | hsides | lhs | rhs | vsides | box | border无边框（默认）| 仅顶部有边框 | 底部 | 仅有顶部和底部 | 左侧 | 右侧 | 仅有左右边框 | 包含4个边框 | 包含4个边框 rules 控制是否显示以及如何显示单元格之间的分隔线none | all | rows | clos | groups表示无分割线（默认）| 包括所有 | 仅有行 | 仅有列分割线 | 行组合列祖之间有分割线 tr,td组合可以参与页面布局 caption标记如果使用表格需要标题，那么就可以使用caption标记，位于table标记之后tr标记之前。属性align : top | left | right | bottom标题放在表格的上左右下部。 tr标记 bgcolor=”颜色值”设置背景颜色 align=”bottom | middle | top” 设置垂直方向对齐方式 valign=”left | right | center” 设置水平方向对齐方式td和th标记td和th都是单元格的标记，其必须嵌套在tr标签内，是成对出现的th是表头，td是数据标记，两者的标记属性都一样。 bgcolor 背景色 align 设置单元格对齐方式 valign 设置单元格垂直对齐方式 width height rowspan 设置单元格所占行数 colspan 设置单元格所占列数 五、HTML框架HTML框架将浏览器划分成不同的部分，每一部分加载不同的页面，实现在同一浏览器窗口中加载多个页面的效果。 frameset标记的属性 cols 使用像素数，%分割左右窗口，” * “号表示剩余部分 rows 分割上下窗口 frameborder 指定是否显示边框，0不显示，1显示 border 设置边框的大小，默认值是5像素 frame子窗口标记在frameset中设置了几个窗口，就必须对应使用几个frame，而且还必须使用src属性指定一个页面。 src 加载网页文件的URL地址 name 是链接笔记的target所要参数 noresize 表示不能调整框架大小，没有 scrolling 是否需要滚动条 auto | yes | no frameborder 指定是否显示边框，0不显示，1显示语法格式：&lt;frameset rows=&quot;90,*,90&quot; border=&quot;1&quot;&gt; &lt;frame name=&quot;top&quot; src=&quot;top.html&quot; /&gt; &lt;frameset cols=&quot;20%,80%&quot;&gt; &lt;frame name=&quot;left&quot; src=&quot;left.html&quot;/&gt; &lt;frame name=&quot;right&quot; src=&quot;right.html&quot;/&gt; &lt;/frameset&gt; &lt;frame name=&quot;bottom&quot; src=&quot;bottom.html&quot; /&gt; &lt;/frameset&gt; 六、表单form&lt;form action=&quot;表单提交的服务器地址&quot; name=&quot;表单名称&quot; method=&quot;提交方式&quot;&gt; &lt;/form&gt; get方式提交：会将表单的内容附加在URL地址后面，所以限制了提交的内容长度，不超过8192个字符，且不具备保密。 post方式提交：将表单中的数据一并包含在表单主体中，一起传送到服务器中处理，没有数据大小地址限制。 表单的其它属性 enctype 设置表单资料的编码方式 target 和超链接的类似。 input&lt;input type=&quot;&quot; name=&quot;定义控件的名称&quot; size=&quot;控件长度&quot; maxlength=&quot;输入框中最大允许输入的字符数&quot;&gt; &lt;!-- type=text | password *表示一个文本输入域 | 表示一个密码输入域 type=submit | reset | button *表示提交按钮 | 重置按钮 | 普通按钮 type=radio | checkbox *表示单选框和复选框，单选框都可以使用checked=&quot;checked&quot;表示默认选项 type=hidden *表示为隐藏表单域 --&gt; textarea&lt;textarea name=&quot;name&quot; rows=&quot;行数&quot; cols=&quot;列数&quot;&gt;多行文本域&lt;/textarea&gt; select&lt;select name=&quot;&quot;&gt; &lt;option value=&quot;value1&quot; selected&gt;选项一&lt;/option&gt; &lt;option value=&quot;value2&quot; selected&gt;选项二&lt;/option&gt; &lt;option value=&quot;value3&quot; selected&gt;选项三&lt;/option&gt; &lt;/select&gt; CSS样式表1.使用CSS样式的方式 内嵌样式表 嵌入式样式表 引入式样式表 &lt;p style=&quot;font-size:14px;&quot;&gt; &lt;style&gt;&lt;/style&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;style.css&quot;&gt; 2.定义样式表1.HTML标记定义2.class定义3.ID定义4.组合选择器(同时控制多个元素)5.伪元素选择器(CSS3里的内容)p&#123;font-size:12px;&#125; .p&#123;font-size:12px;&#125; #p&#123;font-size:12px;&#125; h1,h2,h3&#123;font-size:12px;&#125; 优先级：ID&gt;class&gt;HTML 3.常见属性1.颜色属性p&#123;color:red;&#125; p&#123;color:#ff6600;&#125; p&#123;color:rgb(255,255,255);&#125; p&#123;color:rgba(255,255,255,1);&#125; 2.字体属性font-size px 设置一个固定值 % 父元素的百分比 smaller 比父元素更小 larger 比父元素更大 inherit 继承父元素的font-familyfont-family: Microsoft Yahei, serif;可以使用逗号2隔开，以确保字体不存在的时候直接使用下一个字体。font-weight normal 默认值400 bold 粗700 bolder 更粗 lighter 更细font-style normal 政策 italic 斜体 oblique 倾斜 inherit 继承3.背景颜色```css/背景色/body {background-color:#b0c4de;}/背景图像/body {background-image:url(‘bgdesert.jpg’);}/水平平铺/body{background-image:url(‘gradient2.png’);background-repeat:repeat-x;}/不平铺/background-repeat:no-repeat; /简写属性/body {background:#ffffff url(‘img_tree.png’) no-repeat right top;} #### 4.文本属性 - text-align: left | center | right 横向排列 - line-height: 文本行高 - tex-indent 首行缩进 - letter-spacing 字符间距（可设置数值） - word-spacing 单词间距（可设置数值） - direction: ltr | rtl 文本方向,默认从左到右， - text-transform: none | capitalize | uppercase | lowercase | inherit 默认 | 单词首字母大写 | 大写字母 | 小写字母 | 继承父元素的 #### 5.边框属性 - dotted:定义一个点线边框 - dashed: 定义一个虚线边框 - solid: 定义实线边框 ```css border:5px solid red; 6.列表属性ul.a &#123;list-style-type: circle;&#125;/*空心圆*/ ul.b &#123;list-style-type: square;&#125;/*实心方块*/ ol.c &#123;list-style-type: upper-roman;&#125;/*罗马字符*/ ol.d &#123;list-style-type: lower-alpha;&#125;/*小写字母*/ /** lower-roman 小写罗马字符 upper-roman 大写 */ /*将图象设置为列表项标志。*/ ul &#123; list-style-image: url(&#39;sqpurple.gif&#39;); &#125; 4.DIV+CSS布局盒模型 定位position: relative | fixed | absolute 定位距离：left、right、top、bottom覆盖优先顺序：z-index : 1 (数值越大越优先) display : none | block | inline层不显示，块显示，内联显示","categories":[],"tags":[{"name":"Web开发","slug":"Web开发","permalink":"http://example.com/tags/Web%E5%BC%80%E5%8F%91/"}]},{"title":"Mac设置指南","slug":"Blog/强迫症的 Mac 设置指南","date":"2017-04-04T13:13:02.000Z","updated":"2017-04-04T13:13:02.000Z","comments":true,"path":"2017/04/04/Blog/强迫症的 Mac 设置指南/","link":"","permalink":"http://example.com/2017/04/04/Blog/%E5%BC%BA%E8%BF%AB%E7%97%87%E7%9A%84%20Mac%20%E8%AE%BE%E7%BD%AE%E6%8C%87%E5%8D%97/","excerpt":"","text":"强迫症的 Mac 设置指南如何配置一个高效的 Mac 工作环境English Version Table of Contents OS X 功能键 全键盘控制 Spotlight 快捷键 输入法快捷键 其他快捷键 设置 Trackpad 轻点来点按 语音 词典 Dock Position 更改 Caps Lock 键为 Control 键 Remove all Dock icons[OCD] 重置 Launchpad 上图标位置[OCD] 创建大小写敏感的工作区 Keychain Access 常用工具 Homebrew Homebrew Cask iTerm2 Oh My Zsh stow Git 常用别名 Scroll Reverser ShiftIt Sublime Text 2 MacDown z Vimium LastPass SourceTree CheatSheet Alfred 开发工具 Java jEnv 民间使用的 Java 版本切换方法 Java[OCD] IntelliJ IDEA rbenv Ruby 常用别名 一直想写这么一篇文章，把我从同事那里学到的经验分享出来。市面上有很多类似的文章，写得都非常好，让我受益匪浅。不过我还是有一些自己总结出来的经验想要分享。 在工作中，我一般会在 1 到 10 人的团队中，经常会结对编程，即两个人共用一台 Mac 工作，因此也经常会把 Mac 外接一个大显示器、鼠标和键盘。我的常用开发平台有 Java、Ruby、Node.js、Web 等，使用 JetBrains 的开发工具，比如 IntelliJ IDEA、RubyMine、WebStorm 等。 我深知自己的知识有限，所以写下本文以便和大家切磋交流。同时更有效率的方法和更好的工具也在不断涌现，我也贪心的希望把更好的方法和工具都收集更到到这里，我会不断更新本文，让它尽量不过时。最新内容请访问：https://github.com/macdao/ocds-guide-to-setting-up-mac。欢迎通过 GitHub 的Issues或者直接Pull Requests方式来分享你的经验。期待你的反馈。 我认为“一个高效的 Mac 工作环境”有以下几个特点： 自动化 举个例子。手动安装一个应用，需要1)打开浏览器，2)搜索应用的名字，3)打开应用网站，4)寻找下载链接和安装方法，5)下载并等待下载完成，6)安装下载文件，7)可能还有后续的安装步骤。而自动化安装一个应用，只需要1)打开终端工具，2)敲入安装命令，3)等待完成这几个步骤。 自动化可以大大简化操作，提高效率。 统一 我经常结对编程，偶尔会遇到快捷键不一样，命令不同等问题。我强烈建议，至少在一个团队中，大家尽量使用相同的快捷键、命令等环境。（我记得有个实践就是这个，可是我一直没找到该实践的名字和出处，求告诉） 够用 够用就好，如果系统本身已经满足了我的需求，我不会再使用第三方工具。 效率 效率，一切都是为了效率。 本文对于第三方应用如何安装和使用只有最简单的介绍，具体还请参考官方网站和相关文档。 有些章节标题标注了[OCD]，意思是这些章节带有我强烈的个人色彩，如果你跟我臭味相投，欢迎借鉴，如果你并不认同，请忽略掉好了。 PS：虽然本文名为“强迫症”，但其实并不是真正意义上的强迫症，真正意义上的强迫症是一种会对患者的日常生活产生负面影响的疾病。 1. OS X本节介绍操作系统本身的一些设置。 功能键默认情况下，F1-F12 都是特殊功能，比如调节屏幕亮度。而当你需要键入 F1-F12 时（比如在使用 IntelliJ IDEA 的快捷键时），需要同时按住 Fn。这对于开发人员来说是非常不方便的。 把 F1-F12 改成标准功能键：选择System Preferences &gt; Keyboard，在Keyboard标签页中选中Use all F1, F2, etc. keys as standard function keys。 全键盘控制当你在 Sublime Text 里关闭文件时，可能会遇到这样的对话框： 注意这个Save按钮跟其他两个按钮不太一样，它的底色是蓝的。这种按钮被称为默认按钮，除了用鼠标点击触发外，还可以通过回车键触发。 那么问题来了，如果你不想保存，想点击Don&#39;t Save，是不是只能用鼠标点击了呢？ 并不是这样：选择System Preferences &gt; Keyboard，在Shortcuts标签页中选择All controls；或者使用快捷键⌃F7。之后这个对话框会变成这样： 这个Don&#39;t Save按钮有了一圈蓝边，这个意味着你可以通过空格键触发。不仅如此，你还可以用Tab键把蓝边转移到其他按钮，来实现全键盘控制。 除了All controls这个方法，你还可以用⌘⌫来选择Don&#39;t Save。⌘⌫的作用是在包含“删除”或“不存储”按钮的对话框中选择“删除”或“不存储”。 除了上述两个办法之外，居然还有个方法！就是按⌘D！据说是因为按⌘+按钮的大写首字母可以触发该按钮。可是！我按了⌘C和⌘S想取消和保存都没用！但是⌘D真的有用！如果仅仅是这也就算了，可是我又手贱试了下 TextEdit，在关闭未保存的文件时弹出的对话框上有三个按钮Delete、Cancel和Save。然而⌘D和⌘C都没用，但是！⌘S可以保存！我完全不能理解！我整个人几乎都是崩溃的，只好以咆哮体写下这段文字。如果谁能解释请务必告诉我，必有重谢！ ⌘C不能用应该是因为它绑定到了复制功能；而⌘D不能用因为它的作用是从“打开”对话框或“存储”对话框中选择“桌面”文件夹。 在这个对话框上，你可以用Esc来执行Cancel操作。 Spotlight 快捷键中文版 OS X 的 Spotlight 的快捷键是⌃Space。这个快捷键有一些问题： JetBrains 的 IDE，比如 IntelliJ IDEA、WebStorm 等都使用⌃Space作为自动完成这个最常用功能的快捷键。我不建议更改 IDE 的快捷键，而建议更改 Spotlight 的快捷键。 对于没有添加中文输入法的 Mac 来说，Spotlight 的快捷键是⌘Space。英语国家的人都是这样的。所以我建议把 Spotlight 的快捷键设置为⌘Space，跟他们一致。 输入法快捷键一般来说切换输入法的快捷键是⌘Space。由于我建议把 Spotlight 的快捷键设置为⌘Space，所以我建议把切换输入法的快捷键设置为⌥Space。 其他快捷键让双手尽量多的键盘和快捷键，少使用鼠标和触摸板，可以大大提高效率。 Mac keyboard shortcts 苹果官方文档。当你在写代码，怎么通过快捷键让光标转移到行首、行尾、向上翻页或者将光标移左移一个词？都在这篇文档里。 Mac keyboard shortcuts for accessibility features 苹果官方文档。回车触发蓝底按钮，空格触发蓝边按钮，都出自这里。 设置 Trackpad 轻点来点按默认情况下按下触摸板才是点按（click）。我喜欢设置成用轻点作为点按： 选择System Preferences &gt; Trackpad，在Point &amp; Click标签页中选中Tap to click。 语音OS X 自带了语音功能，可以用say命令让 Mac 开口说话： say hello 可以和&amp;&amp;或者;配合使用来提示你某任务已经完成： brew update &amp;&amp; brew upgrade &amp;&amp; brew cleanup ; say mission complete 通过命令行来听取发音还是有点麻烦。其实我们几乎可以在任何地方选中单词，然后使用快捷键⌥+ESC发音。仅仅需要这样设置一下：选择System Preferences &gt; Dictation &amp; Speech，在Text to Speech标签页中选中Speak selected text when the key is pressed。 词典OS X 自带了词典（Dictionary）。你几乎可以在任何应用中通过三指轻拍触摸板来现实对应单词的释义。 也可以打开 Dictionary 应用来查找单词。 可以在 Dictionary 应用中添加英汉汉英词典。 Dock Position默认 Dock 在屏幕下方。我们的屏幕一般都是 16:10，Dock 在屏幕下方的话会占据本来就不大的垂直空间。建议把 Dock 放到左边或者右边。 更改 Caps Lock 键为 Control 键我经常用到Control键，但这个键在键盘的左下角，很难按到。同时我发现我很少使用Caps Lock键，我一般会用Shift键加字母来输入大写字母，或者先输入小写再（通过快捷键）转换成大写。 基于以上原因，我把Caps Lock键的功能改成了Control键。很多同事也都这么做的，可能是受到 HHKB 的影响。 设置方法：选择System Preferences &gt; Keyboard，在Keyboard标签页中点击Modifier Keys...按钮，在弹出的窗口中，把Caps Lock (⇪) Key:对应的选项改成⌃ Control。 Remove all Dock icons[OCD]本条目对于强迫症适用。 默认情况下 Dock 被一堆系统自带的应用占据着，而其中大部分我都很少使用，当我打开几个常用应用后，Dock 上会有很多图标，每个图标都会被挤得很小。所以我会把所有 Dock 上固定的图标都删掉，这样一来 Dock 上只有我打开的应用。 PS：Finder 图标是删不掉的。 除了一个一个删除图标，也可以通过这个命令来隐藏所有的固定图标： defaults write com.apple.dock static-only -boolean true; killall Dock 恢复也非常简单： defaults delete com.apple.dock static-only; killall Dock PS：使用这个方法的话，Dock 上的Downloads也会被隐藏掉。 重置 Launchpad 上图标位置[OCD]本条目对于强迫症适用。 新的应用被安装后，经常会跑到 Launchpad 的第一屏，所以它们的位置跟安装的顺序有关系，而我更希望它们可以按照某种更加稳定的顺序排列，比如按照系统默认的顺序： defaults write com.apple.dock ResetLaunchPad -bool true; killall Dock 在默认顺序中，Launchpad 第一屏只有 Apple 自家应用。 创建大小写敏感的工作区在多人合作的项目开发时，因为 Mac 文件系统默认是大小写不敏感的，所以经常会出现一些诡异的问题。创建一个大小写敏感的工作区（workspace）来解决避免这些问题： hdiutil create -type SPARSE -fs &#39;Case-sensitive Journaled HFS+&#39; -size 100g -volname workspace ~/Documents/workspace.dmg.sparseimage 可以通过三种方式挂载镜像： 直接双击打开 ~/Documents/workspace.dmg.sparseimage open ~/Documents/workspace.dmg.sparseimage hdiutil attach ~/Documents/workspace.dmg.sparseimage Keychain Access钥匙串访问（Keychain Access）是一个 OS X 应用程序，对我来说它最大的功能就是查看已经保存的各种账号和密码，包括 Wi-Fi 密码。 2. 常用工具本节介绍一些常用的，跟开发没有直接关系的第三方应用及其设置。 Homebrew包管理工具，官方称之为The missing package manager for OS X。 安装步骤见官网。 有了 brew 以后，要下载工具，比如 MySQL、Gradle、Maven、Node.js 等工具，就不需要去网上下载了，只要一行命令就能搞定： brew install mysql gradle maven node PS：安装 brew 的时候会自动下载和安装 Apple 的 Command Line Tools。 brew 的替代品有 MacPorts，现在基本没人用它。 Homebrew Caskbrew-cask 允许你使用命令行安装 OS X 应用。比如你可以这样安装 Chrome：brew cask install google-chrome。还有 Evernote、Skype、Sublime Text、VirtualBox 等都可以用 brew-cask 安装。 brew-cask 是社区驱动的，如果你发现 brew-cask 上的应用不是最新版本，或者缺少你某个应用，你可以自己提交 pull request。 安装步骤见官网。 应用也可以通过 App Store 安装，而且有些应用只能通过 App Store 安装，比如 Xcode 等一些 Apple 的应用。App Store 没有对应的命令行工具，还需要 Apple ID。倒是更新起来很方便。 几乎所有常用的应用都可以通过 brew-cask 安装，而且是从应用的官网上下载，所以你要安装新的应用时，建议用 brew-cask 安装。如果你不知道应用在 brew-cask 中的 ID，可以先用brew cask search命令搜索。 iTerm2iTerm2 是最常用的终端应用，是 Terminal 应用的替代品。提供了诸如Split Panes等一群实用特性。它默认的黑色背景让我毫不犹豫的抛弃了 Terminal。 安装： brew cask install iterm2 感谢 brew-cask，我们可以通过命令行自动安装 iTerm2 了。 在终端里，除了可以用⌃E等快捷键（详见其他快捷键）之外，还可以使用⌥B、⌥F等快捷键（具体可以参考这里）。前提是这样设置一下： 选择Iterm菜单 &gt; Preferences &gt; Profiles，选择你在使用的 Profile（默认是Default），在Keys标签页中把Left option (⌥) key acts as和Right option (⌥) key acts as都设置成+ESC。 在打开新的窗口/标签页的时候，默认情况下新窗口总是 HOME 目录，还需要我每次敲命令才能进入工作目录。如果想要这个新窗口在打开的时候就自动进入工作目录，需要如下设置： 选择Iterm菜单 &gt; Preferences &gt; Profiles，选择你在使用的 Profile（默认是Default），在General标签页中的Working Directory部分中选择Reuse previous seesion&#39;s directory。 至此，Terminal 应用已经出色的完成了其历史使命。后面命令行就交给 iTerm2 啦。 在 iTerm2 中双击会自动选中对应的词，三击会选中对应的整行。选中的内容会自动进入剪贴板，不需要再按⌘C复制。 Oh My Zsh默认的 Bash 是黑白的，没有色彩。而 Oh My Zsh 可以带你进入彩色时代。Oh My Zsh 同时提供一套插件和工具，可以简化命令行操作。后面我们会看到很多介绍，你会看到我爱死这家伙了。 安装方法见官网。 目前我使用的插件有：git z sublime history rbenv bundler rake Oh My Zsh 使用了 Z shell（zsh），一个和 Bash 相似的 Shell，而非 Bash。 在 Z shell 中，~/.zshrc是最重要的配置文件。Oh My Zsh 在安装的时候会把当前环境的$PATH写入~/.zshrc中。这并不是我期望的行为，因为使用了 brew，我们基本不再需要去定制$PATH，而 Oh My Zsh 提供的默认$PATH值$HOME/bin:/usr/local/bin:$PATH是非常合适的一个值，它把$HOME/bin加入了$PATH，可以让我们把自己用的脚本放到$HOME/bin下。 所以建议把~/.zshrc重置： cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc 2016年6月17号的一次提交后，zshrc.zsh-template就不再修改$PATH了。请找到# export PATH=$HOME/bin:/usr/local/bin:$PATH这一行，把前面的#去掉。 Oh My Zsh 还有很多有价值的插件。 替代品有 Oh My Fish。基于 Fishshell 。 StowGNU stow 是管理符号链接（symlink）的一个小公举。主要用于 symlink 你的 dotfiles 如 emacs，git，fish/zsh 的配置文件。安装只需要 brew install stow 安装了 stow 之后，我们可以开始 symlink 一些 dotfiles 了。完整使用 stow 和 dotfiles 的流程可以参考 https://github.com/jcouyang/dotfiles 当你的 dotfiles 都妥妥的 symlink 到 ~/dotfiles 后，push 到 github 上就再也不怕换电脑了。 Git 常用别名几乎每个人都会使用一些方法比如 Git 别名来提高效率，几乎所有人都会把使用git st来代替git status。然而这需要手动设置，每个人也都不完全一样。 Oh My Zsh 提供了一套系统别名（alias），来达到相同的功能。比如gst作为git status的别名。而且 Git 插件是 Oh My Zsh 默认启用的，相当于你使用了 Oh My Zsh，你就拥有了一套高效率的别名，而且还是全球通用的。是不是棒棒哒？下面是一些我常用的别名： Alias Command gapa git add --patch gc! git commit -v --amend gcl git clone --recursive gclean git reset --hard &amp;&amp; git clean -dfx gcm git checkout master gcmsg git commit -m gco git checkout gd git diff gdca git diff --cached glola git log --graph --pretty = format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit --all gp git push grbc git rebase --continue gst git status gup git pull --rebase gwip git add -A; git rm $(git ls-files --deleted) 2&gt; /dev/null; git commit -m &quot;--wip--&quot; 完整列表请参考：https://github.com/robbyrussell/oh-my-zsh/wiki/Plugin:git Scroll Reverser当你在浏览一个很长的网页时，你看完了当前显示的内容，想要看后续的内容，你可以在 Trackpad 上双指上滑，或者鼠标滚轮向上滚动。这是被称作“自然”的滚动方向。 然而在 Windows 里鼠标滚动的行为是相反的：鼠标滚轮向下滚动才会让浏览器显示后续的内容，向上滚动会达到页面的顶部。你可以在 OS X 的系统偏好设置里修改（选择System Preferences &gt; Trackpad，在Scroll &amp; Zoom标签页中不选中Scroll direction: natural），但是这样会同时改变鼠标滚轮的方向和 Trackpad 的方向。 要想只改变鼠标滚轮的方向，而保持 Trackpad 依旧是“自然”的，我们需要 Scroll Reverser： brew cask install scroll-reverser PS：这货会让三指点击失效 ShiftIt原生 OS X 下只能手动调整窗口大小，所以我们需要窗口管理工具。我用过很多窗口管理工具，可惜大部分工具都存在快捷键冲突的问题（对我来说主要是 IntelliJ IDEA）。ShiftIt 是少见的没有冲突的窗口管理工具： brew cask install shiftit PS：ShiftIt的旧版本需要安装 X11，最新版本已经修正了这个问题。 替代者有 SizeUp，主要快捷键和 ShiftIt 相同。 当然如果喜欢 hacking，Slate 是个不错的 hackable 的窗口管理工具。配置可以参照 http://thume.ca/howto/2012/11/19/using-slate/ Sublime Text 2安装： brew cask install sublime-text 在命令行中指定使用 Sublime Text 打开某文件，是一个非常常用的功能，一般我们会按照 OS X Command Line 中所说执行 ln -s &quot;/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl&quot; ~/bin/subl 来增加subl链接。但是如果你用 brew-cask 安装的话，恭喜你，你不需要运行这个命令，因为 brew-cask 自动帮你做了这件事情。而且你卸载 Sublime Text 的时候 brew-cask 会自动删掉这个链接。 同时 Oh My Zsh 也提供了 Sublime Text 插件，叫做sublime。参考：https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/sublime，这个插件和通过 brew-cask 安装的 Sublime Text 完美兼容。 替代品有 Atom、TextMate、Sublime Text 3 等，跟 Sublime Text 2 一样，用 brew-cask 安装的话命令行工具会被自动加入$PATH。 MacDownMacDown 是 Markdown 编辑器。由于 Mou 一直不支持代码高亮，我就转向了 MacDown。完美支持 GFM。 我特别喜欢 Markdown，我用 Makdown 来写文章（包括本文），写幻灯片（reveal.js）。Markdown 可以让我专注于内容本身，而无需花精力在排版和样式上。 安装： brew cask install macdown z在打开终端后，你是怎么进入项目的工作目录？是cd xxx，⌃R还是用别名？ z 工具可以帮你快速进入目录。比如在我的 Mac 上运行z cask就会进入/usr/local/Library/Taps/caskroom/homebrew-cask/Casks目录。 这货的安装非常方便，甚至都不需要下载任何东西，因为它已经整合在了 Oh My Zsh 中。编辑~/.zshrc文件，在plugins=(git)这行中加上z变成plugins=(git z)，然后运行source ~/.zshrc重新加载配置文件，就可以使用 z 了。 替代品有 autojump。autojump 需要使用 brew 安装。 VimiumVimium 是一个 Google Chrome 扩展，让你可以纯键盘操作 Chrome，把你的 Chrome 变成“黑客的浏览器”。 安装方法请参考官方网站。 其他浏览器也有类似的工具，比如 FireFox 的 KeySnail。 LastPassLastPass 是管理密码的工具，支持二次验证，提供所有浏览器插件以及 Mac 桌面版本。 最重要的是，它提供 命令行 的版本，可以直接通过 brew 安装 brew install lastpass-cli --with-pinentry 之后，只需要登陆： lpass login you@email.com 就可以拷贝密码或者集成到其他命令中了： lpass show --password gmail.com -c SourceTreeSourceTree 是 Atlassian 公司出品的一款优秀的 Git 图形化客户端。如果你发现命令行无法满足你的要求，可以试试 SourceTree。 安装： brew cask install sourcetree 用 brew-cask 安装会自动增加命令行工具stree到$PATH里。在命令行中输入stree可以快速用 SourceTree 打开当前 Git 仓库。详细用法请参见stree --help。 CheatSheetCheatSheet 能够显示当前程序的快捷键列表，默认的快捷键是长按⌘。 安装： brew cask install cheatsheet AlfredMac 用户不用鼠标键盘的必备神器，配合大量 Workflows，习惯之后可以大大减少操作时间。 上手简单，调教成本在后期自定义 Workflows，不过有大量雷锋使用者提供的现成扩展，访问这里挑选喜欢的，并可以极其简单地根据自己的需要修改。 安装： brew cask install alfred 3. 开发工具Java现在 OS X 都不会自带 JDK 了，所以进行 Java 开发的话，需要下载 JDK。在 brew-cask 之前，我们需要从 https://developer.apple.com/downloads/ 或者 Oracle 网站上下载。还有更麻烦的－－卸载 JDK 和升级 JDK。 JDK 安装文件是 pkg 格式，卸载和.app不一样，且没有自动卸载方式。 而 brew-cask 提供了自动安装和卸载功能，能够自动从官网上下载并安装 JDK 8。 brew cask install java 如果你需要安装 JDK 7 或者 JDK 6，可以使用homebrew-cask-versions： brew tap caskroom/versions brew cask install java6 在 OS X 上，你可以同时安装多个版本的 JDK。你可以通过命令/usr/libexec/java_home -V来查看安装了哪几个 JDK。 那问题来了，当你运行java或者 Java 程序时使用的是哪个 JDK 呢？在 OS X 下，java也就是/usr/bin/java在默认情况下指向的是已经安装的最新版本。但是你可以设置环境变量JAVA_HOME来更改其指向： $ java -version java version &quot;1.8.0_60&quot; Java(TM) SE Runtime Environment (build 1.8.0_60-b27) Java HotSpot(TM) 64-Bit Server VM (build 25.60-b23, mixed mode) $ JAVA_HOME=/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home java -version java version &quot;1.6.0_65&quot; Java(TM) SE Runtime Environment (build 1.6.0_65-b14-466.1-11M4716) Java HotSpot(TM) 64-Bit Server VM (build 20.65-b04-466.1, mixed mode) 其中JAVA_HOME=/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home可以用JAVA_HOME=`/usr/libexec/java_home -v 1.6`这种更加通用的方式代替。 jEnv也可以使用 jEnv 来管理不同版本的 JDK，这个工具跟 rbenv 类似，通过当前目录下的.java-version来决定使用哪个 JDK。jEnv 也可以用 brew 安装。不过要使用 jEnv 要有几个问题： 需要手动把eval &quot;$(jenv init -)&quot;加入 profile，没有 Oh My Zsh 插件。这点是我非常反感的。 可以把eval &quot;$(jenv init -)&quot;加入~/.zlogin，这样可以避免修改~/.zshrc。 需要手动添加 JDK，不会自动采集系统 JDK。跟 Ruby 不同，OS X 已经提供/usr/libexec/java_home工具来管理安装的 JDK。 需要 jenv rehash。这个是跟 rbenv 学的。 所以我建议不要使用 jEnv。 民间使用的 Java 版本切换方法添加以下脚本到当前 shell 配置文件中：~/.zprofile或者~/.bash_profile。 function setjdk() &#123; export JAVA_HOME=`/usr/libexec/java_home -v $@` &#125; 这样我们就可以通过输入一条命令进行版本切换了： setjdk 1.8 Java[OCD]作为一个强迫症患者，每当我看到 Java 的错误写法就想纠正过来。 当指编程语言时，Java 的正确写法是首字母大写，其余小写。其他写法比如JAVA、java都是不对的。 在其他一些地方会使用小写的java： java命令 原文件Main.java 包名java.lang 只有在全大写的标题里使用JAVA或者环境变量JAVA_HOME。 IntelliJ IDEAJava 开发必备工具 IntelliJ IDEA。可以安装 Ultimate Edition： brew cask install intellij-idea 也可以安装开源免费的 Community Edition： brew cask install intellij-idea-ce IntelliJ IDEA 有几套内建的快捷键方案（Keymap）。其中适用于 OS X 的有Mac OS X和Mac OS X 10.5+两种。区别是: Mac OS X方案和其他平台上的快捷键类似， 而Mac OS X 10.5+更加符合 OS X 常用的快捷键。 一个团队使用不同的快捷键会严重影响效率。可以用View | Quick Switch Scheme（⌃ Back Quote）快速切换 Keymap。 如果可以选择的话，我建议使用Mac OS X方案。因为我经常遇到使用 Windows 的客户，而 Windows 平台上的快捷键和Mac OS X方案类似。 可以从 IDEA 的Help &gt; Default Keymap Reference打开快捷键的参考手册。不过从这里打开的是Mac OS X 10.5+方案的，而Mac OS X方案的可以从这里找到：http://www.basrikahveci.com/static/ij_keymap_mac.pdf。 rbenv人人都需要一个 Ruby 版本管理工具。rbenv 就是这样一个轻量级工具，它可以通过 brew 安装。 安装： brew install rbenv ruby-build 然后在~/.zshrc中加上rbenv插件。否则你需要手动添加eval &quot;$(rbenv init -)&quot;到~/zshrc或者~/.zprofile文件里。 有时候项目会依赖一些奇怪的版本号，比如ruby-2.1.0，这个时候你需要 rbenv-aliases 帮忙： brew install rbenv-aliases 替代品有 RVM、chruby。因为 RVM 不能通过 brew 安装，并且安装的时候会没有节操的修改一堆文件，所以被我早早的弃用了。chruby 也是一个轻量级工具，而且可以完美的和 Oh My Zsh 集成在一起，我看到有些生产环境在用它。 Ruby 常用别名几乎所有 Ruby 开发人员都会把bi作为bundle install的别名。Oh My Zsh 提供builder插件，这个插件提供了一套别名，比如bi、be。同时还能让你在运行一些常用 gem 的时候直接输入rspec，不需要be rspec这样了。具体包括哪些命令请参考这里。 Z shell 对于[和]符号有特殊的处理，所以在运行rake task[parameter]的时候会报错，你需要改成rake task\\[parameter\\]或者noglob rake task[parameter]。然而 Oh My Zsh 已经看穿这一切，自带的 rake 插件已经解决了这个问题：brake task[parameter]。 添加插件的时候注意把rake放到bundler后面，例如这样： plugins=(git z sublime history rbenv bundler rake) 参考资料 Hacker’s Guide to Setting up Your Mac Setting up a new (OS X) development machine 高效 MacBook 工作环境配置 程序员如何优雅地使用 Mac？ 装点你的 Dock：外观篇","categories":[],"tags":[]},{"title":"js设计模式","slug":"Github/js设计模式","date":"2017-04-04T09:01:00.000Z","updated":"2017-04-06T04:15:10.000Z","comments":true,"path":"2017/04/04/Github/js设计模式/","link":"","permalink":"http://example.com/2017/04/04/Github/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/","excerpt":"","text":"js设计模式1.单体模式（用一个命名空间包含自己的所有代码的全局对象）var obj=&#123; name:&#39;&#39;, foo:function()&#123;&#125; &#125; 2.工厂（Factory）模式：提供一个创建一系列相关或相互依赖对象的接口，而无需指定他们具体的类。function createPerson(name)&#123; var o=new Object(); o.name=name; return o; &#125; var p1=createPerson(&#39;cc&#39;); 3.构造函数模式function Person(name)&#123; this.name=name; &#125; var p1=new Person(&#39;cc&#39;); 4.原型模式function Person()&#123; &#125; Person.prototype=&#123; name:&#39;cc&#39;, say:function()&#123; alert(this.name); &#125; &#125;; var p1=new Person(); 5.组合使用构造函数模式和原型模式function Person(name)&#123; this.name=name; &#125; Person.prototype=&#123; say:function()&#123; alert(this.name); &#125; &#125;; var p1=new Person(&#39;cc&#39;); 6.动态原型模式7.寄生构造函数模式function Person(name)&#123; var o=new Object(); o.name=name; return o; &#125; var p1=new Person(&#39;cc&#39;);","categories":[],"tags":[{"name":"Web开发","slug":"Web开发","permalink":"http://example.com/tags/Web%E5%BC%80%E5%8F%91/"}]},{"title":"js常用技巧","slug":"Github/js常用的小技巧","date":"2017-04-04T09:01:00.000Z","updated":"2017-04-04T12:48:43.000Z","comments":true,"path":"2017/04/04/Github/js常用的小技巧/","link":"","permalink":"http://example.com/2017/04/04/Github/js%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/","excerpt":"","text":"js常用的小技巧1.使用闭包实现私有变量function Person(name, age) &#123; this.getName = function() &#123; return name; &#125;; this.setName = function(newName) &#123; name = newName; &#125;; this.getAge = function() &#123; return age; &#125;; this.setAge = function(newAge) &#123; age = newAge; &#125;; //未在构造函数中初始化的属性 var occupation; this.getOccupation = function() &#123; return occupation; &#125;; this.setOccupation = function(newOcc) &#123; occupation = newOcc; &#125;; &#125; 2.小心使用typeof、instanceof和constructorvar arr = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]; typeof arr; // return &quot;object&quot; arr instanceof Array // true arr.constructor(); //[] 3.String的trim函数在Java、C#、PHP和很多其他语言中都有一个经典的 trim 函数，用来去除字符串中的空格符，而在JavaScript中并没有，所以我们需要在String对象上加上这个函数。 //去掉字符串的前后空格，不包括字符串内部空格 String.prototype.trim = function()&#123;return this.replace(/^\\s+|\\s+$/g, &quot;&quot;);&#125;; 4.使用 map() 方法来遍历一个数组里的项var squares = [1,2,3,4].map(function (val) &#123; return val * val; &#125;); // squares will be equal to [1, 4, 9, 16] 5.基于JSON的序列化和反序列化var person = &#123;name :&#39;Saad&#39;, age : 26, department : &#123;ID : 15, name : &quot;R&amp;D&quot;&#125; &#125;; var stringFromPerson = JSON.stringify(person); /* stringFromPerson is equal to &quot;&#123;&quot;name&quot;:&quot;Saad&quot;,&quot;age&quot;:26,&quot;department&quot;:&#123;&quot;ID&quot;:15,&quot;name&quot;:&quot;R&amp;D&quot;&#125;&#125;&quot; */ var personFromString = JSON.parse(stringFromPerson); /* personFromString is equal to person object */ 6.避免使用 for-in 来遍历一个数组var sum = 0; for (var i in arrayNumbers) &#123; sum += arrayNumbers[i]; &#125; /* 更好的方式： */ var sum = 0; for (var i = 0, len = arrayNumbers.length; i &lt; len; i++) &#123; sum += arrayNumbers[i]; &#125; 7.使用 switch/case 语句，而不是一长串的 if/else在判断情况大于2种的时候，使用 switch/case 更高效，而且更优雅（更易于组织代码）。但在判断的情况超过10种的时候，不要使用 switch/case。 8.避免在循环内部使用 try-catch-finally在运行时，每次当 catch 从句被执行的时候，被捕获的异常对象会赋值给一个变量，而在 try-catch-finally 结构中，每次都会新建这个变量。 避免这样的写法： var object = [&#39;foo&#39;, &#39;bar&#39;], i; for (i = 0, len = object.length; i &lt;len; i++) &#123; try &#123; // do something that throws an exception &#125; catch (e) &#123; // handle exception &#125; &#125; 而使用： var object = [&#39;foo&#39;, &#39;bar&#39;], i; try &#123; for (i = 0, len = object.length; i &lt;len; i++) &#123; // do something that throws an exception &#125; &#125; catch (e) &#123; // handle exception &#125; 9.牢记，原始运算符始终比函数调用要高效。//举例来说，不使用： var min = Math.min(a,b); A.push(v); //而用： var min = a &lt; b ? a b; A[A.length] = v;","categories":[],"tags":[{"name":"前端开发","slug":"前端开发","permalink":"http://example.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"}]},{"title":"Ajax","slug":"Github/Ajax","date":"2017-03-29T18:01:00.000Z","updated":"2017-05-27T11:07:39.000Z","comments":true,"path":"2017/03/30/Github/Ajax/","link":"","permalink":"http://example.com/2017/03/30/Github/Ajax/","excerpt":"","text":"Ajax什么是ajax?我们把只是对页面的局部信息进行更新，从而不必刷新整个页面的技术叫做ajax技术。（异步的javascript和XML）。它的可以节省网络带宽，提高 页面加载效率，改善用户体验。 一个简单的AJAX流程： &lt;!DOCTYPE HTML&gt; &lt;html&gt; &lt;head&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt; &lt;title&gt;无标题文档&lt;/title&gt; &lt;script&gt; window.onload = function() &#123; var oBtn = document.getElementById(&#39;btn&#39;); oBtn.onclick = function() &#123; //打开浏览器 var xhr = new XMLHttpRequest(); //在地址栏输入地址 xhr.open(&#39;get&#39;,&#39;1.txt&#39;,true); //提交 xhr.send(); //等待服务器返回内容 xhr.onreadystatechange = function() &#123; if ( xhr.readyState == 4 ) &#123; alert( xhr.responseText ); &#125; &#125; &#125; &#125; &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;input type=&quot;button&quot; value=&quot;按钮&quot; id=&quot;btn&quot; /&gt; &lt;/body&gt; &lt;/html&gt; 如何使用ajaxjavascript和后台数据交互，就是一次http请求，这就需要javascript创建一个XMLHttpRequest对象 1.如何创建XMLHttpRequest对象 var request = null; /*firfox ,chrome ,safari ,opera*/ request = new XMLHttpRequest(); /*IE6+ */ request = new ActiveXObject(&#39;Microsoft.XMLHTTP&#39;); 2.XMLHttpRequest对象的属性和方法。onreadystatechange 每当 readyState 改变时，就会触发 onreadystatechange 事件。 readyState存有 XMLHttpRequest 的工作状态。从 0 到 4 发生变化。 0: 请求初始化 1: 服务器连接已建立，已调用send()方法，正在发送请求 2: 请求已接收 3: 请求处理中 4: 请求已完成，且响应已就绪 status请求返回的状态（HTTP状态码），200表示OK,404表示未找到页面。 open()规定请求的类型、URL 以及是否异步处理请求。true: 异步，false: 同步 send()将请求发送到服务器。 setRequestHeader(header,value)向请求添加 HTTP 头。 xmlhttp.open(&quot;GET&quot;,&quot;test1.txt&quot;,true); xmlhttp.send(); xmlhttp.open(&quot;POST&quot;,&quot;ajax_test.asp&quot;,true); xmlhttp.setRequestHeader(&quot;Content-type&quot;,&quot;application/x-www-form-urlencoded&quot;); xmlhttp.send(&quot;fname=Bill&amp;lname=Gates&quot;); responseText获得字符串形式的响应数据。 responseXML获得 XML 形式的响应数据。 3.AJAX中的数据类型 1.json 2.xml 3.text 4.html 5.js 4.封装好的Ajaxfunction ajax(method, url, data, success) &#123; var xhr = null; try &#123; xhr = new XMLHttpRequest(); &#125; catch (e) &#123; xhr = new ActiveXObject(&#39;Microsoft.XMLHTTP&#39;); &#125; if (method == &#39;get&#39; &amp;&amp; data) &#123; url += &#39;?&#39; + data; &#125; xhr.open(method,url,true); if (method == &#39;get&#39;) &#123; xhr.send(); &#125; else &#123; xhr.setRequestHeader(&#39;content-type&#39;, &#39;application/x-www-form-urlencoded&#39;); xhr.send(data); &#125; xhr.onreadystatechange = function() &#123; if ( xhr.readyState == 4 ) &#123; if ( xhr.status == 200 ) &#123; success &amp;&amp; success(xhr.responseText); &#125; else &#123; alert(&#39;出错了,Err：&#39; + xhr.status); &#125; &#125; &#125; &#125; 5.如何使用AJAX1.调用json数据在php服务器里，gitPics.php文件返回json数据 &lt;?php header(&#39;Content-type:text/html; charset=&quot;utf-8&quot;&#39;); /* API: getPics.php 参数 cpage : 获取数据的页数 */ $cpage = isset($_GET[&#39;cpage&#39;]) ? $_GET[&#39;cpage&#39;] : 1; $url = &#39;http://www.wookmark.com/api/json/popular?page=&#39; . $cpage; $content = file_get_contents($url); $content = iconv(&#39;gbk&#39;, &#39;utf-8&#39;, $content); echo $content; ?&gt; Ajax处理json数据 //get方式,url,参数,回调函数 ajax(&#39;get&#39;,&#39;getPics.php&#39;,&#39;cpage=&#39; + iPage,function(data) &#123; var data = JSON.parse(data);//把字符串数据转成对应的对象， /*处理数据的代码*/ ... &#125; 公司项目案例： /** guestbook/index.php : 后端给的接口，不需要关心。 接口文档： get guestbook/index.php m : index a : verifyUserName username : 需要验证的用户名 返回 &#123; code : 返回的信息代码 0 = 没有错误，1 = 有错误 message : 返回的具体信息 &#125; */ ajax(&#39;get&#39;,&#39;guestbook/index.php&#39;,&#39;m=index&amp;a=verifyUserName&amp;username=&#39;+$value,function()&#123; /*具体代码操作*/ &#125;); 2.调用XML数据注意把：xhr.responseText 改成 xhr.responseXML ajax(&#39;get&#39;,&#39;demo.xml&#39;,,function(data)&#123; var xmlDOM = data; var xmlRoot = xmlDOM.documentElement; //获取xml的根元素 try &#123; var xmlName = xmlRoot.getElementsByTagName(&quot;name&quot;); ... &#125; catch(e)&#123; alert(e.message) &#125; &#125;); Ajax我自己封装了一个ajax的函数，代码如下： var Ajax = function(url, type success, error) &#123; $.ajax(&#123; url: url, type: type, dataType: &#39;json&#39;, timeout: 10000, success: function(d) &#123; var data = d.data; success &amp;&amp; success(data); &#125;, error: function(e) &#123; error &amp;&amp; error(e); &#125; &#125;); &#125;; // 使用方法： Ajax(&#39;/data.json&#39;, &#39;get&#39;, function(data) &#123; console.log(data); &#125;); jsonp方式有时候我们为了跨域，要使用jsonp的方法，我也封装了一个函数： function jsonp(config) &#123; var options = config || &#123;&#125;; // 需要配置url, success, time, fail四个属性 var callbackName = (&#39;jsonp_&#39; + Math.random()).replace(&quot;.&quot;, &quot;&quot;); var oHead = document.getElementsByTagName(&#39;head&#39;)[0]; var oScript = document.createElement(&#39;script&#39;); oHead.appendChild(oScript); window[callbackName] = function(json) &#123; //创建jsonp回调函数 oHead.removeChild(oScript); clearTimeout(oScript.timer); window[callbackName] = null; options.success &amp;&amp; options.success(json); //先删除script标签，实际上执行的是success函数 &#125;; oScript.src = options.url + &#39;?&#39; + callbackName; //发送请求 if (options.time) &#123; //设置超时处理 oScript.timer = setTimeout(function () &#123; window[callbackName] = null; oHead.removeChild(oScript); options.fail &amp;&amp; options.fail(&#123; message: &quot;超时&quot; &#125;); &#125;, options.time); &#125; &#125;; // 使用方法： jsonp(&#123; url: &#39;/b.com/b.json&#39;, success: function(d)&#123; //数据处理 &#125;, time: 5000, fail: function()&#123; //错误处理 &#125; &#125;);","categories":[],"tags":[{"name":"前端开发","slug":"前端开发","permalink":"http://example.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"},{"name":"Ajax","slug":"Ajax","permalink":"http://example.com/tags/Ajax/"}]},{"title":"Markdown语法手册","slug":"Blog/Markdown语法手册","date":"2017-03-05T16:00:00.000Z","updated":"2021-05-03T22:55:10.000Z","comments":true,"path":"2017/03/06/Blog/Markdown语法手册/","link":"","permalink":"http://example.com/2017/03/06/Blog/Markdown%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C/","excerpt":"","text":"Markdown 简明语法手册Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。 Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。 Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。 1.Markdown 标题Markdown 标题有两种格式。 我展示的是一级标题 ================= 我展示的是二级标题 ----------------- 使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推。 2.段落和斜体和粗体Markdown 段落没有特殊的格式，直接编写文字就好，段落的换行是使用两个以上空格加上回车。当然也可以在段落后面使用一个空行来表示重新开始一个段落。 2.1斜体和粗体使用 * 和 ** 表示斜体和粗体。 *斜体文本* _斜体文本_ **粗体文本** __粗体文本__ ***粗斜体文本*** ___粗斜体文本___ 2.2删除线和下划线~~BAIDU.COM~~ &lt;u&gt;带下划线文本&lt;/u&gt; [^RUNOOB]: 菜鸟教程 – 学的不仅是技术，更是梦想 3.列表3.1无序列表使用 * ，+ ，- 表示无序列表。 - 无序列表项 一 - 无序列表项 二 - 无序列表项 三 示例： 无序列表项 一 无序列表项 二 无序列表项 三 3.2有序列表使用数字和点表示有序列表。 1. 有序列表项 一 2. 有序列表项 二 3. 有序列表项 三 示例： 有序列表项 一 有序列表项 二 有序列表项 三 3.3列表嵌套列表嵌套只需在子列表中的选项前面添加四个空格即可： 第一项： 第一项嵌套的第一个元素 第一项嵌套的第二个元素 第二项： 第二项嵌套的第一个元素 第二项嵌套的第二个元素 4.引用的区块文字引用使用 &gt; 表示文字引用。 示例： 野火烧不尽，春风吹又生。 区块的以嵌套 最外层 第一层嵌套 第二层嵌套 区块中使用列表 区块中使用列表 第一项 第二项 第一项 第二项 第三项 列表中使用区块 第一项 菜鸟教程学的不仅是技术更是梦想 第二项 5.外链接和图片使用 [描述](链接地址) 为文字增加外链接。 示例： 这是去往 本人博客 的链接。 5.1插入图像使用 ![描述](图片链接地址) 插入图像。 示例： ![我的头像](https://www.zybuluo.com/static/img/my_head.jpg) 5.2高级链接这个链接用 1 作为网址变量 [Google][1] 这个链接用 runoob 作为网址变量 [Runoob][runoob] 然后在文档的结尾为变量赋值（网址） [1]: http://www.google.com/ [runoob]: http://www.runoob.com/ 6.代码6.1行内代码块使用 `代码` 表示行内代码块。 示例： 让我们聊聊 html。 6.2代码块使用 四个缩进空格 表示代码块。 示例： 这是一个代码块，此行左侧有四个不可见的空格。 6.3代码实例 ```javascript $(document).ready(function () &#123; alert(&#39;RUNOOB&#39;); &#125;); Cmd Markdown 高阶语法手册1. 内容目录在段落中填写 [TOC] 以显示全文内容的目录结构。 [TOC] 2. 标签分类在编辑区任意行的列首位置输入以下代码给文稿标签： 标签： 数学 英语 Markdown 或者 Tags： 数学 英语 Markdown 3. 注脚使用 [^keyword] 表示注脚。 这是一个注脚[^footnote]的样例。 这是第二个注脚[^footnote2]的样例。 4. LaTeX 公式$ 表示行内公式： 质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。 $$ 表示整行公式： $$\\sum_{i=1}^n a_i=0$$ $$f(x_1,x_x,\\ldots,x_n) = x_1^2 + x_2^2 + \\cdots + x_n^2 $$ $$\\sum^{j-1}{k=0}{\\widehat{\\gamma}{kj} z_k}$$ 访问 MathJax 参考更多使用方法。 5. 加强的代码块支持四十一种编程语言的语法高亮的显示，行号显示。 非代码示例： $ sudo apt-get install vim-gnome Python 示例： @requires_authorization def somefunc(param1=&#39;&#39;, param2=0): &#39;&#39;&#39;A docstring&#39;&#39;&#39; if param1 &gt; param2: # interesting print &#39;Greater&#39; return (param2 - param1 + 1) or None class SomeClass: pass &gt;&gt;&gt; message = &#39;&#39;&#39;interpreter ... prompt&#39;&#39;&#39; JavaScript 示例： /** * nth element in the fibonacci series. * @param n &gt;= 0 * @return the nth element, &gt;= 0. */ function fib(n) &#123; var a = 1, b = 1; var tmp; while (--n &gt;= 0) &#123; tmp = a; a += b; b = tmp; &#125; return a; &#125; document.write(fib(10)); 6. 表格支持 项目 价格 数量 计算机 $1600 5 手机 $12 12 管线 $1 234 7. 定义型列表名词 1定义 1（左侧有一个可见的冒号和四个不可见的空格）代码块 2这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格） 代码块（左侧有八个不可见的空格） 8. Html 标签本站支持在 Markdown 语法中嵌套 Html 标签，譬如，你可以用 Html 写一个纵跨两行的表格： &lt;table&gt; &lt;tr&gt; &lt;th rowspan=&quot;2&quot;&gt;值班人员&lt;/th&gt; &lt;th&gt;星期一&lt;/th&gt; &lt;th&gt;星期二&lt;/th&gt; &lt;th&gt;星期三&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;李强&lt;/td&gt; &lt;td&gt;张明&lt;/td&gt; &lt;td&gt;王平&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; 值班人员 星期一 星期二 星期三 李强 张明 王平 9. 内嵌图标本站的图标系统对外开放，在文档中输入 &lt;i class=&quot;icon-weibo&quot;&gt;&lt;/i&gt; 即显示微博的图标： 替换 上述 i 标签 内的 icon-weibo 以显示不同的图标，例如： &lt;i class=&quot;icon-renren&quot;&gt;&lt;/i&gt; 即显示人人的图标： 更多的图标和玩法可以参看 font-awesome 官方网站。 10.甘特图graph TD; A--&gt;B; A--&gt;C; B--&gt;D; C--&gt;D; sequenceDiagram participant Alice participant Bob Alice-&gt;&gt;John: Hello John, how are you? loop Healthcheck John-&gt;&gt;John: Fight against hypochondria end Note right of John: Rational thoughts &lt;br/&gt;prevail... John--&gt;&gt;Alice: Great! John-&gt;&gt;Bob: How about you? Bob--&gt;&gt;John: Jolly good! gantt dateFormat YYYY-MM-DD title Adding GANTT diagram to mermaid section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d classDiagram Class01 &lt;|-- AveryLongClass : Cool Class03 *-- Class04 Class05 o-- Class06 Class07 .. Class08 Class09 --&gt; C2 : Where am i? Class09 --* C3 Class09 --|&gt; Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08 &lt;--&gt; C2: Cool label gitGraph: options &#123; &quot;nodeSpacing&quot;: 150, &quot;nodeRadius&quot;: 10 &#125; end commit branch newbranch checkout newbranch commit commit checkout master commit commit merge newbranch 甘特图、Mermaid 流程图、序列图Mermaid 序列图、待办事宜 Todo 列表 这些还没用到，就安装这些插件。","categories":[{"name":"Blog","slug":"Blog","permalink":"http://example.com/categories/Blog/"}],"tags":[]},{"title":"UI界面","slug":"Github/关于UI界面的一些摘录","date":"2017-01-04T16:00:00.000Z","updated":"2017-05-04T06:40:35.000Z","comments":true,"path":"2017/01/05/Github/关于UI界面的一些摘录/","link":"","permalink":"http://example.com/2017/01/05/Github/%E5%85%B3%E4%BA%8EUI%E7%95%8C%E9%9D%A2%E7%9A%84%E4%B8%80%E4%BA%9B%E6%91%98%E5%BD%95/","excerpt":"","text":"关于UI界面的一些摘录1.8个技巧助你排出好看的版式2.交互设计中持续关注的五个问题3.UI 设计——细节决定成败 一、加载动画存在的意义 众所周知，app服务器在加载数据的时候需要用户等待一段时间，为了缓解用户等待过程中的焦虑情绪，设计者可以采用加载动画的方式来缓解用户的等待时间，使整个等待过程变得更加友好、流畅。 一个好的加载动画分为两个层次，第一个层次是满足用户的基本心理预期，缓解等待的焦虑；第二个层次是要给出用户一定的惊喜，甚至让用户对加载动画抱有期待、好奇的心理。 这里我们暂时先只讨论第一个层次的内容，因为这已经能够满足大多数app的需求了，至于如何做出让用户惊喜的加载动画（如饿了么、京东的加载动画），我们可以另外讨论。 二、加载动画的使用场景 查阅大量关于加载的资料后，发现很多教程与文章都是从样式的维度来分类的，今天我们换个维度，从使用场景出发，来打造属于我们自己的加载动画设计体系。 加载动画的常见使用场景一共分为以下5种： 1.下拉刷新加载 2.切换新页面数据加载 3.页面上拉加载 4.页面局部加载 5.启动页加载 8个技巧助你排出好看的版式一、使用长线利用长线排版这个技巧应该很多人都用过，但是它并没有想象的那么简单，如果运用得不恰当，不但不会好看，还会显得很死板。长线在排版中的使用一般是为了满足以下几个需求。 1.区隔信息即利用长线条把版面里不同类型的信息区分开，你可以根据实际情况来选择使用虚线还是实线，觉得黑白线单调的话也可以给它点颜色瞧瞧，使用长线区隔信息可以使其看起来更清晰，更方便受众阅读，同时还可以起到规整的作用，使版面不至于太凌乱。 ▲如果一个版面内的信息层级关系很多，我们可以同时使用细线和粗线来进行划分。 ▲上图使用的是红色虚线，使用虚线会显得没那么生硬。 2.装饰我们在排版时经常会遇到这样的情况，信息并不是很多，也不适合加图片，所以整个版面容易显得单调和平淡，这时我们可以利用长线来丰富版面，在增加美感的同时还能增加设计感。 ▲斜线经常被当做剪刀用，俗称“一剪没”。 ▲上图文字顶部增加的直线使该排版看起来更专业。 二、使用短线短线的功能和长线大同小异，虽然没有长线用得那么普遍，但有时候更好用，特别是在网页设计、UI设计、名片设计中，我们能经常看到短线的身影。短线的用法有如下几种： 1.区隔信息利用短线区隔信息比长线要更灵活一点，不会造成太规矩的效果，而且虽然是短线，但是受众经常会脑补把它延长。 ▲当然，有时候是因为信息比较短，所以用短线更合适。 2.装饰短线也是可以用来装饰的，把短线放在文字信息的前面、或者相对应的留白区域，再选择合适的颜色，可以有效丰富版面。 3.归类就是用一条短线把一部分信息归为一类，一般采用竖线。把文字左对齐或右对齐，然后在对齐的一面加一条长于或等于这段文字的直线，跟大括号的用法差不多，但是要更好看一些，在信息类别比较多的版面中很实用，如下图： ▲在目录中使用短线是最合适不过的了。 三、使用色块使用色块进行排版也很是实用的一项技巧，而且容易营造时尚的感觉，经常被用在画册和网页设计当中，色块在版式中的主要用途有以下几个： 1.划分区域在画册或网页设计中，可以用色块来划分区域，一个色块承载一块信息，使该色块内的内容与其他信息区别开来，如果色块较多时最好让它们形成一定的节奏感，比如呈统一或渐变效果。 ▲色块在划分区域的同时还能把一些看起来比较零散的信息组合起来。 2.突出重点突出重点信息的方式有很多，把它放在色块中也是一种不错的方法，文字和色块要使用对比色。 ▲上图的色块是为了凸现标题。 3.分离背景当我们在图片上排文字的时候，由于图片的明暗关系不是太平均，所以会影响文字的阅读性，这时在文字底部增加色块是一个不错的方法，如果把背景图调成黑白，再使用颜色鲜艳的色块效果会更好。 4.丰富设计形式（装饰）色块本身就是具有强烈设计感的元素，所以我们可以用色块来进行构图，比如用几个色块组合成一个图形，或者通过色彩搭配制造对比，都可以做出很漂亮且有特色的设计。 四、使用线框线框和色块的用法有很多相同的地方，但区别也不小，首先线框没有色块那么有视觉冲击力，其次，因为线框的框内是没有颜色的，所以更适合把图片也一同框起来了，而色块主要用来承载文字信息。线框主要的用法有以下3种： 1.信息分组用线框来把版面内的信息进行分组，跟色块的用法是同样的意思，这里就不多说了，直接看例子吧。 2.信息组织零散的信息可能会造成版面混乱，用线框把临近的信息框在一起是一个有效的解决办法。 3.装饰根据版面尺寸、设计元素，合理的使用线框可以使作品更有设计感和美感，如：用图片贯穿线框，塑造一种突破束缚的感觉，或者把线框直接作为版面边缘的装饰线条花边等。 ▲在卡片的设计中用细线框装饰在边缘，有点小小的文艺气息。 六、文本绕排即把文字绕着图片的外轮廓进行排版，这种手法在画册、杂志或报纸的排版中比较多见，因为文字要足够多才能达到效果，使用文本绕排时，图片要用异形效果才会比较好，而且图片要尽量大一点，此方法最适合创造视觉冲击。 七、对齐因为对齐排版能够制造一种稳定、整洁、统一的感觉，最重要的是便于阅读，所以，几乎是在任何版式中都要用到该技巧。看似很简单的技巧，其实里面也大有学问，有很多优秀的设计作品中都暗藏了很多对齐的玄机，但是过份的强调对齐也会让版面显得很死板，于是有些设计师就喜欢故意制造凌乱，结果总是弄巧成拙。 ▲跟我一起唱：左对齐、右对齐、上对其、下对齐、左右对齐、居中对齐。 八、文叠图跟使用色块不同的是，文叠图不需要其他元素的辅助，而是直接把文字叠在图片上，所以必须要保持文字的可识别性。而且不要把所有文字都放在图片内，而是只放一部分，与图片形成交叉的关系。这种排版的优势在于对比效果强烈，且让文字与图片形成了紧密的互动，不会有各自孤立的感觉。▲整齐的文字与矩形的图片交叉叠加，既平稳协调又有种冲破束缚的感觉。 在交互设计过程中，你需要持续关注的五个问题 在沟通需求与完成交互稿的过程中，有以下问题要确认并持续关注： 一、明确目标用户二、使用场景三、 业务逻辑在这个人人都是产品经理的年代，交互设计也是很多人都能做的。但是，能做不代表能够做好。对于产品经理提出的需求，最佳的解决方案就呈现在用户对产品的操作过程中，即产品的业务逻辑。 业务逻辑，简单来说就是在怎么做事（how to do）。比如你想买一件衣服，从搜索、到确定付款、再到售后服务，在整个目标活动下的整个动作流程，可以说是业务逻辑。 理清业务逻辑有助于实事求是的整理出产品的功能流程，避免陷入先入为主以及自以为的误区。俗话说，隔行如隔山。对于不同的行业，其所具有的行业规则、术语、硬件设备信息、技术实现逻辑等都是不同的。充分了解产品的业务逻辑，不仅仅能够更好的理解产品背后的需求，同时能够更好的与团队成员、甚至是甲方更好的沟通，也能更好的完成交互设计。 四、页面重点元素如图，个人信息、账单预览以及安全信息是页面的重点元素，因此在页面布局上进行了特异处理，与下面的已开通服务列表形成视觉上重点与次要元素的对比，包括增大元素面积、图形化处理、色彩特异处理等。 五、 数据量数据量是页面中变动量最大的元素。不同的数据量对页面的显示、功能、布局都有很大的影响。当数据为空时，页面就是特殊页面，需要考虑是页面错误，还是数据为零，并针对不同的情况进行恰当的提示；当页面数据量过少时，要考虑页面太空的视觉影响；当页面数据量太多时，要考虑分页、筛选、搜索等功能的添加，以满足用户查看数据的需求。 交互设计的工作是构建一个和谐、高效、统一的产品体系，所有的思考、设计都应该以提高整个产品体系的用户体验为前提。因此，认真对待交互设计过程中的每一个设计环节、每一个问题，是提高交互稿质量的基石。过程中的问题很多，需要我们持续关注并解决。 细节决定成败视觉反馈反馈在我们制定设计规范时经常会被忽视，但它的存在实际上有效的梳理了产品的整个交互流程。交互设计其实可以看成是设计人与物(app或网站)之间的对话。如果没有任何反馈，就相当于聊天时的你滔滔不绝，但对方却一言不发，两人之间毫无互动。从产品的角度而言，如果没有反馈，用户则无法得知当下发生了什么，也无从确定自己操作的结果，更不必提要进行下一步的操作。所以说无反馈，不交互。 良好的交互设计应该确保用户的每一次操作都能得到视觉反馈，无论成功与否，这会让用户体会到使用产品期间的一种安全感——一切尽在自己的掌控之中。视觉反馈的目的就是通过一种可视化、简洁的形式向用户展示操作的结果以及当前系统所处的状态。 我们在手机上进行点击、滑动等操作时，按钮、控件和其他交互元素通过改变自身形态做出响应，为我们提供反馈。这种反馈模式会拉近用户与产品之间的距离，因为用户可以容易的感受到自己在同屏幕中的元素进行直接真实的互动。 功能性动画可以让用户及时获知状态的变更。 加载动画向用户展示系统的实时状态，使用户能够快速了解目前发生了什么。 留白留白（或负空间）是指页面中设计师没有放置任何元素的区域。留白不代表一定要使用白色，而是预留出一定空间来组织页面空间中的其余元素。虽然很多人认为留白纯粹属于浪费宝贵的空间，但不可否认留白依旧是UI设计中的一个重要元素。 提升页面可读性 使用留白主要是受限于人类短暂的记忆力，我们的短期记忆可以容纳的信息极少（在未经复述的条件下，大部分信息在短期记忆中保持的时间很短，通常在5－20秒，最长不超过1分钟）。用户看到一个页面，如果里面展示的信息过多，用户就会处理不过来。使用留白就可以减少当前页面中元素的数目，提升页面的可读性。 吸引用户注意力 用户的注意力是宝贵的资源，应该得到合理的分配。我遇到过很多客户，他们说这里要使用大红色突出，那里要放大字体吸引用户注意。在他们的设想中，页面里的任何一个元素都要强调出来，但是殊不知页面中视觉重点有且只有一个，过多的给予对于用户来说其实是一种负担。少即是多，这是互联网时代的信条。 建立层级关系 根据交互设计中的接近法则：当对象之间距离太近时，用户潜意识中会认为它们是相似的。我们可以通过使用留白来建立不同元素之间的层级关系。例如，下图中几乎每一个人都会看到两组点，而不是16个点。 对信息进行整合分组会提升内容的可读性。下图中右表格将15个字段分成3组。同样数量的内容，但用户的印象却大不相同。","categories":[],"tags":[{"name":"Web开发","slug":"Web开发","permalink":"http://example.com/tags/Web%E5%BC%80%E5%8F%91/"}]},{"title":"总结ES6常用的新特性","slug":"Github/总结ES6常用的新特性","date":"2017-01-04T16:00:00.000Z","updated":"2017-05-27T10:44:37.000Z","comments":true,"path":"2017/01/05/Github/总结ES6常用的新特性/","link":"","permalink":"http://example.com/2017/01/05/Github/%E6%80%BB%E7%BB%93ES6%E5%B8%B8%E7%94%A8%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7/","excerpt":"","text":"总结ES6常用的新特性定义函数我们先来看一个基本的新特性，在javascript中，定义函数需要关键字function，但是在es6中，还有更先进的写法，我们来看：es6写法： var human = &#123; breathe(name) &#123; //不需要function也能定义breathe函数。 console.log(name + &#39; is breathing...&#39;); &#125; &#125;; human.breathe(&#39;jarson&#39;); //输出 ‘jarson is breathing...’ 转成js代码： var human = &#123; breathe: function(name) &#123; console.log(name + &#39;is breathing...&#39;); &#125; &#125;; human.breathe(&#39;jarson&#39;); 创建类我们知道，javascript不像java是面向对象编程的语言，而只可以说是基于对象编程的语言。所以在js中，我们通常都是用function和prototype来模拟类这个概念。 class Human &#123; constructor(name) &#123; this.name = name; &#125; breathe() &#123; console.log(this.name + &quot; is breathing&quot;); &#125; &#125; var man = new Human(&quot;jarson&quot;); man.breathe(); //jarson is breathing 上面代码转为js格式： function Human(name) &#123; this.name = name; this.breathe = function() &#123; console.log(this.name + &#39; is breathing&#39;); &#125; &#125; var man = new Human(&#39;jarson&#39;); man.breathe(); //jarson is breathing 所以我们看到，我们可以像java那样语义化的去创建一个类。另外，js中的继承父类，需要用prototype来实现。那么在es6中，又有什么新的方法来实现类的继承呢？继续看：假如我们要创建一个Man类继承上面的Human类，es6代码： class Man extends Human &#123; constructor(name, sex) &#123; super(name); this.sex = sex; &#125; info()&#123; console.log(this.name + &#39;is &#39; + this.sex); &#125; &#125; var xx = new Man(&#39;jarson&#39;, &#39;boy&#39;); xx.breathe(); //jarson is breathing xx.info(); //arsonis boy 代码很简单，不作赘述，可以使用文章里提到的在线工具去试试效果就能明白了。需要注意的是：super()是父类的构造函数。 模块在ES6标准中，javascript原生支持module了。将不同功能的代码分别写在不同文件中，各模块只需导出export公共接口部分，然后在需要使用的地方通过模块的导入import就可以了。下面继续看例子： 内联导出ES6模块里的对象可在创建它们的声明中直接导出，一个模块中可无数次使用export。app.js export class Human&#123; constructor(name) &#123; this.name = name; &#125; breathe() &#123; console.log(this.name + &quot; is breathing&quot;); &#125; &#125; export function run()&#123; console.log(&#39;i am runing&#39;); &#125; function eat() &#123; console.log(&#39;i am eating&#39;); &#125; 例子中的模块导出了两个对象：Human类和run函数， eat函数没有导出，则仍为此模块私有，不能被其他文件使用。 导出一组对象另外，其实如果需要导出的对象很多的时候，我们可以在最后统一导出一组对象。 class Human&#123; constructor(name) &#123; this.name = name; &#125; breathe() &#123; console.log(this.name + &quot; is breathing&quot;); &#125; &#125; function run()&#123; console.log(&#39;i am runing&#39;); &#125; function eat() &#123; console.log(&#39;i am eating&#39;); &#125; export &#123;Human, run&#125;; 这样的写法功能和上面一样，而且也很明显，在最后可以清晰的看到导出了哪些对象。 default导出导出时使用关键字default，可将对象标注为default对象导出。default关键字在每一个模块中只能使用一次。它既可以用于内联导出，也可以用于一组对象导出声明中。查看导出default对象的语法： ... //创建类、函数等等 export default &#123; //把Human类和run函数标注为default对象导出。 Human, run &#125;; 无对象导入如果模块包含一些逻辑要执行，且不会导出任何对象，此类对象也可以被导入到另一模块中，导入之后只执行逻辑。如： import &#39;./module1.js&#39;; 导入默认对象import app from &#39;./module1.js&#39;; 上面例子中，默认./module1.js文件只导出了一个对象；若导出了一组对象，则应该在导入声明中一一列出这些对象，如： import &#123;Human, run&#125; from &#39;./app.js&#39; let与const在我看来，在es6新特性中，在定义变量的时候统统使用let来代替var就好了，const则很直观，用来定义常量，即无法被更改值的变量。 for (let i=0;i&lt;2;i++) &#123; console.log(i); //输出: 0,1 &#125; 箭头函数ES6中新增的箭头操作符=&gt;简化了函数的书写。操作符左边为输入的参数，而右边则是进行的操作以及返回的值，这样的写法可以为我们减少大量的代码，看下面的实例： let arr = [6, 8, 10, 20, 15, 9]; arr.forEach((item, i) =&gt; console.log(item, i)); let newArr = arr.filter((item) =&gt; (item&lt;10)); console.log(newArr); //[6, 8, 9]; 上面的**(item, i)就是参数，后面的console.log(item, i)**就是回到函数要执行的操作逻辑。 上面代码转为js格式： var arr = [6, 8, 10, 20, 15, 9]; arr.forEach(function(item, i) &#123; return console.log(item, i); &#125;); var newArr = arr.filter(function(item) &#123; return (item &lt; 10); &#125;); console.log(newArr); 字符串模版ES6中允许使用反引号 ` 来创建字符串，此种方法创建的字符串里面可以包含由美元符号加花括号包裹的变量${vraible}。看一下实例就会明白了： //产生一个随机数 let num = Math.random(); //将这个数字输出到console console.log(`your num is $&#123;num&#125;`); 解构若一个函数要返回多个值，常规的做法是返回一个对象，将每个值做为这个对象的属性返回。在ES6中，利用解构这一特性，可以直接返回一个数组，然后数组中的值会自动被解析到对应接收该值的变量中。我们来看例子： function getVal() &#123; return [1, 2]; &#125; var [x,y] = getVal(); //函数返回值的解构 console.log(&#39;x:&#39;+x+&#39;, y:&#39;+y); //输出：x:1, y:2 默认参数现在可以在定义函数的时候指定参数的默认值了，而不用像以前那样通过逻辑或操作符来达到目的了。 function sayHello(name)&#123; var name=name||&#39;tom&#39;; //传统的指定默认参数的方式 console.log(&#39;Hello &#39;+name); &#125; //运用ES6的默认参数 function sayHello2(name=&#39;tom&#39;)&#123; //如果没有传这个参数，才会有默认值， console.log(`Hello $&#123;name&#125;`); &#125; sayHello();//输出：Hello tom sayHello(&#39;jarson&#39;);//输出：Hello jarson sayHello2();//输出：Hello tom sayHello2(&#39;jarson&#39;);//输出：Hello jarson 注意： sayHello2(name=’tom’)这里的等号，意思是没有传这个参数，则设置默认值，而不是给参数赋值的意思。 ProxyProxy可以监听对象身上发生了什么事情，并在这些事情发生后执行一些相应的操作。一下子让我们对一个对象有了很强的追踪能力，同时在数据绑定方面也很有用处。 //定义被监听的目标对象 let engineer = &#123; name: &#39;Joe Sixpack&#39;, salary: 50 &#125;; //定义处理程序 let interceptor = &#123; set(receiver, property, value) &#123; console.log(property, &#39;is changed to&#39;, value); receiver[property] = value; &#125; &#125;; //创建代理以进行侦听 engineer = new Proxy(engineer, interceptor); //做一些改动来触发代理 engineer.salary = 70;//控制台输出：salary is changed to 70 对于处理程序，是在被监听的对象身上发生了相应事件之后，处理程序里面的方法就会被调用。结语总的来说，虽然支持es6的情况到目前还不是很乐观，但es6的新语法特性让前端和后端的差异越来越小了，这是一个新时代的开始，我们必须要了解这些新的前沿知识，才能跟上时代的步伐。","categories":[],"tags":[{"name":"web开发","slug":"web开发","permalink":"http://example.com/tags/web%E5%BC%80%E5%8F%91/"}]},{"title":"JS面向对象","slug":"Github/JS中的面向对象","date":"2016-12-19T16:00:00.000Z","updated":"2017-05-04T06:45:31.000Z","comments":true,"path":"2016/12/20/Github/JS中的面向对象/","link":"","permalink":"http://example.com/2016/12/20/Github/JS%E4%B8%AD%E7%9A%84%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/","excerpt":"","text":"[toc] JS中的面向对象1.JS解析和执行过程js执行代码的时候，它不是逐行执行的，首先它会有一个预处理阶段，然后再是执行阶段。 什么是预处理？在解析JS代码的时候，js引擎会创建一个词法环境，然后扫描js代码中的两个部分： 用声明的方式创建的函数，给它添加一个引用关系 用var 定义的变量 ，给它一个undefined值 函数名和变量名冲突时： console.log(fn); //先扫描函数，后扫描var 声明的变量（会忽略变量） //如果同样是函数名，则后面的覆盖前面的。 function fn()&#123; ... &#125; var fn = 10; function fn()&#123; &#125; b = 10 ;//没有var声明的b，会成为最外部的词法环境里的成员 ，这里相当于 window.b = 10; 函数的预处理阶段和全局预处理有些不同： 每调用一次，就会产生一个词法环境。 先扫描参数。 //词法环境 &#123; a:1 b:2 &#125; function f (a,b)&#123; alert(a); //返回a函数的字符串 ， 函数有相同就覆盖 alert(b); //返回2 ， var有相同，就忽略 var b = 100; function a()&#123; ... &#125; &#125; f(1,2); 2.作用域定义确定一个变量、函数、或成员在程序里可以被访问的范围 词法作用域（也称静态作用域）function f()&#123; alert(x); &#125; function f1()&#123; var x = 5; f(); &#125; function f2()&#123; var x = 6; f(); &#125; f1(); /** 因为：js从上之下解析的时候，会生成一个词法环境，为每个函数创建 一个[scope],在运行f1()函数时，f1执行到f()函数时，函数f()在它的[scope]里找不到x,沿着他的作用域链往上找，也找不到x,所以就会报错。 * 运行 f1( ) 结果会报错。 */ new Function 创建的函数，它的[scope]是指向window javascript是没有动态作用域的。 作用域的用途作用域的使用提高了程序逻辑的局部性，增强程序的可靠性，减少名字冲突。 3.闭包 画一个圈，里面有一个f2小圈，以及被函数f2捕获到变量a和b,这个圈就成为闭包。即便这个闭包跳出了创造它的函数f1，这个闭包也是存在的。当然，有的浏览器只捕获f2函数用到的变量。 表述：闭包就是一个对象，这个对象里面有一个函数，以及被这个函数封闭捕获的变量 function f1()&#123; var a = 10; var b = 20; return function f2()&#123; console.log(a); &#125; &#125; var result = f1(); result(); 闭包的好处1.减少全局变量2.减少传递给函数的参数变量 function calFactory(base)&#123; return function(max)&#123; var total =0; for(var i=1;i&lt;=max;i++)&#123; total +=i; //1,2,4,3,2,4,3,2,4... &#125; return total + base; &#125; &#125; var adder = calFactory(2); alert(adder(3)); //8 alert(adder(4)); //12 3.封装 (function()&#123; var m=0; function getM()&#123; return m; &#125; function setM(val)&#123; m=val; &#125; window.g = getM; window.f = setM; &#125;)(); f(12); alert(g());//12 闭包的注意点1.对捕获的变量只是个引用，不是复制2.父函数没调用一次，会产生不同的闭包 function f()&#123; var num = 1; return function()&#123; num++; alert(num); &#125; &#125; var result1 = f(); result1();//2 result1();//3 var result2 = f(); result2();//2 result2();//3 3.循环问题 &lt;div id=&quot;1&quot;&gt;1&lt;/div&gt; &lt;div id=&quot;2&quot;&gt;2&lt;/div&gt; &lt;div id=&quot;3&quot;&gt;3&lt;/div&gt; &lt;script&gt; var i; for( i=1;i&lt;=3;i++)&#123; var ele = document.getElementById(i); ele.onclick =(function(id)&#123; return function()&#123; alert(id); &#125; &#125;)(i); &#125; &lt;/script&gt; 4.对象ECMA-262 把对象（object）定义为“属性的无序集合，每个属性存放一个原始值、对象或函数”。严格来说，这意味着对象是无特定顺序的值的数组。 尽管 ECMAScript 如此定义对象，但它更通用的定义是基于代码的名词（人、地点或事物）的表示。 类每个对象都由类定义，可以把类看做对象的配方。类不仅要定义对象的接口（interface）（开发者访问的属性和方法），还要定义对象的内部工作（使属性和方法发挥作用的代码）。编译器和解释程序都根据类的说明构建对象。实例程序使用类创建对象时，生成的对象叫作类的实例（instance）。对类生成的对象的个数的唯一限制来自于运行代码的机器的物理内存。每个实例的行为相同，但实例处理一组独立的数据。由类创建对象实例的过程叫做实例化（instantiation）。 1.对象的种类 js内置的对象（Math） 宿主环境（window） 自己创建的 2.对象的创建1.对象字面量形式创建 属性 方法 get set型属性var p = &#123; name:&quot;cj&quot;, work:function()&#123; ... &#125;, _age:18, get age()&#123; return this._age; &#125;, set age(val)&#123; if(val&lt;0||val&gt;150)&#123; throw new Error(&quot;invalid value&quot;); &#125;else&#123; this._age = val; &#125; &#125; &#125; //定义与修改属性 p.name = &quot;zhang&quot;; 2.object形式创建var o = new Object(); o.toString(); //自带一个 定义与修改属性 Object.defineProperty(p,&quot;yy&quot;,&#123; value:100, writable:false &#125;); /** p:你要给哪个对象添加属性 yy:添加的属性 value:值 writable:false属性不可修改 */ /*定义多个属性*/ Object.defineProperties(p,&#123; salary:&#123; value:1000, writable:false &#125;, height:&#123; get:function()&#123; return 180 &#125;, set:function(val)&#123; console.log(val); &#125; &#125; &#125;); 3.对象的基本操作 成员的遍历for (key in obj)&#123; console.log(key);//或者 console.log(obj[key]); &#125; 检查对象是否有某个属性&quot;name&quot; in p ;//返回true p.hasOwnProperty(&quot;name&quot;);//判断对象自己有没有name属性，有就返回true,没有或者是继承父类的就返回false, 成员的删除delete p.name; 4.成员特性 writable:false 不能改写属性的值 enumerable:false 遍历对象的时候不可被枚举 configurable:false 这个属性不能被删除 true 则相反。 Object.getOwnPropertyDescriptor( p, &quot;addres&quot; ); //返回p对象自己的属性addres的特性 3.构造器与类型检测构造器也就构造函数，它是每个对象都有的，主要目的是用于和 new 操作符配合来创建特定类型的对象。 var o = &#123;&#125;; var o1 = o.constructor(); //o1是一个对象，它并不复制o里的属性。相当于new创建了一个对象。 类型检测 typeof 1;// 对象类型的判断，返回number p instanceof p.constructor //判断一个变量是否为一个对象的实例 ECMAScript定义类或对象使用预定义对象只是面向对象语言的能力的一部分，它真正强大之处在于能够创建自己专用的类和对象。ECMAScript 拥有很多创建对象或类的方法。 1.工厂方式function createCar() &#123; var oTempCar = new Object; oTempCar.color = &quot;blue&quot;; oTempCar.doors = 4; oTempCar.mpg = 25; oTempCar.showColor = function() &#123; alert(this.color); &#125;; return oTempCar; &#125; var oCar1 = createCar(); var oCar2 = createCar(); 调用此函数，将创建新对象，并赋予它所有必要的属性，复制出一个我们在前面说明过的 car 对象。因此，通过这种方法，我们可以很容易地创建 car 对象的两个版本（oCar1 和 oCar2），它们的属性完全一样。 为函数传递参数 function createCar(sColor,iDoors,iMpg) &#123; var oTempCar = new Object; oTempCar.color = sColor; oTempCar.doors = iDoors; oTempCar.mpg = iMpg; oTempCar.showColor = function() &#123; alert(this.color); &#125;; return oTempCar; &#125; var oCar1 = createCar(&quot;red&quot;,4,23); var oCar2 = createCar(&quot;blue&quot;,3,25); oCar1.showColor(); //输出 &quot;red&quot; oCar2.showColor(); //输出 &quot;blue&quot; 在工厂函数外定义对象的方法虽然 ECMAScript 越来越正式化，但创建对象的方法却被置之不理，且其规范化至今还遭人反对。一部分是语义上的原因（它看起来不像使用带有构造函数 new 运算符那么正规），一部分是功能上的原因。功能原因在于用这种方式必须创建对象的方法。前面的例子中，每次调用函数 createCar()，都要创建新函数 showColor()，意味着每个对象都有自己的 showColor() 版本。而事实上，每个对象都共享同一个函数。有些开发者在工厂函数外定义对象的方法，然后通过属性指向该方法，从而避免这个问题： function showColor() &#123; alert(this.color); &#125; function createCar(sColor,iDoors,iMpg) &#123; var oTempCar = new Object; oTempCar.color = sColor; oTempCar.doors = iDoors; oTempCar.mpg = iMpg; oTempCar.showColor = showColor; return oTempCar; &#125; var oCar1 = createCar(&quot;red&quot;,4,23); var oCar2 = createCar(&quot;blue&quot;,3,25); oCar1.showColor(); //输出 &quot;red&quot; oCar2.showColor(); //输出 &quot;blue&quot; 2.构造函数方式创建构造函数就像创建工厂函数一样容易。第一步选择类名，即构造函数的名字。根据惯例，这个名字的首字母大写，以使它与首字母通常是小写的变量名分开。除了这点不同，构造函数看起来很像工厂函数。请考虑下面的例子： function Car(sColor,iDoors,iMpg) &#123; this.color = sColor; this.doors = iDoors; this.mpg = iMpg; this.showColor = function() &#123; alert(this.color); &#125;; &#125; var oCar1 = new Car(&quot;red&quot;,4,23); var oCar2 = new Car(&quot;blue&quot;,3,25); 下面为您解释上面的代码与工厂方式的差别。首先在构造函数内没有创建对象，而是使用 this 关键字。使用 new 运算符构造函数时，在执行第一行代码前先创建一个对象，只有用 this 才能访问该对象。然后可以直接赋予 this 属性，默认情况下是构造函数的返回值（不必明确使用 return 运算符）。现在，用 new 运算符和类名 Car 创建对象，就更像 ECMAScript 中一般对象的创建方式了。你也许会问，这种方式在管理函数方面是否存在于前一种方式相同的问题呢？是的。就像工厂函数，构造函数会重复生成函数，为每个对象都创建独立的函数版本。不过，与工厂函数相似，也可以用外部函数重写构造函数，同样地，这么做语义上无任何意义。这正是下面要讲的原型方式的优势所在。 3.原型方式该方式利用了对象的 prototype 属性，可以把它看成创建新对象所依赖的原型。这里，首先用空构造函数来设置类名。然后所有的属性和方法都被直接赋予 prototype 属性。我们重写了前面的例子，代码如下： function Car() &#123; &#125; Car.prototype.color = &quot;blue&quot;; Car.prototype.doors = 4; Car.prototype.mpg = 25; Car.prototype.showColor = function() &#123; alert(this.color); &#125;; var oCar1 = new Car(); var oCar2 = new Car(); 在这段代码中，首先定义构造函数（Car），其中无任何代码。接下来的几行代码，通过给 Car 的 prototype 属性添加属性去定义 Car 对象的属性。调用 new Car() 时，原型的所有属性都被立即赋予要创建的对象，意味着所有 Car 实例存放的都是指向 showColor() 函数的指针。从语义上讲，所有属性看起来都属于一个对象，因此解决了前面两种方式存在的问题。 此外，使用这种方式，还能用 instanceof 运算符检查给定变量指向的对象的类型。因此，下面的代码将输出 TRUE： alert(oCar1 instanceof Car); //输出 &quot;true&quot; 原型方式的问题原型方式看起来是个不错的解决方案。遗憾的是，它并不尽如人意。 首先，这个构造函数没有参数。使用原型方式，不能通过给构造函数传递参数来初始化属性的值，因为 Car1 和 Car2 的 color 属性都等于 “blue”，doors 属性都等于 4，mpg 属性都等于 25。这意味着必须在对象创建后才能改变属性的默认值，这点很令人讨厌，但还没完。真正的问题出现在属性指向的是对象，而不是函数时。函数共享不会造成问题，但对象却很少被多个实例共享。请思考下面的例子： function Car() &#123; &#125; Car.prototype.color = &quot;blue&quot;; Car.prototype.doors = 4; Car.prototype.mpg = 25; Car.prototype.drivers = new Array(&quot;Mike&quot;,&quot;John&quot;); Car.prototype.showColor = function() &#123; alert(this.color); &#125;; var oCar1 = new Car(); var oCar2 = new Car(); oCar1.drivers.push(&quot;Bill&quot;); alert(oCar1.drivers); //输出 &quot;Mike,John,Bill&quot; alert(oCar2.drivers); //输出 &quot;Mike,John,Bill&quot; 上面的代码中，属性 drivers 是指向 Array 对象的指针，该数组中包含两个名字 “Mike” 和 “John”。由于 drivers 是引用值，Car 的两个实例都指向同一个数组。这意味着给 oCar1.drivers 添加值 “Bill”，在 oCar2.drivers 中也能看到。输出这两个指针中的任何一个，结果都是显示字符串 “Mike,John,Bill”。由于创建对象时有这么多问题，你一定会想，是否有种合理的创建对象的方法呢？答案是有，需要联合使用构造函数和原型方式。 4.混合的构造函数/原型方式联合使用构造函数和原型方式，就可像用其他程序设计语言一样创建对象。这种概念非常简单，即用构造函数定义对象的所有非函数属性，用原型方式定义对象的函数属性（方法）。结果是，所有函数都只创建一次，而每个对象都具有自己的对象属性实例。我们重写了前面的例子，代码如下： function Car(sColor,iDoors,iMpg) &#123; this.color = sColor; this.doors = iDoors; this.mpg = iMpg; this.drivers = new Array(&quot;Mike&quot;,&quot;John&quot;); &#125; Car.prototype.showColor = function() &#123; alert(this.color); &#125;; var oCar1 = new Car(&quot;red&quot;,4,23); var oCar2 = new Car(&quot;blue&quot;,3,25); oCar1.drivers.push(&quot;Bill&quot;); alert(oCar1.drivers); //输出 &quot;Mike,John,Bill&quot; alert(oCar2.drivers); //输出 &quot;Mike,John&quot; 现在就更像创建一般对象了。所有的非函数属性都在构造函数中创建，意味着又能够用构造函数的参数赋予属性默认值了。因为只创建 showColor() 函数的一个实例，所以没有内存浪费。此外，给 oCar1 的 drivers 数组添加 “Bill” 值，不会影响到 oCar2 的数组，所以输出这些数组的值时，oCar1.drivers 显示的是 “Mike,John,Bill”，而 oCar2.drivers 显示的是 “Mike,John”。因为使用了原型方式，所以仍然能利用 instanceof 运算符来判断对象的类型。 这种方式是 ECMAScript 采用的主要方式，它具有其他方式的特性，却没有他们的副作用。不过，有些开发者仍觉得这种方法不够完美。 5.动态原型方法对于习惯使用其他语言的开发者来说，使用混合的构造函数/原型方式感觉不那么和谐。毕竟，定义类时，大多数面向对象语言都对属性和方法进行了视觉上的封装。请考虑下面的 Java 类： class Car &#123; public String color = &quot;blue&quot;; public int doors = 4; public int mpg = 25; public Car(String color, int doors, int mpg) &#123; this.color = color; this.doors = doors; this.mpg = mpg; &#125; public void showColor() &#123; System.out.println(color); &#125; &#125; Java 很好地打包了 Car 类的所有属性和方法，因此看见这段代码就知道它要实现什么功能，它定义了一个对象的信息。批评混合的构造函数/原型方式的人认为，在构造函数内部找属性，在其外部找方法的做法不合逻辑。因此，他们设计了动态原型方法，以提供更友好的编码风格。动态原型方法的基本想法与混合的构造函数/原型方式相同，即在构造函数内定义非函数属性，而函数属性则利用原型属性定义。唯一的区别是赋予对象方法的位置。下面是用动态原型方法重写的 Car 类： function Car(sColor,iDoors,iMpg) &#123; this.color = sColor; this.doors = iDoors; this.mpg = iMpg; this.drivers = new Array(&quot;Mike&quot;,&quot;John&quot;); if (typeof Car._initialized == &quot;undefined&quot;) &#123; Car.prototype.showColor = function() &#123; alert(this.color); &#125;; Car._initialized = true; &#125; &#125; 直到检查 typeof Car._initialized 是否等于 “undefined” 之前，这个构造函数都未发生变化。这行代码是动态原型方法中最重要的部分。如果这个值未定义，构造函数将用原型方式继续定义对象的方法，然后把 Car._initialized 设置为 true。如果这个值定义了（它的值为 true 时，typeof 的值为 Boolean），那么就不再创建该方法。简而言之，该方法使用标志（_initialized）来判断是否已给原型赋予了任何方法。该方法只创建并赋值一次，传统的 OOP 开发者会高兴地发现，这段代码看起来更像其他语言中的类定义了。 6.混合工厂方式这种方式通常是在不能应用前一种方式时的变通方法。它的目的是创建假构造函数，只返回另一种对象的新实例。这段代码看起来与工厂函数非常相似： function Car() &#123; var oTempCar = new Object; oTempCar.color = &quot;blue&quot;; oTempCar.doors = 4; oTempCar.mpg = 25; oTempCar.showColor = function() &#123; alert(this.color); &#125;; return oTempCar; &#125; 与经典方式不同，这种方式使用 new 运算符，使它看起来像真正的构造函数： var car = new Car(); 由于在 Car() 构造函数内部调用了 new 运算符，所以将忽略第二个 new 运算符（位于构造函数之外），在构造函数内部创建的对象被传递回变量 car。这种方式在对象方法的内部管理方面与经典方式有着相同的问题。强烈建议：除非万不得已，还是避免使用这种方式。采用哪种方式如前所述，目前使用最广泛的是混合的构造函数/原型方式。此外，动态原始方法也很流行，在功能上与构造函数/原型方式等价。可以采用这两种方式中的任何一种。不过不要单独使用经典的构造函数或原型方式，因为这样会给代码引入问题。实例对象令人感兴趣的一点是用它们解决问题的方式。ECMAScript 中最常见的一个问题是字符串连接的性能。与其他语言类似，ECMAScript 的字符串是不可变的，即它们的值不能改变。请考虑下面的代码： var str = &quot;hello &quot;; str += &quot;world&quot;; 实际上，这段代码在幕后执行的步骤如下： 创建存储 “hello “ 的字符串。 创建存储 “world” 的字符串。 创建存储连接结果的字符串。 把 str 的当前内容复制到结果中。 把 “world” 复制到结果中。 更新 str，使它指向结果。每次完成字符串连接都会执行步骤 2 到 6，使得这种操作非常消耗资源。如果重复这一过程几百次，甚至几千次，就会造成性能问题。解决方法是用 Array 对象存储字符串，然后用 join() 方法（参数是空字符串）创建最后的字符串。想象用下面的代码代替前面的代码：var arr = new Array(); arr[0] = &quot;hello &quot;; arr[1] = &quot;world&quot;; var str = arr.join(&quot;&quot;); 这样，无论数组中引入多少字符串都不成问题，因为只在调用 join() 方法时才会发生连接操作。此时，执行的步骤如下：创建存储结果的字符串把每个字符串复制到结果中的合适位置虽然这种解决方案很好，但还有更好的方法。问题是，这段代码不能确切反映出它的意图。要使它更容易理解，可以用 StringBuffer 类打包该功能：```javascriptfunction StringBuffer () {this.strings = new Array();} StringBuffer.prototype.append = function(str) { this.strings.push(str);}; StringBuffer.prototype.toString = function() { return this.strings.join(“”);}; 这段代码首先要注意的是 strings 属性，本意是私有属性。它只有两个方法，即 append() 和 toString() 方法。append() 方法有一个参数，它把该参数附加到字符串数组中，toString() 方法调用数组的 join 方法，返回真正连接成的字符串。要用 StringBuffer 对象连接一组字符串，可以用下面的代码： ```javascript var buffer = new StringBuffer (); buffer.append(&quot;hello &quot;); buffer.append(&quot;world&quot;); var result = buffer.toString(); TIY 可用下面的代码测试 StringBuffer 对象和传统的字符串连接方法的性能： var d1 = new Date(); var str = &quot;&quot;; for (var i=0; i &lt; 10000; i++) &#123; str += &quot;text&quot;; &#125; var d2 = new Date(); document.write(&quot;Concatenation with plus: &quot; + (d2.getTime() - d1.getTime()) + &quot; milliseconds&quot;); var buffer = new StringBuffer(); d1 = new Date(); for (var i=0; i &lt; 10000; i++) &#123; buffer.append(&quot;text&quot;); &#125; var result = buffer.toString(); d2 = new Date(); document.write(&quot;&lt;br /&gt;Concatenation with StringBuffer: &quot; + (d2.getTime() - d1.getTime()) + &quot; milliseconds&quot;); 这段代码对字符串连接进行两个测试，第一个使用加号，第二个使用 StringBuffer 类。每个操作都连接 10000 个字符串。日期值 d1 和 d2 用于判断完成操作需要的时间。请注意，创建 Date 对象时，如果没有参数，赋予对象的是当前的日期和时间。要计算连接操作历经多少时间，把日期的毫秒表示（用 getTime() 方法的返回值）相减即可。这是衡量 JavaScript 性能的常见方法。该测试的结果可以帮助您比较使用 StringBuffer 类与使用加号的效率差异。","categories":[],"tags":[{"name":"Web开发","slug":"Web开发","permalink":"http://example.com/tags/Web%E5%BC%80%E5%8F%91/"}]},{"title":"Mac终端命令大全","slug":"Github/Mac终端命令大全","date":"2016-10-30T16:00:00.000Z","updated":"2017-05-04T06:37:25.000Z","comments":true,"path":"2016/10/31/Github/Mac终端命令大全/","link":"","permalink":"http://example.com/2016/10/31/Github/Mac%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/","excerpt":"","text":"Mac终端命令大全 1.目录操作 命令 功能描述 使用举例 mkdir 创建一个目录 mkdir dirname rmdir 删除一个目录 rmdir dirname mvdir 移动或重命名一个目录 mvdir dir1 dir2 cd 改变当前目录 cd dirname pwd 显示当前目录的路径名 pwd ls 显示当前目录的内容 ls -la dircmp 比较两个目录的内容 dircmp dir1 dir2 2.文件操作 命令名 功能描述 使用举例 cat 显示或连接文件 cat filename pg 分页格式化显示文件内容 pg filename more 分屏显示文件内容 more filename od 显示非文本文件的内容 od -c filename cp 复制文件或目录 cp file1 file2 rm 删除文件或目录 rm filename mv 改变文件名或所在目录 mv file1 file2 ln 联接文件 ln -s file1 file2 find 使用匹配表达式查找文件 find . -name “*.c” -print file 显示文件类型 file filename open 使用默认的程序打开文件 open filename 3.选择操作 命令名 功能描述 使用举例 head 显示文件的最初几行 head -20 filename tail 显示文件的最后几行 tail -15 filename cut 显示文件每行中的某些域 cut -f1,7 -d: /etc/passwd colrm 从标准输入中删除若干列 colrm 8 20 file2 paste 横向连接文件 paste file1 file2 diff 比较并显示两个文件的差异 diff file1 file2 sed 非交互方式流编辑器 sed “s/red/green/g” filename grep 在文件中按模式查找 grep “^[a-zA-Z]” filename awk 在文件中查找并处理模式 awk ‘{print $1 $1}’ filename sort 排序或归并文件 sort -d -f -u file1 uniq 去掉文件中的重复行 uniq file1 file2 comm 显示两有序文件的公共和非公共行 comm file1 file2 wc 统计文件的字符数、词数和行数 wc filename nl 给文件加上行号 nl file1 &gt;file2 4.安全操作 命令名 功能描述 使用举例 passwd 修改用户密码 passwd chmod 改变文件或目录的权限 chmod ug+x filename umask 定义创建文件的权限掩码 umask 027 chown 改变文件或目录的属主 chown newowner filename chgrp 改变文件或目录的所属组 chgrp staff filename xlock 给终端上锁 xlock -remote 5.编程操作 命令名 功能描述 使用举例 make 维护可执行程序的最新版本 make touch 更新文件的访问和修改时间 touch -m 05202400 filename dbx 命令行界面调试工具 dbx a.out xde 图形用户界面调试工具 xde a.out 6.进程操作 命令名 功能描述 使用举例 ps 显示进程当前状态 ps u kill 终止进程 kill -9 30142 nice 改变待执行命令的优先级 nice cc -c *.c renice 改变已运行进程的优先级 renice +20 32768 7.时间操作 命令名 功能描述 使用举例 date 显示系统的当前日期和时间 date cal 显示日历 cal 8 1996 time 统计程序的执行时间 time a.out 8.网络与通信操作 命令名 功能描述 使用举例 telnet 远程登录 telnet hpc.sp.net.edu.cn rlogin 远程登录 rlogin hostname -l username rsh 在远程主机执行指定命令 rsh f01n03 date ftp 在本地主机与远程主机之间传输文件 ftp ftp.sp.net.edu.cn rcp 在本地主机与远程主机 之间复制文件 rcp file1 host1:file2 ping 给一个网络主机发送 回应请求 ping hpc.sp.net.edu.cn mail 阅读和发送电子邮件 mail write 给另一用户发送报文 write username pts/1 mesg 允许或拒绝接收报文 mesg n 9.Korn Shell 命令 命令名 功能描述 使用举例 history 列出最近执行过的 几条命令及编号 history r 重复执行最近执行过的 某条命令 r -2 alias 给某个命令定义别名 alias del=rm -i unalias 取消对某个别名的定义 unalias del 10.其他命令 命令名 功能描述 使用举例 uname 显示操作系统的有关信息 uname -a clear 清除屏幕或窗口内容 clear env 显示当前所有设置过的环境变量 env who 列出当前登录的所有用户 who whoami 显示当前正进行操作的用户名 whoami tty 显示终端或伪终端的名称 tty stty 显示或重置控制键定义 stty -a du 查询磁盘使用情况 du -k subdir df 显示文件系统的总空间和可用空间 df /tmp w 显示当前系统活动的总信息 w","categories":[{"name":"Web开发","slug":"Web开发","permalink":"http://example.com/categories/Web%E5%BC%80%E5%8F%91/"}],"tags":[]},{"title":"Linux系统常用命令","slug":"Github/linux系统常用命令","date":"2016-10-19T16:00:00.000Z","updated":"2018-06-08T12:06:08.000Z","comments":true,"path":"2016/10/20/Github/linux系统常用命令/","link":"","permalink":"http://example.com/2016/10/20/Github/linux%E7%B3%BB%E7%BB%9F%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","excerpt":"","text":"linux系统常用命令Linux命令格式: command [-options] [parameter1] 说明： command: 命令名,相应功能的英文单词或单词的缩写 [-options]：选项,可用来对命令进行控制，也可以省略，[]代表可选 [parameter1]：传给命令的参数：可以是零个一个或多个 1. 查看当做操作目录位置&gt; pwd 自动补全：在敲出命令的前几个字母的同时，按下tab键，系统会自动帮我们补全命令 历史命令：当系统执行过一些命令后，可按上下键翻看以前的命令，history将执行过的命令列举出来 2. 查看(当前)目录里边的文件内容ls是英文单词list的简写，其功能为列出目录的内容，是用户最常用的命令之一，它类似于DOS下的dir命令。 Linux文件或者目录名称最长可以有265个字符，“.”代表当前目录，“..”代表上一级目录，以“.”开头的文件为隐藏文件，需要用 -a 参数才能显示。 &gt; ls //list &gt; ls -l 或ll //显示文件的详细信息 &gt; ls -hl //配合 -l 以人性化的方式显示文件大小 &gt; ls -al //all显示文件的详细信息(包括隐藏文件) &gt; ls -a //显示目录全部文件名字(包括隐藏文件) &gt; ls [-al] 目录 //查看指定目录的文件信息 例如：查看指定目录的文件信息 &gt; ls -a /bin &gt; ls -alh &gt; list.txt ##这就是重定向，把显示在终端的内容，输入到list.txt文件中去。（如果文件有内容，则删除原有内容，重新覆盖上去。） &gt; ls &gt;&gt; list.txt 在文件内容末尾，把内容追加上去 一个文件或目录可能有读、写及执行权限： 读权限（r） 对文件而言，具有读取文件内容的权限；对目录来说，具有浏览目录的权限。 写权限（w） 对文件而言，具有新增、修改文件内容的权限；对目录来说，具有删除、移动目录内文件的权限。 可执行权限（x） 对文件而言，具有执行文件的权限；对目录了来说该用户具有进入目录的权限。 注意：通常，Unix/Linux系统只允许文件的属主(所有者)或超级用户改变文件的读写权限。 3. 目录的切换&gt; cd 目录名字 &gt; cd .. 或 cd ../ //上级目录切换 &gt; cd . 或 cd ./ //切换到当前目录 &gt; cd ~ 或 cd //直接切换到用户家目录 4. 用户切换&gt; su - 或者 su - root //切换到root超级管理员 &gt; su 普通用户名 //切换到普通用户 &gt; exit //退回到原用户 用户切换时候会造成叠加效果，因此不要重复su动作(su和exit配对使用) jinnan---&gt;root---&gt;jinnan---&gt;root---&gt;jinnan 5. 查看当前用户是谁 $&gt; whoami //显示当前正在操作系统的用户$&gt; who am i //显示登录系统的用户信息(与su没有关系) ### 6. 图形界面 和 命令界面 切换 ```cmd &gt;# init 3 //切换到 命令界面 &gt;# init 5 //切换到 图形界面 7. 查看指令对应的可执行文件位置&gt;$ which 指令 8. 直接输出文件内容到终端&gt;$ cat 文件 9. 清空屏幕&gt;$ clear 10. 目录操作① 创建目录 make directory &gt;$ mkdir 目录名称 //创建单个目录 &gt;$ mkdir -p newdir1/newdir2/newdir3 //递归创建多级目录 &gt;$ mkdir dir1/dir2/newdir &gt;$ mkdir -p dir1/newdir2/newdir3 新目录的层次大于等于2个，就需要-p参数， 等于1个，就不需要 &gt; mkdir /home/jinnan/shandong //相对根目录的“绝对路径方式”创建shandong目录 ② 移动目录 move &gt; mv dir1 dir2 //dir1移动到dir2的目录下 &gt; mv dir1/dir2 dir3 //dir2移动到dir3的目录下 &gt; mv dir1/dir2 dir3/dir4 //dir2移动到dir4的目录下 &gt; mv /home/jinnan/beijing /home/jinnan/shandong //绝对路径方式：beijing移动到shandong目录下 (移动到的目标目录都是【存在的】) ③ 目录改名字操作mv指令的第二个参数是新名字就是改名字操作 存在的名字就是移动操作mv是【移动 和 改名字】合并的指令 &gt; mv dir1 newdir //dir1移动到当前目录下，并改名字为newdir &gt; mv dir1/dir2 dir3 //dir2移动到dir3目录下，并改名字为 原名 &gt; mv dir1/dir2 dir3/newdir //dir2移动到dir3目录下，并改名字为newdir ④ 复制(并改名字)操作 copy-R recursive递归的 &gt; cp -R dir1 dir2 //dir1复制到dir2下，并改名字为 原名 &gt; cp -R dir1/dir2 dir3/newdir //dir2复制到dir3下，并改名字为 newdir &gt; cp -R dir1/dir2 newdir //dir2复制到当前目录，并改名字为 newdir &gt; cp dir1/filea dir2 //filea复制到dir2下，并改名字为 原名 &gt; cp dir1/filea dir2/dir3/newfile //filea复制到dir3下，并改名字为 newfile ⑤ 删除操作 remove-f force强制的 &gt; rm file //删除file文件 &gt; rm -r dir //删除目录 &gt; rm -rf filename //递归强制删除文件(目录) &gt; rm -rf / //递归强制删除&quot;/斜杠&quot;根目录 11. 文件简单操作① 文件内容查看 &gt; cat filename //一次性把全部内容都输出到终端 &gt; more filename //通过敲回车方式逐行查看文件内容 q键结束查看 &gt; less filename //&quot;上下左右&quot;键方式查看文件各部分内容(支持回看) q键结束查看 &gt; head -n filename //查看文件的前n行内容 &gt; tail -n filename //查看文件的最后n行内容 &gt; wc filename //查看文件内容行数 ② 创建文件 &gt; touch filename //在当前目录创建filename文件 &gt; touch dir/filename //在指定目录下创建filename文件 &gt; touch /home/jinnan/dir/newfile //通过绝对路径方式创建newfile文件 ③ 给文件追加内容 &gt; echo 内容 &gt; 文件 //把“内容”以覆盖写方式添加到文件中 &gt; echo 内容 &gt;&gt; 文件 //把“内容”以“追加”方式添加到文件中 (使用以上两个指令时，文件不存在会自动创建) 12. 用户操作(创建、修改、删除)对应配置文件：/etc/passwd① 创建useradd &gt;# useradd -g 组编码 -d 家目录 -u 用户编号 用户名 &gt;# useradd 用户名 ② 修改usermod &gt;# usermod -g 组别 -d 家目录(手动创建) -u 用户编号 -l newname 用户名 ③ 删除userdel &gt;# userdel -r 用户名 //删除用户信息同时“家目录”也删除 13. 组的操作(创建、修改、删除)对应配置文件：/etc/group① 创建groupadd &gt;# groupadd 组名 ② 修改groupmod &gt;# groupmod -g 本身编号 -n 新名字 组名 ③ 删除groupdel(注意：组里边存在用户信息禁止删除) &gt;# groupdel 组别 14. 查看指令可以使用的参数&gt; man 指令 15. 打包-压缩打包实例： $ ls 1.py 2.py 3.py $ tar -cvf test.tar *.py ## 解包 $ tar xvf test.tar tar 打包命令 -cvf [参数] c创建打包文件 v显示进度 f指定档案文件名称，f后面是生成的.tar文件，所以必须放选项最后 x 解开文件 *.py 需要打包的对象【所有带.py后缀的文件】 .tar 打包压缩一步生成 压缩：tar zcvf fileName.tar.gz 打包压缩的对象 文件解压压缩bzip2 压缩用法：tar -jcvf 压缩包包名 文件…(tar jcvf bk.tar.bz2 *.c) 解压用法：tar -jxvf 压缩包包名 (tar jxvf bk.tar.bz2) .zip压缩：zip fileName.zip dirName解压：unzip fileName.zip .rar压缩：r解压： 练习题： 1、在桌面上创建一个div的文件夹。2.快速创建div2/div22/div222文件夹3.在div22中，创建一个名字为name.txt的文件4.文件里添加内容：我是一个小白鼠，5，在文字后面再追加内容：我不是一个小白鼠，你知道吗？6.把name.txt文件移动到div文件夹下。7.复制一个name.txt文件，改名为mouse.txt文件。8.把mouse.txt文件移动到div222文件夹中，并压缩文件夹div2229.删除div222文件夹。 其他命令 # 查看当前日历 $ cal # 显示或设置时间 $ date # 查看进程信息： $ ps # 动态显示进程： $ top 终止进程： $ kill XXX 重启：reboot、 关机：init0 # 查看或配置网卡信息： $ ifconfig","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://example.com/tags/Linux/"}]},{"title":"Date + Math","slug":"Github/date+math","date":"2016-08-07T16:00:00.000Z","updated":"2017-07-05T06:57:28.000Z","comments":true,"path":"2016/08/08/Github/date+math/","link":"","permalink":"http://example.com/2016/08/08/Github/date+math/","excerpt":"","text":"3.DateDate.getDate()返回一个Date对象的月份中的日期值 1~31 Date.getDay()返回一个Date对象的一周中的日期值 0~6 Date.getFullYear()获取本地时间的年份，如：2017 Date.getHours()时 Date.getMinutes()分钟数。 Date.getSeconds()秒 Date.getMilliseconds()本地时间表示时的毫秒值 Date.getTime() 方法返回一个时间的格林威治时间数值。(时间戳)4.MathMath.PI 表示一个圆的周长与直径的比例，约为 3.14159：function calculateCircumference (radius) &#123; return 2 * Math.PI * radius; &#125; calculateCircumference(1); // 6.283185307179586 Math.random()返回0到1之间的伪随机数. Math.abs(x)返回x的绝对值. Math.cbrt(x)返回x的立方根. Math.ceil(x)返回x向上取整后的值. Math.floor(x)返回小于x的最大整数。 Math.pow(x,y)返回x的y次幂. Math.pow(3,3)//27","categories":[],"tags":[{"name":"Web开发","slug":"Web开发","permalink":"http://example.com/tags/Web%E5%BC%80%E5%8F%91/"}]},{"title":"5.JSON","slug":"Github/JSON","date":"2016-07-14T16:00:00.000Z","updated":"2017-07-05T07:35:59.000Z","comments":true,"path":"2016/07/15/Github/JSON/","link":"","permalink":"http://example.com/2016/07/15/Github/JSON/","excerpt":"","text":"5.JSON1.为什么使用 JSON？对于 AJAX 应用程序来说，JSON 比 XML 更快更易使用： 使用 XML读取 XML 文档使用 XML DOM 来循环遍历文档读取值并存储在变量中 使用 JSON读取 JSON 字符串用 eval() 处理 JSON 字符串 相比 XML 的不同之处没有结束标签更短读写的速度更快能够使用内建的 JavaScript eval() 方法进行解析使用数组不使用保留字 2.JSON 语法1.JSON 对象JSON 对象在花括号中书写：对象可以包含多个名称/值对： &#123; &quot;firstName&quot;:&quot;John&quot; , &quot;lastName&quot;:&quot;Doe&quot; &#125; 这一点也容易理解，与这条 JavaScript 语句等价： firstName = &quot;John&quot; lastName = &quot;Doe&quot; 2.JSON 数组JSON 数组在方括号中书写：数组可包含多个对象： &#123; &quot;employees&quot;: [ &#123; &quot;firstName&quot;:&quot;John&quot; , &quot;lastName&quot;:&quot;Doe&quot; &#125;, &#123; &quot;firstName&quot;:&quot;Anna&quot; , &quot;lastName&quot;:&quot;Smith&quot; &#125;, &#123; &quot;firstName&quot;:&quot;Peter&quot; , &quot;lastName&quot;:&quot;Jones&quot; &#125; ] &#125; 在上面的例子中，对象 “employees” 是包含三个对象的数组。每个对象代表一条关于某人（有姓和名）的记录。 3.JSON 使用一、JSON字符串转换为JSON对象// JSON字符串: var str1 = &#39;&#123; &quot;name&quot;: &quot;cxh&quot;, &quot;sex&quot;: &quot;man&quot; &#125;&#39;; //JSON对象: var str2 = &#123; &quot;name&quot;: &quot;cxh&quot;, &quot;sex&quot;: &quot;man&quot; &#125;; 要运用上面的str1，必须运用下面的要领先转化为JSON对象： //由JSON字符串转换为JSON对象 var obj = eval(&#39;(&#39; + str + &#39;)&#39;); 或者 var obj = str.parseJSON(); //由JSON字符串转换为JSON对象 或者 var obj = JSON.parse(str); //由JSON字符串转换为JSON对象 然后，就可以这样读取： Alert(obj.name); Alert(obj.sex); 特别留心：如果obj本来就是一个JSON对象，那么运用 eval（）函数转换后（哪怕是多次转换）还是JSON对象，但是运用 parseJSON（）函数处理后会有疑问（抛出语法异常）。 二、可以运用 toJSONString()或者全局要领JSON.stringify()将JSON对象转化为JSON字符串。 例如： var last=obj.toJSONString(); //将JSON对象转化为JSON字符 或者 var last=JSON.stringify(obj); //将JSON对象转化为JSON字符 alert(last); 留心： 上面的多个要领中，除了eval()函数是js自带的之外，其他的多个要领都来自json.js包。新版本的 JSON 修改了 API，将 JSON.stringify() 和 JSON.parse() 两个要领都注入到了 Javascript 的内建对象里面，前者变成了 Object.toJSONString()，而后者变成了 String.parseJSON()。如果提示找不到toJSONString()和parseJSON()要领，则说明您的json包版本太低。 JSON提供了json.js包，下载http://www.json.org/json.js后，将其引入然后就可以简单的使用object.toJSONString()转换成JSON数据。 JSON 文件JSON 文件的文件类型是 “.json”JSON 文本的 MIME 类型是 “application/json”","categories":[],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"http://example.com/tags/Javascript/"}]},{"title":"4.RegExp","slug":"Github/RegExp","date":"2016-07-11T16:00:00.000Z","updated":"2017-07-05T06:59:28.000Z","comments":true,"path":"2016/07/12/Github/RegExp/","link":"","permalink":"http://example.com/2016/07/12/Github/RegExp/","excerpt":"","text":"5.RegExp正则表达式：就是按照某种规则去匹配符合条件的字符串在当前目录下，查找所有txt文件 find ./ -name *.txt Javascript通过内置对象RegExp支持正则表达式 1.有两种方法实例化RegExp对象 字面量var str = &#39;He is a boy.This is a dog.&#39; var reg = /\\bis\\b/g; str.replace(reg,&#39;IS&#39;) 构造函数var str = &#39;He is a boy.This is a dog.&#39; var reg = new RegExp(&#39;\\\\bis\\\\b&#39;,&#39;g&#39;); str.replace(reg,&#39;IS&#39;) 2.修饰符 g:global全文搜索，如果不添加，搜索到第一个匹配停止 i: 忽略大小写，默认是大小写铭感 m:多行搜索3.字符类使用元字符[]来构建一个简单的类。[abc] 把字符a或b或c归为一类，有它们中间一个就成 &#39;a1b2c3d4&#39;.replace(/[abc]/g,&#39;x&#39;)//x1x2x3d4 字符类取反^ [^abc]不是字符a或b或c的内容 &#39;a1b2c3d4&#39;.replace(/[^abc]/g,&#39;x&#39;)//axbxcxxx 4.范围类[a-z] 从a到z的任意字符 &#39;a1b2c3d4&#39;.replace(/[a-z]/g,&#39;Q&#39;)//Q1Q2Q3Q4 [a-zA-Z]大小写完全匹配 [0-9-] 范围0~9，再加&#39;-&#39; 5.预定义类 字符 等价类 含义 . [^\\r\\n] 除了回车符和换行符之外的所有字符 \\d [0-9] 数字字符 \\D [^0-9] 非数字字符 \\s 空白符 \\S 非空白符 \\w [a-zA-Z_0-9] 单词字符（字母、数字下划线） \\W [^a-zA-Z_0-9] 非单词字符 6.边界 ^ 以XXX开始 $ 以XXX结束 \\b 单词边界 B 非单词边界7.量词 字符 含义 ？ 出现零次或一次（最多出现一次） + 出现一次或多次（至少出现一次） * 出现零次或多次（任意次） {n} 出现n次 {n,m} 出现n到m次 n, 至少出现n次","categories":[],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"http://example.com/tags/Javascript/"}]},{"title":"2.Array","slug":"Github/Array","date":"2016-07-09T16:00:00.000Z","updated":"2017-07-05T06:59:06.000Z","comments":true,"path":"2016/07/10/Github/Array/","link":"","permalink":"http://example.com/2016/07/10/Github/Array/","excerpt":"","text":"2.ArrayArray.lengthlength属性表示数组的长度，即其中元素的个数。JavaScript数组的length属性是可变的，当length属性被设置得更大时，整个数组的状态事实上不会发生变化，仅仅是length属性变大；当length属性被设置得比原来小时，则原先数组中索引大于或等于length的元素的值全部被丢失。 Array.filter()使用指定的函数测试所有元素，并创建一个包含所有通过测试的元素的新数组。 function isBigEnough(value) &#123; return value &gt;= 10; &#125; var filtered = [12, 5, 8, 130, 44].filter(isBigEnough); // filtered is [12, 130, 44] Array.forEach()对数组的每个元素执行一次提供的函数。 var a = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]; a.forEach(function(element) &#123; console.log(element); &#125;); // a // b // c a.forEach(function(e,index,a)&#123; console.log(&quot;a[&quot;+index+&quot;]=&quot;+e) &#125;); e:数组中正在处理的当前元素。 index:数组中正在处理的当前元素的索引。 a:forEach()方法正在操作的数组。 //a[0]=a //a[1]=b //a[2]=c Array.indexOf()返回在数组中可以找到给定元素的第一个索引，如果不存在，则返回-1。 var a = [2, 9, 9]; a.indexOf(2); // 0 a.indexOf(7); // -1 Array.join()将数组（或一个类数组对象）的所有元素连接到一个字符串中。 join() 方法，不会改变数组！ let a = [&#39;Wind&#39;, &#39;Rain&#39;, &#39;Fire&#39;]; a.join(); // 默认为 &quot;,&quot; // &#39;Wind,Rain,Fire&#39; a.join(&quot;&quot;); // 分隔符 === 空字符串 &quot;&quot; // &quot;WindRainFire&quot; a.join(&quot;-&quot;); // 分隔符 &quot;-&quot; // &#39;Wind-Rain-Fire&#39; console.log(a); // [&#39;Wind&#39;, &#39;Rain&#39;, &#39;Fire&#39;] Array.lastIndexOf()反向查找数组，找不到返回-1 var array = [2, 5, 9, 2]; var index = array.lastIndexOf(2); // index is 3 index = array.lastIndexOf(7); // index is -1 Array.map从数组元素中，计算新值 let numbers = [1, 5, 10, 15]; let roots = numbers.map(function(x) &#123; return x * 2; &#125;); // roots is now [2, 10, 20, 30] // numbers is still [1, 5, 10, 15] Array.pop()从数组中删除最后一个元素，并返回该元素的值。此方法更改数组的长度。 var a = [1, 2, 3]; a.length; // 3 a.pop(); // 3 console.log(a); // [1, 2] a.length; // 2 Array.push()将一个或多个元素添加到数组的末尾，并返回数组的新长度。 var numbers = [1, 2, 3]; numbers.push(4); console.log(numbers); // [1, 2, 3, 4] numbers.push(5, 6, 7); console.log(numbers); // [1, 2, 3, 4, 5, 6, 7] Array.reduce()累加数组中的每个元素 (从左到右)，返回单个值。 var sum = [0, 1, 2, 3].reduce(function(a, b) &#123; return a + b; &#125;, 0); // sum is 6 Array.reverse()颠倒数组中元素的位置。 var myArray = [&#39;one&#39;, &#39;two&#39;, &#39;three&#39;]; myArray.reverse(); console.log(myArray) // [&#39;three&#39;, &#39;two&#39;, &#39;one&#39;] Array.shift()从数组中删除第一个元素，并返回该元素的值。此方法更改数组的长度。 let a = [1, 2, 3]; let b = a.shift(); console.log(a); // [2, 3] console.log(b); // 1 Array.slice()返回一个从开始到结束（不包括结束）选择的数组的一部分浅拷贝到一个新数组对象。如果第二个参数没添加，默认值是length-1。原始数组不会被修改。 let a = [&#39;zero&#39;, &#39;one&#39;, &#39;two&#39;, &#39;three&#39;]; let sliced = a.slice(1, 3); console.log(a); // [ &#39;zero&#39;, &#39;one&#39;, &#39;two&#39;, &#39;three&#39; ] console.log(sliced); // [ &#39;one&#39;, &#39;two&#39; ] Array.some()测试数组中的某些元素是否通过了指定函数的测试。 function isBigEnough(element, index, array) &#123; return (element &gt;= 10); &#125; var passed = [2, 5, 8, 1, 4].some(isBigEnough); // passed is false passed = [12, 5, 8, 1, 4].some(isBigEnough); // passed is true Array.splice()通过删除现有元素和/或添加新元素来更改数组的内容。 var myFish = [&quot;angel&quot;, &quot;clown&quot;, &quot;mandarin&quot;, &quot;sturgeon&quot;]; myFish.splice(2, 0, &quot;drum&quot;); // myFish is [&quot;angel&quot;, &quot;clown&quot;, &quot;drum&quot;, &quot;mandarin&quot;, &quot;sturgeon&quot;] myFish.splice(2, 1); // myFish is [&quot;angel&quot;, &quot;clown&quot;, &quot;mandarin&quot;, &quot;sturgeon&quot;] myFish.splice(2, 1, &quot;splice&quot;, &quot;parrot&quot;); // myFish is [&quot;angel&quot;, &quot;clown&quot;, &quot;splice&quot;, &quot;parrot&quot;, &quot;sturgeon&quot;] Array.toLocaleString()返回一个字符串表示数组中的元素。数组中的元素将使用各自的 toLocaleString 方法转成字符串，这些字符串将使用一个特定语言环境的字符串（例如一个逗号 “,”）隔开。 var number = 1337; var date = new Date(); var myArr = [number, date, &quot;foo&quot;]; var str = myArr.toLocaleString(); console.log(str); // 输出 &quot;1337,2015/2/27 下午8:29:04,foo&quot; // 假定运行在中文（zh-CN）环境，北京时区 Array.unshift()将一个或多个元素添加到数组的开头，并返回新数组的长度。 let a = [1, 2, 3]; a.unshift(4, 5); console.log(a); // [4, 5, 1, 2, 3]","categories":[],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"http://example.com/tags/Javascript/"}]},{"title":"3.Function","slug":"Github/Function","date":"2016-07-09T16:00:00.000Z","updated":"2017-07-05T07:46:49.000Z","comments":true,"path":"2016/07/10/Github/Function/","link":"","permalink":"http://example.com/2016/07/10/Github/Function/","excerpt":"","text":"6.JS中的call、apply、bind方法call、apply、bind方法的共同点和区别： apply 、 call 、bind 三者都是用来改变函数的this对象的指向的； apply 、 call 、bind 三者第一个参数都是this要指向的对象，也就是想指定的上下文（函数的每次调用都会拥有一个特殊值——本次调用的上下文（context）——这就是this关键字的值。）； apply 、 call 、bind 三者都可以利用后续参数传参； bind 是返回对应函数，便于稍后调用；apply 、call 则是立即调用 。 Function.prototype.apply()将函数作为某一个对象的方法来用。 thisobj: 是函数运行的作用域(this) args: 一个值数组，它的元素是传递给function的参数值。 function.apply(thisobj,args) function sum(num1, num2) &#123; return num1 + num2; &#125; console.log(sum.call(window, 10, 10)); //20 console.log(sum.apply(window,[10,20])); //30 Function.prototype.call()将函数作为对象的方法来用 function Product(name, price) &#123; this.name = name; this.price = price; if (price &lt; 0) &#123; throw RangeError(&#39;Cannot create product &#39; + this.name + &#39; with a negative price&#39;); &#125; &#125; function Food(name, price) &#123; Product.call(this, name, price); this.category = &#39;food&#39;; &#125; **apply()接收两个参数，一个是函数运行的作用域(this)，另一个是参数数组。call()方法第一个参数与apply()方法相同，但传递给函数的参数必须列举出来。 ** Function.prototype.bind()作为一个方法被调用的函数。fn.bind(obj)fn.bind(obj,args…) obj: 把函数绑定到obj对象上。 args… 要绑定到函数上0个或多个参数 window.color = &quot;red&quot;; var o = &#123; color: &quot;blue&quot; &#125;; function sayColor()&#123; alert(this.color); &#125; var OSayColor = sayColor.bind(o); OSayColor(); //blue 更多详解请参阅 12","categories":[],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"http://example.com/tags/Javascript/"}]},{"title":"1.String","slug":"Github/String","date":"2016-07-07T16:00:00.000Z","updated":"2017-07-05T06:58:53.000Z","comments":true,"path":"2016/07/08/Github/String/","link":"","permalink":"http://example.com/2016/07/08/Github/String/","excerpt":"","text":"1.StringString.charAt()取得一个字符串中，第”n”个字符；n是字符串中的索引。 String.charCodeAt()取得一个字符串中，第”n”个字符的编码 String.concat(value,…)连接字符串 String.indexOf()搜索一个子字符串。 String.length一个字符串的长度 String.replace()替换，第一参数可以是字符串，也可以是正则。第二个参数是替换成的文本内容，或是函数。string.replace(regexp,replacement) String.search()根据一个正则表达式查找，返回第一次出现的索引，没有找到返回-1 String.slice()提取一个子串 String.split()把一个字符串，切分成一个数组。 String.substr()提取一个子串 String.toLowerCase()将一个字符串转化成小写 String.toUpperCase()将一个字符串转化成大写 String.trim()去掉开头和结尾处的空白字符 var words = &#39;新浪网是个网站&#39;; 获取字符串的长度 words.length == 7 获取字符串下标为0的字符 words.charAt(0) == &quot;新&quot; 获取字符串最后一位字符 words.charAt( words.length-1 ) == &quot;站&quot; 返回字符串中的子字符所在的索引值，第一次出现的位置。 words.indexOf(&#39;网&#39;) == 2 words.indexOf(&#39;网&#39;,3) == 5 倒序查找 words.lastIndexOf(&#39;网&#39;) == 5 1替换前，2替换后 words.replace(&#39;新浪网&#39;,&#39;sina&#39;) //替换功能 //按某个字符进行切割，并返回数组 var words = &#39;新浪网,是个网站&#39;; var words.split(&#39;,&#39;); 返回结果是数组[&quot;新浪网&quot;,&quot;是个网站&quot;] &quot;1:2:3:4&quot;.split(&quot;:&quot;)//返回[&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;] &quot;|a|b|c&quot;.split(&quot;|&quot;)//返回[&quot;&quot;,&quot;a&quot;,&quot;b&quot;,&quot;c&quot;] &quot;hello&quot;.split(&quot;&quot;,3)//返回[&quot;h&quot;,&quot;e&quot;,&quot;l&quot;] 其他 s.trim() //用于去除字符串两端的空格，返回一个新字符串 s.slice(start,end) //用于从原字符串取出子字符串并返回，不改变原字符串。第一个参数是子字符串的开始位置，第二个参数是子字符串的结束位置（不含该位置）。如果参数是负值，表示从结尾开始倒数计算的位置，即该负值加上字符串长度。 s.substring(start,end) //用于从原字符串取出子字符串并返回，不改变原字符串.第一个参数表示子字符串的开始位置，第二个位置表示结束位置。 s.substr(start,length) //用于从原字符串取出子字符串并返回，不改变原字符串。第一个参数是子字符串的开始位置，第二个参数是子字符串的长度。如果第一个参数是负数，表示倒数计算的字符位置。如果第二个参数是负数，将被自动转为0，因此会返回空字符串。 s.match(regexp) var w = &#39;1 plus 2 eee&#39;; w.match(/\\d+/g) //返回[&quot;1&quot;,&quot;2&quot;] //用于确定原字符串是否匹配某个子字符串，返回一个数组，成员为匹配的第一个字符串。如果没有找到匹配，则返回null。","categories":[],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"http://example.com/tags/Javascript/"}]},{"title":"Excerpt 27：中国做大事的22条真言","slug":"Article/27：中国做大事的22条真言","date":"2016-04-28T16:00:00.000Z","updated":"2021-08-19T02:48:35.000Z","comments":true,"path":"2016/04/29/Article/27：中国做大事的22条真言/","link":"","permalink":"http://example.com/2016/04/29/Article/27%EF%BC%9A%E4%B8%AD%E5%9B%BD%E5%81%9A%E5%A4%A7%E4%BA%8B%E7%9A%8422%E6%9D%A1%E7%9C%9F%E8%A8%80/","excerpt":"","text":"一位身价过亿的温州商人醉酒后说出在中国做大事的22条真言 1.坚持看CCTV-1新闻联播。要想把握经济命脉，必须关注政局，新闻联播图文并茂，有声有色，着实为中国商人的最佳晴雨表；你可以不看财经报道，也可以不看焦点访谈，如果你不是做石油和外汇的，甚至你都可以不去管类似9.11事件和中东局势。 2.不要轻易相信合约或合同哪怕合约让你的律师看过了，公证处公证了都不要轻易相信，甚至当你的客户把钱已经汇入你指定的账户以后你都必须确认，这笔钱你能不能拿出来，能不能动，而合约以外的涉及到利益冲突的任何口头承诺与解释你都必须当他是放屁，无论香还是臭，在对方兑现承诺以前都不要沉湎其中，更无论对方是谁，哪怕那是你交了十年的朋友甚至是和你上了床的女人都必须如此。 3.你自己必须守信，一诺千斤，但对不守信的人例外！！你确认你一定能够做到的事情你才可以承诺，但不要夸大其辞；你如果想一直做个商人，那么你必须树立自己的信誉！虽然你可以不在乎外界对你的争议甚至你也可以制造争议但你不能失去信誉，否则你就不是一个商人而是一个骗子；信誉具体包括你如果和别人约了2：00见面，那么你绝对不可以1：50以前或者2：01以后出现，如遇交通堵塞或意外事件，那你必须及时通知对方，除非你出了车祸遇到空难昏迷不醒或者已经死亡，否则你都没有理由爽约、早到太早或迟到太迟，而你的涵养则体现在对待对方不守时不守承诺的态度与包容等方面；而一旦当你确认对方是在为了利益而一再欺骗你，那么你对对方做出的一切行为都不过分，甚至你可以将计就计，反过来给他画一个饼！ 4.你能赢得起但你可能输不起的生意最好不做！在做任何生意以前，你都必须考虑清楚，如果你输了，那么你是否输得起，而不是去考虑你如果赢了会怎样怎样，输不起的事情你最好别做！而考虑输的范围时你也不要只考虑钱财方面，作为半个商人，有些东西你永远都输不起，包括你爱的女人，你的家人，你的江湖地位甚至你的信誉；所以你必须在做任何生意以前全面考虑清楚你究竟输得起输不起，如果输得起，那么OK，你去义无返顾的DO IT吧！ 5.不要先期投入太多，给自己留够底牌不要把自己手里所有的牌全部亮出来，因为牌局随时会中途停止，而对方也随时会出新的牌，不到最后关键时刻，最好不要亮出你手里最有分量的牌，最后的赢家才是真正的赢家！ 6.天下无事不可为，但商人有所为也有所不为《菜根潭》上有句话说的好“毋以善小而不为，毋以恶小而为之”，说的是做人的道理，而生意也是如此：“不要因为利润少就不去做，也不要因为风险小就去做”；而同样在中国，违背法律的事情可以做，但违背道义的事情则坚决不能做。 7.慎重选择合作伙伴无论是团队，还是个人，很多时候我们都渴望有能够和我们一起联手打天下的黄金搭档，但亲密战友是一定要慎重慎重再慎重的选择的，慎重是对彼此而言并非只针对单方，而亲密战友一定要符合下面这些前提条件才可以成为你的亲密战友；其一，他和你一定需要在一个战壕里一起战斗过至少一年；其二，在你没有负他的前提他对你所说的每一句话他自己都能负责任；其三，他必须是个实在而且能塌实干事的人；其四，他考虑得更多的是你们之间共同的利益(无论是短期的还是长期的)，而这个共同利益高于个人利益；其五，关键时刻他没有躲开更没有出卖你或者大家在他能获得比合作利益还大的更大利益的前提下，五点缺一不可，否则彼此之间的合作不会长久。 8.不要在你的团队里有你家庭成员的影子无论是你老婆还是你父母，都不可以在以你为核心之一的商业团队里有太多插手，因为以你为核心之一的团队接受的是你，而不是你的家庭成员，在你的团队全体成员主动接受并邀请你的家庭成员成为你们团队一员以前，无论你的家庭成员是谁，有多大的本事，或者可以给你们的团队带来多大的前进帮助，都不能成为你让你的家庭成员成为团队一员的理由；而当在你团队(三人或三人以上)里的异性成员一旦与你上了床，那么你必须考虑让对方立刻离开这个团队，要么她(他)另谋高就，要么她(他)成为你的专职情人或者太太(老公)，总之，她(他)已经不能继续留在这个团队，所以在团队里不要随便考虑和异性上床或者动情。 9.不要与和你有利益冲突的女人上床无论谁会占谁的便宜，或者大家之间可以同时并行两种关系，都不应该与之上床，更无论这个女人有多性感，多煽情；这样的女人包括：与你有生意往来的女人，在你手下工作的女人或者是你手下与同事的家眷，甚至是管理着你的政府机构、职能部门里的女公务员，原因有二：其一，这样的女人可以让你死都不知道是怎么死的，其二你虽然是半个商人，但另一半也不是出卖肉体的男。 10.不要给你的女人讲你的商业细节无论这个女人是你包了的二奶，还是你众多情人之中的一个更或者是你已经结婚多年的妻子，你都应该不和她们谈你的商业细节：第一，你谈了可能她们也不懂；第二，你谈的商业细节里面会有能让你入狱的内容；第三，那涉及到商业机密；无论你有多少信任你的女人，都不应该谈太多和你有关的商业内容；还有一个无须单列的商规就是千万不要在夜总会歌厅等色情场所给小姐和应招女郎发名片，一定要记住！ 11.你可以行贿但不要做污点证人到法庭去举证不管收受你贿赂的官员多么无耻，多么不够意思，你只可以行贿而绝不可以去做污点证人到法庭举证；除非你以后连半个商人都不想做了；而如果是你主动行贿，对方收受了而且也为你办了事情，那你更不应该由此来当做能抓住对方小辫子的罪证要挟对方继续为你顶风开绿灯，也无论对方是政府官员还是执法人员还是银行官员甚至办事人员的；最基本的，请客送礼吃饭洗桑拿甚至大到澳门游，这些感情投入都千万不要单独记小黑账，而财务账面上的处理也一定要不留痕迹。 12.不要偷税漏税但要学会合理避税大头小尾的发票最好别开，营业税以及附加的教育基金等你该交多少交多少，增值税你更别动脑子(记得找上家要税票正常抵扣就可以了)，除此以外关税你掂量掂量自己的分量，具体情况具体对待，企业所得税是可以全部避掉一分钱都不交的，但最好给地税点面子，少交点别一分钱都不交，交多交少你自己看着办，而个人所得税呢，视当地政府给纳税人办了多少实事是否把咱纳税人真当纳税人人看待的具体情况而造工资表吧。 13.你可以利用新闻记者但不要相信记者你可以给记者一些钱或礼品，但你不能告诉记者很多你的底细更不能相信记者会给你保守商业秘密，甚至你不能和记者靠的太近且必须学会面对记者而设防，无论你面对是是否是漂亮风骚的女记者还是能发内参的大腕记者都如此。 14.不要摆大，哪怕你真的是老大切记天外有天，不要在任何场合摆大，哪怕你真的很大，而当对方是个摆大而且肤浅的人，你如果想灭掉他，那么最好随便找块砖头砸他一个跟头，然后你走你的路！但切记，这个砖头一定不是你自己的砖头，而且这个砖头最好和你自己没什么关系。 15.保持中立，不要卷入政治派系纷争在任何派系纷争面前都应该保持中立，尤其是在政治派系纷争面前，事实证明，把商业利益的希望寄托在有派系纷争可能的任何一方面都是危险而且不明智的，在派系纷争之间，你必须冷静的保持中立。 16.不要太在乎金钱与利益得失切记有所得就有所失，而有所失就有所得的古训，钱没有了还可以再赚，天下自然有得是你赚不完的钱和商业机会，所以何妨在金钱与利益面前大度一些呢？更何况，更大的商业机会正在等着你去把握呢？基本上你应该没有时间计较一时的得失才对，哪怕你有的是时间去品茗赏色。 17.不要过多用金钱粉饰自己虽然面子对你而言很重要，但相对于你自己的人格魅力而言，有没有名车，带游泳池的别墅，高尔夫以及你的服饰，甚至发型这些都会显得微不足道；当然你可以按自己的喜欢穿一双“内联升”的布鞋，甚至可以在有时间的时候飞到异国他乡去看一场你喜欢的球队的主场或客场比赛，更甚至你可以在很多人面前抽你自己喜欢抽的劣质香烟！ 18.资本决定发言权，但你不应该轻易让别人知道你有多大的发言权关心一下你的属于你的资本和你能控制的资本是正确的，甚至你该关心的包括你的坏帐和现金收益以及现金流量，但这些不应该让太多人知道；而当你以外的获得一笔巨大财富的时候，你更应该学会别把这个消息告诉别人，包括已经和你患难很久的妻子，否则她可能会要求离婚并分割你的这笔不小的资产！记住，男人的金钱应该和女人的年龄一样永远属于秘密，哪怕有一天连女人的年龄都已经不是秘密的时候，你的金钱也应该还是秘密；除非在你临死时即将捐献你的全部家产时，你都绝对不可告诉别人！ 19.总结别人的成败得失，但国外的案例你可以不用理会不要羡慕别人的成功，更不要鄙夷别人的失败，你首要应该做的是学会分析和总结现象背后的本质，找出别人失败或者成功的全部原因，取其长，补其短，做你自己该做的事情；而国外类似微软等那些故事，离你实在太遥远，你大可以不去管他，所以一定意义上，现有的MBA对在中国做生意的你而言并没有多大实际意义！ 20.不要用黑白道的规矩去解决商业上的冲突商业永远是商业，而商业是有商业自身的游戏规则在的，所以哪怕你确实是黑道人物，也不能随便利用黑道规矩去解决商业冲突，同样，即将你有很好的白道背景与资源，你也不能轻易利用这些资源来解决你在商业中的冲突！既然选择了商人，那你必须遵守商业中的一切游戏规则，愿赌就得服输！ 21.在能把握全局的前提下，不要追求事必躬亲不要把自己搞的没有时间与朋友交流，更不要让自己没有时间去泡女人和INTERNET，最要紧的是不要让自己没有时间放松与思考，所以，应该学会让别人去帮你打点生意，处理业务，虽然，业务的核心部分你自己必须牢牢把握；同样，把事情交给别人去做的风险你要考虑清楚并能够预防，以免你把事情交给别人去做以后，你自己又成了一名忙碌的救火队员，记住消防和救火是有区别的，消防的口号是“消防结合，预防为主”。 22.给自己留条后路，预防众叛亲离你可以在沉寂江湖多年以后重整旗鼓，但你不可以倒下以后就不再起来，因为你是一个男人！所以你必须给自己留一条属于你自己的后路，后路包括藏起一个存钱罐，虽然里面只有几块钱但你将来就是要靠这几块钱东山再起；后路也包括一栋法律意义上并不在你名下的房子(你可以有个地方一个人疗伤，恢复元气)，更包括一个并不经常来往的但很仗义而且你也给过他很多帮助的朋友(他可以在关键时候收留你，陪你喝酒，而这样的朋友一生中你能遇到一个也已经很幸运了)；如果实在没有后路，那么你就必须有去露宿街头沿街乞讨的心理准备，但那时候你只可以去向陌生人伸手，而绝对不要向你过去帮助过的还欠着你很多债务或者人情但装做不认识你的人低头。","categories":[{"name":"Article","slug":"Article","permalink":"http://example.com/categories/Article/"}],"tags":[]},{"title":"Excerpt 26：杰出的程序员","slug":"Article/26：杰出的程序员","date":"2016-04-21T16:00:00.000Z","updated":"2021-08-19T02:14:58.000Z","comments":true,"path":"2016/04/22/Article/26：杰出的程序员/","link":"","permalink":"http://example.com/2016/04/22/Article/26%EF%BC%9A%E6%9D%B0%E5%87%BA%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%91%98/","excerpt":"","text":"我不能算是一个很优秀的程序员，但这个问题我已经反复思考了五年了。跟大家分享一下我的看法： 首先， 我认为答案绝对不是 “只要写很多年代码就好了“。我面试过不少有10年经验，代码却写的很糟糕的程序员。经验很保贵， 但只靠经验是不够的。就像下棋一样，假如你用心研究，复习，不断挑战自己，也许可以成为一名大师。但不断用懒散的方式去玩棋，下20年也只是一个”臭棋篓子“。 我觉得比较有用的进步方式： 1. 学会看代码大多数程序员都只愿意用自己写的代码，但高手一般可以轻易调用别人写的代码。表面看上去是工作习惯不同， 但实际上是能力上的差别。看代码要比写代码难很多倍。 我建议上班时多给队友们作code review，下班后试着阅读github上的开源代码。 2. 复习程序员一般都很忙， 手上有永远也做不完的活儿。但在某些公司里， 你只是在反复做同样的事。偶尔放下手上的活儿，留下一部分时间来分析自己的弱点，更改坏习惯，看新书， 或学习新语言。 3. 做个人项目工作中的编程一般只能让你熟悉一部分技术， 导致漏洞的形成。这就好像你长期一个人在自己后院练习投篮， 但第一次打比赛才（在惨败中）发些原来还需要传球， 防守， 强篮板这些概念。 Facebook喜欢雇佣所谓的 “full stack programmer”，就是一个人从设计，到交互，到html， css，javascript， server，sql， 架构，和数据统计都能做。成为full stack programmer最好的方式就是不断做个人项目。 4. 问答网站问问题和回答问题都是很好的学习方式。 有的时候写出一个好问题， 比写出解答次问题所需要的代码还难。写问题可以帮你整理自己的思维逻辑。你可以试着每周在http://stackoverflow.com上问一个好问题或写一个好答案。 5. 加入一个好团队最好的进步方式就是跟比自己强的人一起做事。高手都愿意聚在一起，所以很多会选择去优秀的早期创业公司。我在硅谷和创新工场创业时遇到了很多神人， 跟他们学了不少东西。","categories":[{"name":"Article","slug":"Article","permalink":"http://example.com/categories/Article/"}],"tags":[]},{"title":"javascript常用的小知识","slug":"Github/javascript常用的小知识","date":"2016-04-14T09:01:00.000Z","updated":"2017-05-04T06:39:07.000Z","comments":true,"path":"2016/04/14/Github/javascript常用的小知识/","link":"","permalink":"http://example.com/2016/04/14/Github/javascript%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B0%8F%E7%9F%A5%E8%AF%86/","excerpt":"","text":"javascript常用的小知识1.JS中的是是非非JS是一门计算机编程语言，是一门动态语言也称为脚本语言，是解析型编程语言。为什么是脚本？因为他本身不能执行，就是没有main函数或主程序的入口，必须被他的宿主环境，也就是解析环境解析执行他。为是什么是解析型？因为JS不会进行编程，链接，汇编等一系统的过程生成某个文件，再执行，他就是以字符串形式加载执行.. 2.JS中的真真假假空，null,undefined,false,0,””,’’,NaN都为假,其他都为真 3.函数，类，对象，构造器有什么区别?答:在js中函数，类，对象，构造器可以说是没有任何区别的，我们可以说函数既为对象，对象既为类，类既为构造器。但一般情况下，我们称对象为那个类的实例，这是为了减少混乱。 function Person()&#123; &#125; var person = new Person(); //Person我们可以称为函数，类，对象，构造器(不带参数) //person称为对象的引用 4.懂this关键字，你懂JS五分之一.this永远指向调用该方法(函数)的那个对象.(必背)首先要知道this是什么？this就是js中的一个对象。是一个对象，不是一个函数，此是的对象你可以看作是一个对象的引用，引用谁？引用调用方法的那个对象.this这个对象存在哪里？存在JS代码中，一般存在于函数之中。如果你把this放到‘script标签中，你可以试下window==this(true)，打印什么?为什么？ 5种继承让你如虎添翼.i.对象冒充ii.applyiii.calliv.prototypev.for循环方式用法:永远只须记住，JS中的继承只是属性和方法的拷贝. 6.自调用函数：(function()&#123; // 置于此处的代码将自动执行 &#125;)(); (function(a,b)&#123; var result = a+b; return result; &#125;)(10,20) 7.从数组中随机获取成员var items = [12, 548 , &#39;a&#39; , 2 , 5478 , &#39;foo&#39; , 8852, , &#39;Doe&#39; , 2145 , 119]; var randomItem = items[Math.floor(Math.random() * items.length)]; 8.获取指定范围内的随机数var x = Math.floor(Math.random() * (max - min + 1)) + min; 9.生成从0到指定值得数字数组var numbersArray = [] , max = 100; for( var i=1; numbersArray.push(i++) &lt; max;); // numbers = [1,2,3 ... 100] 10.生成随机的字母数字字符串function generateRandomAlphaNum(len) &#123; var rdmString = &quot;&quot;; for( ; rdmString.length &lt; len; rdmString += Math.random().toString(36).substr(2)); return rdmString.substr(0, len); &#125; 11.字符串去空格String.prototype.trim = function()&#123;return this.replace(/^\\s+|\\s+$/g, &quot;&quot;);&#125;; 12.对象转换为数组var argArray = Array.prototype.slice.call(arguments); 13.验证是否是数字function isNumber(n)&#123; return !isNaN(parseFloat(n)) &amp;&amp; isFinite(n); &#125; 14.获取数组中的最大值和最小值var numbers = [5, 458 , 120 , -215 , 228 , 400 , 122205, -85411]; var maxInNumbers = Math.max.apply(Math, numbers); var minInNumbers = Math.min.apply(Math, numbers); // 清空数组 myArray.length = 0; 使用length属性截断数组 15.通过for-in循环检查对象的属性for(var name in object)&#123; &#125; 16.判断2个变量的最小值或最大值：var a=10;var b=11;Math.min(a,b); var a=10;var b=11;a&lt;b?a:b; 17.确认选择（confirm消息对话框）var mymessage=confirm(&quot;你喜欢JavaScript吗?&quot;); if(mymessage==true)&#123; document.write(&quot;很好,加油!&quot;); &#125;else&#123; document.write(&quot;JS功能强大，要学习噢!&quot;); &#125; 18.提问（prompt消息对话框）function rec()&#123; var score; //score变量，用来存储用户输入的成绩值。 score = prompt(&quot;请输入你的成绩&quot;,&quot;90&quot;); if(score&gt;=90)&#123; document.write(&quot;你很棒!&quot;); &#125;else if(score&gt;=75)&#123; document.write(&quot;不错吆!&quot;); &#125;else if(score&gt;=60)&#123; document.write(&quot;要加油!&quot;); &#125;else&#123; document.write(&quot;要努力了!&quot;); &#125;; &#125; ; 19.js刷新页面的方法&lt;meta http-equiv=&quot;refresh&quot; content=&quot;20&quot;&gt;//每隔20秒刷新一次页面 &lt;meta http-equiv=&quot;refresh&quot; content=&quot;20;url=http://www.jb51.net&quot;&gt;//20秒后跳转到51.net页面。 //页面自动刷新js版本 function myrefresh() &#123; window.location.reload(); &#125; setTimeout(&#39;myrefresh()&#39;,1000); //指定1秒刷新一次 20.立即执行函数把函数定义和函数执行结合到一起就是立即执行函数，也叫自执行函数。这里需要注意两点：1.函数定义仅限于表达式方式定义的函数;2.函数执行实际上就是对函数表达式做一次运算，所以一元运算符都可以让函数执行。 +function()&#123;&#125;(); !function()&#123;console.log(&quot;IIFE&quot;);&#125;(); void function()&#123;console.log(&quot;IIFE&quot;);&#125;(); ~function()&#123;console.log(&quot;IIFE&quot;);&#125;(); (function()&#123;console.log(&quot;Foo!&quot;);&#125;)(); 21.构建字符串的最优方法当你需要遍历数组或对象的时候，不要总想着“for”语句，要有创造性，总能找到更好的办法，例如，像下面这样。 var arr = [&#39;item 1&#39;, &#39;item 2&#39;, &#39;item 3&#39;, ...]; var list = &#39;&lt;ul&gt;&lt;li&gt;&#39; + arr.join(&#39;&lt;/li&gt;&lt;li&gt;&#39;) + &#39;&lt;/li&gt;&lt;/ul&gt;&#39;; 22.减少全局变量 只要把多个全局变量都整理在一个名称空间下，拟将显著降低与其他应用程序、组件或类库之间产生糟糕的相互影响的可能性。更好的做法： var DudeNameSpace = &#123; name : &#39;Jeffrey&#39;, lastName : &#39;Way&#39;, doSomething : function() &#123;...&#125; &#125; console.log(DudeNameSpace.name); // Jeffrey 23.不要给”setInterval”或”setTimeout”传递字符串参数setInterval( &quot;document.getElementById(&#39;container&#39;).innerHTML += &#39;My new number: &#39; + i&quot;, 3000 ); 24.”For in”语句当遍历对象的属性时，你可能会发现还会检索方法函数。为了解决这个问题,总在你的代码里包裹在一个if语句来过滤信息。 for(key in object) &#123; object[key]; &#125;","categories":[],"tags":[{"name":"Web开发","slug":"Web开发","permalink":"http://example.com/tags/Web%E5%BC%80%E5%8F%91/"}]},{"title":"Excerpt 24：陈安之如何追求超级成功","slug":"Article/24：陈安之如何追求超级成功","date":"2016-04-07T16:00:00.000Z","updated":"2021-07-29T12:00:21.000Z","comments":true,"path":"2016/04/08/Article/24：陈安之如何追求超级成功/","link":"","permalink":"http://example.com/2016/04/08/Article/24%EF%BC%9A%E9%99%88%E5%AE%89%E4%B9%8B%E5%A6%82%E4%BD%95%E8%BF%BD%E6%B1%82%E8%B6%85%E7%BA%A7%E6%88%90%E5%8A%9F/","excerpt":"","text":"如何追求超级成功成功最重要的秘诀，就是要用已经证明有效的成功方法。你必须向成功者学习，做成功者所做的事情，了解成功者的思考模式，加以运用到自己的身上，然后再以自己的风格，创出一套自己的成功哲学和理论。 你想知道那些世界级的顶尖人物，是如何透过自我操练与自我鞭策才能达到巅峰？你想知道他们成功的秘诀是什么吗？现在，让我们一起来揭开超级成功的神秘面纱。 1、做你喜欢做的事，然后把它做到最好。 你一定要做自己喜欢做的事情，才会有所成就。正确寻找工作的方法，把自己理想和完美的工作条件列出来。 2、要以成为行业中的世界最顶尖为目标。 不要把赚很多钱当做是你人生最重要的目标。只要你能够成为最好的人物，最好的事情也就会发生在你身上。 当你想要得到一切最美好的事物，你必须把自己变成最好的人，以成为行业中的世界最顶尖为你人生的最终目标，这样的话，你一定可以实现你所有的梦想。 3、成功的人要有远大的梦想，但要有合理的目标。 每一个成功的人都有伟大的梦想。大成功是由小成功所累积，每一个成功的人都是在达成无数的小目标之后，才实现他们伟大的梦想。 不放弃，就一定有成功的机会，如果你放弃，就已经失败了。记住！每一个目标和梦想，都要设定一个期限。目标不达成：1、不合理2、没有期限3、缺乏详细的计划4、没有天天衡量进度。千万不要靠运气过生活，你一定要靠目标和计划过生活。 每一年年底的时候，都要写出明年想要达成的目标。全写出来，选四个最重要、最想要，选1个为核心目标，另3个再排优先顺序，订出具体的完成期限。当你列出目标之后，请你列出一个详细的计划，把计划依照优先顺序排列好，这样会使你达成目标的机率大幅度地提升，这也是每个超级成功者所做的事情。 4、你到底是想要成功，还是一定要成功？ 成功有三个最重要的秘诀：1、要有强烈的欲望2、还是要有强烈的欲望3、还是要有强烈的欲望。 5、每一天都要不断地检讨自己的做法和成效。 做对的一定要不断地加强，做错的一定要立刻改正。因为，同样的错误千万不要犯第二次！每一天一定要检视自己的进度，我检视下属进度，每一礼拜开会做讨论，发生何事（错、对）。 6、一定要跟成功的人学习，尤其是世界级的成功人物。 你一定要学习成功的榜样，让自己进入成功的环境当中，跟着成功者学习。一个人要成功 ，有几个方法： 1、他必须帮成功者工作2、当他们开始成功的时候，也开始跟更成功的人合作3、当你越来越成功的时候，要找成功者来帮你工作。依照这三个方法，按步就班去做，你一定会非常地成功。 7、要成功。要先研究成功学。 要成功，一定要研究成功。一个人的智慧产生的三个要素： 1、成功者不断地搜集资讯，他们相当善于掌握新知。记住！永远要不断地搜集新的资讯2、一个成功的人会不断地学习别人的经验。3、一个有智慧的人，会不断地自我反省。 8、要成功就要采取行动。 世界最顶尖的业务员成功的秘诀：从早上八点工作到晚上昏倒为止。销量永远是一个数字的游戏，你只要越勤劳，拜访越多的顾客，一定就会有成交的机会。 成功的人永远比一般人做得更多，当一般人放弃的时候，他们找寻下一位顾客；当顾客拒绝时，他再问他们：”你到底要不要？”当顾客不买时，他问：”你为什么不买？”记住！永远是你采取了多少行动让你更成功，而不是你知道了多少。 9、要不断地请教成功者，询问他们成功的方法和意见。 一个人要成功，需要不断地历练，需要经过不断地学习，然而，最快的方法就是向一些成功者询问，请他们给你一些意见，给你一些回馈，请他们告诉你做对了什么，做错了什么。 让他们用他们智慧和经验指导你，这样的话，比你看任何的书籍都要来得有效。你永远看不见你自己思考的盲点。问成功人士：”到底还有什么地方，我还需要改进？” 10、不管你做什么事，一定要快乐，一定要享受过程。 推销宗旨、理念：”提供顾客最好的服务，帮助顾客解决他们的问题。” 11、要设立高的标准，绝对不要接受第二流的表现。 你做事的品质和你个人的成就成正比，跟你服务的人数成正比，跟你的态度成正比，跟你的知识成正比，跟你的标准成正比，成功者都拥有高的标准，失败者的标准都不高。凡事零缺点。一定要求第一名。 12、改变自我的心像。 心理学最伟大的发现之一，就是可以籍由自己的不断想像，而成为自己理想中的人物。你必须想像自己是一个非常成功的人，非常富有的人，非常积极的人，非常热情的人，非常有动力的人，你必须每天不断地花一些时间，想像自己成功的景象。 你必须想像自己是一个天生的羸家。不断想像每一年你要达成的目标，不断具体地一次又一次，睡梦中输入潜意识。你不妨今天就把你的目标，有适当的图片，把它剪下，贴起来，每天想像，每天想像，早晚灌输到你的潜意识里面，来改变自己。 13、潜意识的力量。 “潜意识的力量比意识大三万倍以上。”运用潜意识的第一个方法，就是不断地想像，改变自我内在的一个影像和图片；第二个方法，也就是要不断地自我暗示，或是所谓的自我确认。 “我会成功，我会成功，我一定会成功””我会很有钱，我会很有钱，我一定会很有钱””我的业绩不断地提升，不断地提升，我的业绩一定会不断地提升””我很会存钱，我很会存钱，我很会存钱”反复地练习，反复地输入。 影响一个人潜意识最重要最重要的关键，就是要不断地重复，不断地重复，再一次不断地重复，大量地重复，有时间随时随地不断地确认你的目标，不断地想着你的目标，这样的话，你的目标终究会实现的。 14、把你的目标录在录音带上，每天不断地重复播放，来输入你的潜意识。 不断地重复，不断地重复。方法简单，一般人都不愿意去尝试，不尝试，铁定没有效。 15、听潜意识录音带。 影响潜意识最重要最重要的关键，就是反复的次数。”我的收入不断地增加，我的收入不断地增加，我的收入轻而易举地不断地增加””要节俭，要节俭，银行要存钱，要存钱””我们拥有完美的细胞”（不断地重复听） 16、运用潜能开发机。 要改变潜意识，世界上最快的方法，就是运用催眠。新的东西总是容易受到排斥。成功者，勇于尝试新工具。 17、不断建立自己的知识基础。 每年平均阅读400-600本书或杂志。成功有一个很重要的秘诀，就是要用最短的时间，采取最大量的行动。所有的领导者都是阅读者。每会必到。学习才会让你更成功。你必须花30%的收入来不断学习。成功是不断持续累积的，就像学习也是一样。 想赚得更多，一定要学得更多，你的专业知识，一定要是你行业的顶尖。你之所以成功，是因为别人喜欢你，别人相信你；别人凭什么相信你、喜欢你，因为你懂得的比他们多，他们觉得跟你在一起有希望。他们觉得跟你在一起可以学到东西。 检讨是成功之父在研究如何成功致富之前，我们一定要了解，一般人为什么会失败。 因为，我每天都在研究成功者如何成功，却从未研究失败者如何失败。失败是成功之母，检讨是成功之父。我发现，如果你做了成功者做的事情，又做了失败者不该做的事情后，成功的几率便更小了。 所以，不妨在和我分享如何成功之前，先探讨一下一个人为什么失败。 1、缺乏目标 一般人失败的第一个主要原因，就是缺乏目标。我时常问我的学员：“你想不想成功？”他说：“我很想呀！想得不得了！但是，我还没有想好要做什么？”我听后觉得很奇怪，因为一个想要成功的人竟然没有设定目标？ 今天我要探讨的是成功致富的策略与方法，从最简单、最可能犯的错误，到最困难或是一般人最容易忽略的问题，我都会与你分享。思想只是原因，行动才会有结果。假如到目前为止你还没听到你要的讯息，也请你拭目以待。 2、未能记录 第二个导致失败的理由是：虽然有了目标，却没有把它写下来，忽略了白纸黑字的力量。 以前我在设定目标时，总是不断的满脑子乱想。所以，当人家问我有没有目标时我就回答：“有！有！有的”“在哪里啊？”，“在脑袋里面。”，“写出来没有啊？”，“没有。” 我想，写下来干什么？浪费时间。事实上，设定目标的第一个关键，就是把它写下来。因为，当你写下来之后，在你脑海中，已经把这个目标“视觉化”了。 3、时常更改目标 下一个失败的原因是：时常更改目标。许多人常在设定目标之后，隔了不久发现，这好象不是我想要的，或是目标定得太小了，应该再大一点，既然潜意识是无所不能的，就该设大一点的目标，才能实现得更快！ 这个一般人常有的通病。我时常在想，假设一个枪靶是漂浮不定的话，我们是很难击中的。这是一般人时常犯的毛病，也是大家特别需要注意的地方。 4、不愿意对自己负责 除了上述的几种原因外，我发现一般人失败的原因，便是不愿意对自己负责，老是找借口，老是因为别人的原因使自己无法成功：老是认为别人不好，而导致自己失败。 你可以仔细观察，这些失败者，天天都在抱怨。然后天天找朋友谈他的问题，假如没有人倾听他们的问题，他就把这些人视为敌人，然后另外找一群愿意分享问题的朋友，接着便天天聚在一起抱怨。 例如，我从事汽车销售时，业绩不是很好，我就怪公司训练得不够多；广告打得不够大；我们车子的种类不够多；颜色不够多，整整抱怨了两个月，差点被开除。 但事实上，这对自己并没有任何的好处。所以，假设你想要更成功的话，请你从现在开始，百分之百地对自己负责。 5、不能立刻行动 谈了这么多失败原因后，我认为促使个人失败的最大原因，就是因为没有立刻行动。成功者通常都是马上行动，而失败者却是明天再做，后天再做。今天好累，先睡个觉，先休息一下，先喝杯咖啡，我资料还没有整理好，总之他总是帮自己找一堆借口。要相信，借口与成功无缘。 6、自我设限 此外一个无法成功的最大障碍，就是害怕“被拒绝”，进而害怕失败。我时常问许多业务伙伴：“假如你所拜访的顾客都会购买你的产品，而且会大量的购买的话，请问你一天会拜访几个顾客？” 他们的回答是：“我会跑遍整条街，因为每个人都会跟我买，我一定会立刻行动。”所以导致他们不行动的原因，是因为他们满脑子都在想：“大家不会跟我买，大家铁定会拒绝我，每一个都会给我脸色看。” 7、无法掌控自己的情绪 无法掌控自己的情绪也是许多人常犯的毛病。我发现很多失败者，他们的情绪时常处于低落的状态，譬如以前我去拜访顾客时，一旦被顾客拒绝就会很难过，常常要一个礼拜才能克服被拒绝的恐惧感。 然而，成功的人在被顾客拒绝之后，会立刻想说：“顾客就是因为不了解，所以才会拒绝，我下次应该再解释一遍。”就这么一个简单的想法，已经转化了他的心情。当他们面临挫折时，便会告诉自己过去并不等于未来。他们没有失败，只是暂时停止成功。 8、不愿意努力工作 这点也是我过去常犯的错误－-不愿意努力工作。一般人常希望自己能用最简单、最省力、最少的时间，赚到最多的钱并且获得成功。然而，我们发现，全世界最成功的人，通常都是最努力的人。 记得有一次，公司有位同事在凯悦饭店遇到了超级巨星成龙，结果他就当面问成龙：“成功的秘诀是什么？”成龙当场愣了一下，因为大部分跑去找他的，都是要他签名、拍照的影迷，怎么会有人跑去问他成功的秘诀？结果，成龙想了一下，立刻告诉他说：“努力！“就是这么一句话，这么简单。 所以，亲爱的朋友，假如你奋斗了10年，却没有成功，请继续努力。努力，就是成功最有效的方法，也是成功的捷径。努力的前提是方法正确，方向正确。 9、误交损友 一般人失败的原因，常是因为他结交了错误的朋友，所谓物以类聚嘛！所以，我时常给我的学员一个建议：当你遇到问题，遇到困难，遇到挫折时，不要问比你更不成功的朋友，因为他们没有办法解决你的问题，因为他的想法都跟你很类似。 成功环境的最重要条件，就是选择成功的朋友。如同我刚才提到的，跟成功者交往是件非常重要的事，对你一辈子有决定性的影响。因为，成功一定有方法；失败也一定有原因。 我前几天看报纸，看到美国“NBA”的芝加哥公牛队，最近愈战愈勇，已经成为历史上最快速达到50胜的球队。50胜代表赢球几乎高达90%，就是每比赛10场，就赢9场，这样子下去，他们赢得“NBA”总冠军，应该是指日可待了。 当然关键不是在这里，重要的是我看到他们除了超级巨星迈克尔乔丹之外，还有一个“NBA”最棒的篮板王，每一场球赛中他都可以抢15个篮板以上，他是罗德曼。 10、时间管理不当 一般人都缺乏时间管理的习惯与观念。他们每天都在浪费时间，不知道对自己而言，什么才是最有生产力的事情。 我看过许多业绩不好的业务员，他们的工作习惯是，早上大概九点钟出门，九点半到办公室，然后，整理资料到十点，然后喝杯咖啡到十点半，而后再跟朋友聊个天，十一点才开始打电话，这时顾客大部分都已不在，所以，十一点半就准备要吃饭，到了下午觉得太累，先睡个午觉，然后就抱着反正明天再拜访也无所谓的心情，就这样结束了一天的工作。 一个月下来，他说：“咦！奇怪了？为什么收入这么少？业绩这么不好？”因为他们都花时间在休息聊天上！他们工作的时候想到玩，玩的时候就忘掉工作，这样的习惯是没有办法成功的。 11、用错了方法和策略 我记得我们公司在两年前，推出了全台湾最顶尖的超高能潜意识录音带，那时候我们非常兴奋。因为这套录音带，让我在半年之内，倍增了五倍以上的收入。所有公司里的人都迫不及待的想要到处推广。他们都说，每一天都要出去做拜访。 我记得其中有一个黄发姓的伙伴，带了一个皮箱，里面摆了大概20套的潜意识录音带，他志得意满地说：“陈老师，我向你保证，我今天一定卖20套，没有卖完20套，绝对不回到公司。”听完后，我说：“黄先生，这是你说的，你一定要做到！”他坚决的表示：“是的，我一定做到。”我也兴奋的配合：“那你就立刻行动。” 结果第二天，他回来告诉我：“陈老师，昨天我满载而归，一套也没有卖掉。”我问：“这到底是怎么一回事？”他说，他跑去百货公司推销，结果没有推销成功，还被专柜小姐反推销。” 事实上，依照他那种一对一的推销方法，一个月最多只能卖50套的潜意识录音带。这表示他用错了方法和策略。后来我告诉他演讲销售会比较好。结果这位黄先生，在一场演讲当中，卖了70套以上的潜意识录音带，超过他过去一个月的业绩。 所以，大部份人失败的原因，是因为他使用了错误的方法、错误的策略。那么正确的方法正确的策略从哪里来，其实就在自己的经验里和成功者身上。 12、缺乏自我成长 下一个导致失败的理由是缺乏自我成长。大部分的人都不看书。我太太告诉我，她看过一则报道讲：日本人每年平均一个人大概读七本书，而中国人每年大概平均读零点一本。也就是说，我们的资讯非常地缺乏。 我发现一个失败，最主要的两个关键，一个是缺乏资讯，二是没有运用潜意识力量。大多数人都缺乏某一方面的知识或资讯。事实上，我以前之所以会有所改变，是因为我听了某一类课，与某一些人分享了某一个观念、一个方法，或阅读了某一本书籍，从中得到过一份新的资讯。 所有的问题都可以解决，只要你拥有足够的资讯。大部分人却因资讯不足而没有办法解决。没有资讯的原因，是因为他们没有注重学习及与人交流。 13、没有百分之百地下定决心、全力以赴 另一个失败的原因是没有没有百分之百地下定决心、全力以赴。我时常听人说：“对，我要达成目标！”然后呢？行动时却心不在焉。任何事情没有全力以赴去做，其效果永远是不理想的。 我1996年对我公司的伙伴说：“我们1996年成功的策略，就是比去年努力4倍。”至于为什么要努力4倍呢？这数字到底从哪里来？有一次，我看到堤义明（世界首富）的书，书中提及作者做任何事情，都比别人努力3倍，那么依照陈安之的成功学理论：比最好的还要更好，所以我们就要努力4倍。 14、缺乏运用潜意识力量 这是最后一点，也是最重要的一点，就是一般人缺乏运用潜意识力量。 潜能激发的目的，就是要激发你的潜意识。潜意识是如何形成的？是由你思考、动作的不断改变而改变。 所以，改变潜意识的最好方法，就是确定你的主要目标，也就是核心目标。每天早上写10遍，把这样的目标输入到你的潜意识里，要你的潜意识自动来改变你的行为习惯。 人的行动都是由思想来控制，所以只要我们能改变我们的思想，我们就能改变我们的行动。通常，改变的时间约需21天到30天左右。 所以，各位朋友，任何的习惯，只要你能够重复，只要持续30天，它都可以自动被消除。","categories":[{"name":"Article","slug":"Article","permalink":"http://example.com/categories/Article/"}],"tags":[]},{"title":"Excerpt 25：认知三部曲","slug":"Article/25：认知三部曲","date":"2016-04-07T16:00:00.000Z","updated":"2021-07-29T12:03:16.000Z","comments":true,"path":"2016/04/08/Article/25：认知三部曲/","link":"","permalink":"http://example.com/2016/04/08/Article/25%EF%BC%9A%E8%AE%A4%E7%9F%A5%E4%B8%89%E9%83%A8%E6%9B%B2/","excerpt":"认知三部曲完整版：人与人最大的差别是认知！ 在今天这样一个急剧变化的时代，每一个行业的认知都在迅速更新迭代，跨界也越来越普遍。 谁能正确建立和升级认知，谁就能脱颖而出。猎豹 CEO 傅盛他将认知梳理为三部曲：成长就是认知升级；管理本质就是认知管理；战略就是格局+破局。 如认知升级：坚信大趋势，对外求教，活在当下、面向未来。认知管理：学会逆向思考，分清优先级。战略升级：建立行业格局，养成格局和破局结合的思维习惯。 我们将三部曲整合，希望能够成体系地输出有价值的内容，愿大家能够从中有所启发。","text":"认知三部曲完整版：人与人最大的差别是认知！ 在今天这样一个急剧变化的时代，每一个行业的认知都在迅速更新迭代，跨界也越来越普遍。 谁能正确建立和升级认知，谁就能脱颖而出。猎豹 CEO 傅盛他将认知梳理为三部曲：成长就是认知升级；管理本质就是认知管理；战略就是格局+破局。 如认知升级：坚信大趋势，对外求教，活在当下、面向未来。认知管理：学会逆向思考，分清优先级。战略升级：建立行业格局，养成格局和破局结合的思维习惯。 我们将三部曲整合，希望能够成体系地输出有价值的内容，愿大家能够从中有所启发。 一、所谓成长就是认知升级我一直在思索，怎么才能让一家公司更快地成长？一个人怎么才能从一群人的竞争当中脱颖而出？ 1、人的四种认知状态最近我看了一幅图，我在其上加了一个数字注脚。 这是一个人认知的四种状态——“不知道自己不知道”，“知道自己不知道”，“知道自己知道”和“不知道自己知道”，也是人的四种境界。我将其简单翻译为： 不知道自己不知道——以为自己什么都知道，自以为是的认知状态。 知道自己不知道——有敬畏之心，开始空杯心态，准备丰富自己的认知。 知道自己知道——抓住了事情的规律，提升了自己的认知。 不知道自己知道——永远保持空杯心态，认知的最高境界。 现在我终于意识到，人和人根本的区别就在于这四种状态。更可怕的是，95%的人都处在第一个状态，甚至更多。这也就是为什么碌碌无为的人是大多数。视而不见，只会失去升级的可能性。只有自我否定，保持空杯心态，一个人才有可能真正成长，实现跨越。 今天，我们处在一个大拐弯的时代，每一个行业的认知都在迅速叠加，跨界越来越普遍。如果不保持这种“自我否定”的认知状态，很难完成对快速变化的行业的认知。 2、人和人最大的差别是认知认知，几乎是人和人之间唯一的本质差别。技能的差别是可量化的，技能再多累加，也就是熟练工种。而认知的差别是本质的，是不可量化的。 记得在香港约过一次马云喝茶，他几乎不用电子邮件，当时我就琢磨，他为什么能去指挥那么大一个帝国？后来发现，他在不断观察行业变化，从变化里找关键切入点，找资源和人配合。 人和人比拼的，是对一件事情的理解和对行业的洞察。执行很重要，但执行本质是为了实践认知。 有时候，我也会鉴古通今地去琢磨，为什么鸦片战争时期，大清帝国输那么惨？简单说，一群怀揣现代物理学认知的人，打败了另一群信奉四书五经认知的人。其实就是两种不同认知的较量。 3、认知升级的两个误区真正的认知需要通过行动展现，行动一旦缺失，认知容易陷入误区。我总结了两个可能遇到的误区，未必全面，抛砖引玉： 误区一：以为自己知道，远远不如以为自己不知道 自以为是，是自我认知升级的死敌。回想奇虎当年搜索没干过百度，老周一度总结为不小心把公司卖了，百度没卖。他没想到，当时李彦宏对搜索的认知远高于他。老周不愿打硬仗，不愿打重型战役，不愿搞大研发，不相信算法。那时候卖，本质上是打不下去了。可他不这么认为。 自我否定，就是假设自己无知，是自我认知升级的唯一路径。不做痛苦的自我否定，认知上不了一个新台阶。即使正确信息摆在面前，你也会视而不见。这基本是区别英雄和凡人唯一的机会了。 误区二：以为自己认为重要和真的认为重要，往往不是一回事 有一个词叫自我迷惑。自认为觉得很重要，但根本没把它转化成真正的行动。 我最大的反思就是对头条的理解。两年多前，我说头条就是移动端的搜索。我的反思是什么？我当时认为挺重要的，一直到15年四季度，我才开始召集人马，着手海外头条的业务。 这是认知里经常出现的一个误区：以为自己认为很重要和真的认为很重要，往往不是一回事。 不行动的认知，就是伪认知。炫耀自己知道，有什么用？一个浪潮打过来，认知就没了，如同没有。真正的认知，必须知行结合。 4、认知升级的三剂解药把一件事情转化成行动，难度之大。认知到行动，中间有巨大损耗。我给认知升级开了三剂解药： 解药一：坚信大趋势 想法要立刻转为行动。坚信大趋势，坚信这家公司的各种认知决定。不要简单的批判，你一定要相信那些行业领头人。他们拿到的信息肯定比你多，处理信息的能力比你强，他们的认知不是现阶段的你所能赶得上的。不理解，就执行，在执行中理解。 盲目坚信，立即行动，在行动中形成认知。不要怕死，早死早超生。去年，我想出做机器人的决定，几乎没人认为可行。我就想，先去找人，坚信趋势，立即行动。那种情况，不做，更没有机会，只能是大量时间的损耗。不行动，是最糟糕的。行动，才有可能证伪。坐而论道，没有意义。 解药二：对外求教，不做井底之蛙 有一个对外求教的心态，非常重要。对外求教，是为了扩展你的视野。要找到带路党，吃过猪肉不一样。他们比你强不是他们聪明，而是有着你不知道的认知。 当年我和徐鸣做可牛影像，我们的口号是我们来了。我们的技术水平，做过的客户端体验，见啥灭啥。我们来这个行业了，谁还活得下去？结果，美图秀秀把我们打得内心都快崩溃了。 这是我们特别容易陷入的一种状态：以自我为中心，不向外看。面对新事物，很多人甚至连尝试和对外沟通的欲望都没有。完全不知道外面发生什么。 强调一点：认知理解与聪明度无关。只有从认知角度，而不从聪明角度，去理解这个世界，理解所在行业，你才会有更多不一样的认知，才能看到更多别人看不到以及顽固不愿去理解的机会。越是处在绝路的团队，越是往外看得多。 解药三：活在当下，面向未来 活在当下，恐惧时，想想错了又如何？多错才有机会对。这是我给自己的一个思维训练。当你面对一些事情，想想最坏的结果是什么？想完你会发现，最坏结果与你内心的恐惧，根本不在一个量级。 恐惧就是恐惧本身。不肯尝试的本质是不敢面对所谓失败。但，这个失败的后果是什么？很少有人认真思考过。其实绝大部分失败是没有后果的。 再就是面向未来，纠结时，想想五年后会怎样？会不会被淘汰掉？如果五年后，你跟这个时代已形同陌路，这才是最可怕的。行业变化之快，超出我们想象。 5、所谓成长就是认知升级所谓成长，并不来自于所谓的位高权重，不来自于所谓的财富积累，也不来自于你掌握的某一个单项技能。行业里有很多这样的人。比如史玉柱。最惨时，欠了一屁股债，什么都没有。靠一个脑白金，重新崛起。因为他在整个营销上的认知水平，领先了一个时代。即便失去所有财富，甚至所有队伍，就凭他对营销的理解，也是那个时代无人可望其项背的。只要他活着，随时可翻身。 绝境当中，他真正拥有的核心武器，根本不是资源，而是认知。 想想腾讯这些年的发展。3Q大战前，腾讯讲花瓣策略——我的花朵上长出很多花瓣，每个花瓣都能干掉你。这种态势，使得腾讯在每个领域都不得不与当时各个领域最先进的认知打，非常困难；3Q大战后，腾讯的策略改为生态链。第一个投资的就是猎豹，接着又投了一批公司。 结果如何呢？腾讯市值从300亿美金涨到了今天的2000多亿美金。《福布斯》杂志曾经做了一个年龄在四十岁以下的四十位中国商业精英年度排行榜“40 Under 40”，第一位是刘强东，其次是王小川、我、姚劲波。马化腾当时留言说，前五个当中，四个都跟我有关系，很荣幸。 此后，我一直思考，其实马化腾通过投资形成的生态系，帮助他建立了足够的行业认知。因为，当他投资了这些公司之后，他就不是在跟一个普通的产品经理聊了，而是跟刘强东聊电商，跟王小川聊搜索，跟猎豹聊国际化。 所以，腾讯用这样一种开放的生态策略，本质拿到的不是投资挣来的钱，而是投资挣来的认知。它和大家建立友好的关系，怎么会不知道出行市场的规模、方向和目标呢？怎么会不知道国际化有哪些机会呢？核心就在于行业认知。 回顾360崛起给我带来了什么？简单说，就是让我拿到行业最一手的认知——一种对于安全行业，对于客户端软件，对于互联网怎么颠覆一个行业的认知。 离开360时，我的前东家只给了我1块钱，但朋友安慰说，没关系，你积累的认知，别人都拿不走，将来所有东西都会还给你。我就带着一个认知，走上了茫茫创业人海。 就因为这么一个小小的认知。 我才能那么坚决做Clean Master。没人知道APP全球化怎么做，好多单词也不认识，没做过商业。当时几乎对所谓国际化，对美国市场一无所知的情况下，做了All in Clean Master的决定。就因为有那样的认知。 因为我就信一点——360单点撬动一个行业的事情，在我面前真真切切发生过，而我就是亲历者。 所谓成长，就来自于认知。 有时候，想起这个时代，我脑海常浮现一个历史典故——煮酒论英雄。两人坐在那，一个指点群雄，一个一味谦恭。 问天下英雄是谁？曹操说唯使君与操耳，刘备吓得筷子都掉了。纵然天下各种人物拥有千军万马，但曹操真正顾忌的却是这个正在种菜的刘备。虽然刘备寄人篱下，内心却是匡扶汉室的认知。 后面的历史走向也正如以上的认知讨论一样。天下大势，何其复杂；即便如此，也能简化到最关键的点，即关键人的关键认知。 而认知的本质就是做决定。人和人一旦产生认知差别，就会做出完全不一样的决定。而这些决定，就是你和这些人最大的区别。你拥有的资源、兵力，都不重要，核心是你脑海里的大图和你认知的能力。 单点也好，势能也好，猎豹能有一点成绩，本质是在移动互联网巨大红利增长之下，做了一个未必那么关键但很正确的决定。那个时候，我们开了先河。但这个认知，不足以支撑我们变成一家卓越而伟大的公司。我们依然需要认知升级。而猎豹和我在过去一年获得的最大财富，就是开始了认知升级。 我开始思考一句话：一个人卓越，造就不了一家卓越的公司；一群人卓越，才能造就一家卓越的公司。而卓越的核心是一家公司和一群人的认知升级，否则不可能真的上新台阶。 只会陷入死循环：认知不统一，事情推不动。推不动的本质是大家没有建立对这件事重要性的认知。看不见也罢，顽固拒绝也罢，都不可怕。最可怕的是，我们不知道“我们不知道”。 如果一个人，不断想学习，想了解，去反思；空杯心态，放下恐惧，不拒绝改变。认知升级，其实也就是捅破那层窗户纸。成长如是。 二、管理本质就是认知管理我曾经讲过管理三段论——目标、路径、资源。找到一个目标，想清楚路径，再投入资源。 但它有一个大前提叫——有判断力。没有判断力，搞错了目标，路径切不进去，资源就调不动。而这种判断力的本质，就是认知。 这个时代，管理不是执行管理，不是组织结构管理，而是你比别人更理解一件事情。管理的本质就是一种认知管理。 领导力的核心不是所谓的高情商，而是在大格局下构建对整个行业的认知体系，用大趋势做出正确的判断和聪明的决策。 在这个大的认知体系下，管理又可被细化为“信息、时间、人”三个维度：怎样利用“信息”做出正确的决定，怎样通过抓关键让“时间”更高效，怎样运用简化管理“人”。 我总结了“一体两翼”和“三个管理维度”，逐步解答以上问题。 一体：构建领导者的认知体系一个优秀的领导，必须在核心点上拥有覆盖队伍的认知体系。一个人的认知要大于一个队伍，大于一群人。这样的领导，才有真正存在的价值。 我跟腾讯总裁刘炽平交流，他说，互联网特别像一部武侠史，一群人打不过一个武林高手。你堆再多的人，不如来一个武艺出众的人。本质上，就是这个人，在这个点上的认知体系，超越了一个庞大的队伍。 一年半前，我见过百度的人，我跟他们说，头条就是移动上的搜索。他们不以为然。说百度有头条不具备的即时搜索，头条离了很远。一直到去年五月，百度才上了信息流。这就是两家产品在认知上的差距。 领导者在核心点上必须有一个强大的认知体系覆盖所有人，才值得成为一个领导，才得以做出正确的决定，才能够带领整个队伍走到一条正确的道路。如果认知错了，即使每天鸡飞狗跳，也做不成真正有效的管理。绩效，期望，只是配合手段。核心是必须有这样的认知体系。 所谓认知体系，是在脑海里有完整的认知框架，才能做出正确的判断。脑海要有一些抽象的框架图。比如简单、差异化、跨界、大趋势，还有时代热点等等。脑海里不断要有这样的框架。看到一个点，就拿这个框架去套。 怎么建立这种框架呢？首先，对市场和产品的深入了解是认知体系的基础。用产品，抓细节，像用户一样思考问题。其次，真的要去和市场上吃过猪肉的人多聊天。看看别人在干什么，这很重要。其三，切忌以听报告的方式建立认知。有些领导，派两个实习生做个调查报告，看一眼，得出一个结论。非常要命。本质上是用实习生的认知取代团队认知。 就像Snap CEO说，Snap chat不是聊天工具，而是改变新一代美国年轻人的沟通方式。现在它把chat去掉了，不再简单做熟人关系，而是围绕摄像头建立内容，这就与Facebook非常不一样了。Snap让Facebook头疼，不是源于钱更多，或队伍更强，而是源于对社交的认知不一样。今天就是这样一个时代——谁建立正确认知，谁就脱颖而出。 两翼:认知管理的两剂良药大的认知体系构建之后，具体问题是否有具体方法论作支撑——比如，事情太多管不过来怎么办？做了那么多总被老板批怎么办？做得辛苦不出绩效怎么办？对此，我开了两剂良药： 解药一：学会逆向思考，如果花的时间少一半，事情能否做得更好 记得有段时间，我非常忙，各种会议满天飞，效率很低。我当时就想，难道当年乔布斯会比我更忙吗？归根到底还是我的管理方法不对。于是我不停追问自己，如果我现在让工作时间少一半，能不能做得更好？ 当我的脑海里不断浮现这个问题时，我突然意识到——我忙的根源其实就在于自己认为太多事情都很重要。 怎么让管理变得更有效率？本质是减少真正所谓管理的量，增加判断的量。增加帮团队在关键点做决定和梳理目标的量。 核心是转换思维，培养做判断的能力。而不是勤勉工作的能力。勤勉工作只是基础。假设一下，如果只花一半时间，事情能不能做得更好？顺着这个方向想，很多事情就会不断要求去划分优先级。 解药二：战略的略是忽略，不敢忽略，本质是分不清优先级 绝大部分人觉得战略的重心是“战”，其实是“忽略”。忽略就是能放弃什么。不敢忽略，本质就是分不清优先级。怎么去建立优先级？分清优先级的前提是认知清晰。你脑海里有一个格局，叫大趋势。要知道什么是更重要的。找到最关键的点，牢牢不放。不是最关键的点，学会妥协和让步。有时候，我们思维会有盲点。原因在于：视野不够宽，反思不够频。人和人最大的区别就在于思维格局。什么是中层？什么是创始人？两者区别就在于：一个是迷恋具体情况，我在努力工作；一个是高低结合，我既能努力工作，又能不断花时间去反思，去判断，去拿到认知。而且清楚知道，低的目的是高。即我的每一个执行，本质上又在建立我的认知。 三个管理维度：信息、时间、人宏观层面，领导者要构建对行业的认知体系；那么微观层面，执行操作时，怎样才能做到更聪明的工作？怎样找到那件最重要的事？我从信息、时间、人三个维度剖析管理方法。 先说信息维度。人的本质就是一个CPU。运算能力再强，没有足够的数据输入也不会有产出。有足够大的信息输入，足够高的反思频度，你才会有足够的信息输出，也才会产生格局，做出正确判断。搜集信息的目的，不是为了保持自身现状，而是为了进一步成长获得新能力，使我们做出正确的判断和聪明的决策。 信息怎么输入： 第一，深入分析对手。花时间加大信息搜集，磨刀不误砍柴工。 第二，定期遍访行业。了解对手，否则会失去行业认知。 第三，不断招聘行业里的人。他们不仅是来工作的，也会带来行业里的认知。 一个领导者的本质就是做正确的决定。只要你拿到足够的信息，就能做出正确的决定，执行将容易十倍，矛盾也会迎刃而解。有一句话叫主将无能累死三军。执行很难的本质是没有做出正确的决定。 再来说时间维度，管理上最重要的资源就是领导人时间。时间的分配，表明了一个领导者对实际情况的优先级判断。我们经常自认为一件事情很重要，回头一看，根本没花足够时间，没放足够人力，没放足够资源。时间都去哪儿了？ 反问下自己： 时间是如何分配的？ 构建格局上花了多少时间？ 信息输入花了多少时间？ 关键人身上花了多少时间？ 是不是偶尔想到了，去思考一下，还是变成一种工作习惯？ 猎豹最早能杀出来的一个核心原因，就是我们当时乐此不疲地参加各种展会，跟各种人聊，建立了对国际APP市场的认知。 我作为CEO亲自站台，亲自抗资料，住很远的酒店，转地铁转三次，走路还得十几分钟，听起来都很辛苦。但一有展会，我就会带人去。而且经常是规模性的。 看上去花了这么多时间，但实际上建立了认知，找到了简单的切入点。于是，整个公司的工作都变得简单了，反而为其他事务节约了时间。 时间是最重要的资源。经常有同事问我，你天天管公司，介绍新文章，还玩无人机和王者荣耀，时间怎么用的？其实很简单。我每天都会想：有哪几个关键的会，关键的人，关键点是什么。 讲完信息和时间，回到人的维度。一句话：学会通过管一个人达到管一片人的目的。 首先，管理一个人，解决一大片。我们很容易陷入一种状况，搞一堆人，这个要照顾，那个要照顾。团队初创时，可扁平化。但越往后，越成熟的业务，越要找一个堪以重用的人。重用到什么程度？为了这一个人，能把整个团队重构掉。 要简化对人的管理，找到关键人。在关键人身上花足够多的时间，把足够的认知传递给这个关键人，让他做一群人的决定。切忌多人平行站位的职责不清。多人负责，容易变成每个人都不满意。给一个人足够授权，职责清晰，简化管理，即便没有达到预期，更换人时他也更容易接受。 其次就是简化目标。不要给一个人多目标。领导最大的职责是帮员工找到一个简单的目标。这就考验领导，能否构建纵深的行业认知体系，找出那个关键目标，帮助团队简化目标，建立一个正确统一的目标认知。团队目标越简单，越明确，越容易达成一致。 现在我做管理，就简化成“定目标”和“找关键人”。目标要简单清晰，人要能挺身而出，超出预期，一战就要解决问题。 好领导，首先是打胜仗。开战之前，就要有七分胜算。这七分胜，就靠认知。打的就是认知之仗。看上去千军万马在打，本质是两个将领脑海里的战争格局。胜负基本已定。先胜后战，胜算就在认知。管理如是。 三、战略就是格局+破局两年前，我写过一篇《一家公司CEO该如何做战略》。应该说，上市以来，我花在战略思考的时间，不少。伴随猎豹前进中遇到的一些问题，我的思考也在不断深入。 我曾经说过战略三部曲是预测-破局点-All in。破局的单点，被很多人讨论。但，预测这件事，给忽略了。然而，预测背后就是格局观。怎么理解？ 今天的移动互联网，纯粹靠一个单点爆发，已经很难了。过去十年，甚至二十年，互联网是一片蛮荒之地，需求稀缺，人才也稀缺。只要你投身这个行业，随便找个单点开始深耕；只要你还算努力和坚韧，运气也不太差，就有机会做家不错的公司。所以，那个时候不需要预测，需要的就是干干干！ 于是，我们都觉得自己很牛，以为世界就是这样。我们以为不断努力努力再努力，加班加班再加班，逼疯自己，逼死对手，战争就结束了，却没有意识到——我们站在互联网这个正确的格局和风口上，做什么事情都是对的，而我们正是那群幸运的猪。 不幸的是，这个世界是不连续的。经过二十年的发展，今天，互联网已经是一个传统行业。风停了，放眼望去，到处是血海竞争，乌压压一片创业大军。勤奋依然很重要，但聪明的勤奋才是关键。这个时候，就要求我们想清楚，行业里的大风在哪里，并做出预测。 因此，你的脑海里必须有一个对于这个行业越来越清晰的认知格局脑图。哪里已经是过度竞争，哪里刚兴起却没人察觉，三四线城市网民的不同在哪，互联网与哪个行业、以哪种形式的结合会有机会等等。 我们需要在这样的大格局下，在过去积累的认知红利之上，重新构建新的认知体系，制定战略的新打法，去更大的空间，寻找新的破局点和机会。 战略认知=格局思考 过去，我讲过一句话，叫“现象即规律”。现在，我把它解释得更清楚一点，叫“没有偶然，只有必然，所有单点都是大趋势下的必然。” 一个现象，它发生的时候，一定有大趋势支撑它。没有孤立的单点，本质都是大趋势下的单点的必然。 以前，我们就站在肥沃的土地上，不用深入思考就可有所作为；今天，挤进来的人越来越多，思考某个现象为什么突然生机勃勃，它背后反应的规律是什么，怎么利用这个规律帮助自己找到下一个肥沃的土壤，就变得非常关键了。 我曾经一度认为：美国人强调“think different”很有情怀，后来才发现，本质不是情怀，而是为了减少竞争成本。因为美国创业者们比我们更早进入血海竞争阶段，“勤奋+努力+不要命”已经很难产生质的差别了，才逼迫他们用“更勤奋的思考”来避免高成本的竞争，从而降低失败概率。 创业必须讲究方法论，必须讲究不同情形下的不同方法。今天互联网的竞争格局，远远不是十年前的样子。我们必须think different，而think different的前提，就是要有行业格局认知，看清大趋势，在大趋势下做判断。所谓战略，就是在这样的格局认知下，找到破局点，制定路线图，投入资源。如果不去建立这样的认知，公司很容易陷入一些误区。 战略认知的两个误区第一个误区是：见招拆招，啥热做啥，啥熟悉做啥。这是懒惰思考，不愿意认知升级的表现。结果就是越做越多，越做越累，越做越委屈。 我拿自己做例子。 一年多前，我跟几个高管反思，猎豹今天是不是做挺多的？我们在过去野蛮生长中，不断强调快速执行，做热点，认为只要做好这个点就会有机会。没有拿整个大趋势，或者叫大格局下的战略，做一个大方向下的可串联的点。 但事实上，整个互联网的竞争加剧比我们想象中来得快。如果每个单点，不是在一个大格局下的累加，以致每个单点都会遇到对手强大的竞争，很难长大。 我们老说战略的懒惰，就这个意思。看到一个机会，扑上去。看到另一个机会，再扑上去。看上去每天都在努力工作，但回头一看，各种方向上布满了各种产品，彼此不能借力，也没办法真正在单点上聚焦。 第二个误区是：做产品的方法论依然停留在5年前，认为抓一个简单功能热点就颠覆格局。 我经常在微博上收到各种私信，说他有个点子，要颠覆腾讯，颠覆阿里，问要不要见他？我基本不回，为什么？ 因为我不觉得存在这样的点。如果20年前，想个网址导航，还有可能成为hao123。几个人在屋子里攒出一个聊天APP，还有机会是QQ，逆向一个Dos3.0，写个WPS，一不小心就成为一家上市公司。那是一个多么美好的时代。 但这个时代真的过去了。移动互联网的APP，不稀缺了，越来越少的APP可异军突起了。APP呈现越来越强的头部效应。而头部的那些大佬们，已经总结了一整套如何面对单点突破的小对手。尽管你精干灵活，但他们会用生态、用流量、用更强大的研发力量碾压你。 只把一个单点做到极致就能创造奇迹的时代，真的过去了。 为什么会出现这种情况？归根到底，还是以前互联网不被重视，具备互联网技能和认知的人有限，所以你做了，别人要么看不起，要么做不来。而今天，“互联网就是金矿”的认知，已经深入人心；互联网相关从业者，浩浩荡荡。这好像一碗好吃的牛肉面，如果利润很高，如果能做出来的人已经一大片，就更不要提那些巨头们了。 怎么办？你必须结合趋势，结合整个战略思考，把所有东西累加进去。容易打的仗，已经打完了。要花足够的精力和时间，去构建自己的行业格局认知。在看上去繁杂纷扰的信息中，不断深度思考，加大自己的认知优势，然后在熙熙攘攘的人流中找到不为人知的机会，趁着大家还不够懂，突然发起战役，全力以赴。 这就回到开头的问题，我们究竟该如何构建这样一种格局思考的能力？ 举个例子：回顾几个破局点 先拿我自己做例子，回顾几个破局点的思考路径。怎么产生Clean Master这一个点？我当时觉得，中国互联网APP水平还是不错的。拉了一个技术同事到美国开会，请了一个挺牛的人介绍安卓。讲完后，我的同事说，这人水平一般。 我想，这位同事虽然狂了点，但说得很中肯。而这位牛人，已经是一家60人硅谷创业公司的CTO。我们做了一些动效给他，他还很疑惑怎么做到的。我发现，中美之间并不存在技术代差。 于是，我开始思考，中国APP能否走出去。最后我作出了一个大趋势的判断——中国APP已经领先全球了，我们已具备这样的基础。这个判断做出以后，后面的事情就简单了。 包括猎豹上市后，该干什么？当时我的判断是，移动互联网颠覆格局的机会基本过去了，要想找到猎豹十倍增长的机会，必须从未来着手。所以那时，我跑硅谷，跑以色列，去世界各地看创业团队。 在国内搞傅盛战队，办紫牛基金，只投非纯粹互联网的早期创业项目，想知道年轻创业者在干什么，互联网跨界到底怎么发生的。在这个过程中，我慢慢发现了人工智能和机器人。尤其深度学习，开始在很多创业方向中都有体现。它把很多过去跨行业的算法统一了起来，并且效果上有了质的飞跃，这让我非常着迷。 而机器人又是个工具，和猎豹过去做的事情不谋而合。它到底长什么样子，谁也不知道。这就有机会去定义。作为一个产品经理，要去定义机器人的交互是怎样的，人的感受是怎样的？我觉得这个特别吸引我，也符合我的特质。 与此同时，能把基于深度学习产生的视觉、听觉技术革命，与机器人产业结合起来，更是今天很少人意识到的巨大机会。这个行业认知建立以后，执行也就变得简单了。去年年初，我开始下大力气组建人工智能和机器人团队。在整个行业暴热，开启人才大战的前夜，我们组建了一支精壮的国际化队伍，还全力以赴研发了产品。很快大家就会看到我们即将发布的AI产品，多少也算领先了业界一步。 回想当初，我说自己要倾家荡产做机器人，很多人还认为我只是蹭个热点，搞个宣传。但把真实情况串起来后，你会发现，我是经过了深思熟虑，花了足够时间认真思考的。如同上文所述，这个单点，它不是偶然，而是我整体思路的必然。所以，一个点不是孤立存在的。你的脑海里有没有一个大格局？这个大格局是什么？这很重要。 回到根本：怎样做战略？ 首先，脑海要有大格局。大格局就是对这个行业深入的、清晰的认知。 你心中要不断问这个问题——在这个行业里，什么才是真正的机会？什么才是下一个趋势？这样，你才有机会，才能判断，这个点对不对。否则，可能消耗了很多人，把什么都投进去，但不形成持续爆发增长。因为它不是大趋势下的点。本质就不该做。 我们需要花足够的时间去了解行业，去思考对手，去观察现象。在获取大量信息后，不断在脑海里做思维推演，去判断。 当然，这些格局认知里，至少你要想到一些关键词，比如全球化、视频、品牌、AI、争夺时长和红利结束等等。整个行业的大格局，没必要从零开始做认知判断，一些看上去很热门的趋势，选择相信，再去分析背后的规律。 其次，养成格局和破局结合的思维习惯。高是什么？你的格局，大风口。破局就是找到与众不同的那个点。二者缺一不可。 过去，我们太强调那个单点的重要性了。大部分人的思维习惯，停留在游击战。有个好想法，做起来。就像游击队，看到有头猪，就抢一把。对手在哪，他们在怎么做？这个领域的趋势会怎样？这个点领先者是不是稍微抄袭下就一样了？基本都不知道，也不去了解。只在为自己的想法激动不已，恨不得明天就赶紧实现。 今天，做一个互联网产品就像做一辆汽车。如果你只有对某个功能（比如汽车安全）的好想法，而不去认真思考资金，工厂，产业链，上下游，品牌定位，对手策略，消费者习惯迁移等因素，你认为你有机会超越宝马、奥迪、奔驰吗？ 战略，就是要求我们进行深入的、逼迫自我的思考。真正的超越机会，不是来自于在工作时间上把对手逼死，而是在认知深度上先把自己逼疯。 互联网竞争已经白热化的形势下，做战略的关键点，就在于不断加深自己的认知，找到已经存在但不为人知的那个秘密。而且，这个秘密所能孕育的机会，要足够大；离现有领先者的区域，要足够远。核心是你能否具备超出对手的、对行业的、与众不同的认知。基于这个格局认知，为自己撕开一道突破口。 简单一句话概括——经过充分思考和认真研究后，制定清晰目标以及持续推进的路线图，这应该就是战略的全貌。 同时我也要补充一点：战略是在这个路线图下的势能的累加，不能累加势能的，再有效果的执行，本质都是增加成本。 这就慢慢理解了杰克·韦尔奇说的“数一数二法则”。因为不数一数二，长期没有竞争力，还耗费精力。就不是一个累加势能的点。 如今，猎豹的新Slogan——Make The World Smarter，目标就是要围绕AI方向做累加。猎豹的路线非常清楚，那就是——以人工智能为核心的累加，以6亿月度活跃用户数据为基础，用技术和产品的突进，完成我们整个目标。对目标没有持续、有效累加的事情，都没有意义。 猎豹要做的，是将人工智能跟传统移动互联网的业务相结合。产品创新上不断发力，真正做出一些赶超BAT的AI产品。 回到战略，它的本质是什么？我认为，战略就是一个杠杆。它让你做的每一件事，都放大几倍，几十倍。一旦远离这个杠杆，就变成小公司创业模式。关键是，这种创业模式，又比不过真正的创业公司。 猎豹走到今天，重新回到创业，置身于一处——于大格局之下，寻找新的破局点。战略如是。 *来源介绍：盛盛GO（ID：fstalk），猎豹移动联合创始人兼CEO，关注创新创业，人工智能，还有机器人。","categories":[{"name":"Article","slug":"Article","permalink":"http://example.com/categories/Article/"}],"tags":[]},{"title":"Excerpt 23：为什么要上课的十二个理由","slug":"Article/23：为什么要上课的十二个理由","date":"2016-03-31T16:00:00.000Z","updated":"2021-07-29T11:52:00.000Z","comments":true,"path":"2016/04/01/Article/23：为什么要上课的十二个理由/","link":"","permalink":"http://example.com/2016/04/01/Article/23%EF%BC%9A%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%B8%8A%E8%AF%BE%E7%9A%84%E5%8D%81%E4%BA%8C%E4%B8%AA%E7%90%86%E7%94%B1/","excerpt":"","text":"1、我们要成功是不是要学习，那学习有两种方法，一种是摸索，一种是使用别人证明有效的方法，那你们是选择哪一种？哪一种比较有效、快速？那使用别人证明有效的方法在哪里呢？你觉得上课重不重要。课程就是给你一套成功者已经证明有效的方法，他们走过的路，在课程中总结给你们，假如你可以知道是不是可以节省很多时间，对不对？所以为了快速成功。我们应不应该上课。 2、节省时间。请问一下我们学习、上课是学习别人使用有效的方法，帮我们快速成功，对不对？那看书是不是也可以，那看完一本书需要花多少时间，注算三天，通常那是不是可以学到很多知识，通常看书只能学到一二个重点，或者三五个重点，就算看到很多重点，计划一下，你看完一本书学到几个重点，三天课，已经有一套总结出来的系统对不对。总结出一套系统步骤跟看书，哪一个省时间。因为一本书看完只知道几具重点，那看完很多书，还要总结起来，你还不一定组合得起来。上课是不是快速给你一套总结完毕的方法跟系统，对不对。所以他节省你的学习时间，他是最快速的学习方法，那上课有没有道理。 3、学习要来上课。我随便举两个例子，假如今天一个人来学习，在外面用摸索的方法，可不可能投资会失败。有没有可能。那他会不会因此损失几个顾客有些顾客本来想买的，不懂方法成交，然后没有成交，那有没有损失顾客，或者开公司本来应该会成功的，但他不懂经营管理，失败了，有没有。所以他不来上课，他用摸索的方法，损失了很多钱，你说损失顾客，投资失败，开公司倒闭，这些损失的钱，有没有超过16000，可是上课只要几百元，可以学到一些方法，让你去创成功，有没有省钱，上课学到一些方法，可以帮你成交很多顾客，本来不会成交被你弄成交了，能不能节省一些浪费的金钱，而看书就算你看二十本书，能学到这样的知识，需要花多少钱。一本20元，二十本需多省钱400元。那400元花下去，但你也不一定组合得起来。对不对。那二十本看完要多少时间，一年。那看书要消化一年，那花一年的时间来学习这些知识，一年后才来懂这些知识，这一年会不会让你损失更多顾客，可是今天你就懂这些知识，会不会让你节省很多钱，对不对。而浪费的时间，让你先懂这个知识，会不会赚更多的钱。所以说，你本来不学的，就浪费时间。学了可以多赚钱，等于说上课是节省钱，而不是浪费钱。看二十本书能看懂这些知识已经不错了，我们有些学员说，看一百本也未必会懂这些知识，如果你看一百本这样的书，那一百本要花多少钱？2000元。就算全部弄懂这些知识，那我们这个课程才花多少钱？有没有省钱？那一百本书看完，还要组合在一起，那这一年早懂，是不是早好。所以上课是省钱最好的方法，是赚钱最有效的方法（这是针对钱的问题）。 4、人之所以不成功，是因为他有盲点。比如我们平常找一件东西，但怎么找也找不到。但后来才发现，原来一直在你面前，那为什么会这样呢？那是视觉上的盲点。你再怎么看书，你却只看到懂的东西，你划重点，其实，划的都是你早就懂的东西，你有没有这种经验，所以你们看100本书，也没有学到什么新东西，为你都在学到旧的，你只是觉得有道理才划，而真正不懂的东西你都没有看到跳过了。因为人有盲点。所以遇到问题不要自己学习，不要自己找答案，不要自己寻找，没有用，要让别人来帮你寻找。我们经常就是这样。我们平常不觉得自己有问题，但别人一来，就发现你有问题，有没有这种事？许多大企业为什么要请外脑。其实外脑本身没有老板会开公司，外脑本身没有老板能干，外脑也不是竹和尚念念经，但外脑本身不是企业的人，他透过外界的眼光，来看企业内部，可以看到企业内部人所看不到的事情，所以要请外脑，这些老板不是傻瓜，对不对。所以，遇到问题，不要自己寻找答案，看书研究，因为你有盲点，所以透过上课，透过旁人的角度，透过教师的讲解，让你发现原先研究不出看不到的事情。这样，这对你是不是一种帮助。 5、学习的方式，看书，请教成功者和上课。看书，也许看完一本书才了解几个重点，但看完一本书，需要花多少时间，来上课讲的都是重点，所以说，能看书学到重点，也能请教成功者学习重点。那你看请教成功者好还是看书好。而请教成功者他们成功的关键，有人会说忍耐。有人说要注重人际关系，有要努力，你们有每个成功者说的成功关键都不一样，都有道理，你都要做。你会不会变得成功。因为你们没有组合在一起，你不知道你先做哪个，后做哪个，比如号码锁，654321要把他打开，但如用653421能不能打开？六个号码都对。但顺序泽。你能不能打开。你懂得要忍耐，要人际关系，要积极思考，你都懂，但是你不知先做哪个，后做哪个的顺序，能不能达成一样的结果。不能达到同样的结果，所以说请教成功者这种方法的缺点，就只会得到片片断断的关键。并没有得到整套成功关键的步骤，可以直接去使用，但又不用看无数本书籍请教无数的成功者得到这一套方法。第一，省不省时间。第二，用这一套系统，可以直接去用他，对不对？对。你就不用看书去组合，你可以去用他，但你看书，用他未必有效，因为他是片断的方法，其实成功者用他未必有效，所以说，请教成功者跟上课，哪一个比较好？就像张学友的录音带你去听和你现场听张学友现场演唱会哪一个感觉更加激烈。就像李嘉诚的自传，你看完了，跟你亲自去采访李嘉诚的成功秘诀，哪一个有效。那访问他跟李嘉诚亲自来上课，哪一个更有效，因为上课是总结后有系统的步骤跟比验，对不对。所以上课即省时间，又省钱，又有效，他是所有学习方法中最有效的。看书有效，但上课最好，没缺点。 6、我想问一下，世界网球排名冠军是谁？阿加西。世界体操冠军是谁？李宁。世界乒乓球冠军是谁？邓亚萍。世界蓝球冠是谁？乔丹。他们这些世界顶尖的人物唯一的共同点是什么？想不想知道？那就是他们都有一个教练，是不是？你想不想成功？那你成功的教练在哪里？顶尖人物都有教练，那你想成功，你想成为行业的顶尖，相信你应该找一个帮你成功的教练，你说对不对？上课就是在找一个成功的教练？张老师，你说对不对？投资1600元，就是来找教练，坦白说，你们觉得教练重不重要？（有看蓝球赛习惯的，请举一下手）以前公牛队的教练是谁？菲尔杰克逊。菲尔杰克逊是公牛队的总教练，自从乔丹从公牛队退休后，菲尔杰克逊也退休了，公牛队没有杰克逊之后，隔年就失去冠军，变成最后一名了。杰克逊后来又复出了，他帮湖人队做教练，湖人队以前很强，可是他从来没有成为总冠军，那杰克逊去的前一年，湖人队是第在名，杰克逊成为湖人队教练后，那一年，湖人队马上成为总冠军，湖人队有一个很高，很大的中锋，欧尼儿，他是对谁都不服的，他对谁都是目中无人的，欧尼儿在篮下是谁都拦不住了，只要让欧尼尔拿到球，他手轻轻一拨，就能投进球，所以就算他不会跟，不会跳，可是他长得够高，手轻轻一投就进去了。又高又壮中锋，别人就犯他的规。他就不能在篮下投球。他在篮下一拿到球，他们就犯他的规。让他投的球不算，就要罚球。站在罚球线前，他就投不下球，他NBA罚球最烂的一个人，他致命的弱点就是罚球，杰克逊到湖人队的那一年，湖人队就成为总冠军。欧尼代表湖人队上台领奖，那一场别人也犯他的规，可是欧尼尔罚球神准，有始以来，罚球最准的一年。原来，杰克逊到湖人队就是让欧尼尔练罚球，让他每天练投球1000次，欧米儿对谁都不服，但是那年他代表湖人队领奖，欧米儿这个硬汉子，掉眼泪，他开口第一句话就是要感谢他的教练，他跑去把杰克逊抱住痛哭，说这个冠军是教练给的。你说教练重不重要？真的很重要噢。全世界公认公牛队得冠是杰克逊，湖人队得冠军是杰克逊。他评为全世界最杰出的教练，其他教练也是教练啊，所以你要找一个真正能帮你成功的教练，有教练也不一定会成功，你一定要找对教练。张老师有人用2000元来做资讯1小时，而你用1600元就可以学三天的课程，1小时是2000元，那一天24个小时，要上万元，你说得请这个教练值不值得。一个人本来不会抽烟，而他在一群会抽烟的人身边，久而久之，他也学会抽烟了对不对，所以说现在一个人没有目标，没有行动力，可是他在一个成功的环境里，这些人有目标，有行动力对不对，久而久之，耳需目染，让自己也变成有行动力，有目标的人。所以你的环境是不是可以造就一个人，今天一个人回到工作中，如果发现总是遇到挫折，没有信心，一直调整不过来，表示他的工作环境不够好，很多人一直不了解上课是为什么，上课是寻找一个好的环境，让自己投入到课程中，几天？三天时间把自己改造全面。就是再回到他原来的环境中去，发挥出他的能力，你觉得他发挥过久了，这段措施拒绝，在这个环境中，可不可能又没电了，有没有可能再去上课，在他好团体的环境里，持续上课，行动力这样来回充电，持续下去，长期保持电力，如果他上了一次课，再也不上了，那他在原来的工作环境中是不是很不容易成功，对比每一个的话是不一样。所以呀，很多人都不了解为什么要学习，因为持续不断的学习，充电的机会让他有一个好的环境，要不然你的环境不能帮你成功。有没有道理。 7、多一份资讯。我想请问一下，如果世界成功的方法有100个，你想得到几个？100个。如果是1000个，那你要得到多少？1000个。关键是你现在知道几个？我现在一个也不知道。上课就是在多得到一份资讯，多得到一个方法，多得到一个点子，多得到一个观念，对您可能就有机会成功。对不对？对你不一定一上就成功，可是多一份资讯，多一个观念，多一个方法就多了一份成功的机率，对不对。对。多知道总比少知道好，对。也许你今天事业上无法突破，就是因为你少了那么一个你该知道的观念，该知道的点子，该知道的方法，可是你现在不知道，可不可能？可能。也许就在课堂中三天的课不需要全懂，一句话就好了。就帮你找到你要的那个，可不可能？可能。所以人应该上课，就是因为多一分资讯，总比没有好。你小孩都念书，假如他不要念书，你会不会让念书了？不会。你还会逼他念书，可是念书不一定成功啊！但是你相信不念书铁定会失败的。所以你应该来上课。你觉得有没有道理？有。也许一个点，他正好缺乏。所以让他失败。可以那一个点子，如果他在课堂中得到了，那就够了，对不对？对。他不来上就不知道那一个点子，假如有十个成功资讯，你只知道一个。那你成功的机率只有10%。如果你全都知道，那不是100%成功机率。对不对？对。关键是成功机率，方法太多，你为什么不多知道一点，总是对你有帮助的，对不对？对。多一个知识的重要，跟少一个知道的可怕。 8、成功的策略。成功是否要掌握一些成功的策略？要不要？要！你觉得这个李嘉诚很成功对不对？对。你觉得李嘉诚做的事跟我人做的事一样吗？不一样。所以他成功，我们没成功，成功者他到底做对了什么事情？你要不要知道？要。假如你想成功的话，你应该知道，成功者每天正在做对什么事情，成功不是把事情做对。是做对事情。有没有道理？有。如果你把你现在每件事情都做得很棒，可是你还没成功，你应该做对你应该事情，对不对？对。那你想不想知道他们到底做对什么事情，课程就是告诉你他们每天做对什么事情。是跟我们汪样的。你觉得你需不需要来上我们这个课，要做对事情，要掌握成功的策略，你没有掌握，你没有去做那些事情嘛。 9、超越竞争对手。某某先生，你想不想超越你的竞争的对手？想。假如你的竞争的对手懂得多跟你一样多，所以说你们两个人热均力敌，对不对？对。假如你可以懂得一些成功的方法，推销的方法，管理的经验，是你的竞争对手不知道的。你觉得这样好不好。好！因为你知道他所不的，你就有办法多一从超越他的机会，对不对？对。我们课堂上教的东西，完全教你如何倍增市场占有率，提升业绩，还有教你怎么超越竞争对手的点子。你觉得这些需不需要学？需要。假如今天你来学了这些东西，你的竞争对手不来，你觉得好不好？好。假如今天你不来学，你的竞争对手全来了，你觉得会怎样？我会失败。你怎么知道你的竞争对手今天没去上那个课程，没有多读一本书，他多知道一个你所不知道的方法，请问你紧不紧张？紧张。所以为了确保能超越对手，这三天的课，你应不应该来上。应不应该到场，就这样要超越对手，就应该超越他所不知道的。他懂而你不知道，你就完蛋了。 10、头脑知识差别。两个人最大的差别在什么地方？哦我们家庭背景不一样，我的个相貌不如他，他有老舅，我没有好的老妈。你觉得是不是每一个成功的人全都有成功的老妈，老爸？这虽然不一定，但也有一定的因素。每一个成功的人都是这样？这倒不是。所以有没有人没有成功的的老爸、老妈。可他也会成功？有。表示成功与失败真正差别不在这里。对不对？对。你觉得成功者与失败最大的差别，你想不想知道？想。真的想知道吗？想。你觉得是差在脖子以上，还是脖子以下？脖子以上。为什么脖子以上装的是知识。对不对？对。是思想，对不对？对，是脑子。对不对？对。你觉得成功者是体力比你好，还是脑力比你好，应该说体力脑力都重要！是哪一个是关键。关键应是“脑力”他是比你壮还是比你聪明，“比我聪明”。比我多还是┄┄“比我知识多”对。所以今天上课一个人来上，另一个人不来上。该天有一个课程这一个人来上，另一个人又不来上，一年之后两人有没有差别。有。有很大的差别。所以两个人的差别的确存在头脑的。那你觉不觉得需不需要在这里充实？需要。你觉得今天这个课程如果你到场，可以更充实。更快乐成绩更好。投资在这里的钱，值不值的。值的。钱如果去旅游是否也花掉了。那对成功有没有直接的帮助？钱放在银行有利息。可是对成功有没有很直接的帮助？没有。钱如果放在家里枕头底下也会不见，可是钱如果投在脑袋里(这里)。脑袋里的东西会不会不见。会不会贬值？不会。这里（脑袋）的东西可以用多大？一辈子。而且会不断增值，帮你赚更多的钱。投在脑袋里的钱最直接，最有效。对不对？因为差别在脑袋，所以你觉得成功要不要学习，那我们的课程就专门在丰富你的头脑。 11、一个方法改变一生。这个在天的课程你不需要一部学会全部学懂，可不可能只要一句话，一个观念，一个方式就可帮你改变一生的“可能”所以你就是来找那个改变你一生的方法。对不对？对。希不希望改变真的有一句话改变一生。 12、要成功就要学成功学。","categories":[{"name":"Article","slug":"Article","permalink":"http://example.com/categories/Article/"}],"tags":[]},{"title":"Excerpt 22：老板必须知道的11组数据","slug":"Article/22：老板必须知道的11组数据","date":"2016-03-24T16:00:00.000Z","updated":"2021-07-29T11:40:10.000Z","comments":true,"path":"2016/03/25/Article/22：老板必须知道的11组数据/","link":"","permalink":"http://example.com/2016/03/25/Article/22%EF%BC%9A%E8%80%81%E6%9D%BF%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%8411%E7%BB%84%E6%95%B0%E6%8D%AE/","excerpt":"","text":"1、老板利润：15%-20%，低于20%说明管理不力，要 调整。低于15%属于投资失败。 2、人员工资：17%-22%，高于22%需要减员增效，高 于20%需要调整。 3、材料成本：20%-25%，高于25%会亏损。 4、礼品赠品等成本：5%-10%，包括转介绍中老顾客 回馈部分。 5、年业绩：必须高于投资额的250%。即：投资100万 的店，年业绩最少做到250万。否则属于投资失误。 6、回报年限：2-4年。2年内收回投资属于经营成功， 2-4年内收回投资属于经营一般，4年以上才收回投资属 于经营失败。 7、日常再投入比例：10%，用于更新。 8、扩店或重装修间隔：大于2年，不到2年便扩店或重 装修，结局是店越开越大，债越欠越多。 9、促销频度：年2-3次，低于2次会丧失市场，高于3 次会增加经营难度。 10、一次订单率：60%-80%，不到60%需要调整，有 店格包装和门市培训。高于80%？这辈子没见过。 11、成熟店转介绍率：80%，高于80%说明推广不足， 低于80%说明 【复利的奇迹】 1、今天一次性给你10亿元； 2、今天给你1元，接下来连续30天每天都给你前一天2 倍的钱。 你选哪个？ 很多人选了1，可是我告诉你， 选2的结果是21.47亿。 这题目告诉我们，不要期望一夜暴富，起点哪怕低到仅 有“1元钱”，但只要你每天努力多一点，每天进步一 点，就能创造一个意想不到的奇迹。 布什说：“我们准备干掉4百万伊拉克人和1个修单车 的。” CNN记者：“1个修单车的？！为什么要杀死一个修单车 的？” 布什转身拍拍鲍威尔的肩膀：“看吧，我都说没有人会 关心那4百万伊拉克人吧。” ——这就是公众，他们只关心奇怪的个案。值得反思。 【无论你的月收入多少，记得分成5份】 第1份，用来做生活费； 第2份，用来交朋友，坚持一年，你的朋友圈就会为你 产生价值； 第3份，用来感恩，每月给父母、爱人送一份礼物； 第4份，用来学习，每个月买一本好书读； 第5份，用来投资，培养自己的财富意识。 西游记的5人团队分别代表了马斯诺5个层次的需求。 八戒的需求是生理， 沙僧的需求是安全， 白龙的需求是归属， 唐僧的需求是荣誉， 悟空的需求是实现自我价值。 所以他们取经的目的需求不一样，价值观不一样，所以 一路上的行为就很好理解了。 八戒偷懒、沙僧撮合、白龙无闻、唐僧哭啼、悟空拼 命。 【心态的力量】 三个工人砌墙，有人问他们在干嘛？ 第一个人没好气说:”砌墙，你没看到吗？” 第二个人笑笑:”我们在盖一幢高楼。” 第三个人笑容满面:”我们正在建一座新城市。” 10年后， 第一个人仍在砌墙， 第二个人成了工程师， 而第三个人，是前两个人的老板。 同样的起点，不一样的终点，这就是心态的力量。 【伤不起的人才】 一个值8000元的人，就别讨价还价只愿付他7500元。 即使省下了500块，实际上却凉了他的心，一有更好的 机会，人家拔脚就走。 相反，痛痛快快付他10000元，他会拿出两倍的能耐为 你卖命干。 记住，宁可花两个人的钱去招一个好人，也不要用一个 人的钱去招两个差人。——这是营销。你值得学习！","categories":[{"name":"Article","slug":"Article","permalink":"http://example.com/categories/Article/"}],"tags":[]},{"title":"Excerpt 21：2005年金鸡年如何使自己更成功","slug":"Article/21：2005年金鸡年如何使自己更成功","date":"2016-03-17T16:00:00.000Z","updated":"2021-07-29T11:36:04.000Z","comments":true,"path":"2016/03/18/Article/21：2005年金鸡年如何使自己更成功/","link":"","permalink":"http://example.com/2016/03/18/Article/21%EF%BC%9A2005%E5%B9%B4%E9%87%91%E9%B8%A1%E5%B9%B4%E5%A6%82%E4%BD%95%E4%BD%BF%E8%87%AA%E5%B7%B1%E6%9B%B4%E6%88%90%E5%8A%9F/","excerpt":"","text":"相信有非常多的朋友，在新的一年都许下新的愿望，也设立新的目标。 而如何让今年比去年2004年更成功？我们必须了解别人是如何成功的？他们是如何做到的？他们用了哪些成功的方法？他们采取哪些策略？ 我们必须向顶尖成功人士学习他们成功的方法。透过这些成功方法的实践，来提升企业的竞争力及个人在职场上的竞争力，进而来提升企业的获利能力，以及改善自己的生活品质。让自己拥有全方位成功的人生。 现在我就整理几个成功法则，这几个成功法则也是我经常在使用，并获得相当的成效。提供给各位朋友做参考。 1.检讨 经营之神王永庆先生曾说过：检讨为成功之母。失败不检讨，只会继续失败。人非神贤，谁能无过。犯错，并不可耻，恐怖的是犯同样的错。 我曾经访问超过100位世界最顶尖的成功人士，而且都是他们那个行业的第一名。他们都有一个共同点，就是有时常思考的习惯，他们经常做自我检讨，改善自己的弱点，想办法提升自己的能力。他们会检讨2004年自己那里进步了？那里做对了？哪里进步不够？哪里进步不够快？ 只要肯检讨你会发现自己、家庭、事业都还有很大的成长空间。我有一个员工，他姓王，经过他自己的检讨，他觉得自己在去年知识、见识、能力方面有所提升。但领导力、说服力却有待提升、企图心必须要快速提升。 人如果有弱点，事实上竞争对手就容昜超越你，机会自然会转移给别人，如果持续不改善弱点，哪如何更成功呢？就像获得NBA职业篮球总冠军的球队，一定是进攻和防守都优于竞争对手？你说是吗？所以你必须改变作法，才能得到不同的结果。如果一直用错误的投篮姿势，如何得分？如何嬴球？ 2. 木桶定律 什么是木桶定律？有一种木桶可以装水，木桶本身的制作材质是由一片片的长条木片所排列组合起来的。我们可以把团队比喻作木桶，团队的人才就像长条木片一样，组合起来就变成一个木桶。 我们来假设一下，如果每一片长条木片的长度都是一样长，但是只有其中一片木片只有长条木片的一半长。你觉得这个木桶可以装多少水？只有一半是吧！为什么呢？因为短的木片让原本可以装满水的木桶，流出来只剩下一半的水。是不是很可惜？ 而团队如果有一个人也变成短木片，请问他们团队的绩效会好吗？短木片就像一个人的缺点，不改善缺点，别人就会进攻你的弱点？商场如战场？谁掌握最多的人才，最多的强将悍兵，谁就能胜出。 如果长条木片组合没有很紧密，出现漏洞，木桶还是没法剩满水的。只要是成功的人都会想办法改善所有的缺点，再来发挥优势，这样才能当常胜将军！ 三星集团的总裁李健熙先生曾说过，除了妻儿之外，一切换新。意思是要不断创新、不断改变想法，踏着成功者的脚步，才能加速成功。所以三星开始向世界最顶尖的公司学习，包括索尼、松下电器、微软、联邦快递、IBM、西屋、APPLE等公司。 改善三星产品的缺点，研究竞争对手到底好在哪里？顾客要什么？想办法物超所值。立志要做世界第一的三星，而不只是韩国的三星。在2002年，三星品牌的市场价值曾一度超越SONY公司，震惊市场！就是因为三星懂得运用木桶定律。 3. CANI CANI意思就是永无止境追求进步。不进则退，进步太慢也是落伍，现在是超倍速的时代，取得信息变得非常容易，也就是你的竞争对手进步的速度会越来越快，你不乘胜追击，竞争对手就会迎头赶上。你看看中国的首富，年年换人就知道了。 市场是异常的激烈，而且你不是只跟中国的企业在竞争，你是跟全世界的企业在做竞争。因为大家都看好中国市场，你说是吗？所以只要是企业的负责人，具有高度社会责任感，都在想办法，越做越大，因为你不做大，就会在市场上被别人做掉。你的员工、家庭生计都操之在你的手上，能不慎乎！ 我们也发现越是成功的企业，越是赚钱的企业，老总通常热爱学习。以身作则，创造学习型的组织。让企业的整体战力快速提升，成为市场的嬴家。 4. 进行全方位的的自我分析 你可以拿出一张白纸，开始分析，先在纸上画上一黑点，然后在家庭、事业、人际关系、时间管理、对社会的贡献、健康给自己打分数，0到10分，10分是满分，再把每一部份连起来，看看是什么图型？ 如果越接近圆型表示越圆满，人生运转才会顺利，像车子的轮胎，如果变型，车子跑起来就危险，而且跑不快。我所追求的是全方位平衡式的成功人生，就是事业要成功，家庭要幸福，生活要快乐，身体健康、对社会有贡献、有一群志同道合的朋友、可以自由运用自己的时间。 平常我很喜欢打篮球来健身，下班后我会跟我的员工一起运动，我发现有一个员工打球有一些弱点，一直没改善，或者改善太慢，经过我的指导，分析，要嬴球，就要不断地进攻、做好防守，要做到滴水不漏。还要助攻、要抄球、要抢球、体力要好、速度要快，才会有机会获胜。 成功网 5. 设立挑战性目标 什么叫挑战性目标﹖就是比自己能力还要高一点的目标；如果瞄准月亮，目标没达成，可能射到一颗树，如果瞄准一棵树，没射到，那可能就射到地下去了。 6. 要有周详的计划 计划比目标还重要，在1995年我推广安东尼罗宾的课程，我列了24种达成目标的方法，其中有3-4种方法奏效，成功达到3145人目标，全场大爆满，所以各位设立完目标后，你有没有达成目标的20套方法，这可能是你能不能达成目标的关键。 7. 要努力 目前台湾首富－富士康集团总裁郭台铭先生，他公司连续28年持续成长获利，去年营业额高达1250亿人民币，他的座右铭是努力、努力、再努力；我经常告诉我的学员及我的员工今年一定要比去年努力四倍以上， 8. 成功是一种习惯 习惯决定结果，成功者会有哪些习惯﹖而我们自己的习惯是什么? 成功者习惯全力以赴、全力冲刺、凡事物超所值十倍以上。研究成功者的习惯，复制成功者的习惯，你就会得到跟成功者类似的结果。","categories":[{"name":"Article","slug":"Article","permalink":"http://example.com/categories/Article/"}],"tags":[]},{"title":"Excerpt 19：思维之美","slug":"Article/19：思维之美","date":"2016-03-03T16:00:00.000Z","updated":"2021-07-25T02:04:09.000Z","comments":true,"path":"2016/03/04/Article/19：思维之美/","link":"","permalink":"http://example.com/2016/03/04/Article/19%EF%BC%9A%E6%80%9D%E7%BB%B4%E4%B9%8B%E7%BE%8E/","excerpt":"","text":"人脑的潜力是无穷的，人的大脑大约有100多亿个神经元。根据专家们的意见，大脑可以贮存五亿本书的信息，这相当于美国国会图书馆存书量的1000万册的50倍。 但是，人的一生中只动用了大脑的5%。那么还有95%怎样发掘呢？这就要对大脑的思维能力进行训练和培养。只有这样才能有效地进行开发和利用。思维方法也是这样，不仅要懂得它的特点，而且更要通过训练，才能掌握熟练，运用自如。 训练思维的方式很多，国外大都采取问卷式、画片式、数字式的方式进行。这些方式由于比较抽象，比较枯燥，而且训练者必须经过严格的训练才能进行，所以，局限性很大。 而我们在这里所采用的思维训练方法，是属于故事性的，即通过一个故事讲述一种方法，寓方法于故事之中。下面介绍15种有趣的训练思维的方法： 一、破除常规法 有一个年轻人给另一个年轻人出了一道趣味智力测验题：“昨天我父亲碰到一场雨，当时没戴帽子，也没有撑雨伞，他头上什么也没遮，结果他的衣服全淋湿了，但是，他头上一根头发也没有湿。为什么会这样呢？” 这道题很简单，如果按照常规解答就无法回答。因为头上有头发，怎么能够不湿呢？所以，必须破除常规：设想这个人头部没有头发，是个秃子，这样才能解答。事实上这个人真是个秃子。这就是破除常规法。 二、追根求源法 一天夜里，有一个姑娘正在街上行走，突然，从旁边窜出三个歹徒来，企图施暴，这时，姑娘从手提包里拿出手枪，对准歹徒，叫他们迅速离开。歹徒认为姑娘拿出来的是玩具手枪，一点不怕，猛扑上去。于是，枪声响了，两个歹徒闻声倒地，被打死了。另一个歹徒正拔腿要跑，被行人抓住了。这时，派出所民警也来了。大家一面指责歹徒为非作歹，一面又怪姑娘不该把人打死。正在议论纷纷，两个歹徒忽然活了过来，从地上爬了起来。试问，这是怎么回事呢？ 要回答此题，关键在于枪上。这支枪肯定不是真枪，因为真枪能把人打死，死人是不能复活的。此枪也不是玩具手枪，因为玩具手枪是打不死人的。那么，这是什么枪呢？这就要追根求源，一直要找到这是一支既能打昏人又能使人复活的枪。这究竟是什么枪呢？原来是一支麻醉枪，姑娘是动物园的驯兽员。这就是追根求源法。 三、谐音拼读法 有夫妇两人，都是音乐教师。一次，为了买一样东西，妻子到丈夫的办公室去，在办公桌上用纸写了四个字：“5632”。同事们看了都不知何意，但丈夫回头一看，立即就明白了，把需要的东西买了回来。请问“5632”是什么意思？ 原来，“5632”是“速拿米来”的意思。“5632”是四个音符。 这就是谐音拼读法。 四、数字去除法 大河上有座东西向横跨江面的桥，人通过需五分钟。桥中间有一个亭子。亭子里有一个看守者，他每隔三分钟出来一次。看到有人通过，就叫他回去，不准通过。有一个聪明人想了一个巧妙的办法，终于通过了大桥。请问：这个聪明人想了一个什么办法通过这座大桥？ 聪明人想的办法是：从东往西过桥，走了两分半钟即转过脸来往东走。当看守者出来见到他时就命令他往回走，这样就可以掉转头来过桥了。 三分钟减两分半钟，就可通过，这就是数字去除法。 五、推理分析法 有一天正晌午，邵康节（北宋著名哲学家）和他12岁的小儿子邵伯温在院子里乘凉，突然院墙外边伸出一个人头，朝院子中瞅了一圈，又缩了回去。邵康节问儿子：“你说这个人瞅啥？”伯温说：“八成是个贼，想偷东西，看见有人，又走啦。”“不”，邵康节说，“他是找牛的，不是贼。”儿子不信，跑出门去向那人问是不是找牛的。“是呀！”找牛的人说，“小兄弟，你咋知道我是找牛的？”试问，他爹怎么知道这个人是找牛的？ 邵康节是这样解答的：伸出头的人若是个贼，见院子里有人，便会立即缩回去。他见院子里有人，还是瞅一圈，这说明是寻找东西，而且是寻找会动东西，只瞅一下而没仔细看，说明是个大东西，看他样子是农民，所以准是找牛的。 邵康节的回答，其实是一系列的推理，这就是推理分析法。 六、假设排除法 一天，三位好友小白、小蓝、小黄在路上相遇了。他们之中背黄书包的一个人说：“真是巧得很！我们三个人书包一个是黄色的，一个是蓝色的，一个是白色的，但却没有谁的书包和自己姓氏所表示的颜色相同。”小蓝想了一下也赞同地说：“是呀！真是这样的！”请问，这三位好朋友的书包各是什么颜色呢？ 根据题意，没有谁的书包和自己姓氏所表示的颜色相同，可以假设这些情况： 小白背蓝书包或是黄书包， 小蓝背白书包或是黄书包， 小黄背白书包或是蓝书包。 已知小蓝不背黄书包，那肯定是背白书包。剩下的蓝书包必然是小黄背的，而背黄书包的正是小白。 假设两种情况，排除一种情况，则肯定是另一种情况，这就是假设排除法。 七、找出矛盾法 一天，一个年轻人想到大发明家爱迪生的实验室去工作。爱迪生接见了他。这个年轻人满怀信心地说：“我想发明一种万能溶液，它可以溶解一切物品。” “真的吗，”爱迪生听完以后，笑了一笑，就向那个青年提了一个问题，爱迪生问的是：“你想用什么器皿放置这种万能溶液呢？不是可以溶解一切物品吗？”这个青年被问的哑口无言。 试问，为什么他会被问得哑口无言呢？ 这个年轻人所以被问得哑口无言，是因为他的想法本身就包含着不可解决的矛盾：一方面要承认万能溶液可以溶解一切物品，另一方面又必须有器皿盛放，即至少有一种器皿不能被万能溶液所溶解，从而自相矛盾。抓住题中的矛盾给以回答，这就是找出矛盾法。 八、仔细观察法 某地公安局从公安干警中招考侦破人员，应考人跟在主考人后面进了办公室。这时主考人在抽屉里翻了一会儿，忽然站起来说：“你们的名单被我夹在一本书里，在267页和268页之间，你们到外间书桌上把它拿来。”应考者一窝蜂似地跑出了，只有一个人站在那儿不动。主考人问他为什么不动，他作了回答。主考人立刻给这个聪明人打了五分。为什么主考人给这个人打五分？ 原来267和268是在同一页上，是一页的两面，中间是不能夹考题的。这个人怎么知道在267和268页之间不能夹东西呢？这是他平时仔细观察的结果。像这样一种思维方法就叫做仔细观察法。 九、根据搞错法13世纪时，北威尔士王子列维伦有条忠实而凶猛的狗——盖勒特。一天，王子出猎，留狗在家看护婴儿。王子回来后，看见血染被毯，却不见婴儿。而狗呢，一边舔着嘴边的鲜血，一边高兴地望着他。王子大怒，抽刀刺入狗腹。狗惨叫一声，惊醒了睡熟在血迹斑斑的毯子下面的婴儿。这时，王子才发现屋角躺着一条死去的恶狼。原来盖勒特为保护小主人，咬死了恶狼。王子悲痛万分，把狗葬在自己的公馆里。 你知道王子怎么会误杀义犬的吗？ 王子的思想过程是这样的：伤害婴儿的恶兽在嘴边留有鲜血，盖勒特嘴边留有鲜血，所以，盖勒特伤害了婴儿。可是，伤害婴儿的嘴边会留有鲜血，不伤害婴儿的嘴边也可能会留有鲜血。而王子认为凡嘴边有鲜血的就是伤害婴儿的，所以，他必然犯错误：误杀义犬了。王子错在哪里？错在根据搞错上，所以叫做根据搞错法。 十、概念歧义法 阿凡提当理发匠，地主来剃头，总是不给钱。阿凡提很生气，想整他一下。有一天地主又来理发了，阿凡提先给他剃光了头。在给他刮脸的时候，问道：“眉毛要不要？”“当然要，这还要问。”地主说。阿凡提飕飕几刀，就把地主的两道眉毛刮了下来，送到了他手里，并高声说：“要就给你！”地主气得说不出话来，谁叫自己说“要”呢？“胡子要不要？”阿凡提又问。“不要，不要！”地主连忙说。“好，不要就给你刮掉！”阿凡又是飕飕几刀，把他的胡子刮了下来，甩在地上。地主对着镜子一看，自己的脑袋和脸都刮得精光，简直像个光溜溜的鸡蛋，气得骂起来。阿凡提解释说：“我是先问你，遵照你的吩咐我才剃的呀！” 阿凡是根据什么制服了地主的？阿凡提是用“要”这个词的多义性来整地主的。“眉毛要不要”中的“要”，有两种意思：一是拿去的意思，一是留着的意思。地主说“要”，是留着的意思，而阿凡提却故意把“要”解释成地主要眉毛的意思，于是把眉毛剃下来给了地主。下面的“胡子要不要”也是这种情况。阿凡提就是这样整地主，而地主对阿凡提却无可奈何。 阿凡提使用的就是概念歧义法。 十一、归纳合法 西特诺猜的陪明机智，在春国是很有名的。有一天他对一些大臣说：“我可以洞察你们的内心，你们心里想的是什么，我可以说出来。如果你们不信，咱们可以打赌！” 大臣们商量了一下就对西特诺猜说，他们愿意打赌。如果西特诺猜对了，每个马上可以给他十两银子。不过，打赌得在皇上面前进行。西特诺猜立刻表示同意。 早朝以后，在皇上面前开始打赌了。西特诺猜对大臣们说：“我十分清楚诸位大人心里想的是什么。我能把你们心里的话说出来。如果诸位大人认为我说错了，你们心里想的和我说的正相反，那请诸位立刻提出来。如果认为我说得不错，你们心里想的和我说的完全一致，那就请诸位马上给我银子。” 停了一会儿，西特诺猜不慌不忙说出了一段话。百官听了，没有一个不同意，认了输，给了银子。 西特诺猜对大臣们说：“在座诸位大人心里所想的，我了如指掌，那就是：你们的思想十分坚定，你们整个一生都要忠于皇上，永远不会图谋背叛和造反。” 文武百官谁敢不同意？谁要说不同意，那就等于向皇上宣布自己的不忠。 西特诺猜是把不同的思想，综合成一个思想，这就叫做归纳综合法。 十二、思考不慎法 酒吧间里，甲乙二人站在柜台前打赌。甲对乙说：“我和你赌一百个马克，我能够咬我自己左边的眼睛。”乙伸出手来，同意跟他打赌。于是，甲就把左眼里的玻璃球眼珠拿出来在嘴里咬给乙看。乙只得认输。 “别丧气。”提出打赌的甲说，“现在我给你一个机会，让你赢回你的钱。我们再赌一百马克怎么样？我还能够用我的牙咬我的右眼。” “他绝对不可能会有两个玻璃球眼珠的。”乙一面思忖着，一面把钱放在柜台上。 可是，结果乙又输了，这是什么道理呢？ 甲从嘴里把假牙拿出来，“咬”自己的右眼。乙所以输，这是因为他思考不周密。这就叫思考不慎法。 十三、随机应变法 有一天，一个老人抵消了一担西瓜上街去卖，走累了，就在路边一间险房里休息。有个哑巴看见老进去，他也跟着进去了。他进去的目的是想告诉老人，这房子危险，要赶快离开，可是哑巴不会讲话，他打了不少手势，老人不知道哑巴是什么意思。这时，突然狂风四起，房方立刻有倒塌的危险，一定要叫老人立即出去才行。哑巴急了，突然，他想到一个办法，使老人主动地跟着他出去了。老人刚走出房子，那间险房倒塌了，好险呀！哑巴用的是什么办法呢？哑巴抱起一个西瓜就往房外跑，老人当然不饶他，就立即追了出来。 哑巴所用的办法，就是随机应变法。 十四、排列组合法 从前有个县官判决一个犯人，起先写的判词是：情有可原，理无可恕。后来，这县官接受了贿赂，把判词颠倒了一下，成为：理无可恕，情有可原。这样一来，意思不同了，这个犯人得到了从轻发落。 还有一个真实的例子： 1949年新中国成立时，云南还是国民党统治区域。昆明监狱关了一批爱国民主人士。蒋介石电令把为首的解往重庆审讯。电文说他们“情有可原，罪不可 （ 逃避的意思。）”当时在昆明的代总统李宗仁等人故意把电文颠倒为“罪不可，情有可原”，并根据这颠倒的电文把他们释放了。 上述两例中只是把句子进行重新排列，从而产生意想不到的效果，这就叫做排列组合法。 十五、整思维法 巴尔扎克塑像是法国雕塑大师罗丹的杰作。这塑像雕得虽好，却没有双手。原来，罗丹完成的塑像，巴尔扎克的双手是叠合在一起放在胸前的，姿态自然生动，罗丹非常满意。他连夜叫醒了一个学生来欣赏。那个学生看了，十分赞赏那双手。罗丹又叫了他的两个学生来，他俩也对塑像的双手赞叹不止。 这时，罗丹一反常态，大声叫道：“手、手、手……”他突然拿起一把斧头，把塑像的双手砍掉了。三个学生惊呆了。 罗丹为什么要砍掉那一双奇妙的手呢？罗丹说：“这双手太突出了！一件真正完美的艺术品，任何一部分都不应该比整体列重要，更突出……” 原来，罗丹是从整体出发来衡量手的，所以叫做整体思维法","categories":[{"name":"Article","slug":"Article","permalink":"http://example.com/categories/Article/"}],"tags":[]},{"title":"Excerpt 20：训练你的头脑到达顶尖效率的20种方法","slug":"Article/20：训练你的头脑到达顶尖效率的20种方法","date":"2016-03-03T16:00:00.000Z","updated":"2021-07-24T12:02:45.000Z","comments":true,"path":"2016/03/04/Article/20：训练你的头脑到达顶尖效率的20种方法/","link":"","permalink":"http://example.com/2016/03/04/Article/20%EF%BC%9A%E8%AE%AD%E7%BB%83%E4%BD%A0%E7%9A%84%E5%A4%B4%E8%84%91%E5%88%B0%E8%BE%BE%E9%A1%B6%E5%B0%96%E6%95%88%E7%8E%87%E7%9A%8420%E7%A7%8D%E6%96%B9%E6%B3%95/","excerpt":"","text":"你是否感到越来越难集中注意力，或者难以进行心算？我希望你不要接受这么一种主张：随着年龄增长头脑的敏锐性必然会减弱。 许多事情能够导致头脑的工作效率下降，而且我喜欢称其中一个主要的因素为“使用它或者失去它”综合症。这篇文章是《我的生活巨变》的杰夫 尼克尔斯写的报告。他的使命和他的博客的关注点是帮助人们找到生命中的成功和意义。杰夫是一位有深度的作家，我鼓励你读完后去拜访他。 杰夫用这份伟大的列表来帮助我们避免可怕的“使用它或者失去它”综合症，而我很高兴和大家分享它。训练你的头脑到达顶尖效率的20种方法： 为了保持敏锐，锻炼你的大脑是很重要的。我们思考得越少，它就会变得越迟钝。今天我们有很多重点来保持生理健康，但我们也应该关注我们的精神健康。在一生 中，我们的大脑都在持续扩张和适应受到的刺激。我们更关心我们的大脑，我们会变得跟有智慧。这里有20个训练大脑的方案。 1)读一本好书。读书会激发想象力。当你读书时，你的大脑不能持续在反映画面。读书让你的头脑开始工作。我喜欢让书本带着我走。我总是有一本有时甚至三至 四本书在读!大部分书我是从图书馆里借来的，这样就不用花钱买每一本书了。这也使我能够毫无风险地广泛阅读各种书籍。 2）大脑学院。视频游戏不好的一面是导致脑袋腐烂，但实际上有些也会帮助你增强思维。我喜欢大脑学院游戏。这是一款用头脑玩笑测试头脑敏锐性的合集。(Big Brain Academy for the Wii.这是原文中的游戏名称，是一个Will下的游戏智力游戏，很不错的。) 3）练习冥想。不要担心，我不是要在这里离开新时代的最深端。冥想的方式有很多种。对我而言，最简单的形式，冥想是花一点时间独处达到放松和集中思考的方式。它是神奇的治疗。 4）获得大量的休息。缺少睡眠能够影响你吸收新信息的能力。这意味着大学里通宵达旦地补习的效率比你想象的要低得多。你的大脑需要休息，工作在其最佳效能。这可能是为什么事情总是在睡了好觉后变得更加清晰明朗。 5）规律地锻炼。你难道想没一会就从跑步机上下来吗？心血管运动通过改善血液到大脑的流动从而改善大脑功能。一份研究发现体育锻炼实际上帮助扩大大脑的体积。所以，如果你想要一个更大、更好的大脑，那么就去运动吧！ 6）吃一顿好早餐。这不是不切实际。吃一顿好早餐确实令你有个更好的开始。你应该吃高蛋白和优质碳水化合物的的早餐。两片夹着花生牛油的全麦吐司就符合这一条了。鸡蛋同样是蛋白质的好来源。坚果、牛奶和新鲜水果都能为大脑提供良好的营养。 7）积极地思考。鼓励自己。我相信积极思考会提供大脑效能和帮助避免失望。我想说你的大脑就像电脑一样，垃圾进来、垃圾出去。发现积极，鼓励人们闲逛、能够使你快乐阅读材料，做所有能够使你感觉良好的事情。这些事情将会帮助你的精神变得更有生产力。 8）不断地学习。不要停止怀疑你的世界。寻找新的体验、技能和知识。想写你总是想学着去做的事并且开始去做。一份现在着名的研究表明伦敦出租车司机大脑的 确定领域比一般的市民得到更大的开发。这是由于他们需要学习懂得如何在迷宫般的城市街道上导航。我们能够运用此项挑战我们大脑的技术来增进我们的能力。 9）戒酒。酒精是抑郁的原因。它降低精神功能。酒能乱性是有充分证据的。如果你想要有顶尖的精神表现，那么停止喝酒吧。另外它能观察到的作用，它也减弱人的睡眠，这是我们已经讨论过的，阻碍你清晰思考的能力。 10）拥有浪漫（特别是女性）。 11）打破你的例程。选择一条新路开车去工作。试着用另外一只手去写字。将一点不同的东西掺杂在一起。这将振作你的大脑因为它需要你思考更多。你不能只是自动驾驶。离开你的定式来挑战你的大脑，它将有所反应。这是使你脑浆流动的好方法。 12）不要看太多电视。研究者发现在1-3岁时看太多电视会导致儿童注意力问题。让我们直面它，电视使心态麻木。从沙发上起来并离开电视机。当然，也有一 些好的教育节目给孩子和大人们，但是整体上美国人看太多电视了。如果你想要高效的精神表现就关掉电视吧。 13）处理数字问题。心算而不是用计算器计算。我们许多人它是使用它或失去它。我们已经变得精神懒惰了。我们依赖工具而不是自己思考。处理和记忆数字是使大脑恢复状态的好途径。这一路上能够偿还大量股息。 14）停止依靠GPS走路。记住第8条里所讲的出租车司机。用你的大脑去指出如何从点A到点B是很好的思维体操。你必须用你大脑的能力来决定空间关系来提高读地图的效率和穿梭城市。在一个陌生的地方旅行就更好了！ 15）唤起远久的记忆。找出老照片并且开始翻阅。这将进入你头脑中的记忆银行。图像将帮助你想起你已经忘记的东西。深入挖掘就是所有你记得的东西。如果你有别的方法来唤醒你的记忆，就像以前的信件和家庭电影，那么也尽可能得利用它们。 16）创造优美的音乐。学习演奏一件乐器是超级改变你的大脑的方法。它需要你大脑的多个不同部分协调工作来创作出你想要的旋律。当然，如果你已经是一个音乐家了，你们学习一件新的东西。迫使你自己学习新技术。音乐是思想伟大的锻炼。 17）说一种新语言。许多人同意学习一门新语言是使思想延伸的一种有力途径。如果你曾经尝试学习即使是几个新单词，那么你知道这会很难。当然，给大脑越难的东西越好!你有比你想象的要多得多的思维能力。让它试一下吧！ 18）记忆一首歌。我们很多人头脑中都储存有许多老歌，但为什么不通过学习一些新的调子来扩充我们的记忆？它将在开始的时候花费一点时间，但如果你坚持怎么做，你将发现会越来越简单。这是你的大脑恢复状态了。 19）遮住你的双眼绕你的屋子走。这看起来是一种陌生的活动，但你的大脑能够处理它。一旦你试了几次，你就可能发现它很有趣和有挑战性。另外，这会应用你的记忆、运动技能和推理能力。多么好的锻炼！ 20）扩大你的词汇量。决定每天学习一个新单词。有许多能够帮你做这项努力的网站。你将不止扩大你的思想，而且当你在谈话中引入一个新词汇时能够使你的朋友和同事印象深刻。今天就开始行动，明天将更聪明！","categories":[{"name":"Article","slug":"Article","permalink":"http://example.com/categories/Article/"}],"tags":[]},{"title":"Excerpt 18：谁的青春不迷茫","slug":"Article/18：谁的青春不迷茫","date":"2016-02-25T16:00:00.000Z","updated":"2021-07-24T11:54:15.000Z","comments":true,"path":"2016/02/26/Article/18：谁的青春不迷茫/","link":"","permalink":"http://example.com/2016/02/26/Article/18%EF%BC%9A%E8%B0%81%E7%9A%84%E9%9D%92%E6%98%A5%E4%B8%8D%E8%BF%B7%E8%8C%AB/","excerpt":"","text":"“我曾谈过一段恋爱，分手理由是因为我不够有钱。后来我拼命赚钱，却再也没有遇见过那个人。 我曾被同事排挤，因为我不懂规矩。后来我懂了规矩，但再也不会用这个理由去刁难新同事。 我一直和父母抗争，因为他们一直觉得我不那么好。后来我过得越来越好，我才知道他们只是怕我一个人过得不好。 这些年，我一直在试着了解：了解这个世界，了解更完整的自己。”——刘同 1、当我们尽力把悲观的事情用乐观的态度去表达时，你会发现迷宫顺着走到出口能遇光明，倒着回到出发一样光亮。我们都一样，正处于期盼未来，挣脱过去，当下使劲的样子。会狼狈，有潇洒，但更多的是不怕。不怕动荡，不怕转机，不怕突然。谁的青春不迷茫，其实我们都一样。 2、一件事只要你坚持得足够久，“坚持”就会慢慢变成“习惯”。原本需要费力去驱动的事情就成了家常便饭，原本下定决心才能开始的事情也变得理所当然。 3、再繁茂的树木都是从根长起的，再多困扰我们的问题都是由一个问题引起的。父母对我们所有的规划也许是因为我们没有给他们足够多的安全感。另一半对我们不冷不热，也许是因为我们再没有给过对方新鲜感。领导对我们百般挑剔，也许是因为我们总有把柄让人抓而已。 4、那时一吵架，就想着离开所有人，离家出走。其实这些叛逆，并不是因为不想和你们在一起，也不是想体会一个人的感觉。暂时消失只是想让你们了解失去我的感觉。也许只有失去了，你们才会体会拥有的可贵。所以无论我是坏是好，请你珍惜拥有我的机会。 5、找工作和结婚一样。如果你指望拿着简历上大街就能找个人跟你回家结婚的话，要么你长得像女神惊为天人，要么你做手脚把人弄晕了，不然谁都不会做这种二百五的事。而能顺利结婚的，都是早就试婚的，早就心有所属两情相悦的。不要埋怨自己为何求职不顺，其实你压根就没做好成家的准备。 6、读书时，我每天羡慕好多人。他的得体谈吐，他的干净搭配，她温暖又有趣，他和她细心珍惜。有时我会产生自己怎么一无是处的念头，后来换了新环境，我模仿他们的谈吐。回想他们的搭配，我尝试变得有趣，尽量尊重每个人，我想成为自己曾羡慕的那些人。其实能看出别人美好的人，就不是一无是处。 7、每次回家，都会去翻阅曾经你给我写的信。细细阅读，体会你握笔的姿势，蹙眉的样子。每句话每个字都是当时最完整的你。今天你在哪里我不知道，权当是个笔友吧。我妈问：这些信没用了还留着？其实很多东西现在都没用了，留着的目的只有一个，像你那么好的人，也曾如此认真的对待过我。 8、你是什么样的人，就会遇见什么样的人。你的朋友是什么样的人，你就会成为什么样的人。你的爱人是什么样的人，你就会过什么样的人生。护好了他们，也就是成全了自己。 9、你会渐渐明白，失败不算什么，因为它好过你曾主动的放弃。撒谎不算什么来，它好过你曾很蠢的隐瞒。被甩不算什么，它好过你抢先分手还以为占了多大的便宜。我们学会了解了自己，才知道自己多不堪。我们学会了了解别人，才知道别人多宽容。 10、“人生也许就是不断地放下，然而令人遗憾的是，我都没能好好地与他们道别。”人人都记住了这句话，人人都有来不及和不尽兴的道别。很多的放不下都是因为不甘心，很多的不甘心才会让人的记忆一直有生命。 11、年龄越大，越喜欢喝点小酒，因为心里有些话越来越说不出口。加班越久，越喜欢一个人走，因为想知道自己究竟还能忍受多久。当初都是一群人上路，后来都需要一个人独处。都曾希望任何人给自己发短信，拿起手机却又不知道应该打给谁。但只有经过了这段，才有回忆的笑谈。更多学习请加QQ：622005037或421612654！ 12、你爱过的那个人是我，你讨厌的那个人也是我，你关心过的那个人是我，你反感的那个人也是我。只因为那个人是你，所以我才把很多面的自己在你面前展露无遗。我满怀希望等你接受每个我，而不是被我吓到转身离去。只有自私的你才会只爱最好的我，只有包容的你才能容忍最坏的我。 13、把一成不变的事情做得不一样，你就离晋升不远了。最怕的事情就是今天知道明天要做什么，明天知道下周要做什么，今年知道十年后自己要做什么。而工作中真正的努力不是一直死扛一件事，而是你不停的改进让你的对手上班如上坟。 14、你有被骂过急功近利吗？你有被骂过很急躁吗？你有被骂过幼稚吗？年轻时，我们常遭受这样的点评却无力反驳。其实你只是在思考未来，想更努力的工作，希望常常能改变自己，所以会稍微改变一下自己的姿势。要知道，你改变的时候，总会让世界有些不舒服。 15、朋友问：“我的生活为什么这么难？！”生活本来就很难。读书，高考，找工作。加班，做饭，竟争上岗。车贷，房贷，难找对象。老板骂，同事排挤，父母老去。有很多朋友时，恨自己没钱。有很多钱时，恨自己没朋友。其实大多数人都如此，只是你觉得一切很难，而他们只是觉得一切理所当然。 16、想要活得爽，大家都劝你不要在乎别人的评价。但不是每个人都能做到这一点，既然做不到不在乎外界的评价，那就请把自己手头的事都尽心尽力给做好，让别人对你有好的评价，而不是你永远都在反驳别人对你的坏评价。 17、曾经爱过一个人，打电话写情书送早饭，打开水送礼物上下班，最后还是分了。有个留言说：这些事情谁都能做，不是非你不可。这次你做完，下次换人做，都不会记住你。你需要做的事花时间让自己变得更好，而不是总和对方赖在一起，要让其他人都比不上你才是硬道理。 18、关于写简历：80%的简历除了人名外，获奖，民族，身高，科目，学校职务大都一样，80%都是透明的封面，外加五颜六色的塑料夹，推荐信第一句都是感谢面试官从百忙中抽出时间来。那些人人都会用，会写，不费脑子就能写说出来的话，一旦你用了，面试官只能默默地把你归为流水线产品那一类。 19、想要自己没有过的体验，就必须要放弃一些东西。这个世界没有绝对的两全之计，只有你更想要的是什么。你想自在，就要放弃挑战。你想前行，就要放弃停留。你想不被人笑，一辈子就只能活一个样子。 20、这个社会能力真正强到爆的人少之又少，大多数新人不过都只有三成功力。面对从未做过的事时，有的人敢扛敢上，好像自己有五成功力，事情一旦坚持完成，起码有了七成功力.剩下的人就会说，你看他们本来就很厉害。其实一开始你们都一样，无非是少了点不怕死的心。 21、生活在别人的眼神里，就会迷失在自己的世界中。你用别人的原则去要求自己，其实也不是不可行。但别人有千千万，有明白人，也有二傻子，有聪明人，也有缺心眼。你不能用自己的原则去辨明这些，那你只能用自己的生命让别人在你世界中活着。 22、22岁，遇见好哥，才知道一个人的工资能到一万那么高。25岁，认识微姐，才知道这个世界你能想多大就能多精彩。27岁，遇见张爸，才知道做领导不需要什么都是第一，但你要让同事们都信任你。31岁，做了更多的挑战，才知道其实服输也是一种胜利。成长中最深的孤独不是一片黑暗，而是你只能看到自己。 23、这几年，有朋友辞去了稳定的工作，有朋友与有家庭暴力的丈夫离了婚，有朋友卖了房子环球旅行，有朋友半工半读申请到了全额奖学金，有朋友与多年的男友分了手，有朋友离开父母开始一个人漂泊，有朋友出了自己的画册，有朋友组了乐队开歌友会。他们都过得很好，因为这是他们自己做的决定。 24、二十岁时，我们想让世界认识我们。三十岁时，我们认识了世界。我们开始知道幸福不过是与生活合得来，与世界过得去的日子。谁的青春不迷茫，二十岁时我们可以昂首，三十岁时我们学会了低头。因为每一次低头，都是一次对自己的肯定。 25、毕业后，好多事情都被颠覆了。原来校花也会变丑，原来上铺和下铺也能恋爱，原来找工作可以和专业无关，原来不是每个人都有资格被潜规则，原来大家对于未来都一样焦虑，原来不上课不考试真的拿不到学位证，原来第一份工作工资那么少，原来招聘会挤都挤不进去，原来毕了业嫁人也很难。原来，读书真好。 26、无论是找工作还是找对象，如果你和别人都一样，为什么被选中的那个人必须要是你？你得和别人“不一样”。“不一样”不是让你糟践自己，特立独行，行为出格。“不一样”是指“好得不一样”，简历更精彩一点，表达更从容一点，说话更准确一点，钻研更深刻一点，看法更客观一点。一点一点，就会和别人不一样了。 27、倒不是因为喜欢听而一直重复那首歌，而是因为听那首歌时会想到你。倒不是只喜欢同个类型的人，而是这个类型的人会让我想到你。你可以用你的方式离开，我也可以用我的方式靠近。你不用可怜我，毕竟后来我发现这个世界像你的人有很多很多，比你好的也有很多很多。 28、寂寞和孤单不一样。孤单只是你的旁边没有人，而寂寞却是你的世界都没有人。一个人的孤单是会上瘾的。一个人太久的寂寞则会把他自己都给忘了，也会忘了曾经最好的一个人的感觉。 29、任何一个群体，总会有几个混吃等死的人，也总有几个耐造抗压的人。其实你混入哪个阵营都能生存，关键看你希望自己成为哪种人。混吃等死的，会越来越混吃等死。耐造抗压的，会越来越耐造抗压。 30、我们总是希望在人生囧途中找到一个人读懂自己，常常未果。但总有一天你会明白，只要我们稍微改变一下自己的表达方式，就会有更多的人会读懂自己。谁的青春都迷茫，不要埋怨别人不给你机会，其实是你一直不给别人懂你的机会。 31、承认自己的不足需要的不是勇气，而是自信。当你足够了解自己，不怕被人拆穿，关于自己的一切都能坦然接受时，你才敢特别坦然的说出“我现在确实没有那么好”。敢说出这句话的你，心里一定有一个想变得更好的自己。 32、如果你坚信你的做法显而易见是对的，那就不要去向误会的人解释了。因为他们针对的根本就不是你的做法，而是你的人。所以，你唯一要做的就是表面微笑，但心里别把他们当自己人。 33、每个人都要看得起自己，不要以为自己不足轻重而放任自己做一些事或一些话。你的不在意，才会影响到别人也不在意你。 34、钱不能换取才华，但有才华就！会！很！有！钱！钱无法衡量梦想，但梦想！很！值！钱！钱不一定能买来好创意，但好创意！一定！能卖钱！ 35、年轻时，其实没有更多的答案可供你选择，五花八门的选项背后只有一个真相，就是“试试”二字。你选a，结果是试试。你选b，结果也是试试。所以年轻时，选什么都没关系，关键是你敢去试试。你不选就扣分，你选了就加分，这是最简单的题，但很多人在这道题上失过分。 36、没有人会和完美的人过一辈子，他们最后都选择了和真实的人一起晚年。所以，用“完美”强迫自己的人，晚年都会没着落。趁年轻，做个真实的人比较靠谱。 37、生活在这个城市，很多爱，等待，理想，关怀最后都输给了时间。其实这个城市什么都不缺少，就是缺少时间。我们来不及恋爱，来不及等待，来不及等你拼搏，也来不及陪你走到未来。我们总是想在极短的时间里找到某种安全感——那种你明知不是最好，却又不得不妥协的安全感。 38、你觉得人走茶凉的时候很难过，后来你发现别的人不仅遭遇人走了，茶也被喝完了。你又觉得人去楼空很难过，然后你发现别的人不仅遭遇人去了，楼也被带走了。好多事都是这样，你觉得自己惨的时候，想想那些更惨的人，排队的时候觉得烦，再看看排在你后面的人，你就该告诉自己已经够幸福了。 39、以前遇见难题总是埋怨自己运气不好，后来才体会到，做自己没做过的事情或许有成长，做自己没想过的事或许是突破，做自己不愿意做的事情或许才能改变，做自己不敢做的事情或许才懂得承担。做一直能hold住的事自然舒服，做平时没有做过的事，无论结果如何，都会有收获。 40、很多人面对工作的态度，特像男人对女人的态度。他们只知道自己喜欢漂亮的，贤淑的，身材正点的女人。但他们不知道这些女人在哪里，爱什么，怎么追，是否已经成家。他们永远跨不出主动那一步，那个女人永远不是他的，只能成为你心中一辈子都在做的那个美梦。更多学习请加QQ：622005037或421612654 41、比起找一个好岗位，找一个愿意把你当好员工培养的岗位更重要。比起找一个王子，找一个愿意把你当公主宠你的人更重要。你所选择的对方好不好很重要，但更重要的是他对你好不好。 42、当你正视这个世界时，你会听到很多声音，也会看到很多的路。谁发出的声音并不重要，重要的是话里的内容。选哪条路，通往哪里也不重要，重要的是你要好好看看路上的风景。 43、我们心里永远都有一个人，不是他，也会有别人。刚开始我们都会折磨自己，埋怨自己，恨自己为什么一直放不下这个人。后来才知道，不是你放不下谁，而是你放不下想念对方的那个自己。 44、看过去记录下来所有成长的疑虑，时至今日，我终于可以很笃定的告诉自己：真正的安全感是在合适的年纪，恰当的时机做该做的事，顺其自然。不唐突冒进，不瞻前顾后，也不用左顾右盼，做好当下每一件事，路自然就会开阔起来。 45、总能看出别人这不好那不好的人，都是心里是有审美的人。换句话而言，他们对于工作都是有标准的，他们知道什么是好的，什么是不好的。这类人大多数都是聪明人，只是他们把过多的精力放在了别人身上，而鲜于告诉自己应该如何改进。如果把批评人，改成表扬人，人生就发达了。 46、在这个社会，只会批评的人并不代表他很懂，只代表他很闲，代表他很喜欢拿刀子捅别人。我们提出批评的同时并给出解药，给意见的同时也请给建议，这才是真正的帮助人。遇见那种只管捅不管治的人，你也别生气，最终的结果他必然会被所有人孤立。 47、如果真苦，你哪有时间喊累。如果真惨，你哪有时间觉得丢脸。因为承受得还不够，所以你才有时间抱怨。 48、人一旦孤独，就想找一个完全能读懂自己的人。孤独来源于自己对自己的足够了解，因为足够了解自己，就希望周围的人也如此。如果你在这个世界上成长得随波逐流，你会更容易满足。如果你一直想成为一个完全了解自己的人，就注定了会一直孤独下去，这便是成长的代价。 49、总有段时间我们想找一个像自己的人，然后结果常觉得自己是全世界最孤独的。后来他们说：相似的人适合一起欢闹，互补的人适合一起变老。才发现确实。 50、有人会因为你的缺点而讨厌你，但也会有人会因为你的真实而喜欢你。我们不必让那些本不喜欢我们的人喜欢上自己，而是要坚持让那些本该喜欢我们的人发现自己。","categories":[{"name":"Article","slug":"Article","permalink":"http://example.com/categories/Article/"}],"tags":[]},{"title":"JS常用API","slug":"Github/Javascript常用API合集","date":"2016-02-25T16:00:00.000Z","updated":"2017-05-04T06:38:41.000Z","comments":true,"path":"2016/02/26/Github/Javascript常用API合集/","link":"","permalink":"http://example.com/2016/02/26/Github/Javascript%E5%B8%B8%E7%94%A8API%E5%90%88%E9%9B%86/","excerpt":"#Javascript常用API合集 一、节点1.1节点属性 Node.nodeName //返回节点名称，只读 Node.nodeType //返回节点类型的常数值，只读 Node.nodeValue //返回Text或Comment节点的文本值，只读 Node.textContent //返回当前节点和它的所有后代节点的文本内容，可读写 Node.baseURI //返回当前网页的绝对路径 Node.ownerDocument //返回当前节点所在的顶层文档对象，即document Node.nextSibling //返回紧跟在当前节点后面的第一个兄弟节点 Node.previousSibling //返回当前节点前面的、距离最近的一个兄弟节点 Node.parentNode //返回当前节点的父节点 Node.parentElement //返回当前节点的父Element节点 Node.childNodes //返回当前节点的所有子节点 Node.firstChild //返回当前节点的第一个子节点 Node.lastChild //返回当前节点的最后一个子节点 //parentNode接口 Node.children //返回指定节点的所有Element子节点 Node.firstElementChild //返回当前节点的第一个Element子节点 Node.lastElementChild //返回当前节点的最后一个Element子节点 Node.childElementCount //返回当前节点所有Element子节点的数目。","text":"#Javascript常用API合集 一、节点1.1节点属性 Node.nodeName //返回节点名称，只读 Node.nodeType //返回节点类型的常数值，只读 Node.nodeValue //返回Text或Comment节点的文本值，只读 Node.textContent //返回当前节点和它的所有后代节点的文本内容，可读写 Node.baseURI //返回当前网页的绝对路径 Node.ownerDocument //返回当前节点所在的顶层文档对象，即document Node.nextSibling //返回紧跟在当前节点后面的第一个兄弟节点 Node.previousSibling //返回当前节点前面的、距离最近的一个兄弟节点 Node.parentNode //返回当前节点的父节点 Node.parentElement //返回当前节点的父Element节点 Node.childNodes //返回当前节点的所有子节点 Node.firstChild //返回当前节点的第一个子节点 Node.lastChild //返回当前节点的最后一个子节点 //parentNode接口 Node.children //返回指定节点的所有Element子节点 Node.firstElementChild //返回当前节点的第一个Element子节点 Node.lastElementChild //返回当前节点的最后一个Element子节点 Node.childElementCount //返回当前节点所有Element子节点的数目。 1.2操作Node.appendChild(node) //向节点添加最后一个子节点 Node.hasChildNodes() //返回布尔值，表示当前节点是否有子节点 Node.cloneNode(true); // 默认为false(克隆节点), true(克隆节点及其属性，以及后代) Node.insertBefore(newNode,oldNode) // 在指定子节点之前插入新的子节点 Node.removeChild(node) //删除节点，在要删除节点的父节点上操作 Node.replaceChild(newChild,oldChild) //替换节点 Node.contains(node) //返回一个布尔值，表示参数节点是否为当前节点的后代节点。 Node.compareDocumentPosition(node) //返回一个7个比特位的二进制值，表示参数节点和当前节点的关系 Node.isEqualNode(noe) //返回布尔值，用于检查两个节点是否相等。所谓相等的节点，指的是两个节点的类型相同、属性相同、子节点相同。 Node.normalize() //用于清理当前节点内部的所有Text节点。它会去除空的文本节点，并且将毗邻的文本节点合并成一个。 //ChildNode接口 Node.remove() //用于删除当前节点 Node.before() // Node.after() Node.replaceWith() 1.3Document节点1.3.1Document节点属性document.doctype // document.documentElement //返回当前文档的根节点 document.defaultView //返回document对象所在的window对象 document.body //返回当前文档的&lt;body&gt;节点 document.head //返回当前文档的&lt;head&gt;节点 document.activeElement //返回当前文档中获得焦点的那个元素。 //节点集合属性 document.links //返回当前文档的所有a元素 document.forms //返回页面中所有表单元素 document.images //返回页面中所有图片元素 document.embeds //返回网页中所有嵌入对象 document.scripts //返回当前文档的所有脚本 document.styleSheets //返回当前网页的所有样式表 //文档信息属性 document.documentURI //表示当前文档的网址 document.URL //返回当前文档的网址 document.domain //返回当前文档的域名 document.lastModified //返回当前文档最后修改的时间戳 document.location //返回location对象，提供当前文档的URL信息 document.referrer //返回当前文档的访问来源 document.title //返回当前文档的标题 document.characterSet属性返回渲染当前文档的字符集，比如UTF-8、ISO-8859-1。 document.readyState //返回当前文档的状态 document.designMode //控制当前文档是否可编辑，可读写 document.compatMode //返回浏览器处理文档的模式 document.cookie //用来操作Cookie 1.3.2DOM节点的方法读写方法 document.open() //用于新建并打开一个文档 document.close() //不安比open方法所新建的文档 document.write() //用于向当前文档写入内容 document.writeIn() //用于向当前文档写入内容，尾部添加换行符。 查找节点 document.querySelector(selectors) //接受一个CSS选择器作为参数，返回第一个匹配该选择器的元素节点。 document.querySelectorAll(selectors) //接受一个CSS选择器作为参数，返回所有匹配该选择器的元素节点。 document.getElementsByTagName(tagName) //返回所有指定HTML标签的元素 document.getElementsByClassName(className) //返回包括了所有class名字符合指定条件的元素 document.getElementsByName(name) //用于选择拥有name属性的HTML元素（比如&lt;form&gt;、&lt;radio&gt;、&lt;img&gt;、&lt;frame&gt;、&lt;embed&gt;和&lt;object&gt;等） document.getElementById(id) //返回匹配指定id属性的元素节点。 document.elementFromPoint(x,y) //返回位于页面指定位置最上层的Element子节点。 生成节点 document.createElement(tagName) //用来生成HTML元素节点。 document.createTextNode(text) //用来生成文本节点 document.createAttribute(name) //生成一个新的属性对象节点，并返回它。 document.createDocumentFragment() //生成一个DocumentFragment对象 事件方法 document.createEvent(type) //生成一个事件对象，该对象能被element.dispatchEvent()方法使用 document.addEventListener(type,listener,capture) //注册事件 document.removeEventListener(type,listener,capture) //注销事件 document.dispatchEvent(event) //触发事件 其他 document.hasFocus() //返回一个布尔值，表示当前文档之中是否有元素被激活或获得焦点。 document.adoptNode(externalNode) //将某个节点，从其原来所在的文档移除，插入当前文档，并返回插入后的新节点。 document.importNode(externalNode, deep) //从外部文档拷贝指定节点，插入当前文档。 1.4Element节点1.4.1Element节点属性特性属性 Element.attributes //返回当前元素节点的所有属性节点 Element.id //返回指定元素的id属性，可读写 Element.tagName //返回指定元素的大写标签名 Element.innerHTML //返回该元素包含的HTML代码，可读写 Element.outerHTML //返回指定元素节点的所有HTML代码，包括它自身和包含的的所有子元素，可读写 Element.className //返回当前元素的class属性，可读写 Element.classList //返回当前元素节点的所有class集合 Element.dataset //返回元素节点中所有的data-*属性。 尺寸属性 Element.clientHeight //返回元素节点可见部分的高度 Element.clientWidth //返回元素节点可见部分的宽度 Element.clientLeft //返回元素节点左边框的宽度 Element.clientTop //返回元素节点顶部边框的宽度 Element.scrollHeight //返回元素节点的总高度 Element.scrollWidth //返回元素节点的总宽度 Element.scrollLeft //返回元素节点的水平滚动条向右滚动的像素数值,通过设置这个属性可以改变元素的滚动位置 Element.scrollTop //返回元素节点的垂直滚动向下滚动的像素数值 Element.offsetHeight //返回元素的垂直高度(包含border,padding) Element.offsetWidth //返回元素的水平宽度(包含border,padding) Element.offsetLeft //返回当前元素左上角相对于Element.offsetParent节点的垂直偏移 Element.offsetTop //返回水平位移 Element.style //返回元素节点的行内样式 节点相关属性 Element.children //包括当前元素节点的所有子元素 Element.childElementCount //返回当前元素节点包含的子HTML元素节点的个数 Element.firstElementChild //返回当前节点的第一个Element子节点 Element.lastElementChild //返回当前节点的最后一个Element子节点 Element.nextElementSibling //返回当前元素节点的下一个兄弟HTML元素节点 Element.previousElementSibling //返回当前元素节点的前一个兄弟HTML节点 Element.offsetParent //返回当前元素节点的最靠近的、并且CSS的position属性不等于static的父元素。 1.4.2Element节点方法位置方法 getBoundingClientRect() // getBoundingClientRect返回一个对象，包含top,left,right,bottom,width,height // width、height 元素自身宽高 // top 元素上外边界距窗口最上面的距离 // right 元素右外边界距窗口最上面的距离 // bottom 元素下外边界距窗口最上面的距离 // left 元素左外边界距窗口最上面的距离 // width 元素自身宽(包含border,padding) // height 元素自身高(包含border,padding) getClientRects() //返回当前元素在页面上形参的所有矩形。 // 元素在页面上的偏移量 var rect = el.getBoundingClientRect() return &#123; top: rect.top + document.body.scrollTop, left: rect.left + document.body.scrollLeft &#125; 属性方法 Element.getAttribute()：读取指定属性 Element.setAttribute()：设置指定属性 Element.hasAttribute()：返回一个布尔值，表示当前元素节点是否有指定的属性 Element.removeAttribute()：移除指定属性 查找方法 Element.querySelector() Element.querySelectorAll() Element.getElementsByTagName() Element.getElementsByClassName() 事件方法 Element.addEventListener()：添加事件的回调函数 Element.removeEventListener()：移除事件监听函数 Element.dispatchEvent()：触发事件 //ie8 Element.attachEvent(oneventName,listener) Element.detachEvent(oneventName,listener) // event对象 var event = window.event||event; // 事件的目标节点 var target = event.target || event.srcElement; // 事件代理 ul.addEventListener(&#39;click&#39;, function(event) &#123; if (event.target.tagName.toLowerCase() === &#39;li&#39;) &#123; console.log(event.target.innerHTML) &#125; &#125;); 其他 Element.scrollIntoView() //滚动当前元素，进入浏览器的可见区域 //解析HTML字符串，然后将生成的节点插入DOM树的指定位置。 Element.insertAdjacentHTML(where, htmlString); Element.insertAdjacentHTML(&#39;beforeBegin&#39;, htmlString); // 在该元素前插入 Element.insertAdjacentHTML(&#39;afterBegin&#39;, htmlString); // 在该元素第一个子元素前插入 Element.insertAdjacentHTML(&#39;beforeEnd&#39;, htmlString); // 在该元素最后一个子元素后面插入 Element.insertAdjacentHTML(&#39;afterEnd&#39;, htmlString); // 在该元素后插入 Element.remove() //用于将当前元素节点从DOM中移除 Element.focus() //用于将当前页面的焦点，转移到指定元素上 二、CSS操作类名操作//ie8以下 Element.className //获取元素节点的类名 Element.className += &#39; &#39; + newClassName //新增一个类名 //判断是否有某个类名 function hasClass(element,className)&#123; return new RegExp(className,&#39;gi&#39;).test(element.className); &#125; //移除class function removeClass(element,className)&#123; element.className = element.className.replace(new RegExp(&#39;(^|\\\\b)&#39; + className.split(&#39; &#39;).join(&#39;|&#39;) + &#39;(\\\\b|$)&#39;, &#39;gi&#39;),&#39;&#39;); &#125; //ie10 element.classList.add(className) //新增 element.classList.remove(className) //删除 element.classList.contains(className) //是否包含 element.classList.toggle(className) //toggle class style操作element.setAttribute(&#39;style&#39;,&#39;&#39;) element.style.backgroundColor = &#39;red&#39; element.style.cssText //用来读写或删除整个style属性 element.style.setProperty(propertyName,value) //设置css属性 element.style.getPropertyValue(property) //获取css属性 element.style.removeProperty(property) //删除css属性 操作非内联样式 //ie8 element.currentStyle[attrName] //ie9+ window.getComputedStyle(el,null)[attrName] window.getComputedStyle(el,null).getPropertyValue(attrName) //伪类 window.getComputedStyle(el,&#39;:after&#39;)[attrName]","categories":[{"name":"Web开发","slug":"Web开发","permalink":"http://example.com/categories/Web%E5%BC%80%E5%8F%91/"}],"tags":[]},{"title":"Excerpt 17：七个方法建立你的自信","slug":"Article/17：七个方法建立你的自信","date":"2016-02-18T16:00:00.000Z","updated":"2021-07-25T02:20:41.000Z","comments":true,"path":"2016/02/19/Article/17：七个方法建立你的自信/","link":"","permalink":"http://example.com/2016/02/19/Article/17%EF%BC%9A%E4%B8%83%E4%B8%AA%E6%96%B9%E6%B3%95%E5%BB%BA%E7%AB%8B%E4%BD%A0%E7%9A%84%E8%87%AA%E4%BF%A1/","excerpt":"","text":"人是在战胜自卑、建立自信的过程中成长的。在现实生活中，我们几乎每个人都知道自信对事业、对人生的重要性，但是知道自信的必要性，并不就等于有了自信。实际上，缺乏自信一向是困扰人们的大问题，有项针对某大学选修心理学的学生所做调查，其中有一道问题是个人最感困扰的事，调查结果显示，缺乏自信的人占75%的比率。在生活中，因循、畏缩、深陷于不安，无能感，甚至对自我能力怀疑的人，几乎随处可见。这种类型的人对于自己是否具有担负责任的感疑虑。他们也怀疑自己能否抓住有利机会。他们总认为事情不可能顺利进行，从而抱忐忑不安的心态。此外，他们也不相信自己可以拥有心中想要的东西。于是他们往往退缩而求其次，只要拥有些许的成就便觉心满意足。 那么怎样建立自信心呢? 1、要为自己确立目标确立目标既是人生成功的需要，也是激发人的潜力、最大化地创造价值的需要。所以，人生一定要有目标，有了目标，你就会想方设法为达到目标而努力，因而就不会为是否自信以及目标以外的事情所烦恼。 其实，设立目标本身就是自信心的一种表现，你在心中有了目标，你的潜意识就会调动你所有的能量，为实现目标而努力。 但在制定目标时要注意，一定要使目标切合自己的实际，不要好高骛远。否则，一旦目标实现不了，你就会因此而产生挫败感，从而打击你的自信，使你丧失信心。 2、发挥自己的长处人是在战胜自卑、建立自信的过程中成长的。天之生人，千差万别，但比较而言，人是各有所长，各有所短。你在做事的时候，一定要注意发挥自己的长处，避免自己的短处。如果你总是做不适应你的事情，老拿你的短处与别人的长处比，那你很容易产生自卑感，挫伤自己的信心。 3、做事要有计划世界上什么东西能给带来信心？成就。成就是靠什么取得的？努力。努力是取得成就的必要条件。但光努力还不行，做事还要讲究方法、讲究效率。 社会上有很多人，他们整天忙忙碌碌，但如果你问他们取得了什么成绩，他们可能答不上来。对于他们来说，忙碌是他们工作必要的表现形式，如果不忙碌，好像就不是在工作。这就是做事不讲究方法造成的。做事不讲究方法，使他们做事没有成效。久而久之，他们不只注重形式，而忽视了效率这一基本内容了。 做事有哪些方法呢？做事的方法有很多，我认为其中做好计划、按计划行事是最有效的方法之一。做好计划、按计划行事，不仅可以提高工作效率，而且可以体验工作的节奏感，使你不至于把工作当作是一种苦役；而是当作一种享受，你在工作中感受生命的脉动，把握生命的韵律。 “做事讲方法、行动有效率”是我的信条之一，工作一定要讲究方法，做好计划。 4、做事不拖延在现实生活中，一些人之所以缺乏自信，是因为挫折长期积累的结果。就是因为在日常一些小事情上没有处理好，不断积累，结果不断地给自己增加心理压力，久而久之，就会在心理产生一种失败感，使自己觉得自己什么事情也做不好，因而缺乏自信。所以，建立自己的最好办法，就是认真对待每一件小事。凡是自己认为应该做的事情，不论大小，都要认真对待，把它处理好，首先给自己一个好的交待，让自己满意。就是对于建立自信来说，没有小事。 做事讲方法，行动有效率。要做到这一点，就要养成做事专心致志的工作作风，同时，养成日事日毕的好习惯。不让事务性的工作压身、缠身，心理就会感到轻松，就等于去掉了自卑存在的理由，就很容易培养自信心。 5、轻易不要放弃信心是在不断的努力、不断的进步中逐步建立的，中途放弃、半道而废，是造成我们缺乏自信的重要原因。所以，凡是我们认为应该做而且已经着手做了的事情，就不要轻言放弃。在你放弃的时候，你可能会感到很轻松，但事情过后，挫折和失败就会像一个牛王背孙悟空一样，不断地增加你的心理压力，直到你产生内疚，产生自卑。所以，千万不要为自己找任何理由放弃你应该做和正在做一事情。 爱迪生曾经尝试用1200不同的材料作白炽灯泡的灯丝，都没有成功。“你已经失败了1200次了。”有人这样对他说。可是爱迪生不这么认为，他充满自信地说：“我的成功就在于发现了1200种材料不适合做灯丝。”他并没有放弃实验，而是继续努力，最终找到最适宜做灯泡的灯丝，获得了成功。 所以，我认为，坚持到底是一种最值得提倡和嘉奖的品质。居里夫人曾经说过：“生活对于任何一个男女都非易事。我们必须要有坚韧不拔的精神，最要紧的，还是我们自己要有信心。我们必须相信，我们对一件事情具有天赋的才能，并且无论付出任何代价，都要把这件事情完成。当事情结束的时候，你要能够问心无愧地说已经尽我所能了。一个人只要有自信，那么他就能成为他所希望成为的人。” 6、学会自我激励人的自信是一种内在的东西，需要由你个人来把握和证实。所以，在建立自信的过程中，一定要学会自我激励。 要有勇气面对别人的讥讽和嘲笑自我激励的办法之一，是运用临时性的激励办法。比如，在你遇到重要的事情，需要鼓起勇气来面对时，你可以说：“造物主生我，就赋予我无穷的智慧和力量，凡事能做。”这样可以增强自己内在的信心、激发自己内在的力量，从而成功地达到你的目的。当然，这种激励只是一种临时的办法，要想长期在自己的内心建立自信，那就需要不断地激励自己，直到形成习惯。德国人力资源开发专家斯普林格在其所著的《激励的神话》一书中写道：“人生中重要的事情不是感到惬意，而是感到充沛的活力。”“强烈的自我激励是成功的先决条件。”。 所以，学会自我激励，要给自己一个习惯性的思想意念。如果你在内心经常存有失败的念头，你便已经输掉了一大截。相反地，倘若你对自己充满信心，并具有主宰自我的意志与习惯，那么即使面对逆境，也能泰然自若。这种强而有力的信心，事实上便是来自于自信。换言之，自信是力量增长的源泉。 7、不要让自己成为别人凡是我们认为应该做而且已经着手做了的事情，就不要轻言放弃。模仿是上帝赋予我们的秉性，也是我们的能力之一。在学习、工作之初，特别是从事艺术职业的人，在从业之初，模仿是可以的，甚至是必要的。但是，造物生你，是让你成为真正的自己。千差万别、各具特色面孔的本身，就说明上帝是以多样性来塑造这个世界的。所以，任何雷同，都会使其中的一方失去其存在的意义，所以，你可以模仿别人，但千万不要让自己成为别人，你就是你自己，你一定要找到你自己的独特之处，造就自己、显示自己。如果一个人想要成为别人，那么，他就会生活在别人的影子里，看不到独立的自己，那他就永远也不可能找到自信。","categories":[{"name":"Article","slug":"Article","permalink":"http://example.com/categories/Article/"}],"tags":[]},{"title":"Excerpt 16：照临专栏","slug":"Article/16：告诉你，让你的生命更加美好的秘密","date":"2016-02-11T16:00:00.000Z","updated":"2021-07-24T11:23:24.000Z","comments":true,"path":"2016/02/12/Article/16：告诉你，让你的生命更加美好的秘密/","link":"","permalink":"http://example.com/2016/02/12/Article/16%EF%BC%9A%E5%91%8A%E8%AF%89%E4%BD%A0%EF%BC%8C%E8%AE%A9%E4%BD%A0%E7%9A%84%E7%94%9F%E5%91%BD%E6%9B%B4%E5%8A%A0%E7%BE%8E%E5%A5%BD%E7%9A%84%E7%A7%98%E5%AF%86/","excerpt":"2014.09.24","text":"2014.09.24 智慧启引：『如果，我们不能意识到自己的问题，如果，我们不改正自己错误的方式，从而去花些时间关爱自己的身体和心灵，那么，我们必将走向一个结果，更多的烦恼、焦虑，更多的痛苦，并最终一无所有！当我们开始关爱自己的身体和心灵，我们便能找到让心灵安住的方法。』 告诉你，让你的生命更加美好的秘密发现生命美好的秘密：关爱自己的身体和心灵 我们常常不知道自己的心在哪里！很多时候，如果你体会感觉自己的心，你会发现，你的心总是飘乎不定，正如我们的心脏从生命开始，就跳动不停，我们的心灵，无时无刻不在动荡。如果你想抓住它，或者说，如果你想让它安住在一个地方，你会发现，那是多么难的一件事。你会感受到心的“定”是多么难，多么重要的功课。 这不是说，我们的心就永远定不下来，我们无论如何也不能让自己的心安住。而是说，动荡不定是心的本性，我们必须找到正确的方法才可以让我们的心安住下来。 而说到这里，我们有了一个问题，那就是，我们为什么要让自己的心安住下来？或者说，让心安住，有什么意义和作用？ 想想看，太多的时候，我们心烦意乱，不知所措，甚至焦虑不安，这都是什么？是不是我们的心的一种不好的状态？就如一个捣蛋的家伙，我们想尽办法想让它静下来，不要捣乱，但它却依然我行我素，弄得我们鸡犬不宁。此刻，我们多想让自己平静下来，但却无能为力，只让它把我们折腾得精疲力尽。 是的，这是问题，但是，我们有没有想过，我们的心为何这么捣乱，为何这样不安？我们又用多少时候与它相处？用多少时候关心它，安抚它，照顾它呢？试想，一个很久都没有被照顾关爱的孩子——心，它又怎么能安得下来？它又怎么能没有情绪？又怎么能没有抱怨、甚至愤怒？它又怎么能不捣乱呢？ 朋友们，请认真想想看，我们一生中最亲密，最铁杆支持我们，与我们风雨同路的两个最重要的伙伴：我们的身体和我们的心灵，我们花了多少时候去关爱它们，与他们相处，照顾它们，在乎它们呢？我们总是去努力追逐，我们总是想要更多，但我们却对自己最重要的支持者和伙伴从不理会，我们只知道役使它们！ 太多的时候，我们就如一个贪婪、无情、冷酷的可怜虫，用各种抠门的办法压榨着我们的身体和我们的心灵，满足自己的各种欲望，直到，我们的身体先倒下去，我们的心灵千疮百孔，伤痕累累……最终，我们一无所有！ 如果，我们不能意识到自己的问题，如果，我们不改正自己错误的方式，从而去花些时间关爱自己的身体和心灵，那么，我们必将走向一个结果，更多的烦恼、焦虑，更多的痛苦，并最终一无所有！ 而，当我们开始关爱自己的身体和心灵，我们便能找到让心灵安住的方法。我们的身体和心灵，这是上天给我们最神奇，最宝贵的礼物，当我们开始懂得珍视它们，我们便能发现生命美好的秘密。 你所感知的世界，其实是假象 智慧启引：『我们是什么样的人，在很大程度上取决于我们拥有一个怎样的心灵。同时，我们的身体的状态，也在某种程度上影响我们的心灵，而我们心灵的状态，也同样会影响我们身体的状态。我们的身体和心灵彼此依存，互相影响，不可分离，他们是一个整体——作为一个正常人，的两部分。我们要健康，我们要幸福快乐的人生，我们要快乐的生活，那么，我们必须首先拥有两样健康，那就是身体的健康和心灵的健康。』 身心健康：你感知的外部世界是正确的吗？ 你感受到的，是真实的吗？或许你会说，我感受到的当然是真实的，感受难道还会有假吗？ 事实上，感受到的是怎样的，很大程度上受我们的身体状态决定。 你想象这样一种情形，我们每个人，不仅仅是一，而是一而二，二而一的一个整体，我们自己是由两个自我：一个身体，一个灵魂，或者说思想，或者说心灵。我们离了身体，生命便消失，没有了身体，灵魂或者意识，或者心灵都无法存在，而同样我们失去了意识，就成了植物，那也或者从某种程度上不能称其为人。也就是说，我们人要好好地存在必须有完整安好的身体和心灵，也就是说，我们要身心健康。 我们是什么样的人，在很大程度上取决于我们拥有一个怎样的心灵。我们有一个善的心灵，那我们就会是一个善良的人，我们有一个智慧的心灵，我们就是一个智慧的人，我们有一个消极的心灵，我们就会成为一个消极的人。 但，同时，我们的身体的状态，也在某种程度上影响我们的心灵，而我们心灵的状态，也同样会影响我们身体的状态。也就是说，我们的身体和心灵彼此依存，互相影响，不可分离，他们是一个整体——作为一个正常人，的两部分。 那么，我们的身体会怎样影响我们的心灵呢？你想这样一种情况，当一个人肝火旺的时候，这是他的身体出现了问题，他就会表现为一个脾气暴躁，容易发火的人。而这种身体问题的影响，往往是当事人无法完全控制的，也就是，你所听到的，那些经常发火的人所说的：“我也不想这样，但，到那个时候，我就是控制不住，要发火！”是的，控制不住，因为他的身体出了问题。 再比如说，同样的天气，有些人不会感觉热，而有些人却感觉闷热异常，甚至于让他们烦躁不安。也就是说，同样的一种天气，不同的人，会感受到不一样的感觉。真的是天气热吗？那为什么其它人不感觉热？这是因为，这类人的身体内出现了问题，比如说，阴虚，心火旺的时候，就会出现这种情况。 你可能会问：确实是这样，但那又说明什么呢？我想通过这两个现象说明，我们感受到的这个世界，或者说我们感受到的某件事是什么样的，很大程度上会受我们身体状态的影响，而这种感受又会进一步影响我们心灵的状态，最终让我们表现出一种不太正常的行为、情志状态。 换个角度来说，当我们有些时候，感觉到很伤心，或者感觉很生气，或者感觉压抑，我们首先要懂得去检视自己的身体是否出现了某种不平衡的状态，而不是完全依照我们的感觉去采取相应行为，或者确认一件事，一个人，及外部世界。要懂得在这种时候观照自己，看看，是不是自己的身体出现了偏差，如果有，要意识到，我们的那些感受可能是不正确的，也就是因为我们身体的原因，我们误解了外部世界、他人或者事件。 然后，试着去调养自己的身体，使他恢复健康。当然，所谓当局者迷，身体作为我们本身的一部分，这样的检视和观照是不容易的，虽然不容易，我们还是应该试着去做，原因很简单，没有人愿意被欺骗——被自己欺骗。 你可以想象我们心灵与身体的关系：我们心灵存在于身体之内，必须通过我们的身体去与外部世界沟通、交流。这就如，我们的身体是我们的一艘宇宙飞船，我们的心灵乘坐着这艘宇宙飞船生活在这个世界上，而我们的心灵与这个世界的信息沟通、了解都必须通过我们的身体这艘宇宙飞船所提供的（注意不是我们的心灵提供的）眼耳鼻口身这些“窗口、设备”。试想，我们的心灵驾驶着我们的身体这样一个宇宙飞船，当我们的身体这艘飞船本身出了故障，那么自然很多时候提供给我们使用与外部沟通的“窗口设备”同样会异常，此时，我们看到一个怎样的世界？ 当然是不正确的，我们与外界的交流沟通自然也是出问题的。就如，我们与另一种语言的人沟通，需要一个翻译（就如我们的眼耳鼻口身），当这个翻译出了问题，我们所表达的信息会被翻译成其它的意思，同样，我们听到的信息，也可能不是原来的本意。在这样一种混乱的状态之下，我们的心灵如一个瞎子，最终会被迷惑，然后受错误信息的影响而变得可能不正确。而此时，我们这个人也会给外界另外一种样子、形象。或许，每一次，我们的想法都是好的，出发点都是好的，但，他人感受到的却是不好的。 我们要健康，我们要幸福快乐的人生，我们要快乐的生活 所以，我们要健康，我们要幸福快乐的人生，我们要快乐的生活，那么，我们必须首先拥有两样健康，那就是身体的健康和心灵的健康，也就是说，我们要驶着宇宙飞船在这个世界上生活得好，就得让我们的身体宇宙飞船健康良好的、让我们的心灵这个驾驶员健康良好，而且这双方要和谐协作，共同完成，否则失去任何一方的支持，这趟生命之旅都将是充满不幸和痛苦的。 愿我们都能珍视自己的身体健康和心灵健康，从而使我们的生命之旅充满美好 你在生谁的气？放过自己，让自己好受一些情绪，我们每个人每天都与之相伴，情绪让我们快乐，同样也让我们悲伤，痛苦。而在所有情绪中，或许“生气”是其中对我们影响比较大，而且经常出现的一种。 我们每天都可能会生气，但，我们是否想过，当我们生气的时候，我们到底在生谁的气？ 你在生谁的气？放过自己，让自己好受一些 你可能会说，这还用问？生气，当然是别人惹我的喽！然而，且慢，我且要问：真的是这样吗？真的是别人让你生气吗？有没有想过，太多的时候，我们是在自己给自己制造生气，我们自己不放过自己，我们自己折磨自己！若你还是对此有疑问，那我们来看这样一个场景： 小悦在一家网络公司上班，一天，她刚一进公司，就听到同事小王在与另一个同事抱怨：“小悦这个人，人满善良，但心眼太小，每次跟她一起做事，我都受不了，那个压抑！甚至让我有撞墙的冲动！……”小悦听到这话，气不打一处来，直接冲过去气愤的说：“你是什么好东西吗？！跟你做事，我还倒霉呢！！”然后，怒气冲冲回到自己的工作间，她越想越生气，越想越郁闷，“说我小心眼？你是什么东西？还背后说我坏话！……” 此后，在很长的时间里，小悦都对小王没好气，看见他就烦，但，他们的工作性质又必须经常合作，这样一来，很多时候的合作工作就变成了折磨。 请问，小悦在生谁的气？是谁在惹小悦生气？真的是小王吗？ 想想看，当小王说了小悦的一句“坏话”，小悦听到后，很生气，这是当时的正常反应，每个人遇到这样的情绪，都会首先在内心生起一种不舒服的感觉，这就是情绪，就如，我们的心是一面湖水，这情绪，就是被石子或者其它东西激起的波浪，只要我们活着，我们的心就经常会有波浪，而这波浪本身不会让我们痛苦，它就仅仅是一个存在，因为一个石子（比如小王说的那句抱怨）而起的波浪，它可能只是让我们的内心不平静，它因石子而生起，只要我们不做任何干涉，这波浪很快就会自然消逝，那时我们的内心也就又能回复平静。 但是，我们常常在情绪来的时候做了什么呢？就如小悦，我们在内心起波浪的时候，总是试图做些什么，或者我们在小石子后，自己再弄一个大石头，让湖水的小波浪变成巨浪滚滚，最终造成对我们的损害（过大的情绪力量会损害我们的身体）；或者，我们试图阻止这波浪，使其不要产生。而这行为都是不好的，前者把让我们本是小小的情绪波浪变成巨浪，我们在帮助伤害我们的人一起更暴力的伤害我们自己；而后者，却在做一件无能为力的事，直到让自己精疲力尽。想想看，湖水，总会起波浪，我们的心也总会因一些原因起波动，这些本是自然的事，我们试图去阻止自然发生的事，只能是空耗力气，而让自己疲惫不堪。 当小王抱怨一句话之后，小悦的内心生起情绪的波浪，只要她随这波浪发生（在情绪发生的这时期，不要去思考，不要去分析，不要去判断，不要去决定），不要去干扰情绪的波浪，不要去阻止情绪的波浪，很快这波浪就会过去，消逝，自己的内心又会恢复平静。而这时她已经冷静，可以思考：“小王说的是真的吗？如果是真的，那我应该改正，并且感谢他告诉我这个不足；如果不是真的，那我不理会就是了，我何必为别人的假话而费心呢？” 真正让我们生气，不是别人，而恰恰是我们自己 如此，这件事，就会只是小悦生活中的一个小小的插曲，不会对小悦的生活和工作及身心造成什么影响。 然而，我们看到小悦做了什么？她在小王投的小石子之后，拿了一个更大的石头投了进去（虽然，她直接指责了小王，但她指责的时候自己的情绪已经很激动，自己也更生气，甚至愤怒），此时，她的心湖自然是波涛汹涌，巨大的情绪波浪，自然会有巨大的破坏力，会让人失去理智，并最终伤害他人，更深地伤害自己。我们还会发现，小悦这还没完，在此后的很长时间，她不断的向自己的心湖投入负面的石子，不断搅动自己的情绪波浪（小王只是说了一句话，但小悦却一直生气，表面上是生小王的气，实际上，她每天都想出一些讨厌的小王的细节和理由，无论过去的，无论现在的，以此，来让自己感觉到讨厌小王，而生气），弄得自己每天都内心不平静，不好受。你能说，是小王在不断伤害，或者说惹小悦生气吗？不是别人，其实，正在小悦自己，在不断地让自己生气，不断地伤害自己，让自己不好受。小王让她生气，她看到小王就生气，这只是表现她的解释，实际上的状况，却是自小王说出那句抱怨的话之后，此后的所有情绪都是小悦在不断制造。 朋友们，如果你认真体会，你会发现，很多时候，真正让我们生气，不是别人，而恰恰是我们自己。正如那句很熟悉的话：生气是拿别人的问题，惩罚自己。是的，做一个有智慧的人，不要再惩罚自己了，放过自己吧！ 当你情绪来的时候，你要用心去体会，如果你不选择放过自己，那你就无法走出情绪的折磨，我们生气，我们痛苦，不是别人造成，是我们自己不放过自己。 下次，当你生气的时候，请问问自己：“我在生谁的气？我愿意放过自己，让自己好受一些吗？”","categories":[{"name":"Article","slug":"Article","permalink":"http://example.com/categories/Article/"}],"tags":[]},{"title":"Excerpt 15：如果楼市泡沫破灭会怎么样？","slug":"Article/15：如果楼市泡沫破灭会怎么样？","date":"2016-02-04T16:00:00.000Z","updated":"2021-07-23T12:08:08.000Z","comments":true,"path":"2016/02/05/Article/15：如果楼市泡沫破灭会怎么样？/","link":"","permalink":"http://example.com/2016/02/05/Article/15%EF%BC%9A%E5%A6%82%E6%9E%9C%E6%A5%BC%E5%B8%82%E6%B3%A1%E6%B2%AB%E7%A0%B4%E7%81%AD%E4%BC%9A%E6%80%8E%E4%B9%88%E6%A0%B7%EF%BC%9F/","excerpt":"","text":"一旦楼市崩盘将会发生下面的连锁反应： 在没有找到新的支撑中国经济动力引擎的情况下，楼市崩盘必然会导致经济全面滑坡； 一旦房子失去了价值，那么超发的那些货币不会凭空消失，势必会流入市场，那样物价将会飞涨，老百姓的生活成本将会空前提高，别说到时候买房你能买起粮就不错了（现在买不起房的到时候由于阶层原因，将会优先下岗）。 在此，举一个例子，赵先生在北京购买了一套市场价1200万元的房产，银行评估价1000万元，银行贷款800万元，首付400万元。2017年8月，这套房屋市场价跌至900万元，银行要求赵先生补足100万元抵押物或提前偿还100万元贷款，否则将没收拍卖房产。但赵先生难以补足担保物或提前偿还贷款。由此，银行没收房产，拍卖房产得750万元（通常都大幅低于市场价）。赵先生除了房子被拍卖后，还欠下50万元的贷款。 如果楼市崩盘，你的房子会怎么样？首先，因为你没有还清贷款将会继续承担法律和经济责任。贷款买房者“断供”，就属于主动违约，违反了贷款合同中的约定条款，就要承担相应的违约责任。银行会冻结房产，并且还会要求支付违约金。除此之外更可恨的是，银行仍然要求归还房贷。房贷和违约金加在一起的债务，“断供”者将背负一生。想想你没有工作，然后还欠银行几百万贷款是什么样的滋味。 其次，作为不守信用的“断供”者还将面临长期的信用问题，在个人信用方面是一个严重的污点，今后再想贷款都会受到种种制约，几乎是不可能的。别忘了银行只办锦上添花的事情，雪中送炭可不是他们的作风。 最后，你作为“断供”者可能血本无归。伴随房价大降、二手房交易受阻的情况，“断供”房经过银行诉讼、法院拍卖大幅降低价格，扣除利息、违约金诉讼、拍卖等，极有可能出现拍卖所得已不足以归还贷款本金及利息等。 如果你还不了贷款不要紧，银行的本性就暴露出来了，如果之后银行发现业主还有其他资产，可以向法院提出对这些财产进行强制执行，用以偿还剩余的钱款。 试想，因为楼市崩盘，你成了无家可归者，而且还欠银行一屁股债，如果银行发现你还有个手表和自行车也要给你抢走，是不是很有画面感啊…… 其实这些恶果是不是我们早就种下，才有了这不可想象的一幕发生。人性就是太贪婪，让房价如此癫狂，到头来恐怕害的还是我们自己。楼市，迟早将成为中国经济不能承受之重，但愿我们有改革的勇气能把损失降到最低。 在泡沫时期的所有逻辑都会在泡沫破灭后被证伪，几十年后回过头来看会觉得自己是多么的愚蠢和无知。 房地产泡沫破裂后，经济崩溃，大批企业倒闭，大量国民失业，背着巨额负债，无法偿还贷款，被银行没收查封房产 有些人可能看明白了，“雪崩之后，没有一片雪花是无辜的。贫富差距可以拉近，但是受伤最深的还是社会普通人民。","categories":[{"name":"Article","slug":"Article","permalink":"http://example.com/categories/Article/"}],"tags":[]},{"title":"Excerpt 14：制度的力量","slug":"Article/14：制度的力量","date":"2016-01-28T16:00:00.000Z","updated":"2021-07-23T12:06:48.000Z","comments":true,"path":"2016/01/29/Article/14：制度的力量/","link":"","permalink":"http://example.com/2016/01/29/Article/14%EF%BC%9A%E5%88%B6%E5%BA%A6%E7%9A%84%E5%8A%9B%E9%87%8F/","excerpt":"","text":"第一个故事：合格率的检查制度 二战期间，美国空军降落伞的合格率为99.9%，这就意味着从概率上来说，每一千个跳伞的士兵中会有一个因为降落伞不合格而丧命。军方要求厂家必须让合格率达到100%才行。厂家负责人说他们竭尽全力了，99.9%已是极限，除非出现奇迹。军方（也有人说是巴顿将军）就改变了检查制度，每次交货前从降落伞中随机挑出几个，让厂家负责人亲自跳伞检测。从此，奇迹出现了，降落伞的合格率达到了百分之百。 第二个故事：付款方式 英国将澳洲变成殖民地之后，因为那儿地广人稀，尚未开发，英政府就鼓励国民移民到澳洲，可是当时澳洲非常落后，没有人愿意去。英国政府就想出一个办法，把罪犯送到澳洲去。这样一方面解决了英国本土监狱人满为患的问题，另一方面也解决了澳洲的劳动力问题，还有一条，他们以为把坏家伙们都送走了，英国就会变得更美好了。 英国政府雇佣私人船只运送犯人，按照装船的人数付费，多运多赚钱。很快政府发现这样做有很大的弊端，就是罪犯的死亡率非常之高，平均超过了百分之十，最严重的一艘船死亡率达到了惊人的百分之三十七。政府官员绞尽脑汁想降低罪犯运输过程中的死亡率，包括派官员上船监督，限制装船数量等等，却都实施不下去。 最后，他们终于找到了一劳永逸的办法，就是将付款方式变换了一下：由根据上船的人数付费改为根据下船的人数付费。船东只有将人活着送达澳洲，才能赚到运送费用。 新政策一出炉，罪犯死亡率立竿见影地降到了百分之一左右。后来船东为了提高生存率还在船上配备了医生。 第三个故事：粥的分配制度 七个人住在一起，每天分一大桶粥。要命的是，粥每天都是不够的。一开始，他们抓阄决定谁来分粥，每天轮一个。于是乎，每周下来，他们只有一天是饱的，就是自己分粥的那一天。后来他们开始推选出一个口口声声道德高尚的人出来分粥。 大权独揽，没有制约，也就会产生腐败。大家开始挖空心思去讨好他，互相勾结，搞得整个小团体乌烟瘴气。然后大家开始组成三人的分粥委员会及四人的评选委员会，互相攻击扯皮下来，粥吃到嘴里全是凉的。 最后想出来一个方法：轮流分粥，但分粥的人要等其它人都挑完后拿剩下的最后一碗。为了不让自己吃到最少的，每人都尽量分得平均，就算不平，也只能认了。 大家快快乐乐，和和气气，日子越过越好。 第四个故事：互助与共赢的天堂 有一位行善的基督教徒，去世后向上帝提出一个要求，要求上帝领去参观地狱和天堂，看看究竟有什么区别。 到了地狱，看到一张巨大的餐桌，摆满丰盛的佳肴。心想：地狱生活不错吗？过一会儿，用餐的时间到了，只见一群骨瘦如柴，奄奄一息的人围坐在香气四溢的肉锅前，只因手持的汤勺把儿太长，尽管他们争着抢着往自己嘴里送肉，可就是吃不到，又馋又急又饿。 上帝说，这就是地狱。 他们走进另一个房间，这里跟地狱一般无二，同样飘溢着肉汤的香气，同样手里拿着的是特别长的汤勺。但是，这里的人个个红光满面，精神焕发。原来他们个个手持特长勺把肉汤喂进对方嘴里。 上帝说，这就是天堂。 同样的人，不同的制度，可以产生不同的文化和氛围以及差距巨大的结果。 这，就是制度的力量！ 补充故事一： 一个美国教授。每一次来中国都是住陋室，穿小巷，不停地采访、记录，一本牛津出版的最新学术著作就是这样完成的，其工作精神不由你不敬佩。 但他也有个对他来说出格的嗜好：到中国的第一天，总是让朋友陪他去软件市场，寻找中国盗版的美国软件，物美价廉，乐而忘返。作为中国人，我们也许能理解甚至支持这位美国教授的嗜好，那些刚出炉的美国软件，如果在北美本地买，实在是太贵了，贵到连教授也买不起的地步。 但私下我们也会想：在美国的制度环境下，能允许他这么做吗？看来美国人和任何其他民族的人一样，既不是天使，也不是魔鬼，一旦脱离本土制度约束，人性中的弱点都会出现，甚至放纵。 补充故事二： 一位香港的朋友说，一群西方人从罗湖出境，跟大陆有的人一样，见排队就插队，一点儿没有文明习惯；跨过罗湖桥，到香港一端入境，百步之外，人性突然大变，规规矩矩地排起队来。 这就是制度的力量！无论高傲的美国人、优雅的法国人，一旦脱离制度约束，都是近朱者赤，近墨者黑。 一个好的制度可以使人的坏念头受到抑制，而坏的制度会让人的好愿望四处碰壁。建立起将结果和个人责任和利益联系到一起的制度，能解决很多似乎无法解决的社会问题。","categories":[{"name":"Article","slug":"Article","permalink":"http://example.com/categories/Article/"}],"tags":[]},{"title":"Excerpt 13：57条创业经验","slug":"Article/13：57条创业经验","date":"2016-01-21T16:00:00.000Z","updated":"2021-07-23T12:04:22.000Z","comments":true,"path":"2016/01/22/Article/13：57条创业经验/","link":"","permalink":"http://example.com/2016/01/22/Article/13%EF%BC%9A57%E6%9D%A1%E5%88%9B%E4%B8%9A%E7%BB%8F%E9%AA%8C/","excerpt":"","text":"总部位于旧金山的云计算数据库服务公司RethinkDB创始人斯拉瓦·阿克麦切特（SlavaA khmechet）日前发表文章，总结了57条创业经验，其中涉及团队、融资、市场、产品、营销、销售、产品开发、公司管理、个人状态等9个方面。 以下是阿克麦切特总结的57条创业经验： 那些才华横溢、经验丰富的人们已经写过不少创业经验，我想要再添加一些内容。我用过去四年的艰辛总结出了这些经验。如果你打算创业，希望你的路平坦一些。 团队建设 1、如果你的2到4人团队无法在6个月到1年内实现盈利，那么肯定出问题了。除非是你自己选择不盈利，但这必须是你的选择，而非市场原因。 2、在创始人中间平均分配股票。 3、一直有一个期权行使计划。 4、依据一致意见做出大多数决定，但唯一一位CEO拥有最终决定权。从第一天就明确如此。 5、你作为CEO的权威是赢得的，因为你是从无到有。如果赢得胜利，这种权威会随之增长，反之则会下降。不要试图滥用你没有赢得的权威。 6、士气是真实存在的，而且自身能够永久存在。如果长时间没有胜利，你的投资者、员工、家人，以及你自己都会失去信心。努力工作，不要陷入这种境地。 7、谨慎选择最初团队成员。所有人都应当开心共事，至少拥有一项企业相关的技能，效率极高且务实。所有人都应当有产品意识，在产品与公司方面拥有共同的理念。 8、你工作采用的标准，就是你所接受的标准。选择一小部分对你最重要的、没有谈判余地的规定，并毫不松懈地予以执行。 9、解雇那些难以共事、没有效率、不可靠、没有产品意识，以及不务实的人。迅速解雇。 10、有些磨擦是好事，但磨擦过多很要命。解雇那些制造太多磨擦的人。好工作＋坏习惯=你被解雇了。 资金筹集 11、如果在某一轮融资中你不得不放弃公司15%的控制权，那么公司肯定在某个方面出了问题。这是可以挽救的，但不是理想做法。 12、如果你还没有赢得人们的尊重，那么依靠吸引力融资要比依靠讲故事融资容易得多。如果你不得不依靠讲故事融资，但却没有自己的声誉，那么肯定有问题。 13、将自己的融资谈判当作一个至少可成活的产品，推出去之后，每次见面都重复。 14、大多数投资者的建议有助于公司优化和发展，虚心听取。 15、大多数投资者的建议无助于开发一款神奇的产品，没有人能帮你开发神奇产品，这是你自己的事情。 16、不要留恋于融资过程。事成之后，赶紧前进。 市场方面 17、最好的产品一定不是在真空中产生的，它们成功的原因在于它在某个领域胜出了其他所有产品。找到自己的这个领域，做最好的那个。如果没有这样一个领域，那肯定有问题。 18、投入到一个既能立即见效，又拥有巨大发展潜力的问题上。如果它无助于改善大量人群的生活条件，那就不值得去做。例如，谷歌(微博)填补了人们日常生活中一个巨大的空白，令数十亿人受益。它改变了人们的行为方式和认知周围世界的方式。努力去做这款拥有如此规模的产品。 19、刚开始树立一个正确的理念。从经验来看，这个时候你只能依此而动。 20、要知道，市场瞬息万变，多个团队会几乎同时想出同一个有价值的理念。 21、接受新观念，因为这是其他社交或技术改变促成的。尽早步入正轨，但确保技术已经足以使产品变得更好。 22、如果有一个过去未奏效的理念，而且没有社交或技术变革使其现在变得可行有效，那么认定它会失败。（这是又一个市场假设理论，如果一个理念可以取得成果，那么它已经实施了。只有情况发生变化之后，它才值得再次尝试。） 23、告诉市场，不接受你的产品意味着失去战机。坚持自己的理想和信念，但尊重客观趋势。如果你坚信世界需要诗歌，那么卖掉你的嘻哈歌曲，保留诗歌集。 产品方面 24、产品观念意味着一切，尽快掌握这种观念。擅长产品技术并不意味着擅长产品管理。 25、不要生产已经存在的东西。消费者不会因为它是你的就会购买。 26、确保自己知道用户别无选择而转向你的产品的原因，以及他们不会转回其他产品的原因。不要太相信自己，尽可能检验自己的假设。 27、对每个产品功能提两个问题。人们会不会因为这个功能而去购买产品？人们会不会因为缺少这个功能而不去购买？如果答不出后面这个问题，就答不出前面的问题。如果两个问题的答案都是否定的，那就不要去开发这个功能。 28、生产一款尽管有不足，人们也愿意买的东西，而不要生产没有不足之处于是人们应当去买的东西。前者令人愉悦并支付购买，后者无法令人愉悦。 29、注意“鸡”与“蛋”的产品关系，确保自己的产品能够立即使用。 30、注意那些可能购买你的产品的人们，以及那些只发评论的人们之间的区别。多关注前者，忽略后者。 营销方面 31、产品至上。如果人们喜欢你的产品，最小规模的发布会也会引起关注。如果人们不喜欢产品，再大的营销也无济于事。 32、在产品中内置营销。如果可能的话，制造YouTube效应（人们不断地在你的平台上发布有趣的内容）和Facebook效应（如果用户使用了产品，他们的朋友也会使用）。 33、看看电影《寿司之神》，以这种方式做营销。选择一小部分任务，持续开展工作，每天都有新进步。 34、定期对效率进行再评估。撤消无效做法，加倍有效做法。 35、不要猜，要去考察。 36、面向你的用户去营销。吸引那些不会购买你产品的人们的注意力，实际上就是浪费时间与金钱。 37、如果你的竞争对手不说反话，你就不要去说。例如，你的竞争对手说不出你的产品很慢，那么赞扬自己产品速度快就是无效营销。另一方面，你的竞争对手称自己的软件是面向某一些程序员的，那么你就说你的软件是面向另一部分程序员的，这就是不错的营销。苹果可以不遵守这个惯例，但你不能。 38、不要对你的用户或竞争对手使用骄傲自大的语气，这不助于你销售产品，反而会破坏你的良好声誉。 39、不要对批评不屑一顾。相反，用批评来改进自己的产品。如果你认真采纳其批评建议，那么最严厉的批评者往往会成为最强有力的支持者。 销售方面 40、销售能改变一切。如果产品销售出色，那么你即便搞砸了其他事情，也是可以弥补的。 41、产品至上。对于一款所有人都想要的产品，销售起来很容易，回报也很丰厚，但销售一款没有人需要的产品则是一个令人痛苦的数字游戏。 42、如果产品介于两个极端之间，那么不懈地去追求这个数字游戏吧。即便销售不好，你也会获得宝贵的经验。 43、致力于提高效率。在一位不可能购买你产品的用户身上花费时间，无异于什么工作都没有干。 44、引进比输出更容易。如果可能的话，生产一款客户向你表达了需求，并且愿意为之付费的产品。 产品开发 45、开发速度很重要。 46、不要复杂，产品越简单，你出货的可能性越大，你迅速修复问题的可能性也就越大。 47、选择一种付出20%就能获得80%回报的执行方式。 48、只要有可能，就选择现货定制的零部件。 49、采用快速的开发速率，确保这个速率不会超过一到两周。 50、关注长远项目。如果无法保持速率，就不要去做开发。 51、关注长期的修改。如果无法在速率中修改，就不要去做。 52、如果你不得不做不符合产品速率的东西，那么在这个过程中设置尽可能多的结构与评估轮次。 53、在错误的东西上工作一个月，相当于一个月没有上班。 公司管理 54、不要花太多时间来选择办公楼、会计、文员、门卫、家具、托管工具等。相信条件已经够好，不要犹豫地前进。 55、花时间找一位优秀的、不是很昂贵的律师。这很有必要。 个人状态 56、尽自己最大的努力，给你的创业公司贴上自己的标签（你可能会失败，但要尝度）。每天都尽全力工作，然后休息。这样在尘埃落定之后，你会因自己做过的选择而感到骄傲，无论结果如何。 57、每隔一段时间，就离开一次。去徒步旅行，看望另一座城市的家人，跳舞，玩象棋，打网球，任何事情。你会让你更有效率，让你周围的人们感觉快乐。","categories":[{"name":"Article","slug":"Article","permalink":"http://example.com/categories/Article/"}],"tags":[]},{"title":"Excerpt 12：中国社会九大阶层划分","slug":"Article/12：中国社会九大阶层划分","date":"2016-01-14T16:00:00.000Z","updated":"2021-07-23T11:59:56.000Z","comments":true,"path":"2016/01/15/Article/12：中国社会九大阶层划分/","link":"","permalink":"http://example.com/2016/01/15/Article/12%EF%BC%9A%E4%B8%AD%E5%9B%BD%E7%A4%BE%E4%BC%9A%E4%B9%9D%E5%A4%A7%E9%98%B6%E5%B1%82%E5%88%92%E5%88%86/","excerpt":"","text":"中国社会的人群划分为 9 个阶层，1—3 级是统治阶层，是最大的既得利益者；4-6 级属于中产阶级；7-9 级是中国社会的底层，9 级是这个社会最悲惨的阶层。 1 级：以在任委员、退休常委为代表，和 2 的区别在于，1 对全国局势有控制能力 2 没有。 2 级：以在任实权省部级干部、退休委员，部份大权贵、大富商、大银行家为代表。和 3 的区别在于，2 能影响国家政策 3 不能。 3 级：以一般省部、副省部、特别实权的局级，或是大企业主、一般权贵富商、名牌大学校长、中等银行家为代表。和 4 的区别在于，3 能够影响一个地区或者行业的发展，4 不能。3 以马云、马化腾等为体制外的顶峰，3 其实是行业精英或地区体制精英。 1—3 级是中国的上层社会，普通人非奇遇不能进。 4 级：以一般地厅级、实权县处级、院士、大教授、高级职业经理人、名医生、名律师、高校校长、演艺明星、知名作家、中等企业主、小银行家之类为主。普通人通过奋斗最多能够达到这个层次。比如惠普谷歌大中国区总裁、范冰冰之类就是体制外本级的顶峰。4 和 5 的区别在于，4 和上层有千丝万缕的联系，5 没有。 5 级：小企业主、普通处级副处级或实权科级干部、教授、中等职业经理人、大城市多套房地主、二三线明星、小有名气的医生律师工程师等。5 和 6 的区别在于，5 有自己的事业，6 没有。 6 级：以普通公务员、主流企业职员、高校青教、普通自由职业者、一般医生律师、一般工程师、大点的个体户等为主。名牌大学生研究生毕业后多在这个层次。6 和 7 的区别在于，6 有一定的上升空间，7 很难。 4-6 级是中国的中层社会，分别是高中低端中产阶级，普通人通过努力大多最后定格在第 5 级。 7 级：以普通企业工人、边缘化的体制内、小个体户、城市底层土著、富裕农民之类为代表。7 和 8 的区别在于，7 能够在大中城市立足，8 不能。 8 级：以血汗工厂工人、普通农民等为代表。8 和 9 的区别在于，8 能够自食其力，9 不能。 9 级：以大城市底层失业人口、偏远山区农民等为代表，基本不能自食其力（以城市的基本生活要求）。 7-9 级是中国社会的底层，是草根阶层。 所谓金字塔型的社会结构，就是中层远小于底层，比如印度；纺缍型的社会，就是底层少中层多（上层哪儿都少），比如美国。 中国以后一定是 7——9 级人口多（后面会分析），所以中国一定是金字塔型的社会结构，而要达到纺缍型的社会，则应该是 4——6 级人口占主流。 更重要的是，这个模型是一个线性结构，能够解释一些社会现象，但是不够全面。如果要全面解读中国社会个阶层就必须把这个模型变成立体结构——简单的说，假如上述 1-9 级是一条 X 轴，那么还得加上一条 Y 轴——体制内，或者说公务员与官员（包括军队里的军官）。 将这两条轴线结合起来看就会发现很多有趣的现象，比如，在 X 轴中越往上走，则在 Y 轴投影面积越大，到了上层（1——3 级），95% 以上都属于体制内。而体制内在下层投影面积几乎为 0。普通人如果在体制外最多能到 4 级，而到体制内则可以达到顶峰。这足以说明这个国家为什么形成 “官本位” 的文化。 另外，需要特别说明的是，即使在同一级别，体制内与体制外不仅仅社会地位有很大差别，在其他政治、经济等各个层面也差别甚大。 说点有意思的。 毫无疑问，1——3 级是上层，是统治阶层，是最大的既得利益者，也是可以从经济发展切下最大蛋糕的阶层。而 4——6 级大致属于中产阶级。他们也可以分享经济发展的成果，但是比例很小。其中，5 级是可以分享经济成果的最低阶层（虽然比例小得可怜）。 那么，这样的金子塔结构怎么保持稳定呢？最基本的统治模式就是：保、拉、压、控、放。 1-3 级的利益是保，否则统治阶级内部就要分裂，团结是第一位的。第 4 级是拉。社会精英要拉拢，因为他们有一定的影响力也掌握了一定的资源，为了稳定，这个阶层都得进人大、政协，有什么诉求 “内部协商”。5—6 级是压。普通人比较优秀者一般到这个位置几乎就是天花板了，社会几乎没有给予他们提供更多的上升空间，对于这些阶层创造财富的热情以及上升的欲望，得到的是沉重的压制——每当这些阶层积累一定的财富时，新的政策或者游戏规则出台，积累的财富被一只看不见的手切走了。7—8 级是控。所谓的控就是一方面是有保有打，另一方面就是控制流动。7—8 级没有上升空间，在社会上也就混口饭吃，是绝对数量最大的一个人群。由于这个人群无法向上流动，只能向下流动，但是向下流动到 9 级——9 级数量过大会影响社会稳定。所以一定要控制流动——怎么控制？宏观经济政策上包括著名的 “保增长、控通涨”，包括提高最低工资标准、强制社保（从 4、5、6 级的财富中切下一块分配给 8-9 级），除了胡萝卜也有大棒——从城管到暴力机关，对抗与冲突的事件基本都在这个阶层。9 级是放。放是放弃的意思。这个阶层只有在过年过节，才有可能得到官员作秀的一点点可怜的慰问品。 这种统治模式在经济基本面不出大问题的情况下是有益于社会稳定的——即使这个社会充斥着腐败、不公正也不会出现大的问题。这种成熟的模式即使是一个强势的人物也不能轻易改变。 过去 20 年的历史表明，在现有的体制下，财富再分配方式只能在 4、5、6 与 7、8 之间展开，比如，提高最低工资标准，就是把 4、5、6 级的蛋糕分配一部份给 7、8。至于 1-3 任何时候都是最大的既得利益者，指望从 1-3 中切蛋糕来分配给 4-6 或者 7-8，那是绝对不可能的。至于印钞就更好玩了，这是 1-3 级无条件对 4-8 级剪羊毛。 而社会阶层的固化，是金字塔结构的另一个重要的特征。在这样的社会结构里，个人奋斗远远不如人脉更重要。有一个好爹当然是最理想的，如果没有，靠钻营靠献身——或者说 “我不要脸了” 也有机会获得层面更高的人提携。无数事实证明，层面更高的人士提携比个人奋斗更容易爬到更高的阶层。 5-6 级如果有 4 级体制内或者 3 级以上的人提携，很容易到达 4 级。7-8 级如果有 4 级以上的人提携，也很容易到达 5-6 级。总体上来说，7-8 阶层是没有希望的阶层，即使有个什么机遇，他们也没有人脉和资金来把握这个机遇。 而 9 级是这个社会最悲惨的阶层，这个阶层没有任何福利，收入很低甚至为 0，如果在城市只能啃老，在农村只能苟延残喘。 请对照一下，看看你自己目前隶属于哪一级；通过努力，将来有希望上升到哪一级；遭遇失业，不幸会下降到哪一级。想清楚了，或许能更好地帮助自己做好各种人生规划，包括职业、理财与保险。 至于所有 P 民们寄予厚望的改革，公报大家都可以看，就是继续小心地骑自行车，绝对没有赶紧换成汽车的意思。如果有什么病，吃点药是必须的，但最好是不打针，至于做手术，那就别想了。 因为 1-3 要的是维稳，4 级改革的欲望也很低。5-6 阶层是创业和改革热情最高的阶层，但绝对没有话语权。 知道 GDP 为什么要保 8 吗？保增长保就业，真正的原因是要保证第 8 级的人群不能掉进第 9 级。哈哈。现在这个目标调整为 7.5——意思就是至少要保证 8 级中有一半的人不掉进 9。至于底限是 7，意思是如果保不住 8 级，也不允许 7 级掉入 9。 说到底，最受关注的还是 7-8 啊，如果真有啥大动作，估计也就是 4-6 级买单。","categories":[{"name":"Article","slug":"Article","permalink":"http://example.com/categories/Article/"}],"tags":[]},{"title":"Excerpt 11：一个炒房者的思考","slug":"Article/11：一个炒房者的思考","date":"2016-01-07T16:00:00.000Z","updated":"2021-07-23T11:58:18.000Z","comments":true,"path":"2016/01/08/Article/11：一个炒房者的思考/","link":"","permalink":"http://example.com/2016/01/08/Article/11%EF%BC%9A%E4%B8%80%E4%B8%AA%E7%82%92%E6%88%BF%E8%80%85%E7%9A%84%E6%80%9D%E8%80%83/","excerpt":"","text":"2010年的房地产预测“神贴”到底有多神? 以下是精华部分： 2010年的房地产调控，让很多人看到了希望：让房价降得再猛烈些吧。还有人更是幸灾乐祸似的呼喊：让房地产赶紧崩盘吧。让没房子的好好看看有房子的笑话，是人生的一大快事。 但是我们是不是要仔细想想，为什么调控？调控期望得到什么样的效果？ 1、是如千千万万想买房子的人期望的那样，让人人买的起房吗？ 2、是如千千万万的老百姓期望的那样，让房地产崩盘，开发商上吊，地方政府不再靠卖地实现GDP吗？ 2010年房价下跌已经变成了人民最急切的期望，已经高过了解决超贫困家庭的温饱问题，已经超过了子女教育，医疗和养老。并且为房地产必须下降提出了若干义正言辞理由，总结下来无外乎三条： 1、人人都有居住权。房子是用来住的，不是用来炒的。 2、房子太贵了，租售比严重不合理，空置率太高，人均收入太低，早晚要崩盘。 3、房价上涨造成物价上涨，人民生活变得困难。 的确，当经济过热，房价过高，会对经济运行和社会安定带来较高的风险。这也是国家所担忧的。防范金融风险，一切维稳才是中央考虑的重中之重。 而民间所总结的三条，应该和调控的原因和目的基本不沾边。让我们一条一条的分析一下： 1、人人都有居住权：房子是用来住的，不是用来炒的 其实这是一个伪命题。房子包括房屋及房屋所属的土地两个部分。房屋本身只有居住价值；而土地所具备稀缺性，决定了土地的投资价值。房地产贵的不是房屋，而是房屋下面那块地皮。所以商品房具备了投资与自住双重属性。 任志强说的并没有错，居者有其屋并不等于人人享有商品房的产权。居住的房屋也不等于商品房。 2、房子太贵了：租售比严重不合理，空置率太高，人均收入太低，早晚要崩盘 这个问题比较大。房价是不是太贵了？有没有泡沫？ 我们首先从国民的收入结构来分析 一个遵从“丛林法则”的精英社会决定了国民收入的金字塔结构。 既然是金字塔，底端的中低收入者占据了金子塔的最大比例，但是大家要知道金字塔的顶端既使只有10%人口，那也将是一个1亿多的绝对庞大的数字，远远超过了绝大多数西方国家的人口总和。 而北上广深以及三十多个省会，这些个靠掠夺全国或者一省资源，以牺牲大多数人口的利益为代价发展壮大起来的超大型及大型城市，需要容纳全国1亿多的精英人群，是否能得出房地产严重泡沫，空置率过高的结论？ 当低收入者们努力挥洒汗水期望着自己年薪能够超过5万，8万，10万。。。的时候，他们可能做梦也想不出精英阶层手中究竟拥有多少财富。 精英们会象底层老百姓们一厢情愿认为的那样：因为一个区区房产税而恐慌性抛弃手中的大量房产吗？ 答案显然是否定的。 可以确认的是，房价不是由统计局的平均收入决定的。而是精英的平均收入决定的。 为了便于分析，我们剥离掉商品房（注意：只是商品房，而不是房屋）的社会属性，先把它看做商品。是商品就有他的内在规律。 什么决定商品的价格，价值？对不起，我只能说你上学上傻了。 是供求关系，只有供求关系。 我们判断一个核心城市市区内的商品房是具备足够稀缺性的。 如果你在北京海淀区上班，即使你在山海关拥有1000平方米的住宅也不能替代你住在北京市近郊区以内的愿望。而无论你是租房，分房还是买房，只要你还在海淀区上班，你就必须住在北京市近郊区以内。 假设你挣得钱不足够多，你需要租一套房子解决你的上班问题，上班距离的远近及居住的质量，取决于你愿意支付的租金。 假设你的钱够买房子，我相信你更愿意买房，因为你可以拥有房屋的产权和房产增值的收益。而买房子的大小，品质，离你上班的远近，取决于你手中的资金和你对未来收入的预期。 买房问题很象是中国的上学问题，而且简直是异曲同工。 假设你家附近有个重点中学，教学质量很好，考大学几率很高，而其他的学校你觉得不理想，你肯定希望无论如何自家小孩也要上这个重点中学。 上重点中学凭什么？我们简单的剥离掉其他社会因素的影响，可以认为想上重点中学就要凭好成绩，小孩努力考到前多少名，就可以上重点中学。这与努力赚钱买房是一个道理，有钱的出高价就能买到好位置好环境的房子。 我们再加入社会因素的影响，比如某大人物看到这个中学很抢手，很可以赚一笔，于是就设计了加分项，谁给自己送的钱多，就给谁加分，于是小孩要上重点中学不但要考高分，还要送钱加分。 同理，当好位置的商品房成为稀缺资源，各类炒房客的出现是必然的。 如果说炒房客加高价给最终住户的行为会产生泡沫，那么重点小学和公立幼儿园高昂的择校费应不应该也叫做泡沫？ 尽管炒房和公立幼儿园加价成为普遍的社会现象是令人痛心的，但它们不以刚需人群的意志为转移的存在着，且与泡沫无关。 最被提及与泡沫有关的是以下两点： 第一，中国的房价甚至高于某些发达国家的房价。 其实，众所周知的是：不光房价高于某些发达国家，石油，高速，教育，医疗，税收等费用都远远高于某些发达国家。 而且中国的精英人群尽管所占比例不大，但是绝对数量足够大，而且精英平均收入甚至远远高于某些发达国家的收入水平。 第二：租售比问题 这个问题不用过多解释，使租售比更合理的方法不是只有降低房价一种，还有一种更靠谱的：房租大幅度上涨。而且已经在行动中。房租长期保持低价就像1990年以前的和田玉长期保持低价一样不可能。 3、房价上涨造成物价上涨，人民生活变得困难 这个问题其实也不用多解释，懂经济学的该明白自然会明白，不会轻易被忽悠，不懂的解释半天也不会明白。 简单的可以这样说，物价上涨是经济过热，钞票印多了的后果。而房地产因为稀缺性和易保存比较吸金，所以吸收了大量的钞票，以至于大家光看到了房地产的飞涨。 其实如果房地产交易量下降，不再具有吸金功能，那么农产品等生活必须品以及房屋租金等等就会大幅上涨。这是因为多出来的大量钞票总要有个流向，如果不被房地产吸收，就会被大蒜，绿豆，姜，及全部生活必须品的上涨来吸收 事实也证明确实如此。2010年房产调控后，物价上涨的势头非常迅猛。 那麽是不是房地产就没有泡沫呢？ 这个问题谁也不知道，因为到现在政府拿不出一份权威的数据来说明房地产到底有无泡沫。 但是房价高了就有风险，政府从感性上还是有清楚认识的。 注意，我们前面啰嗦了很多，现在才开始接近这次调控的真实意图。 防范金融风险？不错，你说的很对，但是没这么简单。 辨别利益是看透一切事物真相的武器。 高房价谁是受益者？ 诸侯、开发商、炒房客。 独独缺了中央。 这时你是否猜到中央为什么要调控？如果还猜不到没关系，听我道来。 纵观古今，上位者最不能容忍的是别人受益，自己背黑锅。 大开发商，小开发商，大炒房客，小炒房客，地方政府都是收益者，但是风险却由中央来抗。这是一笔很不划算的买卖。 而房地产混战的局面，造成了国家队央企成员只有凭财大气粗高价拿地的份，钱花的最多，风险却抗的最大。 中央深深的感觉到要想国家队受益，要想控制风险只有做到两个字：垄断。 提高资金门槛，让小开发商，小炒房客，有点钱的小老百姓退出这个游戏。房地产很好玩，但不是小人物应该玩的。 先让市场冷静，彻底整顿，踢出那些个小角色，然后国家队出马，绝对垄断的市场，才能够统一定价，才能够控制风险，才能够利润最大化。 既然油价高于美国是合理的，那麽房价高于美国一定也是合理的，关键在于垄断。 不仅仅是房价的垄断，因为过高的垄断定价将会使交易量下降，国家队也需要资金周转。 真正厉害的，还是房租的垄断。公租房的推出是房租垄断进程的里程碑。 至于苦等廉租房的老百姓，不要抱太大的希望。 城市要建设，地铁，广场，政府大楼都要上马，钱从哪里来？不会无缘无故凭空出来。 想想小学就近上学，但是重点小学真的就近就能上吗？小学名额可以寻租，经适房，廉租房也是一个道理。 说到房产泡沫的问题，就不得说说官方的统计数据。 官方的统计数据从来是可以很雷，但不可以很真。 我们的统计原则基本就是：村骗乡，乡骗县，一骗骗到国务院。 不知道有人去市、县、乡、村进行过社会调查没有？ 社会调查是怎么一回事？ 我来告诉你，所有的关于人口、收入、田地、贫困户的数据都是官方统一编写，统一口径，如果胆敢有哪个小民对调查人员乱说，那是吃不了兜着走的。 你问了数据编来编去的意义在哪里呢？ 意义很大，起码跟向上申请拨款是关系非常密切的。数据不假，钱从哪来？ 统计数据无所谓是否真实并不重要，重要的是它是获得利益的重要手段。 假设官方想证明房地产不存在泡沫，那么一定拿的出不存在泡沫的统计数据作证。 反之，也一样。 好比,CCAV为了证明高空置率的结论，派出记者专门找偏远且刚刚完工的楼盘，进行了一次纯粹为了证明内部已事先得出结论的毫无科学依据的调研。 而地方政府为了证明刚需多么强劲，也立刻拿出了选择性失明的统计数据来进行回击。 无论是左还是右，同样都是不科学，都是现有结论，再有证据。 我们到底应该信谁 闲扯了一下统计数据 还是回到这次调控中来 房地产游戏的模式三个环节：地方政府卖地、银行贷款、开发商在二级市场销售 地方政府卖地之后，剩余的风险和收益都归银行和开发商 地方政府卖地的款则用于地方广场，地铁，公路之类的建设和权贵的挥霍。 地方政府只负责卖地，是无风险的买卖。当然还有人企图利用无知老百姓的群情激奋来进一步收取房产税来提高地方政府收入。 税收从来都是向下游转嫁的，政府多收出来的钱一定是通过最下游的房租来体现。 当然，也有很多明白人士大声疾呼反对房产税。 但是，政府是不会理会部分明白人反对房产税的呼声的。 真正对房产税的顾及来自于地方政府对土地出卖前途的担忧，真是鱼与熊掌不可兼得。 尽管无知群众的呼声很高，然而房产税征收一旦实际操作起来，就会变的不得人心，征收难度非常之大，实际效果难以预知。也就是说政府没有底。而如果房产税征收效果不佳，地方政府卖地收入再受到巨大影响，那就真正是得不偿失了。 就会变成赔了夫人又折兵。 这样的买卖，政府是不会轻易做的 房地产的现状是，商品房二级市场是由各种类型的开发商自由竞争的，一手房开发商之间的竞争，二手房投资客之间的竞争。 房价为什麽在一个自由竞争的市场上能够持续上涨？因为稀缺性。不是房屋的稀缺性，而是房屋所必须占用的土地的稀缺性。 有些群情激奋的群众立刻以6500万套房子空置的事情提出质疑，还有ccav的报道，那是要多煽情又多煽情。 我们无需说6500万套的真实性（明白人都知道非常离谱）和空置率的科学性。为什么不说，因为这种稀缺性跟空置率就完全没有关系。商品房的稀缺性是相对人民币而言的。人民币印多了，资金没地方去，商品房就涨价了。 垄断的市场是没有风险的，土地是完全垄断的，所以地方政府完全没有风险。 而商品房是自由竞争的市场，是具备风险属性的，尽管由于大量印钞造成了商品房的飞涨，但随着房价的高涨，风险也在积聚。 地方政府土地垄断没有风险，完全可以置身事外。 可是银行呢？属于国家的银行。 银行正在承担自由竞争市场房价高涨积聚的风险。 这是中央不允许看到的，地方政府受益，而风险全部甩给中央。 既然垄断的市场是没有风险的，那还是让房屋和土地一起垄断好了。 垄断还可以解决一个问题：社会稳定。 常被媒体和群情激奋群众所提及的一个重要问题就是:房价收入比。 大量印刷的人民促成了房价高企（因为商品房实在是具备了大资金需要的所有投资品属性），可是那些个巨额的资金普通老百姓并没有见到。 路人甲：我们一个月就挣2000多块钱，干一辈子买不起房啊。 路人乙：我一个月上万都买不起房。 媒体：一个家庭不吃不喝22年买一套房 大量的疯狂印刷的人民币在哪里呢？ 在精英手里。 我们在回顾一下开篇，中国目前奉行的是精英社会，丛林法则，金字塔式收入结构。 人民币再多，也不可能流到金字塔的底端。 地方政府垄断卖地也就让百姓们发发牢骚。 而炒房客，开发商赚的盆满钵满就让生活在中下层的老百姓眼红和不能容忍。 不患寡而患不均啊。 垄断，国家队的垄断，可以解决眼红问题，也就是社会稳定问题。 还有一个最重要的问题：银行和民营开发商之间，是官与民之间的问题。 而银行和国家队央企，是左兜和右兜的问题。 土地是垄断的 然而房屋垄断并不是一件容易的事情。 因为民间百姓手里是存在大量二手房的.当然这也是为什么调控的板子只打在二套房、投资客、炒房客身上的原因。 同样，房租的垄断也并不是一件容易的事情，因为民间百姓手中的大量二手房都具备出租的特性。 俗话说，问渠哪得清如许，唯有源头活水来。 要垄断，必须抓住源头。 源头在哪里？ 在一级市场，而不是二级市场。 房地产的垄断就是要国家队从一级市场做起，从一级市场开发着手完成对商品房开发的垄断。 一级市场，那是一个高高的门槛，民间资金，就让他该干嘛干嘛吧，房地产不是你玩的。 一级市场包括的内容是一般开发商无法参与的： 城市规划，城中村改造，旧房拆迁，城市综合体开发。 可以说从规划、改造拆迁、开发、到二级市场销售，一条龙服务。 一级市场开发的最大特点就是可以创造需求：你不是有房子吗？我拆掉你的房子，看你有没有刚需！ 国家垄断控制风险的意义还在于：需求可以拆出来！ 以后的路，民营开发商的日子将变得越发艰难。 土地是地方政府的，商品房开发是央企和国企的。 处于金字塔下层的40%家庭，如果还没有一套自己的房子，那么买一套自己的房子就越发的变得不可能。 商品房将逐渐往金字塔的上层积聚。 处于金字塔下层40%的无房家庭将只能以租房来解决居住问题。 租金的快速上涨期即将到来，政府已经盯上了房租这块巨大的蛋糕。因为房租的收益比房产税更靠谱，更具有操作性。 公租房，呼之欲出 政府的公租房要想租出好价格，有两种方式 1）减少市场可出租房源（北京就这样干了，拆迁廉价城中村） 2）提高竞争房源的成本。（所以我认为推出房产税是大概率的事情， 因为政府的公租房是不需要交房产税的） 于是竞争房源的房租暴涨，政府的公租房也就可以羞羞答答的打个9折来 安抚一些底层了，反正所有的黑锅都有竞争房源的房东背了 —————————————————— 房产税的问题我觉得政府还是慎重的 1、如果采用不公平法则： 公务员，垄断企业，事业单位的福利房不上税，权贵与利益集团购买囤积的大量商品房不上税，只有普通百姓上税，会加剧社会矛盾，而房产税会大幅提升租金，在公租房没有大量建起来之前，对稳定不利，维稳才是第一要务。 2、如果实行公平法则： 小产权房，福利房，权贵囤积房都要上税，执行难度太大，可操作性不强，阻力几乎难以逾越。 如果真的收房产税，采用不公平法则的可能性最大，普通的无房百姓生活将变得非常艰难。 维稳问题其实最终还是吃饭问题。 房价上涨可以不买，如果房租价格不能控制，农产品价格不能控制。一旦大批群众吃饭出现了问题，维稳就无从谈起了。这个底线，政府或许还是要严守的。 说到公租房问题 首先还是要提到我们实行的双轨制 从某一方面可以简单的理解为统治阶级内和统治阶级外。 也就是我们常说的体制内，体制外。 体制内:公务员、垄断企业及医院高校科研院所等事业单位。 体制外：外资、私企打工者，个体工商户，农民，这里面也应当包括高层的老板和最底层的长期无业人员。 我们感受最深的就是涨工资的问题，一旦政府涨工资，那就一定是体制内涨工资，跟体制外完全没有关系。在金融危机的08年，大批企业关门，减薪，裁员，美国欧洲因为钱紧不得不降低公务员薪水。而这时，我们神奇的国家在干一件事：公务员普遍加薪，是“为了全国百姓着想”—刺激消费。 还有保障房问题，这个也是我们感受最深的：保障房=公务员及垄断企业住房；解决住房问题变成了如何让领导干部住更多更大的房子，如何让体制内员工拥有足够舒适住房的问题。 体制外的群众，那是别想得到一点好处的。 公租房的推出，也要解决两个问题： 1、体制内的最下层（最下层也是统治阶级，也就是是古代官吏中的吏）员工的基本住房问题 2、向体制外被统治的小民稳定收钱的问题。 关于为何全民炒房？ 一、资本不是傻子，一定会趋利，所以资本放弃了操心受累不挣钱的实体经济，转而投向房地产。房地产的调控，让资本又进入了黄金、农产品领域参与爆炒，反正就是不进实体经济。因为国家不给实体经济的环境做任何的改善。 如果实体经济有一个好的环境，有一个好的获利空间，大量的资金就不会撤出实体经济，没有资金潮涌般的投入房地产市场，中国的房地产将会是一个平稳的上涨趋势。（全民炒房房价暴涨，不全民炒房房价稳涨） 二、把80%民众死死压在底层的不是房地产，而是我们的保障体系。 因为保障体系的缺失，无论教育，医疗，养老，失业等社会问题，都成了个人问题，个人对未来的恐惧和无助，这才是中国消费不足的根本。 所以我们发现中国的经济发展依靠投资推动而无法依靠消费拉动。凡是具有投资属性的商品都被热炒，而消费需求却很难有大的提升。 房产只是在诸多具备投资品属性的商品中最被广大群众认可的一个品种。如果货币没有超发，物价稳定，多数资金可能会趴在银行，就像几年前一样，用于教育，医疗，养老，失业的备用金。但货币泛滥和通货膨胀致使银行存款人间蒸发，使这些资金不得不进行大转移，恐慌性的寻找投资渠道，但对于邮市，木材，古董字画等投资品来说，需要较强专业知识，多数人无法参与，股市和黄金对资金容纳是有限的，且存在较高风险，因此房产成为广大群众投资与保值的共识。 三、如果解决房价问题，就要做到以下三点： 第一：国家承担公民的教育、医疗、养老。 第二：能够有效解决体制外失业问题。 第三：打破土地垄断，实行土地私有化。 但显然以上三条没有一样可以实现的。 房价下跌成燎原之势！他们在逼我们妥协！一：房价上涨，到底赚的是什么钱？ 20年以来，中国房价的上涨，从一开始的犹抱琵琶半遮面，到2008年以后的强势起步，发展到2016年的全面泡沫化，以致坚信房价会一直上涨，成为了一种谜之信仰。 普通老百姓，难以看懂经济学家和地产企业家们嘴中复杂的术语，接收到的信息也是纷繁复杂，以致最后完全迷失了理性，只能听从开发商、中介人员、既得利益人群的洗脑，被裹挟着接受这种信仰。 房子，说白了就是土地、钢筋、水泥和家具，那么，房价上涨，到底赚的是什么钱呢？ 第一：经济增长的钱。 房子，作为供给速度有限的商品，作为人类居住梦想的承载居所，只要社会的经济在持续不断地变好，那么房价也必然曲折式上涨。这可以具体拆分成2个来源：上涨的房租、户口溢价。 一个城市，如果各大公司竞争力增强，经济发展健康，每年吸引优秀的大学毕业生和外来务工人员，持续涌入，房租就会上涨。这和股票的原理是一样的，上市公司的业绩在增长，那对应给股民的利润分红也会增加，股票就上涨。 而在中国，又加了一层户口的溢价。5年以前，以京沪深广四大城市为例，户口和城市福利、学区房是牢牢绑定在一起的，无形之中设置了一道门槛。虽然这种门槛不是有形的定价，却扎扎实实体现在了房价上面。 从2007年到2017年，中国GDP的年均实际增速大约为8.3%，十年累积下来，2017年中国经济的实际总产出差不多比2007年翻了一倍。所以经济增长，为房价上涨提供了第一个发动机。 但是，这远远不能解释这两年，为何房价会像脱缰的野马一样，驰骋纵横，以至于全面泡沫化的。 第二：央行印钞、放水的钱。2007年，中国的广义货币只有40万亿，而到了2017年就接近170万亿，如果再加上各种影子银行，真实的货币差不多已经超过200万亿了，这相当于过去10年中国的货币总量翻了整整5倍以上。但是，同期的经济增长幅度只有1倍，这就意味着货币的购买力下降了一倍多，货币对内的贬值幅度，每年都接近10%。 从根本上说，中国货币的印钞增长速度，已经远远超过了经济本身所需要的数量。根据最浅显的经济学常识，货币贬值、通货膨胀，在短期是可以降低失业率、刺激消费，减缓经济危机的伤害，但是从长期而言，如同饮鸩止渴，百害而无一利。如果任何一个政府，只要经济出现一点波动，就印钞成了习惯，放水上了瘾，就如同吸食毒品，所需要的量会越来越大，作用会越来越小，最终积重难返。 以2016年上半年房价为基准进行统计，北京、上海、广州、深圳4个城市的住房总价值是73.6万亿人民币，按照当时6.40元人民币兑换1美元的汇率来计算，合11.5万亿美元，而美国全国家庭住房总价值也就26万亿美元，也就是说，中国一线城市住房的总价值可以买下半个美国。 泡沫之大，危如累卵。所以，要么房价远远高估，要么人民币兑美元的汇率被高估。要么，二者都有！ 第三：韭菜的钱。 谁是韭菜？你是吗？我是吗？假如你花10块钱买了一块石头，买了以后突然出来一个故事说它有多么好，其实它和之前没有任何变化，结果有人听了以后愿意花20块来买，那么恭喜你，你就把他的钱赚了。如果到后来他发现故事是假的，其实这块石头不值20块，卖出去只值10块钱，那么他就亏了10块钱。他成了韭菜。那么在房地产市场，哪些人有可能是韭菜呢？ 地方政府不是。因为他们是提供土地，然后收取开发商的土地出让金的。毫无成本。 开发商也不是。他们从银行贷款，去拍取土地，房子没开建就卖期房。几乎用了2重杠杆，暴赚。 2014年以前在大城市买房的人，很大可能也不是。 投资大师巴菲特告诉我们：打牌时，如果牌过三巡，你还不知道牌桌上谁是傻瓜，那么你就是那个傻瓜。 过去3年，不是因为生活所迫购买第一套自住房，而是因为下面原因买房的，就是韭菜： 1、听从地产公司广告宣传，被雇佣而来的群众演员排队抢房气势所吸引的； 2、相信中介人员的鼓噪，和卖家沆瀣一气，在看房现场被他们组团演戏、吓唬而当场签合同的； 3、相信中国年轻人口会越来越多，不断涌入大城市去买房，而不相信中国即将进入老龄化社会的，小孩子人均4套房在手的； 4、相信我国会继续延续过去10年宽松货币，以放水刺激的方式来维持经济发展，而不相信国家已经转向的； 5、相信北京是宇宙中心，那里的雾霾都有王者之气，全球富豪都希望在帝都有一套房产的；而不相信雄安会成为千年大计之城的； 6、相信深圳是可以媲美硅谷，创业板股票市场媲美美国的纳斯达克市场，深圳将来会诞生第二家腾讯的；而不相信腾讯股价从最高点下跌近一半的幅度的，互联网巨头公司都已经深陷危机的； 7、相信自己可以和朋友口中的那个炒房客一样，不安心工作，就依靠所谓的看房技巧、贷款杠杆技巧，同样赚到大钱的；而不相信很多炒房客已经在波段中、在下行大势来临之前，身死财灭的。过去20多年的房价黄金周期，在我国培养出了对房价永远上涨的信仰族群。他们是庞大韭菜群体的民众基础。如果一个卖家，在2017年之前，成功地将手中的物业、房产，卖给了韭菜的买家，就像商业巨擘李嘉诚先生那样，抛售干净了大陆地区的地产配置，那就相当于完成了华丽的转身。 二：我们为什么如此焦虑？ 地方政府获取的棚改资金贷款，是第一重杠杆；开发商从银行或者信托渠道贷款，是第二重杠杆；开发商还没开建就卖期房，是第三重杠杆；老百姓付出三成首付，并向银行贷款七成，是第四重杠杆。 根据上市公司的年报，知名的开发商在2017年的经营业绩为： 中国恒大：收入为3110.2亿元，净利润为370.5亿元；融创中国：收入为658.7亿元，毛利润为136.3亿元；碧桂园：收入为2269亿元，净利润为261亿元；万科：收入为2429亿元，净利润为280.5亿元；华夏幸福：收入为596.4亿元，净利润为87.8亿元。 你要问为什么开发商这么暴利，这就是根本原因。在价格上行周期2007-2016年，国内最为成功的财富模式无疑就是买房。有谁敢和开发商一样，乘着杠杆起舞，谁就能财务自由。 机会多大，风险就多大。高负债运行的杠杆体系里，老百姓成为最后一棒的接盘者，最大风险的承担者。 全国居民部门的杠杆率（住户贷款余额/住户存款余额）2018年一季度大概是61%（全国住户贷款余额42万亿/存款69万亿）。深圳、珠海、合肥、南京、杭州、苏州等城市杠杆率超过100%，且增长速度非常快。也就是说，这些城市居民的存款余额，还比不过在身背负的贷款。如果不允许负债的话，这些城市的居民马上就破产了。 我们无意于在道德层面去指责开发商，毕竟市场经济条件下，一个愿买，一个愿卖。但是不容置疑的是，开发商赚得盆满钵满的背后，是亿万韭菜家庭在2017年累计起来的风险，再过3年，将可能变成亿万家庭不可承受之重。三：十年未有之大变局！房价下跌成为燎原之势 短短的一周时间，全国各地房价下跌的新闻，不绝于耳，渐渐成为燎原之势。 2018年，打响今年楼市降价第一枪的厦门万科白鹭郡楼盘，主动给予买家退款100万了！ 湖南湘潭、江苏南京、江西上饶、北京通州等多地，继续发生针对不同大牌的开发商楼盘的维权事件。 当你凝视深渊时，深渊也在凝视你。现在中国的情形，和2008年的美国何其相似。那一年，美国房价已经连续上涨了多年。房地美和房利美 这2家房贷公司，向美国底层老百姓，不论还款能力如何，一律放贷购房，再将劣质（次级）贷款转移给了银行，银行再打包成金融产品，上市流通。终于，房贷成为压垮美国浮华盛世的第一根稻草，全球性金融危机大爆发，他们被迫重头开始走上涅槃之路。 所幸的是，我们国家正在主动戳破泡沫，过去10年支持房价上涨的力量，全部都在迅速消失。 央行在2018年初明确提出，未来货币低增速，会成为常态；我国不再寻求通过经济刺激的方式来追求GDP的高增长，而改为有质量的增长；新5%，比旧8%好。 国务院在10月8日常务会议上，要求部分市县要尽快取消货币化棚改贷款的政策，去除第一重杠杆。 监管部门就取消商品房预售制度，即期房制度，征求各地住建局意见。期房成为历史，很大概率会成真。期房制度，是造成现在开发商收钱之后不管建房质量，胡乱交房的乱象根源。取消期房，将不仅断掉第三重杠杆，更是可以将压力回到开发商身上来，严肃完成建筑质量。 更为紧迫的局势，在于我国和美国正在就贸易纠纷产生的国际格局大震荡。由于过去20年的浮躁氛围，投机大行其道，我国经济发展的科技含量是弱的，在芯片、高端制造、科研等领域严重落后于发达国家。楼市泡沫不除，资金和社会心态，无法脱虚向实，根本无法打赢和美国的贸易冷战。但是，既得利益群体的力量是非常庞大的。他们是：知名开发商、囤积海量房子的贪腐官员、少部分拆迁户、积累较多房贷余额的银行。他们紧紧抱团，利用媒体话语权的优势，手握重金，利用一批御用文人和知名意见领袖，向国家喊话。下面这些口号，是他们常见的话术： 1、房地产是我国的支柱产业，如果房地产倒了，我们的经济增长就成问题了。 2、房地产行业涉及到上下游各行各业，是我国创造就业岗位的主要行业之一，如果开发商倒闭了，上下游企业倒闭，农民工失业，代价谁来承担？ 3、如果房价下跌太多，一批房闹的业主断供，选择将房子抛给银行，银行坏账成堆，怎么办？国家不应该允许银行发生亏损。 在这批既得利益群体人的眼里，即使一个人患了脓疮，也不应该做手术，因为体重会减轻，手术很痛苦，患者会大喊大叫。 那我们来看看，假如老百姓向既得利益群体妥协，会是什么样的结果。 他山之石，可以攻玉。 四：日本人妥协了，结果是什么？ 让我们穿越历史的迷雾，回到1985年时候的日本国。 此时距离二战结束已经40年，日本经济进入第三阶段的增速换挡期。为了对冲和美国签订广场协议引发的日元升值对出口造成的影响，日本开始实行一系列扩内需增长的货币和财政政策。1985年-1991年日本房地产进入最后疯狂期，6年间上涨1.7 倍。在这期间，日本全社会进入泡沫化繁荣时期，各阶层挥金如土，他们坚信东京的地价，可以买下整个美国，是对的。在泡沫时期，日本政府尝试打击资金空转，防止楼市和股市中的杠杆资金，严厉约束开发商的哄抬地价行为。但是在数千家开发商的游说下，以及上亿已经卷入房地产泡沫浪潮中的韭菜民众的民意之下，日本央行和财政部，一退再退，不断妥协，终于酿成当时人类历史上单一时期单一国度的规模最大的泡沫。 1991年后日本政府开始采取措施时，突然发现，原来虚假繁荣的经济如此不禁考验。房地产迅疾进入暴跌期，六大主要城市跌幅65%，东京房价腰斩一半。在东京银座地区，写字楼和商铺的平均价格和泡沫巅峰时比，下降了75%。日本经济进入大拐点，经济发展停滞，开始进入历史上著名的“失去的二十年”。 如果你去日本旅游，会深深感受到日本民众不愿麻烦别人、宁愿租房很少买房、在一家大公司干到老死很少跳槽、社会等级森严、老龄化严重、娱乐至死、低欲望、抵触婚姻的社会心态，都是那失去的二十年而留下的社会烙印。五：香港人妥协了，结果是什么？ 如果说，日本与我国自有国情不同，那么香港地区历史上一次重大的历史事件，则可以给我们更切身的借鉴经验如果你爱他，就把他送到香港，因为那里是天堂。如果你恨他，就把他送到香港，因为那里是地狱。 在房价这件事上，香港人民的历史经验比大陆人民要丰富得多，但是当房价来到历史拐点时，两地的买房人却殊途同归。江西、湖南、杭州、厦门、上海是砸售楼处，而信奉市场经济的香港人民虽然没有去砸售楼处，但却会借着民主权利，直接上街游行，施压民主政府进行调控。 香港楼市的沉疴要回溯到1997回归前。当时为了防止港英政府在香港回归前卖地卷钱走人，《中英联合声明》限制了香港每年的卖地数量。之后，香港经济持续上扬，对房地产的需求有增无减，而土地供应受限，房价屡创新高，香港的整体房价在1994年1月至1997年10月的高峰期，三年零十个月上涨了68%。 在房价高峰时，香港人平均要把月薪的74%用来还贷。 1997年，香港回归，董建华上任之初，为了升级香港的长期竞争力，董建华打算一方面加大土地与住宅供应，降低创新与生活成本，为香港后续的发展开辟空间；另一方面大刀阔斧，改革教育、增加科技投资以及项目，为香港的未来增加新的增长动力。他一上任，就制出了“八万五”大计，为特区政府订下三个目标：每年兴建的国有和私营房屋单位不少于八万五千个；在十年内，全港七成的家庭可以自置居所；以及把排队等候公租房的平均时间缩短至三年。如果这一宏伟计划得以实施落地，21年之后的香港绝对不再会是今日的香港：没有互联网，没有生物医药科技，没有高端制造，只是普通的外贸中转站和空虚的金融服务港。可惜的是，人算不如天算！ 人这一辈子啊，除了依靠自我奋斗，也要依靠历史的进程。 这一计划刚一推出，就遇上了亚洲金融风暴，香港经济早就空心化，自然抵挡不住资本外逃，香港楼市迎来凄风冷雨。短短几个月，房价下跌了30%，购房者的首付款已经跌没了。这些爆仓了的买房人，报纸称他们为负资产者。这些所谓“有产阶级”和开发商的利益代表们，声称房价下跌的导火索是政府的“八万五”计划。这一计划的目标是要让百万香港底层老百姓受惠，本不应该代替香港经济的空心化而为房价下跌来背锅，此刻成为了紧紧抱团的利益群体所攻击的靶子。在社会舆论猛烈抨击之下，政治正确的口号，从“大庇天下寒士俱欢颜”，变成了“让房价上涨，挽救负资产者，拯救香港中产阶级”。 香港政府的压力山大。此时此刻，沉默的大多数，没有站出来声援港府，他们是香港80%的普通老百姓，人均居住面积没有15平米，终日忙于为资本家和垄断寡头们打工干活，在决定香港前途、决定自己和家庭命运的那一刻，向既得利益群体们，妥协了！他们就像从香港社会上消失了一样，鸦雀无声。 局势开始一边倒了！ 为了安抚负资产者、稳定房价，1998年6月份，港府宣布冻结卖地，任由开发商坐地起价，和有房者们狂欢。事后，2000年董建华发表声明回顾：“金融风暴来临，在民意面前，根本无机会实施‘八万五’政策”。3年后的10月，香港特区政府进一步推出“投资移民计划”，只要在香港投资650万港元，即符合移民资格，吸引了大量外来资金，房价得以进一步推高。自2003年12年之后，直到2015年，香港房屋委员会才首次放开供给，并且一次只有2千套。 至此，香港终于成为了某人的一家之城。 2017年底香港拥有房产的家庭比例为49.5%，比董建华宣布放弃时的52.9%还低。超过一半房产的实用面积小于50平米。人均居住面积只有约15平方米，大幅落后于内地的京沪深。同时，租金中位数为1万港元，全港家庭月均收入中位数2.5万港元，也就是说，租金占去了家庭收入的40%。全港约有超过9万间笼子房，住着超过20万人，居住面积中位数仅为10平米。更底层还有一大批笼民，从Beyond主唱黄家驹1992年出演《笼民》，时间已经过去26年，香港大多数老百姓依然住在笼子里面，被笑称纳米房，笑中带泪。 《曹刿论战》中说，食肉者鄙，不足远谋。但是鲁迅也说，可怜之人，必有可恨之处。 从底层到中层，香港的年轻人，按道理有希望通过创新创业改变自己命运，却已经被房价与屋租绑死，哪里还有创新的胆量、时间与潜力？香港的创业土壤已经灌满了房地产富豪的混凝土，长不出来新的庄稼。阶层完全固化，年轻人看不到上升的通道。 亲爱的读者朋友们，回溯完了日本和香港的历史，不知道你能从它们居民的妥协中，借鉴到点什么吗？中国长达20年的房价上涨周期，才刚刚开始回调而已，我们就要开始妥协吗？","categories":[{"name":"Article","slug":"Article","permalink":"http://example.com/categories/Article/"}],"tags":[]},{"title":"Excerpt 10：看懂中国房地产","slug":"Article/10：看懂中国房地产","date":"2015-12-31T16:00:00.000Z","updated":"2021-07-23T11:56:30.000Z","comments":true,"path":"2016/01/01/Article/10：看懂中国房地产/","link":"","permalink":"http://example.com/2016/01/01/Article/10%EF%BC%9A%E7%9C%8B%E6%87%82%E4%B8%AD%E5%9B%BD%E6%88%BF%E5%9C%B0%E4%BA%A7/","excerpt":"","text":"","categories":[{"name":"Article","slug":"Article","permalink":"http://example.com/categories/Article/"}],"tags":[]},{"title":"JS正则验证账号、手机、电话、邮箱","slug":"Github/JS正则表达式验证账号、手机号、电话和邮箱","date":"2015-12-28T16:00:00.000Z","updated":"2017-05-04T06:41:33.000Z","comments":true,"path":"2015/12/29/Github/JS正则表达式验证账号、手机号、电话和邮箱/","link":"","permalink":"http://example.com/2015/12/29/Github/JS%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E9%AA%8C%E8%AF%81%E8%B4%A6%E5%8F%B7%E3%80%81%E6%89%8B%E6%9C%BA%E5%8F%B7%E3%80%81%E7%94%B5%E8%AF%9D%E5%92%8C%E9%82%AE%E7%AE%B1/","excerpt":"","text":"JS正则表达式验证账号、手机号、电话和邮箱1.验证帐号是否合法验证规则：字母、数字、下划线组成，字母开头，4-16位。 function checkUser(str)&#123; var re = /^[a-zA-z]\\w&#123;3,15&#125;$/; if(re.test(str))&#123; alert(&quot;正确&quot;); &#125;else&#123; alert(&quot;错误&quot;); &#125; &#125; checkUser(&quot;jihua_cnblogs&quot;);//调用 2.验证手机号码验证规则：11位数字，以1开头。 function checkMobile(str) &#123; var re = /^1\\d&#123;10&#125;$/ if (re.test(str)) &#123; alert(&quot;正确&quot;); &#125; else &#123; alert(&quot;错误&quot;); &#125; &#125; checkMobile(&#39;13800138000&#39;); //调用 checkMobile(&#39;139888888889&#39;);//错误示例 3.验证电话号码验证规则：区号+号码，区号以0开头，3位或4位号码由7位或8位数字组成区号与号码之间可以无连接符，也可以“-”连接如01088888888,010-88888888,0955-7777777 function checkPhone(str)&#123; var re = /^0\\d&#123;2,3&#125;-?\\d&#123;7,8&#125;$/; if(re.test(str))&#123; alert(&quot;正确&quot;); &#125;else&#123; alert(&quot;错误&quot;); &#125; &#125; checkPhone(&quot;09557777777&quot;);//调用 4.验证邮箱验证规则：姑且把邮箱地址分成“第一部分@第二部分”这样第一部分：由字母、数字、下划线、短线“-”、点号“.”组成，第二部分：为一个域名，域名由字母、数字、短线“-”、域名后缀组成，而域名后缀一般为.xxx或.xxx.xx，一区的域名后缀一般为2-4位，如cn,com,net，现在域名有的也会大于4位 function checkEmail(str)&#123; var re = /^(\\w-*\\.*)+@(\\w-?)+(\\.\\w&#123;2,&#125;)+$/ if(re.test(str))&#123; alert(&quot;正确&quot;); &#125;else&#123; alert(&quot;错误&quot;); &#125; &#125; checkEmail(&quot;contact@cnblogs.com&quot;);//调用","categories":[{"name":"Web开发","slug":"Web开发","permalink":"http://example.com/categories/Web%E5%BC%80%E5%8F%91/"}],"tags":[]},{"title":"Excerpt 09：20个你不知道的大脑秘密","slug":"Article/09：20个你不知道的大脑秘密","date":"2015-12-24T16:00:00.000Z","updated":"2021-07-23T05:51:32.000Z","comments":true,"path":"2015/12/25/Article/09：20个你不知道的大脑秘密/","link":"","permalink":"http://example.com/2015/12/25/Article/09%EF%BC%9A20%E4%B8%AA%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E5%A4%A7%E8%84%91%E7%A7%98%E5%AF%86/","excerpt":"","text":"尽管科学家一个接一个的科研成果让我们对记忆有了越来越多的了解，但直到今天，科学家所发现的所谓大脑的秘密也只是冰山一角，在很大程度上，大脑和记忆仍是神秘的。研究人员认为，记忆是一个过程，并且当你记忆的时候，实际上就是你把保存在大脑中零零碎碎的信息进行重建。但让人不解的是，究竟是什么东西引发大脑开始这个重建过程？这个谜团继续等待科学家们去寻找答案，但有20个事实是已经科学家证实了的。 1。大脑喜欢色彩。平时使用高质量的有色笔或使用有色纸，颜色能帮助记忆。 2。大脑集中精力最多只有25分钟。这是对成人而言，所以学习20到30分钟后就应该休息10分钟。你可以利用这段时间做点家务，10分钟后再回来继续学习，效果会更好。 3。大脑需要休息，才能学得快，记得牢。如果你感到很累，先拿出20分钟小睡一会儿再继续学习。 4。大脑像发动机，它需要燃料。大脑是一台珍贵而复杂的机器，所以你必须给它补充“优质燃料”。垃圾食品、劣质食品、所有化学制品和防腐剂，不仅损害身体，还削弱智力。英国一项新研究显示，饮食结构影响你的智商。 5。大脑是一个电气化学活动的海洋。电和化学物质在水里能更好地流动，如果你脱水，就无法集中精力。专家建议，日常生活要多喝水，保持身体必需的水分，而且一天最好不要饮用相同的饮料，可以交换着喝矿泉水、果汁和咖啡等。另外，研究资料显示，经常性头痛和脱水有关。 6。大脑喜欢问题。当你在学习或读书过程中提出问题的时候，大脑会自动搜索答案，从而提高你的学习效率。从这个角度说，一个好的问题胜过一个答案。 7。大脑和身体有它们各自的节奏周期。一天中大脑思维最敏捷的时间有几段，如果你能在大脑功能最活跃的时候学习，就能节省很多时间，会取得很好的学习效果。 8。大脑和身体经常交流。如果身体很懒散，大脑就会认为你正在做的事情一点都不重要，大脑也就不会重视你所做的事情。所以，在学习的时候，你应该端坐、身体稍微前倾，让大脑保持警觉。 9。气味影响大脑。香料对保持头脑清醒有一定功效。薄荷、柠檬和桂皮都值得一试。 10。大脑需要氧气。经常到户外走走，运动运动身体。 11。大脑需要空间。尽量在一个宽敞的地方学习，这对你的大脑有好处。 12。大脑喜欢整洁的空间。最近的研究显示，在一个整洁、有条有理的家庭长大的孩子在学业上的表现更好。为什么，因为接受了安排外部环境的训练后，大脑学会了组织内部知道的技巧，你的记忆力会更好。 13。压力影响记忆。当你受到压力时，体内就会产生皮质醇，它会杀死海马状突起里的脑细胞，而这种大脑侧面脑室壁上的隆起物在处理长期和短期记忆上起主要作用。因此，压力影响记忆。最好的方法就是锻炼。 14。大脑并不知道你不能做哪些事情，所以需要你告诉它。用自言自语的方式对大脑说话，但是不要提供消极信息，用积极的话代替它。 15。大脑如同肌肉。无论在哪个年龄段，大脑都是可以训练和加强的。毫无疑问，不要寻找任何借口。不要整天呆在家里无所事事，这只能使大脑老化的速度加快。专业运动员每天都要训练，才能有突出表现。所以你一定要“没事找事”，不要让大脑老闲着。 16。大脑需要重复。每一次回顾记忆间隔的时间越短，记忆的效果越好，因为多次看同一事物能加深印象，但只看一次却往往容易忘记。 17。大脑的理解速度比你的阅读速度快。用铅笔或手指辅助阅读吗？不，用眼睛。使用这种方法的时候，需要你的眼睛更快地移动。 18。大脑需要运动。站着办公效率更高。 19。大脑会归类，也会联系。如果你正在学习某种东西，不妨问问自己：它让我想起了什么？这样做能帮助你记忆，因为大脑能把你以前知道的知识和新知识联系起来。 20。大脑喜欢开玩笑。开心和学习效率成正比，心情越好，学到的知识就越多，所以，让自己快乐起来吧！","categories":[{"name":"Article","slug":"Article","permalink":"http://example.com/categories/Article/"}],"tags":[]},{"title":"Excerpt 08：财富自由是怎样的一种体验？","slug":"Article/08：财富自由是怎样的一种体验？","date":"2015-12-17T16:00:00.000Z","updated":"2021-07-23T05:46:53.000Z","comments":true,"path":"2015/12/18/Article/08：财富自由是怎样的一种体验？/","link":"","permalink":"http://example.com/2015/12/18/Article/08%EF%BC%9A%E8%B4%A2%E5%AF%8C%E8%87%AA%E7%94%B1%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84%E4%B8%80%E7%A7%8D%E4%BD%93%E9%AA%8C%EF%BC%9F/","excerpt":"财富自由是一种怎样的体验，一个人是否有钱就快乐？ 作 者：叶开甫 来 源：正和岛（ID：zhenghedao） 胡润研究院最新的报告公布了一组“扎心”的数字：2017年北上广深的财富自由门槛已经高达2.9亿元，相比2015年提高50%。在二线城市，这个数字是1.7亿。 如果可以有选择，似乎没有谁会拒绝财富自由，但实现财富自由的过程显然不轻松。人们前赴后继，99%的人却无意识地坠入了种种“怪圈”。 某种意义上，这是一场思维与认知的较量。","text":"财富自由是一种怎样的体验，一个人是否有钱就快乐？ 作 者：叶开甫 来 源：正和岛（ID：zhenghedao） 胡润研究院最新的报告公布了一组“扎心”的数字：2017年北上广深的财富自由门槛已经高达2.9亿元，相比2015年提高50%。在二线城市，这个数字是1.7亿。 如果可以有选择，似乎没有谁会拒绝财富自由，但实现财富自由的过程显然不轻松。人们前赴后继，99%的人却无意识地坠入了种种“怪圈”。 某种意义上，这是一场思维与认知的较量。 电影《甜心先生》中，有一句经典台词：Show me the money！（让我赚大钱）。 汤姆·克鲁斯扮演一位体育明星经纪人杰瑞·马圭尔，35岁那年，他开始厌倦公司唯利是图的风气。 被合伙人踢出公司那天，他动员同事们跟他一起创业。四周鸦雀无声，一个女同事站出来说：“我愿意……可是3个月后我就要加薪了……” 后来，杰瑞经过一番摸爬滚打，终于迎来事业的第二春。原来的公司则遭遇客户的信任危机，生意越做越差。 电影揭示了一个被忽视的残酷现实： 大多数人从不明白自己为什么老缺钱，以为升职加薪就能解决问题，于是陷入“起床，上班，付账，再起床，再上班，再付账”的怪圈。 工资多了，就会租更贵的公寓，贷款买房买车，食物越来越精致，在爱好和娱乐上投入的金钱越来越多。给他们更多的钱，他们就会以更高的开支重复这种循环。 这就是中年人的财务怪圈。 回头却发现，身边都是依靠自己的，而没有可以依靠的人。 巴克敏斯特·富勒说：财富就是支撑一个人生存多长时间的能力，或者说，如果你停止工作，还能活多久？ 多数人一直追求所谓安稳、体面的工作，却从不问生活之路将通向哪里。 财富自由路上的5个陷阱 掏空中产们的何止油腻的生活方式，更严重的是财富管理上的思维误区。很多人赚了钱，却依然把自己逼得紧张兮兮。这里有5个常见的陷阱，你踩了几个？ 陷阱1：混淆职业与事业 职业关注的是收入。工薪阶层凭借某项专业能力从事职场活动，比如厨师、律师、工程师、银行职员等角色。 事业关注的是资产，并不单从某项技能中获益。很多人能做出比麦当劳更好吃的汉堡，却没有麦当劳赚钱。因为他们只专心做好产品，而对商业体系一无所知。 麦当劳在保证产品的基本口味之上，还搭建了世界上最好的销售、配送体系。麦当劳还是世界最大的房地产商之一，它在美国以及全球其它国家的黄金地段都有资产。2016 年麦当劳 50% 的运营利润来自地产出租，40% 来自品牌授权，只有 10% 来自自有餐厅的运营。 陷阱2：混淆资产与负债 不能产生现金流的资产，不过是虚有其表。 很多人搞不清资产与负债的区别，错把一些负债当作资产项看待。 比如一般家庭买房，都要借20年甚至30年的贷款。收入稳定，可以顺利还贷，当然没有问题，但是谁能保证未来20-30年不发生变数呢？有可能公司倒闭，无情地裁员；有可能患上疾病，不得不重新规划路线。唯一不变的就是还贷这件事。 如果你想换大一点的房子，最好的方式是先买入一些资产，让它们创造能够支付房贷的现金流。 陷阱3：无规划支出 多数人没有意识到，比赚多少钱更重要的，是能留住多少钱。 美国一项调查显示，大部分中彩票大奖的人，在获得数百万甚至上千万后，很快就破产了。也正是缺乏自律，很多人在加薪后立即去买奢侈品或豪车。 金钱会暴露人性的弱点。没有健康的财富观，再多的钱不过是过眼云烟。这也是为什么同样是经历从无到有的过程，“穷人思维”是先买奢侈品，而“富人思维”是最后买奢侈品。 陷阱4：脆弱的投资系统 对于没有受过任何训练的人来说，如果没有一套好的投资系统或逻辑，盲目随大流，听别人推荐一种产品，收益很高，就一头扎进去，直接投了钱，结果到市场环境变差，亏损了一半，才发现那是一种高风险的投资产品。 而投资高手总是擅于制定策略，寻找“风险—收益不对称”的机会，即得到的收益很高，而投资的风险很低。 陷阱5：心理因素 财富自由应该包含精神自由。如果无法控制欲望和恐惧，即使赚再多钱，也不过是金钱的奴隶而已。 我们生活的世界，不乏这样一类人：他们已经接近或实现财富自由，但还在拼命赚钱，甚至比一穷二白的时候更加焦虑。越有钱，就越害怕失去大房子、车子等符号象征的“上等生活”。他们甚至觉得，一旦哪天没钱，身边的朋友们会看不起他们。 《7步创造终身收入》书中记录了这样一则让人唏嘘的事件： 2008年金融危机期间，德国首富阿道夫·默克尔亏掉了30亿美元，他感觉自己让家人失望了，于是写了一份自杀声明，然后跑向一辆快速行驶的列车，一头撞了过去。对他来说，财富就是身份，失去首富地位，完全无法忍受。 进阶1%人生的财富定式 关于财富自由的目标，有人做过一个形象的比喻： 99%的人，都想过1%的人生。显然这是不可能的，那我们该如何跳出这个怪圈？ 货币每天都在贬值，仅仅依靠工作、存钱很难让你的财富增长突破天花板。 我们把工资称作主动收入，把投资赚取利息、出书持续赚取版税、投资企业赚取分红，这些不需要付出额外劳动就能赚取的钱叫作被动收入。 实现财富自由的一个基本标准，就是我们的被动收入刚好可以覆盖日常生活的支出费用。所以要实现财富自由，思路非常简单，那就是在适当管理日常支出的同时，一直不断地努力提高被动收入。 这里给大家分享一个财富自由度定式： 财富自由度=投资净收益/总支出 建议值：15%。随着年龄的增长，我们需要不断的提高这个比例。当这个比例达到100%时，恭喜你，你实现了真正的财富自由，可以不再为钱担忧了。 对于大多数人来说，最适用的方法，就是通过财富管理来获取被动收入。 何为正确的财富观？1.个性定律 在讨论这个话题之前，我们首先要澄清一个事实： 智商并不等于理性，聪明人也可能会干傻事。 多伦多大学人类发展与应用心理学的研究结果显示，IQ测试在衡量人的理性思维方面几乎毫无用处。所以我们看到，很多受过高等教育的聪明人，资产和负债表一塌糊涂。 宜人财富对大量客户进行调查，结果显示：普通人财富管理的短板，是交易频率过高，投资策略不当，风险承受能力与风险偏好不匹配。 实际上，成功的投资者，都有适合自己的投资模式。 就像工作总有擅长和不擅长一样，财富管理也要跟据自己的个性和优势，找到适合自己的策略。 正如查理·芒格所说，“每个人都必须在考虑自己的边际效用和心理承受能力后，才能开始加入游戏。你必须将自己的天性和天分融入自己的投资策略中。” 2.风险定律 投资的风险分为两种，一种是系统风险，一种是个股风险。如果你的投资组合是几个行业的组合，从概率上说，你的风险就下降了一半，只剩下系统风险。 梦想一夜暴富的人，容易孤注一掷，提高杠杆的倍率，但高回报意味着高风险，一旦本金丧失，又得从零开始。 对于辛苦攒钱起家的中产来说，实现资本增值，我们的心态首先应该不是“想赢”，而是“不输”。 宜人财富的建议是：追求财富要稳中有升，“通过多元化配置方案分散风险，实现人生财富的持续积累”。 3.收益定律 一个人的财富观，往往在他起步的阶段就开始形成。从财富管理的角度讲，你每赚到一块钱，就得到了一次接近财富自由的机会。 财富管理就像一场马拉松。同样数额的钱，在不同人的生活中，运动轨迹是截然不同的。 跟时间做朋友，具有耐心的长期思维是投资成功的最重要一环。这也是宜人财富所秉持的价值观。 往往越注重长期回报的人，越能获得更多的收益，巴菲特就是典型代表。在快节奏的投资领域里，巴菲特总是有意识地放慢节奏。擅长“滚雪球”的他，在可口可乐上滚出了100多亿美元，在中国石油(601857,股吧)上滚出了30多亿美元。","categories":[{"name":"Article","slug":"Article","permalink":"http://example.com/categories/Article/"}],"tags":[]},{"title":"Excerpt 07：陈安之时间管理","slug":"Article/07：陈安之时间管理","date":"2015-12-10T16:00:00.000Z","updated":"2021-07-23T05:46:48.000Z","comments":true,"path":"2015/12/11/Article/07：陈安之时间管理/","link":"","permalink":"http://example.com/2015/12/11/Article/07%EF%BC%9A%E9%99%88%E5%AE%89%E4%B9%8B%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/","excerpt":"如果要想成为顶尖，那么就100%的实践，缺一分那就会差很多。 一个人的成就，决定于一天24小时，你做了哪些不一样的事情。","text":"如果要想成为顶尖，那么就100%的实践，缺一分那就会差很多。 一个人的成就，决定于一天24小时，你做了哪些不一样的事情。 目标设定1．梦想清单。列出一生中所要实现的每一个目标。例如去超级市场买东西。列出来你不一定全部都能做到，但是没有列出来，你忘记的可能性可能是99.9%。 2．排好优先顺序。比如说，你不可能同时要房子，要车子，又要业绩提升等等。 3．设立期限。没有期限，那么只可能是个梦想，梦想要成真的话，那么就是要有一个期限。当你把期限写下来之后，你就会清楚的了解，我这个目标是不是太快了，太慢了，还是太多都在同一个时间。都是长期目标的时候你要把它分成短期的行动方案，行动步骤。若发现你所需要的目标都是现在要的，那就建议你去设立一些长期的目标。 4．核心目标。有些人既有这样的目标，又有那样的目标，可是他却没有一个主要的目标。心理学上有一个定律：只要重复不断思考的事情，它都有可能变成真的。怎样找出核心目标，关键必须问自己几个问题，第一，当我把所有的目标都列出来后，问自己当我实现了哪一个目标，其他目标都可能实现。目标可能是事业的目标和收入的目标等。 5．明确想要得结果。详细的描述达成目标后，你会看到什么样的画面。必须清楚地写出来，你会看到什么。当你实现这样的目标之后，别人会对你说什么样的话，比如,XXX你真的很棒。比如你想要买一个车子，你可以把车子的样式，场牌，颜色，什么都描述的非常的清楚。当描述非常清楚地时候，头脑才会看见。 6．找一些照片。持续的不断的看着它来刺激自己的潜意识。 7．有一个梦想手册。把这些图片，图像贴在梦想手册上面，有事没事都拿出来看一看。每天早晚的时候都看看自己的梦想手册。给头脑一个明确的指示。把自己的核心目标或一年内所要实现的四五个目标写在一个小卡片上面。有事没事拿出来看一看。刺激自己的潜意识。 8．重复写自己的核心目标。每天写它十遍左右。时常把自己的目标拿出来复习一下。比如上厕所的时候，和别人分手的时候，吃饭的时候，心情不好的时候，坐车的时候。不断的给自己的潜意识我要的东西。当你有了这样的意识之后，你才可能不断的吸你所要的人、事、物，还有一些资源。 9．找出达成目标最大的障碍是什么。也可以说是最大的石头是什么，其他的小石头都可以去掉，去除掉99%的小石头都是没有用的。最重要的事情就是解决掉最大的障碍。当你克服最大的障碍后，其他的事情都变得很简单。 10．明确的列出有谁可以帮助你达成目标，然后主动去帮助这些人。别人要的事情你多给他点，别人不要的事情你少给他点。列出别人可能要的事情，你首先去帮助他。你给他更多他想要得，你反过来就会去帮助你。 11．模仿。有谁已经达成你想要的目标。可能你没办法见到他，但是你可能去查阅他的资料。如果能见面的话，他可以给你讲30分钟，可能比你自己去找要来的快得多。 12．问你自己你为什么一定要达成这个目标。有很多时候我们设定了很多目标，我们没有一个明确的理由要达成它。因此我们可能处于想要，有兴趣要，可能要，但是却没有一定要的意思。当你有明确的理由的时候，你才会有信心。比如说，我很兴奋，我很热诚，我知道所有目标技巧，我知道最大的障碍，我知道时间运用的技巧。记住一定要写下来。比如说你能写出十个理由你为什么要达成，你是100%充满了自信。 13．问问自己你必须要变成什么样的人，你才能达成这样的目标。比如说事业上的目标，是不是我时间管理要加强，是不是我计划要更周密，我要更积极思考，更有组织，人际关系要进步。目标跟你有距离是因为你还没有做到你应该做到的事情。所以当你自己问自己这样的问题时，你就会很明确的知道自己要改变的地方在哪里。成功那是必然的事情。 14．必须要有一个明确的计划。越详细的计划，对成功的几率越高。详细的计划是列出所有你必须要做的事情。把每一件事情都列出来，假如你列出来的时候，可能有时候这样还不够细。 15．分段。把每一个细节在重新分成很多细节。假如你把每一个细节在重新分成很小的细节，一段接着一段。这时候你很容易追踪，你可能知道哪里是错误的。越是详细的计划越容易复制，越容易达成，你就越充满了自信。 时间管理的技巧：1．明确的目标。没有明确的目标，时间管理起来是非常困难的事情。时间管理的目的就是在更短的时间达成更多的目标。越能把目标明确好，你时间管理就会做的越好。 2．必须要有一个must list。必须把今年所要做的每一件事情都列出来。没有列出来，你的头脑就看不见，那你就不能运用你的潜意识。 3．切割。切割成每半年，每半年我要做哪些事情，然后切割成季目标，我每一季要做哪些事情。每一个月要做哪些事情。每一个月要再写一遍。因为每一个月可能会有突发的事情。全部列出来。每一个礼拜，在礼拜天的时候把下一周要做的事情全部都列出来。十二月当中，我所要实现的每一个目标，每一件事情全部都列出来。一日之际不是在于晨，而是在于昨夜。在前一天晚上把明天所要做的每一件事情都列出来。6件事情是非常好。记住：你永远没有时间做每一件事情，但是你永远有时间做对你最重要的事情。把这个优先顺序排好。 3．“二十八十”定律。你一定要知道哪些事情是对你最重要的。它赋予你最高生产力的。假如你是公司的职员，你必须思考，为什么我被邀请来这个公司工作。明确的了解老板期望你所表现的结果是什么。那每天必须花80%的时间去做那件事情。每次都给他一个明确的期限，每一次都有一个结束点。 4．“Do it now.”摆在书桌面前提醒自己。摆在右上方或左上方。 5．有一个明确的很仔细的计划。 6．每一天至少要有一个至两个小时的不被干扰的时间。在这段时间里，自己把自己关在房子里，开始思考一些东西或做一些你认为最重要的东西。这段时间比你一天的效率都好。可以设定在早上起床的时候，五点到早晨六点半。早晨比任何人都早一个小时上班；中午吃饭的时候，11点或下午1点之后吃饭；别人离开办公室的时候。 7．你的目标和你的价值观要吻合。比如你要设立每天玩三个小时，又设立每天三个小时要很有生产力，同时又都是在同一段时间。要明确自己的价值观，价值观不明确你可能不知道什么是对你最重要的事情，二十八十定律你可能运用的不好。找一个时间把自己的价值明确一下，什么对你时最重要的。是事业，是家庭，是朋友，你把它分配这个时间。 8．每天打坐一个小时。坐在那里一动不动。可以坐在椅子上，没有杂的声音，什么也不想，什么也不动。就自己坐在那里。一开始前十分钟你可能就是要动，你可以自己告诉自己不准动。慢慢的增加时间。 9．所有的事情第一次就把它做对。不需要重复做同样的事情，那样太浪费时间。Do the right thing the first time. 10．必须控制电话拜访。累计电话一起打。同一类的事情最好一次把它做完。比如要做纸上作业，这个时间就做纸上作业。要思考问题，这个时间就是思考问题。 11．纪录每天花了多少时间做每一件事情。例如，刷牙，洗澡，穿衣服，读书时间，谈话时间，社交时间等。能找到浪费时间的根源。 12．时间管理你没法做到我列的这二十几项，但是你只要找到你最弱的那项，找到后你的效率就会倍增。 13．必须把最重要的事情变成很紧急。假如说，读书很重要，你只是说了，那你为什么没 3 去读书，因为你没有把它变成很紧急。假如说健康对你很重要，你没有把运动变成很紧急的事情，所以你就不会去做。 14．必须改变对你自己的信念。必须相信自己是一个很有组织很整齐的人。不准许自己有任何借口，告诉自己是个很有组织的人，很有系统的人。写在目标上，每天看，提醒自己必须变成这样的一个人。 15．每天早晨花30分钟时间来阅读。可以听录音带来刺激自己。或者说把这30分钟来思考自己的计划。不断的思考自己今天该做哪些事情。 16．要把每一个东西放在固定的位置。东西根本不需要整理，需要整理是因为一开始你没有把它的位置摆对。 17．把自己的书桌整理干净。中间只摆一件东西。一开始就做那件事情。从最困难的事情做起。 18．把最重要的事情做完在去做别的事情。如果没有做完，那么你的心理就会有很大的一个障碍。整天你都会想那件事情。别的事情也做不好。假设你第一件最重要的事情都没有做完，那么请你第二件、第三件事情都不要做。因为你连最重要的事情都没有做，其他的事情都是没有用的。 19．坐姿很重要。测量自己的坐姿是否正确的方法就是问自己很有效率的人会这样坐吗？很有效率的人他桌上看起来是什么样子？ 20．预测未来可能发生的困难或者状况。有些人时间管理的不好是因为他没有未雨绸缪的观念。所以他一直在遇到困难，还在当时在解决。当然了解决问题最好的时间是问题发生以前，不是问题发生以后。 21．有计划B。一旦计划A没有效的时候，就把计划B拿出来。 22．在纸上思考会节省你很多时间。 23．阅读。阅读成功人的自传，阅读成功人的书籍，阅读教别人成功的方法，阅读很广泛的资讯。所以从每一个领域当中，你都可以知道怎么样才能让自己过得更好。 24．了解自己的角色扮演。假如你是一个销售员，不要做别人的事情。假如你是一个学生，把自己的书念好。你是一个老师，把你的教材准备好。假如你是一个主管，那么把主管的计划写好。了解自己的角色，依照角色来扮演不会乱掉。 你辛苦嘛？看看那些失败的人，他们会辛苦一辈子。你也愿意辛苦一辈子嘛？ 如何追求超级成功成功最重要的秘诀，就是要用已经证明有效的成功方法。你必须向成功者学习，做成功者所做的事情，了解成功者的思考模式，加以运用到自己的身上，然后再以自己的风格，创出一套自己的成功哲学和理论。 你想知道那些世界级的顶尖人物，是如何透过自我操练与自我鞭策才能达到巅峰？你想知道他们成功的秘诀是什么吗？现在，让我们一起来揭开超级成功的神秘面纱。 1、做你喜欢做的事，然后把它做到最好。你一定要做自己喜欢做的事情，才会有所成就。正确寻找工作的方法，把自己理想和完美的工作条件列出来。 2、要以成为行业中的世界最顶尖为目标。不要把赚很多钱当做是你人生最重要的目标。只要你能够成为最好的人物，最好的事情也就会发生在你身上。当你想要得到一切最美好的事物，你必须把自己变成最好的人，以成为行业中的世界最顶尖为你人生的最终目标，这样的话，你一定可以实现你所有的梦想。 3、成功的人要有远大的梦想，但要有合理的目标。 每一个成功的人都有伟大的梦想。大成功是由小成功所累积，每一个成功的人都是在达成无数的小目标之后，才实现他们伟大的梦想。 不放弃，就一定有成功的机会，如果你放弃，就已经失败了。记住！每一个目标和梦想，都要设定一个期限。目标不达成：1、不合理2、没有期限3、缺乏详细的计划4、没有天天衡量进度。千万不要靠运气过生活，你一定要靠目标和计划过生活。 每一年年底的时候，都要写出明年想要达成的目标。全写出来，选四个最重要、最想要，选1个为核心目标，另3个再排优先顺序，订出具体的完成期限。当你列出目标之后，请你列出一个详细的计划，把计划依照优先顺序排列好，这样会使你达成目标的机率大幅度地提升，这也是每个超级成功者所做的事情。 4、你到底是想要成功，还是一定要成功？ 成功有三个最重要的秘诀：1、要有强烈的欲望2、还是要有强烈的欲望3、还是要有强烈的欲望。 5、每一天都要不断地检讨自己的做法和成效。 做对的一定要不断地加强，做错的一定要立刻改正。因为，同样的错误千万不要犯第二次！每一天一定要检视自己的进度，我检视下属进度，每一礼拜开会做讨论，发生何事（错、对）。 6、一定要跟成功的人学习，尤其是世界级的成功人物。 你一定要学习成功的榜样，让自己进入成功的环境当中，跟着成功者学习。一个人要成功 ，有几个方法： 1、他必须帮成功者工作2、当他们开始成功的时候，也开始跟更成功的人合作3、当你越来越成功的时候，要找成功者来帮你工作。依照这三个方法，按步就班去做，你一定会非常地成功。 7、要成功。要先研究成功学。 要成功，一定要研究成功。一个人的智慧产生的三个要素： 1、成功者不断地搜集资讯，他们相当善于掌握新知。记住！永远要不断地搜集新的资讯2、一个成功的人会不断地学习别人的经验。3、一个有智慧的人，会不断地自我反省。 8、要成功就要采取行动。 世界最顶尖的业务员成功的秘诀：从早上八点工作到晚上昏倒为止。销量永远是一个数字的游戏，你只要越勤劳，拜访越多的顾客，一定就会有成交的机会。 成功的人永远比一般人做得更多，当一般人放弃的时候，他们找寻下一位顾客；当顾客拒绝时，他再问他们：”你到底要不要？”当顾客不买时，他问：”你为什么不买？”记住！永远是你采取了多少行动让你更成功，而不是你知道了多少。 9、要不断地请教成功者，询问他们成功的方法和意见。 一个人要成功，需要不断地历练，需要经过不断地学习，然而，最快的方法就是向一些成功者询问，请他们给你一些意见，给你一些回馈，请他们告诉你做对了什么，做错了什么。 让他们用他们智慧和经验指导你，这样的话，比你看任何的书籍都要来得有效。你永远看不见你自己思考的盲点。问成功人士：”到底还有什么地方，我还需要改进？” 10、不管你做什么事，一定要快乐，一定要享受过程。 推销宗旨、理念：”提供顾客最好的服务，帮助顾客解决他们的问题。” 11、要设立高的标准，绝对不要接受第二流的表现。 你做事的品质和你个人的成就成正比，跟你服务的人数成正比，跟你的态度成正比，跟你的知识成正比，跟你的标准成正比，成功者都拥有高的标准，失败者的标准都不高。凡事零缺点。一定要求第一名。 12、改变自我的心像。 心理学最伟大的发现之一，就是可以籍由自己的不断想像，而成为自己理想中的人物。你必须想像自己是一个非常成功的人，非常富有的人，非常积极的人，非常热情的人，非常有动力的人，你必须每天不断地花一些时间，想像自己成功的景象。 你必须想像自己是一个天生的羸家。不断想像每一年你要达成的目标，不断具体地一次又一次，睡梦中输入潜意识。你不妨今天就把你的目标，有适当的图片，把它剪下，贴起来，每天想像，每天想像，早晚灌输到你的潜意识里面，来改变自己。 13、潜意识的力量。 “潜意识的力量比意识大三万倍以上。”运用潜意识的第一个方法，就是不断地想像，改变自我内在的一个影像和图片；第二个方法，也就是要不断地自我暗示，或是所谓的自我确认。 “我会成功，我会成功，我一定会成功””我会很有钱，我会很有钱，我一定会很有钱””我的业绩不断地提升，不断地提升，我的业绩一定会不断地提升””我很会存钱，我很会存钱，我很会存钱”反复地练习，反复地输入。 影响一个人潜意识最重要最重要的关键，就是要不断地重复，不断地重复，再一次不断地重复，大量地重复，有时间随时随地不断地确认你的目标，不断地想着你的目标，这样的话，你的目标终究会实现的。 14、把你的目标录在录音带上，每天不断地重复播放，来输入你的潜意识。 不断地重复，不断地重复。方法简单，一般人都不愿意去尝试，不尝试，铁定没有效。 15、听潜意识录音带。 影响潜意识最重要最重要的关键，就是反复的次数。”我的收入不断地增加，我的收入不断地增加，我的收入轻而易举地不断地增加””要节俭，要节俭，银行要存钱，要存钱””我们拥有完美的细胞”（不断地重复听） 16、运用潜能开发机。 要改变潜意识，世界上最快的方法，就是运用催眠。新的东西总是容易受到排斥。成功者，勇于尝试新工具。 17、不断建立自己的知识基础。 每年平均阅读400-600本书或杂志。成功有一个很重要的秘诀，就是要用最短的时间，采取最大量的行动。所有的领导者都是阅读者。每会必到。学习才会让你更成功。你必须花30%的收入来不断学习。成功是不断持续累积的，就像学习也是一样。 想赚得更多，一定要学得更多，你的专业知识，一定要是你行业的顶尖。你之所以成功，是因为别人喜欢你，别人相信你；别人凭什么相信你、喜欢你，因为你懂得的比他们多，他们觉得跟你在一起有希望。他们觉得跟你在一起可以学到东西。 成功的关键成功等于目标，其他都是这句话的注解 成功的七个关键: 1.设立目标。明确目标就是制定计划，计划要分段；达成目标的原因；设立核心目标；目标要有清单；排定优先顺序 2.时间管理。每分每秒做最有生产力的事。目标要有期限。 3.信念&lt;自我确认&gt; 积极的心理暗示 4.知识，经验。既对历史事件的总结和在行动过程中获得的认知 5.目标愿景，心灵演练。 6.马上行动。最短的时间之内采取最大量的行动。生理状态和饮食习惯创造活力充沛的身体。 7.自省和检讨。每日开始之问，结束之问，出来问题之问。 我现在可以着手做哪三件事对我的目标和个人成长有益？ 今天的一天当中，我学到了什么？有哪些事可以再进步？ 我要准备什么时候起下决定改变并开始行动呢？ 达成目标的最大障碍是什么？ 为了要达成目标，我必须停止做哪些事情呢？ 如何让自己快乐地解决问题，并达到希望的结果？ 我有没有在我可以做到的情况下，最大限度地采取行动呢？ 对于现在的问题，我要做哪些事情来改变他呢？","categories":[{"name":"Article","slug":"Article","permalink":"http://example.com/categories/Article/"}],"tags":[]},{"title":"Excerpt 06：撒加和沙加","slug":"Article/06：撒加和沙加","date":"2015-12-03T16:00:00.000Z","updated":"2021-07-23T05:43:24.000Z","comments":true,"path":"2015/12/04/Article/06：撒加和沙加/","link":"","permalink":"http://example.com/2015/12/04/Article/06%EF%BC%9A%E6%92%92%E5%8A%A0%E5%92%8C%E6%B2%99%E5%8A%A0/","excerpt":"","text":"为什么撒加及沙加十分客观理性？ 2018-02-28 作者：卢仕岷摘要：一个，被称作是神化之身，一个，被公认是最接近神的男人。 本来，我想用三个同样形式的排比句，但我发现，我所选出来的词句都那么无力，总不能完全概括这两人的特点，于是也就作罢，我想，你们的心情也是一样吧。 喜欢他们，却不能用自己的话完全表现他们的特点。此二人，可算是《圣》中除主角外最最出彩的人了。但《圣》中的主角实在是太受车老偏爱，以致到了人们不能承受的地步，便出现了多数圣迷不喜欢主角，转而迷恋配角的有趣现象。但我们也不得不承认， 车老所塑造的这两个人物，的的确确是相当的成功，相当的到位。 沙加那么，撒沙迷们缘何被二人吸引呢？就此问题，我在几天前在圣吧中发布了“撒（沙）迷们喜欢撒（沙）的理由”的帖子。很可惜，响应者少之又少。没办法，我只好硬着头皮毛遂自荐，拿自己的观点去评论一翻了。但，我对自己的客观，理性充满信心。 在圣吧中，有多少有关撒沙孰强孰弱的帖子我不知道，但大家都清楚，太多了，实在是太多了。而且，这种帖子的点击率，回贴率都很高。大家都乐于讨论这样的话题，并且，乐此不疲。讨论中，大家你方唱罢我登场，撒迷有撒迷的理由，沙迷有沙迷的依据，往往因为某一句话或某一个观点的分歧而争得面红耳赤，甚至发生口角，也就有了少数撒迷把沙加说成是虚伪小人，少数沙迷把撒伽批作恶贯满盈的情况。 如果大家仔细看看，就会发现一个问题。这些讨论90%都是围绕着撒沙二人谁打得过谁而展开。我在帖子中说过，一部优秀的作品，决不可能把一切都交代得一清二楚。总会给人留下发挥想象力的余地，但是，我们仅仅从表面上看谁比谁厉害，或者说我们喜欢圣中的某一角色，仅仅因为他（她）厉害。难道不太肤浅了吗？难道圣迷们喜欢心中的偶像仅仅是出于自己的好胜心吗？不，决不是。我们从偶像身上看到的，决不仅仅是这些而已。下面，就让那些还在迷惘中的圣迷，看看一个真真正正可以被称做圣迷的人，也就是楼主我对自己的偶像的感情把。 其实，撒伽和沙加这两个人物，不管是外貌还是个性都迥然不同，分属于两个极端，一个如熊熊烈火，有吞噬一切的气魄；一个如寒潭止水，有包容万物的情怀；一个气势如虹，却也饱含侠骨柔肠，一个温文而雅，但同样意坚志如钢；一个如盛夏，是绝对的领袖，一个是深秋，是心中的脊梁。 沙迷们可算是理想主义者。他们喜欢沙加，因为沙加就如人们理想中的那样完美。因此，很多人推断沙迷们的平均年龄比撒迷小。他们总有美好的憧憬，相信理想终会成真，因为他们还没有经历生活的挫折，还很单纯。所以，这种推断也不是没有根据，当然，也不排除一部分人一直都很顺利。在他们眼中，沙加就像她们心中的或他们想成为的白马王子。 首先，沙加外型俊美。相信若不知情的话，所有人看到沙加都会认为是一美女。那婀娜的身段，那如丝的长发，那天使般的容貌。只能用两个字来形容——圣洁。 其次，沙加气质高雅。沙加平时总是闭着眼睛，给人一种娴静的感觉。又好象时刻在思考着什么，让人猜不透，在那双秀丽的眼睛后面，究竟藏着多少玄机。沙加的坐，如参禅的神明，沙加的立，像亭亭的百合，沙加的行，若飘逸的彩虹，沙加的一颦一笑，无不给人一种心悦诚服的舒畅感。那是由佛祖的智慧引发的一种由内而外的境界。面对一辉，沙加轻闭双眼，单手放于胸前，娴静而安详。这是怎样一个男人啊，身处于残酷的战斗中，面对着号称不死鸟的一辉，他神清气闲，就仿佛一切的一切都不存在似的。一个把一辉视若无物的人，他的内心，他的实力，会是怎样的强劲啊。而他在战斗中所表现出来的超凡脱俗，就如那高高在上的佛祖，以他的博大与宽容审视着眼前喧嚣的尘世，面对着人们的愚昧无知，也接受着人们的顶礼膜拜。从没有一个人把好象战斗那样的事情演义得如此儒雅，飘逸，让人甚至以为是一种美的享受。 撒加再次，沙加个性鲜明。这一点，主要体现在沙加的言辞中。虽然沙加的话不多，但可谓句句经典。在黄金十二宫中，面对一辉的问题，他说：“因为我所见到的教皇，他是正义的。”简短至极的话，却如金子般闪烁着光辉。是的，沙加并非为某一个人而战斗，他只信仰正义。把一辉从扭曲的时空救回来，一辉问他为什么救自己。沙加说：“在你们身上，我看到了一种力量，也许，你们能创造一个新世界，我想看看这个世界。”多么诚恳，多么谦虚！“所谓真相，是深不可测而又很美好的东西。”天籁般的声音，足以让冥斗士们胆战心惊。我们都清楚，冥斗士的死期到了。也许这就是我们信仰沙加的原因之一。我们信仰真理，所以，我们信仰沙加，因为他足够公正，足够正义。面对要取雅典娜人头的撒伽，修罗，卡妙——这三个被称作以往最强的黄金圣斗士，他说：“像你们这样的圣斗士，是绝对不会成为哈帝斯的走狗的。”“监视你们的那帮杂鱼已经收拾了，把你们心中的话说出来吧。”那一刻，我如梗在喉。相信撒伽他们也被感动了。忍辱负重，冒着受人唾弃的罪名与自己昔日最亲密的战友为敌，最需要什么？战友的信任和理解。而这一点，沙加做到了。沙加啊，他是那样的体贴，那样的善解人意，我不知道看到这里，那些不沙加说成虚伪小人的人作何感想。这样细腻的男人，相信每个女人都会动心吧。 还有，沙加聪颖过人。第一个领悟八感，还给雅典娜指明了方向。一个有资格点化女神的人，自不需要太多解释。 最后，还得说说沙加的实力。六道，天魔，天舞。带有佛教色彩的招数，华丽而强大。使他可以傲视所有的对手。对弱小的敌人，无论多少，无论远近，天魔可以轻松搞定。面对强于自己的对手，还可以积蓄小宇宙，使之瞬间爆发，凌驾对手，使出天舞，让敌人不能反击也不能逃跑。对于没有空间能力或空间能力弱的对手，一个六道就解决了。另外，沙加制造幻象的能力也不可忽视。这比一辉的幻魔拳更宏大，更真实。正是它，把撒伽他们阻拦了很长时间。沙加的空间能力可说是圣斗士中最强大的。“可以从任何空间回来。”又因为是最接近神的人，所以，像神一样会编织结节。冥王篇中的防御壁即是此种性质。它的防御效果我也不再赘述。这一切的一切，都来自沙加那强大的小宇宙。这通过他与撒伽他们的肉搏战就可见一斑。还有，使瞬的星云锁链攻击小强，轻易粉碎凤凰圣衣，没有强大的小宇宙是不可能做到的。其实，沙加的实力，通过他在圣域中的地位和其他人对他的态度也能看出来。作为撒伽死后，整个圣域的主心骨，他是当之无愧的人心所向。撒伽对其他人是轻蔑，对沙加却不同。他说：“即使天地倒转，沙加也不会败。”“沙加可不是你们这帮杂鱼凭数量优势就能打败的。（对冥斗士）”足以看出他对沙加的重视。还有，亚尔迪死时，除了在场的穆掉了几滴眼泪，其他人连点表示都没有。可是，当沙加死时，众人是如何表现的呢？小艾在预感到沙加要寻死的时候就惶惶张张的跑去救，沙加死后，米罗擅离天蝎宫，卡隆，雅典娜，众小强，哭声一片，仿佛天塌了一样。的确，沙加的存在，就是众人坚持战斗和相信圣战胜利的希望。希望破灭了，谁不心痛呢？说句夸张的话，他们其实也在信仰着沙加啊。一个男人的强大，到了令战友们得以依赖的地步，也就不用再说什么了。 再说撒伽。 我想，撒迷应该是不折不扣的现实主义者。他们在生活的过程中，发现现实并非常遂人愿。像沙加一样完美的事情实属虚幻的妄想。因此，他们更倾向于并不完美的撒伽，在他们心中，撒伽正是因为他的不完美而完美。更重要的，是撒伽那种与生俱来的从不低头的反抗精神，这给他们战胜挫折的勇气与信心。他们信仰撒伽，在他们看来，撒伽的胜利就是他们克服生活压力的胜利，在他们心中，撒伽永远最强大，永远不退缩。 撒伽的体形可说是每个男人梦寐以求的。那种透射着勃勃生机的肌肉使撒伽的强大变得理所当然。1.88M的身高，宽阔的肩膀，再加上帝王般的双子座圣衣，让撒伽站在哪儿都代表了一种让人附首称臣的威严。这种威严在《圣》中无人能及，包括史昂和哈帝斯。撒伽的面孔总能让人充满信心，有他在，没人相信失败。 撒伽的个性是撒迷们喜欢撒伽的一个极其重要的原因。他的灵魂只能用凌驾一切来形容。他的无所畏惧，他的目空一切，他的领袖风范，他的强大实力，他的悲情人生，他的埋藏于坚毅外表下的深深的爱与善良。他的一切的一切，都是撒迷心中永远的感动。很多沙迷总是拿沙加如何的以1V3和撒伽是如何的坏来批撒伽。先不说撒伽的实力，对撒伽的坏，俗话说，男人不坏，女人不爱。这里的坏，并不是烧杀抢掠无所不用其极的坏，而是不循规蹈矩，不过分迂腐的那种叛逆。而撒伽就是这种人。所以，在他知道自己不是下届教皇时，他秒杀了史昂。不得不承认，在做一个合格的教皇方面，智慧型的大艾不如撒伽。史昂老了，脑子不免有不灵光的时候。所以，他作出了一个关系整个圣域甚至全人类前途的错误决断。对此，没人提醒史昂，即便是对自己及撒伽相当了解的大艾也只是惊讶教皇的位子传给了自己而不是撒伽。事实上，即便史昂把教皇的位子传给迪斯，我想，也不会有人反对。他们只会听从命令，他们敬重史昂，却过了头。惟有撒伽，他相信，只有自己才是最佳的教皇继承人，他相信，只有自己才能在没有女神的情况下，使圣域威慑四方，从而维护地上世界的安全。他相信史昂是错的，于是，他提醒了史昂也果断地秒杀了史昂，事实上，这也是改正史昂错误的唯一方法。对此，圣域中后来知情的人保持沉默体现了人心所向，而十三年中，撒伽的功绩也证明了他的正确。事实上，像撒伽那样的人，生来就是领导别人而非受人领导的——他的心太高了。 从上面的事实，我们不难看出，凡是自己认为对的就去做，即使对方有着无上的权利，即使自己有对之景仰有佳，但，错就是错，对就是对。错了要改，不改就是危害真理的敌人。亚里士多德说：“吾爱吾师，吾更爱真理。”这种客观理性，这种明辨是非，撒伽当之无愧。有人以为在十三年中，哈帝斯和波塞顿都被封印着，所以，圣域没什么危险可言，撒伽也就无所谓什么功绩了。哈帝斯和波塞顿被封印是事实，但不排除还有其他的危险。撒伽自己也说，没有他，这世界早被吞并了。撒伽不是个爱慕虚荣的人，他不会自吹自擂，因此，我们不应该怀疑这话的真实性。并且，经过了上次圣战的重创，振兴圣域的责任也不是多么轻松的事情。撒伽选择了教皇，也就选择了一条“路漫漫其修远兮，吾将上下而求索”的不归路。撒伽错就错在他不该去刺杀雅典娜并阻止她重回圣域。但这一举动是野心膨胀也好，是真的不想把人类的安危托付给一个柔弱的小女孩儿也好，都已不重要了。因为无论怎样，撒迷都会一如既往的支持他。喜欢撒伽，因为他的不完美，因为他的真实。圣斗士也好，冥斗士也罢，都以忠于神，保护神为己任。然而在这群人中却出现了像撒伽和卡隆这样的人物。一个敢于与雅典娜作对，一个把波塞顿玩弄于鼓掌之间。一个藐视神的人，还有什么能让他畏惧呢？孟子说，人定胜天。撒伽不正是一个逆天而行的人吗？在教皇庭与雅典娜对峙，当面痛贬小强，向雅典娜示威：看看这些夸下海口要保护你的圣斗士都变成了什么样子吧。在他把小强的合力一击化解后，雅典娜的眼神，如果你注意看就会发现，她被震惊了。雅典娜被震惊过几次？只这一次。那一刻，我想，她一定产生了爱将之意。然后，五名黄金想一起讨伐撒伽。撒伽也只是顿了顿。请注意，是五名黄金，不是杂鱼。你也许会说，撒伽就是个自大的家伙，或撒伽是死要面子不要命。我要坚决的予以纠正。撒伽决不自大，也不爱面子。他只是无所畏惧，他不怕任何挑战，包括来自于神的。在剧场版里，撒伽启迪星矢的那段话道出了他无所畏惧的真谛。大体意思是，只有怀着必胜的信念，才能打败比自己强大的对手。而撒伽无疑具有这种素质。在这里，我没用剧场版刻意抬高撒伽的实力，也没说撒伽能打败五黄金。我只想点明撒伽的傲气。说白了，《圣》这部片子，也可以说日本所有的打斗片，都强调了精神对个人能力的强大作用。星矢也好，浦板幽助也罢，在动画中之所以创造奇迹，都是因为他们有顽强的精神与必胜的信念。同样在动画中的撒伽，也具有如此的特点，相信他也应创造奇迹。所以，他秒了一个天斗士也就不希奇了。这是很多沙迷不服的地方，他们应该找老车，而不能因为撒伽秒了天斗士而沙加没秒就说撒伽也秒不了。撒迷们喜欢撒伽，因为他无所畏惧，我相信在他的感召下，撒迷也一定具有或正在具有这种宝贵精神。人们喜欢某人，总有一定的原因。这就像宗教，信仰它，因为它可以给人以寄托，教人们以宗教的方式解决生活中的困难。基督教人把一切寄希望于上帝的解救，佛祖教人们学会忍受，而撒伽告诉撒迷，有什么敢于拦路的话，就凭实力让他/她/它消失！撒迷信仰这一点，也乐于用这种方式对待挫折。 说一千道一万，归根结底，还得回到撒伽的实力上来，因为撒伽的这一切几乎都是以他超强的实力为前提的。撒迷们崇拜撒伽，因为他是强者。整个黄金篇中，虽然都是以撒伽之乱为线索的，但直到最后两集，撒伽的样子才被我们看清楚。然而他刚一出现就代表了一种超乎人们想象的实力。从星矢，一辉的轮番登场，到五位小强的合力一击。每次攻击层次的不断提升，我们都以为撒伽这次差不多要挂了。但每次他都能像什么都没发生一样站在那里，笑着，让对手恐惧，不知道眼前的这个男人究竟有多么强大。因为仿佛无论多么强劲的攻击对他都毫无作用。整个《圣》中唯一一次令星矢失去了战斗意志的是撒伽。星矢说：“这家伙太可怕，太厉害了，无希望了，我已经无力还击。”号称不死鸟的一辉，在撒伽面前完全没有了威风。只能拼上性命拖住撒伽。有人说到达教皇时的小强已经筋疲力尽。这完全是狡辩。小强们哪次打倒对手不是在经历了对手对之的一翻残酷虐待之后？难道他们打倒对手的力量还不及刚开打时吗？那他们为何不在一开始就打倒对手？根本就是自相矛盾。在被虐中提升小宇宙才是真正的小强本色。黄金们也说了，经历了战斗的洗礼，小强们提升了七感，此时他们挥出的拳可说是最强的。在教皇厅撒伽的强大是有目共睹的。让女神都颜色大变可以说明一切。倒是很多人拿沙加1V3来说撒伽是多么的不如沙加。作为一个撒迷，我有责任和权力用我力所能及去为撒伽说两句。在冥王篇里，撒伽他们（包括史昂）杀了几个黄金？答案是0，他们能杀几个？不知道，但肯定不止一个。那为什么没杀？原因很简单。他们一开始就说了，去取雅典娜的人头，而不是杀黄金。若杀了黄金即便雅典娜穿上神衣也只能孤军奋战，不可能赢得圣战。因此，他们要取雅典娜的头，还要保证黄金的性命。所以，他们一开始就对穆说从那处让开，而不是像冥斗士那样遇谁杀谁。记得三人在通过金牛宫时说：“仿佛有正规冥斗士潜入了圣域呢。”“亚尔迪本可以毫发无损的。”（忘了是在哪，可能是漫画，总之有很强的印象。）我想，撒伽他们的确是没用上全部的实力的。要不然，你以为穆能躲过修罗那一剑吗？圣剑的犀利加上修罗的突袭，是大艾也能秒杀的绝技。却为什么恰倒好处地仅把穆的几根头发斩落？这样既可以令穆不受伤害，也可起到绝佳的威慑作用，以期让穆闪开。还有，穆为什么要交由史昂处理？因为史昂同样可以用星光灭绝把穆传走。为什么撒伽他们要用那种方式通过狮子宫？因为小艾不是穆，他会不假思索地与撒伽他们真干。到那时，撒伽他们就陷入了下手也不是，不下手也不是的境地而无法自拔。在这种情况下，撒伽三人对沙加会用100%的实力吗？不会！你们真的以为沙加的防御避挡住的是三位以往最强黄金的绝招吗？那撒伽他们不是太没有人性了？对昔日的战友痛下毒手，这还算圣斗士吗？在双树园，三人斗沙加，真的用了全部力量？若是一场真正的敌对战斗，对沙加不是不了解的修罗，卡妙会如此大意地走近已拿出佛珠摆好姿势的沙加？太搞笑了吧。这一切的事实说明，撒伽他们未用全部实力。再说说沙加的天舞宝轮。（天魔那种物理招数不会伤害撒伽多少，而六道那种空间招数对同样拥有空间招数的撒伽来说也不应有多大用处。）天舞的确是相当厉害的招数。中了天舞，就不能反击，也不能逃走。如果是单挑的话也用不了A。E，那就只能自爆以期凌驾沙加的小宇宙了。而自爆就意味着自己也赔上了性命，天舞是破了，沙加还是没打倒，就像一辉。那怎样才能破天舞呢？只有使小宇宙凌驾沙加。撒伽做不做的到呢？我不敢确定。但我相信，他能。从他的惟我独尊的气概和深不可测的强大实力。提升小宇宙至凌驾沙加只是时间问题。（别忘了，撒伽的实力到底有多强还是个未知数，因为还没有人把撒伽打倒过。）而撒伽超强的抗击打能力会帮他赢得充足的时间。沙加会剥夺六感，但剥夺了六感又能怎样呢？一辉不照样很精神吗？撒伽比一辉强是无庸质疑的，沙加整不死他，只要撒伽把握时机，相信能凌驾天舞的。再一个，天舞的强像A。E一样，只能在小范围内。撒伽完全可以采用远程决战的战术来对付。从撒伽那一记穿透十二宫的重拳可知他的远程打击能力。沙加防御强，撒伽抗击打能力强。但就战斗意志与战斗经验方面，沙加很明显稍逊一筹。毕竟，撒伽比沙加更加成熟，经历了更多是非，内心更加殷实。还是那句话，撒沙在风格上是完全不同的两个人，硬加比较是很难的。我没说撒伽就比沙加强，只想警告那些敢于藐视撒伽的人，事实本楼主已经说得再明白不过，如果你们再顽固不化，那结论只有一个，就是你们的愚昧无知。写了这么多，相信很多人能看出来，我并没有一味地强调谁强啦，谁能打得过谁啦，我认为撒迷们讨论这个还有情可原，因为撒伽的魅力就体现在他战斗中的无所畏惧。沙迷却不应该，因为沙加本身不是一个争强好胜的人，他的魅力也不靠他的实力之强劲去展现，那沙迷们一而再，再而三的沙加第一论是不是反而让人以为沙迷们仅仅因为沙加强大而去喜欢他呢，那对沙加这样一个人物来说是不是太肤浅了呢？好了，那是沙迷的事情，我也不说太多。反正我除了注重实力以外，还非常在乎那些隐藏在人们外表下的让人感动的美好品质。我希望通过这篇文章能加深某些圣迷对撒沙的理解。今后在讨论他们的时候，不要再单纯的拿实力去比较，正像我前面说的，我们不是仅仅因为他们强大而喜欢他们的。","categories":[{"name":"Article","slug":"Article","permalink":"http://example.com/categories/Article/"}],"tags":[]},{"title":"Excerpt 05：网易新闻：大部分看起来很努力的人，不过愚蠢而已","slug":"Article/05：网易新闻：大部分看起来很努力的人，不过愚蠢而已","date":"2015-11-26T16:00:00.000Z","updated":"2021-07-23T05:43:07.000Z","comments":true,"path":"2015/11/27/Article/05：网易新闻：大部分看起来很努力的人，不过愚蠢而已/","link":"","permalink":"http://example.com/2015/11/27/Article/05%EF%BC%9A%E7%BD%91%E6%98%93%E6%96%B0%E9%97%BB%EF%BC%9A%E5%A4%A7%E9%83%A8%E5%88%86%E7%9C%8B%E8%B5%B7%E6%9D%A5%E5%BE%88%E5%8A%AA%E5%8A%9B%E7%9A%84%E4%BA%BA%EF%BC%8C%E4%B8%8D%E8%BF%87%E6%84%9A%E8%A0%A2%E8%80%8C%E5%B7%B2/","excerpt":"","text":"熬了几次夜就觉得鞠躬尽瘁，坐了几站地铁就觉得漂洋过海，没有吃晚餐就觉得一九四二，没人打招呼就觉得百年孤独。一个人被自己的事迹感动得稀里哗啦，别人却觉得你是个傻逼。 身边不乏这样的人： 每天都在熬夜学习，可考试结果不尽如人意； 每天都是最后一个离开公司，可月末报告时总挨批； 每天都去健身房锻炼身体，过了好多个30天，还没练出马甲线。 整天熬夜读书，没事就会刷手机，朋友圈的点赞和评论数他最多；总是熬夜加班的，往往效率低下且拖延，白天磨洋工，晚上赶夜工；看起来去健身房锻炼的，实则没在跑步机上呆几分钟，就在朋友圈秀汗水。 相比于整天无所事事的人来说，他们已经很正能量了。 但显然，毫无意义。 他们忙忙碌碌，却又碌碌无为。 时间虚度，空留疲倦。 以前同宿舍一个姑娘，是公认的拼命。 每天6点起床埋头读书、做题，一坐就是一整天；熬夜是家常便饭，朋友圈时不时能刷出她凌晨3点的状态，对世界道一声晚安，底下称赞她“努力”、“正能量”的评论不断。 但她的付出与回报从不对等。她成绩很差。这个困惑直到我们一起考研，才得到解答。 原来她每天坐在书桌前，不全是在学习：翻一会儿书，就忍不住拿起手机刷一下；因为起太早，容易犯困，于是经常在图书馆补觉；熬夜时随手发一条励志朋友圈，之后的时间和注意力全都用来回复大家的评论与点赞。 熬夜学习，最后变成了熬夜刷手机。 考研失败，理所当然。 上天不会亏待努力的人，也不会同情假勤奋的人。 有时，付出了时间，并不等于努了力，你随时可以被取代。 就像《穿普拉达的女王》中安迪没把工作做好，被女魔头训哭后跑到奈杰尔那里诉苦，反被奈杰尔教训： “如果觉得累，辞职好了。我可以在五分钟内找到一个很想要这份工作的女孩顶替你。你根本没有努力！你在抱怨！你希望我对你说什么？要我说‘真可怜，马林达又欺负你了，真可怜，可怜的安迪’？她只是在做她的工作，而你还抱怨她为什么不亲吻你的额头，每天都给你的作业批个金色五角星。醒醒吧，亲爱的!” 任何没有计划的学习，不过作秀罢了，任何没有方向的努力，不过自欺欺人而已。 真正的努力，需要方向。 正如热播韩剧《孤独又灿烂的神—鬼怪》中演的那样，拥有超能力的男主角金信1968年在巴黎遇到了一个打工少年，他给了少年一个三明治，并使他免于虐待。 因为知道了奇迹的存在，有了明确的目标想要偿还三明治的钱，男孩通过自己的努力成为了律师，还帮助了许多有困难的人。 48年后，男孩已经70多岁，即将走完这一生时，金信为他送行，说： “我给数千人递过三明治，但像你一样前进的人却很少，一般人都会停留在奇迹发生的瞬间，请求我再帮他们一次，就好像把奇迹寄存在我这一样”，“你的人生是你自己改变的”。 是啊，神只会眷顾朝着目标真正努力的人。而那些指望通过麻木努力来自我感动，等待奇迹再次发生的人，终其一生，也只能困顿度日。 「插入的图片」 我们只是看起来很努力，却轻易地感动了自己。 如同微博上说的那样： 熬了几次夜就觉得鞠躬尽瘁，坐了几站地铁就觉得漂洋过海，没有吃晚餐就觉得一九四二，没人打招呼就觉得百年孤独。 可世界上最愚蠢的莫过于自己感动自己。 一个人被自己的事迹感动得稀里哗啦，别人却觉得你是个傻逼。 熬夜如此，爱情也这样。 曾经看过一个新闻，一个男生和女朋友吵架后，为求得原谅在女生宿舍楼下跪了一天一夜。他可能觉得自己很伟大，很痴情，几乎连自己都要感动自己。 殊不知在我们看来，这样的举动太幼稚，有股胁迫的意味，让女生承担了不该有的压力。自以为是的救赎可以感动自己，但感动不了别人。 故事的结尾，女生并没有原谅男生，他的“努力”，并无意义。 恋爱中自己感动自己的最高境界是：你一定也很爱这么爱着你的我吧！ 因为自己有付出，深情到义无反顾，痴缠到感动自己，所以理所应当觉得对方也会被感动，这毫无道理。 若是该理论成立，电视剧里又怎么会有那么多痴情男二、幽怨女二存在呢。 也是。 喜欢一个人，仅凭努力，怎么足够。 这个世界，很多时候是结果导向的，没人在乎你付出了多少，没人关心你为此受过多少磨难，他们只在意，你有没有把事情做好。 无印良品的社长松井忠三说：“面对工作，若只像少年棒球队的孩子一样，笼统地抱持着我要努力的心态，是最糟糕的。业余的世界还能容忍这样的心态，但在专业的世界里，如果努力过后没有成果，只会被大家认为你能力不足。” 「插入的图片」 努力，是成功者的借口，却又必不可少，是失败者的慰藉，尽可怨天尤人。 真正努力的人，没时间感动自己，因为他们一直在专心做一件事，用心坚持，决不放弃。 过多地炫耀自己的努力，不过是因为没底气。 没什么拿得出手的成绩，只能通过勤奋标榜自己。 大部分看起来很努力人，不过愚蠢而已。 除非你知道自己要成为什么样的人，否则你的努力不会奏效。","categories":[{"name":"Article","slug":"Article","permalink":"http://example.com/categories/Article/"}],"tags":[]},{"title":"Excerpt 04：国人在网络上的六种形态","slug":"Article/04：国人在网络上的六种形态","date":"2015-11-19T16:00:00.000Z","updated":"2021-07-23T05:42:57.000Z","comments":true,"path":"2015/11/20/Article/04：国人在网络上的六种形态/","link":"","permalink":"http://example.com/2015/11/20/Article/04%EF%BC%9A%E5%9B%BD%E4%BA%BA%E5%9C%A8%E7%BD%91%E7%BB%9C%E4%B8%8A%E7%9A%84%E5%85%AD%E7%A7%8D%E5%BD%A2%E6%80%81/","excerpt":"","text":"作者：冰河猛犸 据观察，中国人在网络上的表现大概呈现出6种形态： 左愤、右愤、犬儒、人云亦云者、既得利益者、独立思考者。至于所谓的“五毛”、“美分”，可以看作他们的职业所迫，并不能反映其个人的观点。 这6种形态往往会在某个具体的人身上产生交叉和重叠，而且随着生活经历的增长和对现实的认识（妥协），某种形态最终会占主导，从而完成个人在青年时代的思想定型。 （一）人云亦云者这一部分人很可能占到了大多数，也是较为沉默的大多数。他们的沉默不在于不表达观点，而是他们的观点过于的简单和流俗，引不起争议，也没有多少参考价值。 这类人惯用的表达习惯是支持某个据有鲜明观点的人，因为这个观点恰好契合他第一意识的想法；至于这个观点是不是真的合理，有没有论据支持，他并没有深究的习惯。 人云亦云者往往会通过“口水仗”在一些突发性、反应强烈的争论性帖子上产生强大的合力，他们也是网络公关公司、“五毛”、“美分”需要争取的最大同盟。人云亦云者集体的无意识或者有意识的参与，造成了一些莫名其妙的现象，比如“贾君鹏”、“奥巴马女郎”等；同时，他们也是所有类型的八卦帖的忠实爱好者，明星八卦、豪门恩怨、上流社会、男女情感，无论故事如何狗血，只要显得较为隐秘或者夸张，都足以让他们津津乐道。 人云亦云者在面对某些专业问题的争论时，如果恰好进入了他的知识领域，那么他很可能会以专家的口吻来解释。往往以这样的语句：“我是学XXX的，在这个领域工作了XXX年，对这个东西还是很了解的。。。”，其实在外行人看来的相对专业，仍然脱离不了“人云亦云”的本质。写完之后，可能会跟上一跟，简单的辩论一下，不过，第二天就忘记了。 这类人最不容易在网上掐架，因为，那么多帖子需要看，那么多无聊的时间需要打发，掐架有什么意思？ （二）既得利益者这群人的职业可能为：大小老板、公务员、垄断企业员工、外企中层、民企中层、学生等。每一期《读者》都不厌其烦的告诉读者们，你们要成为他们。 35岁以下的既得利益者，往往得益于以下几个因素：1、父母、兄长或者姻亲的庇佑2、升学时进入了精英学府，职业起点较高3、个人在某方面能力突出且机遇较好 如果3个因素都具备，恭喜您，有机会成为下一个白云峰。 在中国现今的社会下，“关系”仍然是第一生产力，而年轻的既得利益者往往很大程度的继承了长辈的关系。如果没有任何关系可以继承，那么对不起，您只能谨记“书中自有黄金屋”，通过层层选拔性考试进入中国的精英学府。能上清华北大当然最好，差一点的也要北航、武大等，另一类值得一去的是某些专门类大学。 因为，大学除了混到文凭外，另一个重要的目标是通过老师、校友获得“关系”。这也是为什么搞铁路要进北交、搞石油要去中国石油、搞电力要去华北电力、当法官要去西政、中政的原因。 最后一群人就比较累了，纯粹的白手起家，这样混出来的都是深刻的人性观察者，他们稍有一点积累，就会努力经营自己的关系网。譬如某位滞留加拿大的矮胖子，或者那位卖电器的大老板。 现有体制之所以看上去仍然很有活力，很大一个因素就是年轻的既得利益者这个群体仍然很强大且稳定。这群人并非不想让现实变得对他更有利，不过，他们并不认为哪些在网上嚷嚷的人有这个能力。他们心里说：再过几十年吧，一些都会好起来的。在说这句话的同时，他们仍会把精力放在理财投资、发展关系上。 既得利益者在网络上的表现往往不够活跃，因为他们生活安定、心态平和，既无近忧，看上去也没有远虑。有位仁兄说的对，很多既得利益者头脑很清醒，他们接触社会的层次较高，有足够的机会去考虑一些“大问题”。但是，头脑清醒不等于会自断财路；既得利益者由于与当前体制存在千丝万缕的联系，他们自觉不自觉的会为自己拥有的财富、地位辩护。 另一种让他们参与程度不高的原因是，和现实社会相比，网上几乎毫无逻辑可言。在一个板砖横飞的帖子里，稍微发表几句不同的观点，便有可能被扣上“五毛”或者“美分”。而最为痛苦的是，网络世界看表达而不看实力，平时惯于用名车、名表、名烟压倒对方的手段，在这里没有用武之地。一个穷的叮当响的大学生，也可以号称自己开的是原装宝马，抽的是古巴雪茄，“你还在抽中华？真没品味！” 有些社会学家一厢情愿的中国正在形成一个“中产阶级” ，鬼才知道，这个概念人群是不是《三联生活周刊》捏造的。我只看到了一群对金钱、娱乐无比热心，对改造现实无比冷漠的既得利益者。 （三）左愤 自干五也是左喷的一份子。 按照中国网络上习惯的说法，左愤是一群自诩为“爱国者”的左派愤怒青年们。对统治阶级宣传的成就有种莫名的自豪感，而忘了自己常常是一个被剥削的对象。 他们在现实生活中过的并不如意，如果还是学生，也以三流大学居多。和既得利益群体相比，他们既无长辈可依靠，又没有明显的上升渠道。在改变现实无望的情况下，把对生活的不满，通过网络这个无需负责的渠道正好肆无忌惮的宣泄。 他们痛恨高房价、官僚腐败，政府无能，而且把这些现实问题产生的根源归结在现有体制“右倾”趋向上；他们承认现有体制的不合理，但是“反贪官不反皇帝”，对高层领导人的亲民姿态啧啧赞赏，并引以为豪。 左愤从小受到“正统”教育的灌输，思想里夹杂着狭隘民族主义、扭曲的集体主义、暴力主义、平均主义，习惯阅读《环球时报》、《参考消息》，对其中“解气”的文章击节赞叹。置于国外的媒体，一则难以阅读到，二则选择性怀疑——鼓吹中国强大的一律相信，并以此为依据驳斥他人，稍有针砭的则大肆唾骂。他们内心深处渴望清明的“圣人”统治，认为政治是高尚而且神圣的社会活动，对台湾娱乐化的政治表现尤其鄙视。 真正有点水平的左愤其实并不多，一是因为他们笃信的理论本身漏洞颇多，想自圆其说尚且为难，何谈说服别人？二是大部分左愤视野有限，虽然天天嚷着核平日本，实际上读过关于日本的书籍也就半本《菊与刀》而已。 由于缺乏严密的理论依据，左愤们在辩论时往往拿不出凑手的论据，因此惯用的手法是讲现象而不讲因果。别人说搞民主，他马上举出菲律宾、阿根廷的例子，证明“民主非万能”；别人说中国文化的缺陷，他马上举出“汉唐盛世”。一些来路可疑的“资料”经常成为他们转贴和引用的依据，譬如“美国XX教授惊呼中国军队不可战胜”这类的文章让他们研读再三，并互相转发，却很少考究其真伪。 左愤由于其偏激的姿态和赤忱的“爱国心”，经常成为政府引导舆论的工具；而他们，也在这样一次次的事件中乐此不疲。 （四）右愤如果网络上只有左愤会怎样？那天涯国观的流量要减少一半；因为，现在的另一半是右愤。 这个玩笑稍显夸张，不过左右互博已经成为中国互联网的常态。无论在BBS还是博客，有观点的地方就有左右之争。无论原主题是什么，只要有人表露了左右的倾向，最后势必变成左右互掐。双方都咬牙切齿，从咒骂对方的智商到侮辱对方的老娘，恨不得杀之而后快。 而实际上，右愤和左愤存在千丝万缕的联系，他们同样处于弱势群体、同样对现实非常不满，同样厌恶现有体制。不过右愤总结出的根源是“不民主以及中国人的劣根性”。有意思的是，一些左愤随着年龄的增大，慢慢放弃了自己原先的左派想法，转而站到了对立面，变成了右愤。这种切身的体会，让他们经常现身说法，不厌其烦的和愤们“讲道理”，谈感受。 左右愤之所以成为“愤”，不仅观点极端，态度偏激，最关键是“非黑即白”的简单逻辑。左愤们言毕谈毛主义，谈绝对平均，谈国有化，右愤们则言毕谈民主，谈美利坚，似乎民主能包治百病，而且药到病除，殊不知，“银弹”不仅在软件领域没有，在任何复杂的系统领域，都不可能存在。 由于左愤的观点倾向性非常明显，为了划清界限，右愤则经常反其道而行之：儒家糟粕之至，中国人历来没文化，朝鲜战争土共的损失十倍于官方数据，等等。这种列举现象而不重因果的辩论手法与左愤几乎雷同，而且更暗合了润之先生“凡是敌人赞成的，我们既要反对”的无厘头精神。 右愤在某些BBS上同时又被称为“精英”，这简直莫名其妙。真正的“精英”们都在利用体制闷声发大财，谁还有空在网上打口水仗？ （五）犬儒左右愤天天翻来覆去的说，人云亦云者说了没人听，既得利益者懒得说，犬儒主义者则认为说了也没用。既然说了也没用，那何必那么认真？“认真你就输了”，网上吵个天翻地覆，其实对个人没什么影响。 越是专制主义越催生犬儒主义，专制有扼杀一切创新的意愿，除非你的创新有利于巩固专制。在一个处处充满表演的社会，大家在台上与台下之差别，足以让人感叹阿尔帕西诺演技也不过如此。既然话不能乱说，书不能乱写，甚至连外国的网也不能乱上，而且每天还需要在表演和观看表演中切换，那么还有什么理由去追逐理想呢？！ 就这样，青春时期的理想主义遭遇到冰冷的现实之后，往往走向了另一个极端：一切没什么意义，人生是一场大玩笑，生活只剩下吃饭做爱找刺激；不需要理想，只需要考虑房价。信仰更是扯淡，和犬儒主义者谈信仰他多半会冷笑着说：你看整个中国，有几个有信仰的人？！ 很多犬儒主义者并不乏才情和思想，而且大多觉得怀才不遇。他们经过一番努力和挣扎后发现，更大的财富和名望被严密的垄断，仅凭白手起家很难更进一步。于是对现实的彻底失望让其彻底的玩世不恭。哈里斯所言极是：“犬儒不只是在过去饱尝辛酸，犬儒是对未来过早地失去希望”。 在网络上，犬儒们更多是冷眼旁观。面对某些现象，他们不投赞成票，也不表示反对；既承认现有体制的不完善，也不想去改变它；他们只想躲在自己构筑的茧里面，偷偷的享受自己短暂的愉悦。极端的犬儒甚至否认一切道德和原则，在他们眼里无所谓高尚，也无所谓卑劣；遭受欺压时默不作声，机会来临时也可以不择手段。 年轻人犬儒的倾向让整个社会慢慢丧失了变革的动力，“如果生活要强奸你，你就闭着眼睛享受吧”，然后待到垂垂老矣之时，再把所有的责任都推给当年的时代。 （六）独立思考 此部分缺失","categories":[{"name":"Article","slug":"Article","permalink":"http://example.com/categories/Article/"}],"tags":[]},{"title":"Excerpt 03：某贴文--生活周遭的金融","slug":"Article/03：某贴文--生活周遭的金融","date":"2015-11-12T16:00:00.000Z","updated":"2021-07-23T05:42:52.000Z","comments":true,"path":"2015/11/13/Article/03：某贴文--生活周遭的金融/","link":"","permalink":"http://example.com/2015/11/13/Article/03%EF%BC%9A%E6%9F%90%E8%B4%B4%E6%96%87--%E7%94%9F%E6%B4%BB%E5%91%A8%E9%81%AD%E7%9A%84%E9%87%91%E8%9E%8D/","excerpt":"","text":"楼主84年，33岁了，银行从业8年，目前负责授信审批，说简单一些就是批贷款的。 想聊聊关于我们周围生活的金融，先说说通货膨胀吧， 在国际经济大通缩的环境下，我们国家是流动性极度匮乏的通货膨胀，很有意思的一件事，也很可悲。 我们的通货膨胀是货币超发 而市场流动性紧张，钱去了哪里？ 近3年所有行业都缺现金流，经济环境不好的时候银行的储蓄任务更好完成，而3年前做银行同业利率最高到多少？一分多！ 我们国家的百姓爱储蓄，不消费，因为消费不起！房价、教育、医疗是人民头上的新三座大山，有一卡车的专家预言房价会下跌，而且政府也在吵去库存，市场经济中的特例，供大于求而造成的涨价全世界也仅有的笑话。 房价上涨隐瞒的是什么？地方债！债市低迷政府信誉大打折扣，本届玩起了供给侧改革，等新名词然并卵！经济形态是社会意识的落脚点，我们没有谷歌苹果等公司的根本原因是，快餐社会的功利性！快餐社会，金钱主义思潮的产生是人民物质贫乏，两者相互影响，政治体制推波助澜，所以中国没救，至少近期没救！什么时候能改变？当你的孩子的理想不是长大后当官赚大钱的时候！ 我们的政治体质是本源。 我们反腐，反的是他们自己的既得利益。绝对的权力导致绝对的腐败！对面的台湾人告诉我们，中国人是可以繁荣富强的，是可以正儿八经的生活的，而不是傻逼的新婚之夜抄党章。 通货膨胀通货膨胀最简单的例子是你将10万元存入银行一年之后你会发现你这10万元的购买力没有抵御通货膨胀（cpi）而造成的购买力下降。那么如何抵御通货膨胀带给你的资产贬值呢？我个人给出以下建议： 1、购置用于居住的房产，这里是用于居住满足居住需求就可以，决定房产价值的唯一要素：地理位置、地理位置、地理位置。 2、适当负债，我们行有推出相关贷款年息6.5左右，月息可能平均在5厘左右，也就是10万元的贷款每月需要支付500元的利息支出。这个适度负债用来干什么？可以让银行的钱用于投资市场上钱，月息5厘的基本是超低成本的，如果你的月收益能到达8厘你的投资是有收益而且与通胀是持平的，至于如何让钱到达8厘以上的收益，这个我想不用我教你，有门路的自然有，没有门路的你也不一定贷的出来。 3、做基金或者股票定投，截止今天上证还在2800点，如果你计算过复利投资你应该知道我说的是什么意思。 4、做什么行业？楼主去年开过一个饭店，不是很好，现在想来如果你想投资，我大概可以通过每年的政府报告帮你分析，目前如果你想小投资的话我给你的建议是关于民生的快速流通领域。 5、关于股市，不想多说，我只能告诉你认真的学习一下技术，在进入市场前先问问自己你明白：什么是股市的上涨和下跌？ 股票的一些个人见解1、择时买入远比买点重要，比如在今年2月底开始准备资金3月到4月会有一个不错的收益，同理在2009年年底，2014年年底都是赚钱的时候，随便买随便赚。 2、短线技巧需要盘感，需要大量的复盘和实践去验证，换句话说是需要交学费的，新手多看少干股市的交易机会多了去了。 3、建立自己的交易体系和逻辑，这个很难，说实话我个人玩股票快10年也才摸索出一点点，也还需要时间去验证。 4、如何在市场立于不败？说实话股市是一个面对自己的地方，面对自己的贪婪、面对自己的恐惧、面对自己人性中的种种弱点。 5、T+0，市场中的人总在说高抛低吸，我跟一个小兄弟聊天我问他，你明白什么是股市的上涨和下跌吗？大家也可以问问自己你清楚吗？ 6、别被当韭菜，市场永远是属于少数人的，你要知道你赚的钱是别人的割肉钱，在不违反大势的情况下，勇敢的利用你身边的韭菜去判断说简单点，大部分人都炒股票的时候你远离股市，大部分人套牢不动的时候你需要勇敢的冲锋！ 银行业的收入：楼主之前是做信贷员出身7年左右的时间，月均收入10K左右，贷款规模7年到4个亿左右，不良贷款60万元。工作调动到授信之后，一开始月均也能7K到8K左右，因为我们是内陆的一个地级市，经济相对不是那么发达，所以没有大家想的待遇那么好，不过收入也还算不错。不过最近不行了。 银行的工作说实话是条狗都能干了，尤其是行长领导们，他们的最主要责任首先是不出事，然后才是业绩增长。 银行那里的收入比较高？对公业务尤其是票据、信贷、保险理财，但是高收入就基本面对的是高强度或者高风险，所以别羡慕别人工资高。 关于人民币和美元2014年3月的时候我鼓励办公室的同事去购买美元，有几个同事一直在长期购买，后来人民币持续暴跌央行坐不住了，限制了很多的美元购买渠道并且在国际金融市行上狙击了一批做空的投机资金，我们国家的外汇储备一下也少了很多，长期来看人民币会持续走低，但是我们的百姓没有相关的购买渠道，如果你还能购买可以考虑每月购买，也可以抵御通货 下面说说基金和各种宝理财基金的本质是什么？本质是筹集大量的资金去做一件提前标的好的事情，基金可以分为多种，货币基金、股票基金，债券基金，综合性基金等，股票基金浮动大，也是我们最被熟知的一种，拿你的钱去炒股本质还是你自己买股票了，我们国家公慕基金太不要脸，手续费管理费不说关键还拿你的钱给别人高位接盘，所以楼主并不看好各位购买基金，我本人也不买。 说说理财，e租宝出来的时候我有点诧异，融资租赁可以有那么高的收益吗？扯淡，摸着良心说我不敢相信，3m，各种币，本质上都是骗人的，我有个群里面有几百人只要是有人发上面这种广告的全部踢了。 银行的理财产品，年收益目前我知道的是4.5左右，这部分钱干嘛了？信托，保险，基金，股票，货币，这些分为保本和非保本，购买的时候一定问清楚。亲爹马云的余额宝就是货币基金，但是马云改变了银行，互联网金融的本质是人们的需求，银行自大你们围绕我转，下一个5年一定是消费金融和全民信贷的发展期，互联网金融会淘汰一部分银行和银行功能，也有以后大部分的城市会出现这样一个大厅，里面网商银行，微众银行等好多网金一起办公因为节约人工成本和场地成本。 普通人理财真的是很难。如果你没有这种意识又有点悲哀，我曾经给一个大户出过一份理财计划书本金1000万，年收益率8%以上，人家看不上最后的结果是什么？给了我300万，让我在5000点的时候帮他选一只股票，结果你们知道目前深套，大户说无所谓，拿着！ 房价配置美元是为了抵御通货膨胀，利息意义不大，房地产不是开发商绑架的，而是政府绑架了国民，房价下跌意味着固定资产贬值，固定资产贬值意味着数量惊人的地方债无法置换，政府违约怎么办？房价在市场经济中出现了多年的顶背离，除了北上广深迟早会跌，政府放开二胎等等措施都是为了自救，还有就是房产税遗产税会被征收，因为社会矛盾积攒到一定程度上，转移的方向有两条，一是社会财富的二次分配，二是战争 贷款：银行的贷款可以划分为几类：个人贷款、对公贷款、项目贷款、流动资金贷款、固定资产贷款、消费贷款、个人经营性贷款、政策性贷款、信用贷款、抵押贷款等。以上都是按照贷款的不同属性进行划分的不全为并列关系。关于涉及到个人的一般是：经营性贷款、消费贷款两类。目前的银行基本都采用统一授信的方式，仅有少量农信社网点分散但是是一级法人，银行授信的标准主要参考：收入、资产、负债、征信、其他软信息。说了这么多下面根据cler的需求重点讲讲房贷和个人消费贷款。 房屋按揭贷款大家主要需要注意的是首付比例、贷款利率是否有上浮和下浮我们这里最低目前房贷利率可以打9.5折、还款方式中长期贷款的还款方式分为：等额本息、等额本金、按其他约定还款法。主要是前面前面两种，等额本息每月偿还固定贷款本息，等额本金是每月偿还固定本金。看账面利息汇总10年期贷款等额本金所产生的利率要远低于等额本息，但考虑通货膨胀率和资金使用率我个人建议在做按揭时候一定选择等额本息，如果您有提前还款的打算10年期贷款最佳提前结清时间一定是7年以后，切记。 个人消费贷款：本段主要讨论无抵押的纯信用消费贷款：这个是未来5年互联网金融和银行之间打仗争抢客户的一个重点金融方向，银行有银行的优势我们利率低，互联网说我方便，按照目前的形式我觉得大可不必在互联网上申请相关消费贷款，因为贷款的本质还是要看利率也就是你的资金成本，除非你用钱特别着急。 前文提到适度负债，这个比例我大概能告诉你所谓适度就是不能超过你月收入的55%，这个数据是银行精算出来的别问我，我也不知道。举例我和爱人月均收入6000元，我们计划3年的负债计算利息和还款方式我给予的合理适度负债是3年10万元。别怕银行现在的日子也不好过，只要你没有相关不良信息，收入稳定大胆去银行申请，大概率可以申请办理下来，要干活了先说到这里。 关于理财：关于理财，我认为理财是个人经济能力和风险承担能力的一种体现，我曾经思考过很长时间要怎样才能实现财产的稳定增值，基本上是不存在的，所以，但凡涉及到理财2个字，我们总是要面对风险的。 如果您认为跟随了某个牛人或者掌握了某种牛逼的方法就会让你的财产爆炸增长，那么世界首富一定是你的。好了，说这么多意思是先给各位提个醒，没有稳赚不赔的买卖！ 没有稳赚不赔，但是我们可以做到最大限度的抵御风险，在把我脑中所有能想到的方式考虑一遍，我没想到有比股票更适合的，投资和投机的，说投资我可以负责任的告诉大家股市本身就有抵御通货膨胀的功能，上证开市以来就有自然斜率向上增长2市几千只股票多年后的市值90%以上是增长的，大家随意找一只股票查看复权后的价格就知道，好了作为一项长期投资是可以作为合理标的的，说投机是因为股市里太多暴涨暴跌了。 如何控制风险，资产的合理配置。这里做一个假设，假设群里每个人都是100万元的流动现金，如何做到收益的最大化？绝对不是把这100万现金都买成股票，但是在这个群里我只需要您把您手里的30-50%的现金去来购买股票，对这里只讨论股票，并且！并且您每月的收入是将来每月投入股市金额的2倍以上，符合以上要求的我才能接受您一起参与！ 下面说说保险：保险在国外是很重要的一个生活组成部分，我没去过国外，但是国内的保险制度和规则基本都是学过来加以改进的这点毋庸置疑，从90年代开始保险逐渐成了国内最大的骗子，因为国人的契约精神淡漠，保险公司钻空子。这种状况在2000年后开始得到改变，保险也应该成为我们日常生活的一部分，比如养老、比如医疗失业等。国内的养老保险是最大的一个旁氏骗局，目前基本入不敷支，所以政府开始鼓励全民参保想办法拖过我父母这一代人不在了，事实上是很有可能拖不过去，怎么办？想办法从屁民哪里赚，如何赚？参照养老保险入市。 说说商业保险，这种保险的抽佣是最高的，从上到下基本是45%左右，如果论坛里有相关的保险人士也可以留言更正，财产保险是中产阶级标配的一种保险，目前买的人不是很多，但是以后会有所改变。","categories":[{"name":"Article","slug":"Article","permalink":"http://example.com/categories/Article/"}],"tags":[]},{"title":"Excerpt 02：神奇的大脑--怎样学习最有效","slug":"Article/02：神奇的大脑--怎样学习最有效？","date":"2015-11-05T16:00:00.000Z","updated":"2021-07-23T05:42:44.000Z","comments":true,"path":"2015/11/06/Article/02：神奇的大脑--怎样学习最有效？/","link":"","permalink":"http://example.com/2015/11/06/Article/02%EF%BC%9A%E7%A5%9E%E5%A5%87%E7%9A%84%E5%A4%A7%E8%84%91--%E6%80%8E%E6%A0%B7%E5%AD%A6%E4%B9%A0%E6%9C%80%E6%9C%89%E6%95%88%EF%BC%9F/","excerpt":"","text":"人类的大脑是我们所知的最复杂的信息处理系统。它具有很多个实用功能，但也具有不足和弱点。如果我们对大脑有更多的了解，就能更加有效地利用大脑。 大脑有两种注意力注意力是大脑最重要的功能，我们每天做事需要使用注意力。但很多人想不明白，为什么做有些事很容易集中注意力，做另一些事却又无论如何集中不了注意力？ 其实，大脑有两种注意力系统。 1.一种叫做“自下向上”系统，它会自动把你的注意力迅速转移到有刺激性或者可能很重要的新信息上，例如移动的物体、突然出现的噪声，或突然的接触。这个系统反应极快，无意识的而且始终是在运行（或至少是在你清醒的时候）。如果你对某件事情打心底里感兴趣，这个系统会让你把注意力牢牢地栓在这件事情上，心无旁骛，比如看小说、打游戏、与情人约会等等。 2.另一种则称为“自上向下”系统，它不是本能的，而是有意的，需要人为地去集中注意力，以便我们完成一些棘手的学习和工作任务。可以说，这个系统比“自下向上”的系统更重要。但不幸的是，这个系统是我们大脑强制命令的系统，它集中起来的注意力很容易被分散，或被“自下向上”系统打乱。这就是我们为什么上课或者工作时常常心不在焉的原因。 人们所说的提高注意力，更多的是指提高“自上向下” 系统的注意力。 我们在学习和工作中，为了避免“自下向上”系统对“自上向下”的干扰，我们可以关闭与学习和工作无关的声音和图像，如把手机设为静音等等。另外，为了更好地控制“自上向下”系统，我们还可以增加加强与学习和工作有关的东西。例如，我们可以给文档增加一些彩色的边框，来提高注意力。 另外，要提高注意力，我们还可以学会放松。研究发现，喜欢冥想的人脑中处理注意力的区域更大。所以要想提高注意力，有时你可以只是坐下来而不去关注任何事情。 什么是工作记忆？同样是在课堂上学到的内容，有些人转眼就忘，有些人却能很快记住；工作中有些人常常丢三落四、忘这忘那，有些人却能有条不紊、很少忘事⋯⋯这些都跟工作记忆能力的大小有关。 什么叫工作记忆呢？说工作记忆首先要说说短时记忆，因为工作记忆是在短时记忆的基础上发展起来的。 短时记忆就是本能记忆，主要是对感觉器官印象产生的记忆。比如你看一眼一大堆杂乱的数字，能记下多少，这就是短时记忆。这属于人的本能行为，虽然有记忆，但不长久，很快就忘掉了。而工作记忆，则是把人的本能记忆进行加工，比如对无意义的数字进行联想，或找到规律进行组合。这会涉及到你过去长时记忆里学习到的知识和经验等东西，比如符号，定理，声音，甚至画面等。举个例子，1、3、5、7、11、13、17、19、23、29、31、37，这些数字表面看，没有规律，短时记忆不好都记下来。但用工作记忆的方式，发现这些数字是我们学习过的数学知识里的质数，那就很容易记忆了。 工作记忆其实更像大脑的便笺纸：信息可以临时存储，或准备再次利用。而一部分信息会通过工作记忆最终转变为长期记忆。你所做的任何需要努力和注意力的事情，你都在使用你的工作记忆。 神经学家曾提出了一个模型来解释工作记忆。其主要部件是执行控制器，它会把你的注意力转到相关的信息上。执行控制器还会激发一些其他相关的系统：一个是处理视觉信息的系统；另一个是处理短暂声音的系统，尤其是话语（想一想当你找一支笔时不停念叨电话号码的时候）；第三个是情节提取器，负责从长期记忆里提取相关的信息。 工作记忆十分重要，是一个比智商更能体现学习能力的指标。而这种系统是可以提高的。例如，针对工作记忆的大脑训练可以提高工作记忆的能力，而且也有助于其他认知能力的提高，尽管提高的幅度很小。但即使这样，也会对每一天的生活产生有益的影响。 怎样学习最有效？学习就是你的大脑获取和存储信息和技能的过程。事实上，自从你出生之前的一个月开始，在清醒的每一分钟，你都在进行学习。 当我们的大脑处理信息时，会迅速地建立或断掉一些神经连接；而学习时，大脑建立新的神经连接会多于断掉旧的连接。另外在学习的过程中，大脑中的一些部分，尤其是海马体，还会长出新的脑细胞。至于不断学习就熟能生巧的原因，是因为髓磷脂（包绕在神经元的轴突外部的物质）在不断学习的过程中会变得更多。髓磷脂的增加会加速神经信号的传导速率，使得大脑信息处理更加有效。 那么学习最好的办法是什么呢？答案就是每个人在学校中学到的：集中注意力，利用工作记忆，之后，要经常复习。另外，有意地把新的信息和你已经知道的信息联系起来更有帮助，那会使得大脑中的神经连接更加稳定，而且更不容易退化。 一个人的学习能力并不会随着年龄而下降。那么为什么当我们成年后就会感觉学习很难呢？其实，这种现象的原因仅是我们花在学新的东西的时间和精力变少了而已。当我们学习时，我们不再具有儿时的那种热情。另外一个问题是，成年人知道的太多了。研究发现，成年人在学习一些体育技能，例如打高尔夫球时，常常关注动作的细节。相反，儿童却不在乎细节，他们只是不断尝试使得球飞到该飞到的地方。如果让成年人像儿童一样学习，他们的学习过程就变得迅速了。这同样适用于学习新知识。成年人已经知道了各种学习捷径，可以使得我们跳过细节。如果希望像儿童那样，我们应该经受住捷径的诱惑，这样我们才可学得更多。 另一种久经考验的方法是经常锻炼。大脑组织随着年龄的增长而减少，但是经过锻炼即可使大脑重回年轻。研究表明，有规律地长期锻炼，会增加大脑中海马体的大小，而海马体主要负责记忆和学习。另外，锻炼也会提高大脑神经的连通性，使得更加容易学习新的东西。 智力是天生的吗？衡量智力并不容易，因为它涉及到大脑的各个方面。尽管如此，那些在某种智商测试中表现好的（或不好的）人，在其他种类的智商测试中也会得到类似的成绩。所以说智力可以用单一的量来表示。而这个量与我们学业的成功、收入、健康等生活中各个方面息息相关。 很显然，智力越高越好，那它是从哪来的？答案是智力大部分是来自于遗传。例如研究表明，同卵双胞胎的智商成绩比异卵双胞胎的更相似。研究人员已经发现一些基因与智力相关，但都影响微弱，科学家推测，这样与智力相关的基因很可能有成千个。 这并不是说环境就不重要了。当大脑在发育时，从饮食到教育等各种事情都会对大脑的智力水平产生影响。但是对于受到好的发展的孩子，长大后随着时间的流逝，环境的影响会逐渐减弱。成年人基因对智力的影响占了大约60%到80%，而儿童的不到30%。所以说，不管你愿不愿意，随着年龄的增加，你会越来越像你的家人。 既然基因占了这么大的比重，那成年人还有办法提高智力吗？好消息是有一种智力始终随着年龄在不断增长。智力可以分为两种：一种是液化智力（又称“流体智力”），是对知觉、记忆、运算速度、推理等能力的衡量；另一种是固化智力（又称“晶体智力”），是人所知道的所有知识的总和。液化智力会随着年龄而减少，但是固化智力却不会。 这是因为，液化智力是一种以生理为基础的认知能力，随神经系统的衰弱而减退，因此，年龄的增长会直接影响液化智力。一般人在20岁以后，液化智力的发展达到顶峰，30岁以后随着年龄的增长而降低。而固化智力则是通过掌握社会文化经验而获得的智力，如词汇概念、言语理解、常识等记忆储存信息能力，因此固化智力与教育、文化有关，在人的一生中一直在发展，并不因年龄增长而降低。 大脑也有生物钟大脑是个变幻无常的怪物——有时敏锐地如图钉，有时柔软地如羊毛球。一些变化可以由生理节奏的变化来解释，这意味着如果你在一天中恰当的时刻做恰当的事情，生活将会更加顺利。 一个建议是，起床之后的几个小时里要尽量避免从事需高度集中注意力的事情。根据你的睡眠情况，你得需要30分钟以上摆脱睡眠惰性——也就是早晨发困。不过如果有艰巨的任务必须要做，你可以用大家都知道的方法——一杯咖啡即可帮助你迅速摆脱睡眠惰性。 另一建议是，使你的思维活动与体温的变化相匹配。当你的体温降到37℃以下时，从注意力到推理等所有大脑活动都会变慢。经过测量，一天中最糟糕的时刻是从午夜到早上6点；下午2点到4点也同样糟糕，这被称为“下午困”。这是一天中人的体温比较低的两个时段，体温下降直接影响了人的大脑机能。当然，简短的锻炼或洗个热水澡可以提高你的体温，从而提高大脑的工作效率。而一天中最佳的时刻，则是从上午10点左右到中午，以及下午4点到晚上10点，这两个时段人的体温相对较高。 另外，身体的反应会在一天中逐渐变得更灵敏，在晚上8点左右达到峰值。所以，竞技运动最好留在每一天的最后。","categories":[{"name":"Article","slug":"Article","permalink":"http://example.com/categories/Article/"}],"tags":[]},{"title":"Excerpt 01：程序员的七种武器","slug":"Article/01：程序员的七种武器","date":"2015-10-29T16:00:00.000Z","updated":"2021-07-23T05:36:35.000Z","comments":true,"path":"2015/10/30/Article/01：程序员的七种武器/","link":"","permalink":"http://example.com/2015/10/30/Article/01%EF%BC%9A%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E4%B8%83%E7%A7%8D%E6%AD%A6%E5%99%A8/","excerpt":"信息技术的发展时间虽然不长，但其爆炸式的发展速度使信息技术迅速覆盖社会和人类生活的各个角落。程序员们是这场信息化浪潮的见证者之一，更是其中的主要参与者，这是时代赋予每个程序员的机会和责任。","text":"信息技术的发展时间虽然不长，但其爆炸式的发展速度使信息技术迅速覆盖社会和人类生活的各个角落。程序员们是这场信息化浪潮的见证者之一，更是其中的主要参与者，这是时代赋予每个程序员的机会和责任。 信息技术的更新速度是惊人的，程序员的职业生涯则是一个要求不断学习的过程，永远不能固步自封。本人在工作期间曾看见过很多程序员只要有闲暇时间就浏览一些没有太大作用的网页，在网上聊天，打游戏，浪费了大量的时间，十分不可取。而另外一种情况是，IT技术的日新月异使很多程序员眼花缭乱，什么都想学，却又不知从何学起，今天看看这个，明天学学那个，贪多不熟。 虽然IT技术发展迅速，但很多技术都是有规律可循，一些基本的概念、原理和方法还很通用，可以举一反三。本人根据自己的体会和经验，向那些刚刚踏入IT行业的新程序员们或正在迷茫的程序员们推荐程序员必须掌握的七种武器，有了这七种武器，虽不敢说笑傲江湖，但将自己立于不败之地还是可以的。 第一种武器：开发工具至少熟练掌握两到三种开发工具的使用，这是程序员的立身之本，其中C/C++和JAVA是我重点推荐的开发工具，C/C++以其高效率和高度的灵活性成为开发工具中的利器，很多系统级的软件还是用C/C++编写。而JAVA的跨平台和与WEB很好的结合是JAVA的优势所在，而本人对SUN公司的“网络即计算机”的概念相当欣赏，并相信JAVA即其相关的技术集JAVA One会成为未来的主流开发工具之一。其次，如果能掌握一种简便的可视化开发工具，如VB，PowerBuilder，Delphi，C++ Builder，则更好，这些开发工具减小了开发难度，并能够强化程序员对象模型的概念。另外，需要掌握基本的脚本语言，如shell,perl等，至少能读懂这些脚本代码。 第二种武器：数据库为什么数据库是如此重要？很多应用程序都是以数据库的数据为中心，而数据库的产品也有不少，其中关系型数据库仍是主流形式，所以程序员至少熟练掌握一两种数据库，对关系型数据库的关键元素要非常清楚，要熟练掌握SQL的基本语法。虽然很多数据库产品提供了可视化的数据库管理工具，但SQL是基础，是通用的数据库操作方法。如果没有机会接触商业数据库系统，可以使用免费的数据库产品是一个不错的选择，如mySQL, Postgres等。 第三种武器：操作系统当前主流的操作系统是Windows，Linux/Unix，熟练地使用这些操作系统是必须的，但只有这些还远远不够。要想成为一个真正的编程高手，需要深入了解操作系统，了解它的内存管理机制、进程/线程调度、信号、内核对象、系统调用、协议栈实现等。Linux作为开发源码的操作系统，是一个很好的学习平台，Linux几乎具备了所有现代操作系统的特征。虽然Windows系统的内核实现机制的资料较少，但通过互联网还是能获取不少资料。只有对操作系统有一定的了解后，你会发现自己上了一个新的台阶。 第四种武器：网络协议TCP/IP在互联网如此普及的今天，如果您还没有对互联网的支撑协议TCP/IP协议栈有很好的掌握，就需要迅速补上这一课，网络技术已改变了软件运行的模式，从最早的客户/服务器结构，到今天的WEB Services，再到未来的网格计算，这一切都离不开以TCP/IP协议栈为基础的网络协议支持，所以，深入掌握TCP/IP协议是非常必要的。至少，你需要了解ISO七层协议模型，IP/UDP/TCP/HTTP等常用协议的原理和三次握手机制。 第五种武器：DCOM/CORBA/XML/WEB Services随着技术的发展，软件与网络的无缝结合是必然趋势，软件系统的位置无关性是未来计算模式的重要特征之一，DCOM/CORBA是当前两大主流的分布计算的中间件平台，DCOM是微软COM(组件对象模型)的扩展，而CORBA是OMG支持的规范。程序员需要做的不仅仅是利用商业的开发平台来开发软件，而是要理解这些技术的初衷，即为什么需要这项技术，如果你能理解了这一点，再回头看这些技术的具体实现，就如庖丁解牛，迎刃而解。XML/WebServices重要性不言而喻，XML以其结构化的表示方法和超强的表达能力被喻为互联网上的“世界语”，是分布计算的基石之一。 第六种武器：软件工程与CMM现代大型软件系统的开发中，工程化的开发控制取代个人英雄主义，成为软件系统成功的保证，一个编程高手并不一定是一个优秀的程序员，一个优秀的程序员是将出色的编程能力和开发技巧同严格的软件工程思想有机结合，编程只是软件生命周期中的其中一环，优秀的程序员应该掌握软件开发各个阶段的基本技能，如市场分析，可行性分析，需求分析，结构设计，详细设计，软件测试等。一句话可以概括我的看法：“创意无限，流程保证”。 第七种武器：强烈的好奇心什么才是一个程序员的终极武器呢，那就是强烈的好奇心和学习精神。没有比强烈的好奇心和学习精神更好的武器了，它是程序员们永攀高峰的源泉和动力所在。","categories":[{"name":"Article","slug":"Article","permalink":"http://example.com/categories/Article/"}],"tags":[]},{"title":"标题","slug":"Github/template","date":"2015-02-09T14:01:00.000Z","updated":"2017-03-29T17:53:08.000Z","comments":true,"path":"2015/02/09/Github/template/","link":"","permalink":"http://example.com/2015/02/09/Github/template/","excerpt":"引言（简介）","text":"引言（简介） 详细内容balabalabalabalabalabalabalabalabala title: 标题 date: 2015-02-09 22:01 modified: 2016-05-14 17:40 tag: - 前端开发 - CSS photos: - http://i.imgur.com/0dZAI8y.jpg --- 引言（简介） 详细内容 balabalabalabalabalabalabalabalabala","categories":[],"tags":[{"name":"前端开发","slug":"前端开发","permalink":"http://example.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"},{"name":"CSS","slug":"CSS","permalink":"http://example.com/tags/CSS/"}]}],"categories":[{"name":"周刊","slug":"周刊","permalink":"http://example.com/categories/%E5%91%A8%E5%88%8A/"},{"name":"News","slug":"News","permalink":"http://example.com/categories/News/"},{"name":"Wiki","slug":"Wiki","permalink":"http://example.com/categories/Wiki/"},{"name":"Github","slug":"Github","permalink":"http://example.com/categories/Github/"},{"name":"Blog","slug":"Blog","permalink":"http://example.com/categories/Blog/"},{"name":"Weekly","slug":"Weekly","permalink":"http://example.com/categories/Weekly/"},{"name":"Article","slug":"Article","permalink":"http://example.com/categories/Article/"},{"name":"Web","slug":"Web","permalink":"http://example.com/categories/Web/"},{"name":"新闻","slug":"新闻","permalink":"http://example.com/categories/%E6%96%B0%E9%97%BB/"},{"name":"English","slug":"English","permalink":"http://example.com/categories/English/"},{"name":"Web开发","slug":"Web开发","permalink":"http://example.com/categories/Web%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"web","slug":"web","permalink":"http://example.com/tags/web/"},{"name":"Web开发","slug":"Web开发","permalink":"http://example.com/tags/Web%E5%BC%80%E5%8F%91/"},{"name":"web开发","slug":"web开发","permalink":"http://example.com/tags/web%E5%BC%80%E5%8F%91/"},{"name":"Node.js","slug":"Node-js","permalink":"http://example.com/tags/Node-js/"},{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"},{"name":"mysql","slug":"mysql","permalink":"http://example.com/tags/mysql/"},{"name":"php","slug":"php","permalink":"http://example.com/tags/php/"},{"name":"前端开发","slug":"前端开发","permalink":"http://example.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"},{"name":"Ajax","slug":"Ajax","permalink":"http://example.com/tags/Ajax/"},{"name":"Linux","slug":"Linux","permalink":"http://example.com/tags/Linux/"},{"name":"Javascript","slug":"Javascript","permalink":"http://example.com/tags/Javascript/"},{"name":"CSS","slug":"CSS","permalink":"http://example.com/tags/CSS/"}]}